{"hash":"d8018f6d8804c06a55cf2d70d508195758295ae4","data":{"post":{"title":"Securing ASP.NET Core in Docker","path":"/securing-asp-net-core-in-docker/","date":"2019-03-25T00:00:00+00:00","dateModified":null,"timeToRead":1,"author":"Muhammad Rehan Saeed","headings":[],"tags":[{"id":"ASP.NET Core","title":"ASP.NET Core","path":"/tag/asp-net-core/"},{"id":"Docker","title":"Docker","path":"/tag/docker/"},{"id":"Docker Swarm","title":"Docker Swarm","path":"/tag/docker-swarm/"},{"id":"Kubernetes","title":"Kubernetes","path":"/tag/kubernetes/"}],"description":"How to secure your ASP.NET Core Docker image by setting the file system to be read-only. First in a series of blog posts covering Docker image security.","content":"<p>Some time ago, I blogged about how you can get some <a href=\"/docker-read-file-systems/\">extra security when running Docker containers</a> by making their file systems read-only. This ensures that should an attacker get into the container somehow, they won't be able to change any files. This only works with certain containers that support it however and unfortunately, at that time ASP.NET Core did not support running in a Docker container with a read-only file system. Happily, this is now fixed!</p>\n<p>Lets see an example. I created a brand new hello world ASP.NET Core project and added this <code class=\"language-inline-text\">Dockerfile</code>:</p>\n<div class=\"line-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> microsoft/dotnet:2.2-sdk <span class=\"token keyword\">AS</span> builder</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /source</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> *.csproj .</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> dotnet restore</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . .</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> dotnet publish --output /app/ --configuration Release</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> microsoft/dotnet:2.2-aspnetcore-runtime</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--from</span><span class=\"token punctuation\">=</span><span class=\"token string\">builder</span></span> /app .</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"dotnet\"</span>, <span class=\"token string\">\"ReadOnlyTest.dll\"</span>]</span></code></pre></div>\n<p>I build the Docker image using this command:</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">docker build <span class=\"token operator\">-</span>t <span class=\"token function\">read-only</span><span class=\"token operator\">-</span>test <span class=\"token punctuation\">.</span></code></pre></div>\n<p>If I run this image with a read-only file system:</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">--</span><span class=\"token function\">rm</span> <span class=\"token operator\">--</span><span class=\"token function\">read-only</span> <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>p 8000:80 <span class=\"token function\">read-only</span><span class=\"token operator\">-</span>test</code></pre></div>\n<p>This outputs the following error as read-only file systems are not supported by default:</p>\n<div class=\"line-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Failed to initialize CoreCLR, HRESULT: 0x80004005</code></pre></div>\n<p>If I now run the same image with the <code class=\"language-inline-text\">COMPlus_EnableDiagnostics</code> environment variable turned off:</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">--</span><span class=\"token function\">rm</span> <span class=\"token operator\">--</span><span class=\"token function\">read-only</span> <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>p 8000:80 <span class=\"token operator\">-</span>e COMPlus_EnableDiagnostics=0 <span class=\"token function\">read-only</span><span class=\"token operator\">-</span>test</code></pre></div>\n<p>The app now starts! The <code class=\"language-inline-text\">COMPlus_EnableDiagnostics</code> environment variable (which is <a href=\"https://github.com/dotnet/docs/issues/10217\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">undocumented</a>) turns off debugging and profiling support, so I would not bake this environment variable into the <code class=\"language-inline-text\">Dockerfile</code>. For some reason these features need a read/write file system to work properly. If you'd like to try this yourself, you can checkout all the code in <a href=\"https://github.com/RehanSaeed/ReadOnlyDockerTest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this repo</a>.</p>\n","heroImage":"/images/hero/Docker-1366x768.png"}},"context":{}}