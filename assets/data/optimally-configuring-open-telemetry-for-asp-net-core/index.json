{"hash":"02f48c1592e976849a284c14dc087b73f89fd701","data":{"post":{"title":"Optimally Configuring Open Telemetry for ASP.NET Core","path":"/optimally-configuring-open-telemetry-for-asp-net-core/","date":"2021-02-15T00:00:00+00:00","dateModified":null,"timeToRead":5,"author":"Muhammad Rehan Saeed","headings":[{"value":"Simplest Setup"}],"tags":[{"id":"Open Telemetry","title":"Open Telemetry","path":"/tag/open-telemetry/"},{"id":".NET","title":".NET","path":"/tag/net/"},{"id":".NET Core","title":".NET Core","path":"/tag/net-core/"},{"id":"ASP.NET Core","title":"ASP.NET Core","path":"/tag/asp-net-core/"},{"id":"Metrics","title":"Metrics","path":"/tag/metrics/"},{"id":"Logging","title":"Logging","path":"/tag/logging/"},{"id":"Tracing","title":"Tracing","path":"/tag/tracing/"},{"id":"Distributed Tracing","title":"Distributed Tracing","path":"/tag/distributed-tracing/"},{"id":"Span","title":"Span","path":"/tag/span/"},{"id":"Activity","title":"Activity","path":"/tag/activity/"}],"description":"How to optimally configure Open Telemetry metrics, logs, and traces for ASP.NET and display them in Jaeger.","content":"<ol>\n<li><a href=\"/deep-dive-into-open-telemetry-for-net/\">Open Telemetry - Deep Dive into Open Telemetry for .NET</a></li>\n<li><a href=\"/open-telemetry-for-asp-net-core/\">Open Telemetry - Configuring Open Telemetry for ASP.NET Core</a></li>\n<li><a href=\"/exporting-open-telemetry-data-to-jaeger/\">Open Telemetry - Exporting Open Telemetry Data to Jaeger</a></li>\n<li>Open Telemetry - Optimally Configuring Open Telemetry for ASP.NET Core</li>\n</ol>\n<p><a href=\"https://github.blog/2021-05-26-why-and-how-github-is-adopting-opentelemetry/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.blog/2021-05-26-why-and-how-github-is-adopting-opentelemetry/</a></p>\n<p>Configuring Open Telemetry for ASP.NET Core is a fairly simple process. In this post, I'll show you the simplest setup for tracing Open Telemetry in ASP.NET Core and then move to a more fully featured example.</p>\n<p>To begin with, we'll just be exporting our Open Telemetry traces to the debug output so we can see what is being recorded but we'll soon move on to exporting to Jaeger in another post where we can see nice visualisations of our traces.</p>\n<h1 id=\"simplest-setup\"><a href=\"#simplest-setup\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simplest Setup</h1>\n<p>Open Telemetry for ASP.NET Core ships as several NuGet packages. The <code class=\"language-inline-text\">OpenTelemetry.Extensions.Hosting</code> package is the required core package to add Open Telemetry to your application.</p>\n<p>You can optionally add packages beginning with <code class=\"language-inline-text\">OpenTelemetry.Instrumentation.*</code> to collect extra span attributes e.g. the <code class=\"language-inline-text\">OpenTelemetry.Instrumentation.AspNetCore</code> package adds span attributes for the current request and response.</p>\n<p>You can also optionally add packages beginning with <code class=\"language-inline-text\">OpenTelemetry.Exporter.*</code> to export trace data e.g. the <code class=\"language-inline-text\">OpenTelemetry.Exporter.Console</code> package exports all trace data to the console or debug output of your application.</p>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span> <span class=\"token attr-name\">Label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Package References<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>OpenTelemetry.Exporter.Console<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0.0-rc2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>OpenTelemetry.Extensions.Hosting<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0.0-rc2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>OpenTelemetry.Instrumentation.AspNetCore<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0.0-rc2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>In our <code class=\"language-inline-text\">Startup</code> class's <code class=\"language-inline-text\">ConfigureServices</code> method, we can add Open Telemetry support with just a few lines of code using the <code class=\"language-inline-text\">AddOpenTelemetryTracing</code> method.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Startup</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IWebHostEnvironment</span> webHostEnvironment<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Startup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IWebHostEnvironment</span> webHostEnvironment<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>webHostEnvironment <span class=\"token operator\">=</span> webHostEnvironment<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...omitted</span>\n        services<span class=\"token punctuation\">.</span><span class=\"token function\">AddOpenTelemetryTracing</span><span class=\"token punctuation\">(</span>\n            builder <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                builder\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">SetResourceBuilder</span><span class=\"token punctuation\">(</span>ResourceBuilder\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">CreateDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">AddService</span><span class=\"token punctuation\">(</span>webHostEnvironment<span class=\"token punctuation\">.</span>ApplicationName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">AddAspNetCoreInstrumentation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>webHostEnvironment<span class=\"token punctuation\">.</span><span class=\"token function\">IsDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddConsoleExporter</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=></span> options<span class=\"token punctuation\">.</span>Targets <span class=\"token operator\">=</span> ConsoleExporterOutputTargets<span class=\"token punctuation\">.</span>Debug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...omitted</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-inline-text\">SetResourceBuilder</code> method is your opportunity to add a set of common attributes to all spans created in the application. In the above case, we've added an application name.</p>\n<p>The <code class=\"language-inline-text\">AddAspNetCoreInstrumentation</code> method is where we enable collection of attributes relating to ASP.NET Core requests and responses.</p>\n<p>Finally, we use <code class=\"language-inline-text\">AddConsoleExporter</code> to export the trace data to the debug output. You could also output to the console but there is a lot of trace data and the console is already outputting log information which results in duplication, so I prefer not to do that. Note that we only do this if we are running in the development environment.</p>\n<p>If we now start the application and execute a request/response cycle, we can see the following in our IDE's debug output window:</p>\n<div class=\"line-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[10:28:25 INF] HTTP GET /favicon-32x32.png responded 200 in 0.7371 ms\nActivity.Id:          00-dde96d459fee4144a83818e054e221b1-cac69896c1bcd14f-01\nActivity.DisplayName: /favicon-32x32.png\nActivity.Kind:        Server\nActivity.StartTime:   2021-02-01T10:28:25.4637044Z\nActivity.Duration:    00:00:00.0086712\nActivity.TagObjects:\n    http.host: localhost:5001\n    http.method: GET\n    http.path: /favicon-32x32.png\n    http.url: https://localhost:5001/favicon-32x32.png\n    http.user_agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36\n    http.status_code: 200\n    otel.status_code: UNSET\nResource associated with Activity:\n    service.name: ApiTemplate\n    service.instance.id: defe9269-04f2-4b49-a05c-ebddf2112993\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 1.0.0.0</code></pre></div>\n<p>The first line of the debug output is actually from our log output (I had only enabled information level logs). The second line is where the Open Telemetry trace starts and is broken up into several sections. Most of the trace output is pretty self explanatory and describes the request/response pretty well, including the span ID, path, response status code, start time and duration of the span.</p>\n<p>What I personally found surprising is the last section. In the last section we get the application name that we setup in the <code class=\"language-inline-text\">SetResourceBuilder</code> call but we also get a unique identifier for the current instance of the application. This can be useful if we were running multiple instances of the application.</p>\n<p>Finally, we also get quite a lot of information about the Open Telemetry library used to collect the information. It may eventually be useful when multiple versions of the Open Telemetry protocol are released and there is some feature difference between them but as of now, it's not very useful. I haven't been able to find a way to turn it off, since it's a fair amount of information to send in absolutely every trace message.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    services\n        <span class=\"token comment\">// ...omitted</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddOpenTelemetryTracing</span><span class=\"token punctuation\">(</span>\n            builder <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                builder\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">AddAspNetCoreInstrumentation</span><span class=\"token punctuation\">(</span>\n                        options <span class=\"token operator\">=></span>\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\">// Enrich spans with additional request and response meta data.</span>\n                            <span class=\"token comment\">// See https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md</span>\n                            options<span class=\"token punctuation\">.</span>Enrich <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">,</span> eventName<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n                            <span class=\"token punctuation\">{</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">is</span> <span class=\"token class-name\">HttpRequest</span> request<span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">{</span>\n                                    activity<span class=\"token punctuation\">.</span><span class=\"token function\">AddTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.flavor\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetHttpFlavour</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>Protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    activity<span class=\"token punctuation\">.</span><span class=\"token function\">AddTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.scheme\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>Scheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    activity<span class=\"token punctuation\">.</span><span class=\"token function\">AddTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.client_ip\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">[</span>ForwardedHeadersDefaults<span class=\"token punctuation\">.</span>XForwardedForHeaderName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    activity<span class=\"token punctuation\">.</span><span class=\"token function\">AddTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.request_content_length\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>ContentLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    activity<span class=\"token punctuation\">.</span><span class=\"token function\">AddTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.request_content_type\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>ContentType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">is</span> <span class=\"token class-name\">HttpResponse</span> response<span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">{</span>\n                                    activity<span class=\"token punctuation\">.</span><span class=\"token function\">AddTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.response_content_length\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>ContentLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    activity<span class=\"token punctuation\">.</span><span class=\"token function\">AddTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.response_content_type\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>ContentType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n\n                                <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetHttpFlavour</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> protocol<span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">{</span>\n                                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>HttpProtocol<span class=\"token punctuation\">.</span><span class=\"token function\">IsHttp10</span><span class=\"token punctuation\">(</span>protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                    <span class=\"token punctuation\">{</span>\n                                        <span class=\"token keyword\">return</span> <span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n                                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>HttpProtocol<span class=\"token punctuation\">.</span><span class=\"token function\">IsHttp11</span><span class=\"token punctuation\">(</span>protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                    <span class=\"token punctuation\">{</span>\n                                        <span class=\"token keyword\">return</span> <span class=\"token string\">\"1.1\"</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n                                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>HttpProtocol<span class=\"token punctuation\">.</span><span class=\"token function\">IsHttp2</span><span class=\"token punctuation\">(</span>protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                    <span class=\"token punctuation\">{</span>\n                                        <span class=\"token keyword\">return</span> <span class=\"token string\">\"2.0\"</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n                                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>HttpProtocol<span class=\"token punctuation\">.</span><span class=\"token function\">IsHttp3</span><span class=\"token punctuation\">(</span>protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                    <span class=\"token punctuation\">{</span>\n                                        <span class=\"token keyword\">return</span> <span class=\"token string\">\"3.0\"</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n\n                                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">InvalidOperationException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Protocol </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">protocol</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> not recognised.\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                            options<span class=\"token punctuation\">.</span>RecordException <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// TODO: Add OpenTelemetry.Instrumentation.* NuGet packages and configure them to collect more span data.</span>\n                <span class=\"token comment\">//       E.g. add OpenTelemetry.Instrumentation.Http to instrument calls to HttpClient.</span>\n                <span class=\"token comment\">// TODO: Add OpenTelemetry.Exporter.* NuGet packages and configure them here to export open telemetry span data.</span>\n                <span class=\"token comment\">//       E.g. Add OpenTelemetry.Exporter.Jaeger to export span data to Jaeger.</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"line-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;PackageReference Include=&quot;Serilog.Enrichers.Span&quot; Version=&quot;1.0.1&quot; Condition=&quot;&#39;$(OpenTelemetry)&#39; == &#39;true&#39;&quot; /&gt;</code></pre></div>\n<p>Changed default port for OTLP Exporter from 55680 to 4317</p>\n<div class=\"line-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">55680 - OTLP receiver\n16686 - Dashboard\n13133 - Health Check</code></pre></div>\n<p>docker run --name jaeger -p 13133:13133 -p 16686:16686 -p 55680:55680 -d --restart=unless-stopped jaegertracing/opentelemetry-all-in-one</p>\n<div class=\"line-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;PackageReference Include=&quot;OpenTelemetry.Exporter.OpenTelemetryProtocol&quot; Version=&quot;1.0.0-rc1.1&quot; Condition=&quot;&#39;$(OpenTelemetry)&#39; == &#39;true&#39;&quot; /&gt;\n\n                builder.AddOtlpExporter(options =&gt; options.Endpoint = &quot;localhost:55680&quot;);</code></pre></div>\n","heroImage":"/images/hero/Open-Telemetry-1600x900.png"}},"context":{}}