{"hash":"7a32ca22a0ece6c73ed0016b2fcf0eb743e43849","data":{"post":{"title":"ASP.NET Core Fluent Interface Extensions","path":"/asp-net-core-fluent-interface-extensions/","date":"2016-06-26T00:00:00+00:00","dateModified":null,"timeToRead":2,"author":"Muhammad Rehan Saeed","headings":[{"value":"IApplicationBuilder and ILoggerFactory"},{"value":"IConfigurationBuilder"},{"value":"IServiceCollection"},{"value":"Fluent me up!"}],"tags":[{"id":"ASP.NET Core","title":"ASP.NET Core","path":"/tag/asp-net-core/"},{"id":".NET Boxed","title":".NET Boxed","path":"/tag/net-boxed/"}],"description":"Using the fluent interface style in with ASP.NET Core Fluent Interface Extension methods. Building on top of the work done by Khalid Abuhakmeh.","content":"<p>Last week <a href=\"http://khalidabuhakmeh.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Khalid Abuhakmeh</a> wrote a very interesting blog post called <a href=\"http://www.khalidabuhakmeh.com/middlewarebuilder-for-asp-net-core-1-0-rc2#disqus_thread\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Middleware Builder for ASP.NET Core</a> which I highly recommend you read. In it, he attempts to write some extension methods to help with writing the Configure method in your ASP.NET Core Startup class with a <a href=\"https://en.wikipedia.org/wiki/Fluent_interface\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fluent interface</a>. I've taken his blog post to heart and gone on a mission to 'fluent all the things' in ASP.NET Core.</p>\n<h1 id=\"iapplicationbuilder-and-iloggerfactory\"><a href=\"#iapplicationbuilder-and-iloggerfactory\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IApplicationBuilder and ILoggerFactory</h1>\n<p>This is an example of what your current Configure method might look like in a typical ASP.NET Core <code class=\"language-inline-text\">Startup</code> class:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IApplicationBuilder</span> application<span class=\"token punctuation\">,</span> \n    <span class=\"token class-name\">IHostingEnvironment</span> environment<span class=\"token punctuation\">,</span> \n    <span class=\"token class-name\">ILoggerFactory</span> loggerFactory<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">.</span><span class=\"token function\">IsDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Do stuff on your local machine.</span>\n        loggerFactory\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddConsole</span><span class=\"token punctuation\">(</span><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        application<span class=\"token punctuation\">.</span><span class=\"token function\">UseDeveloperExceptionPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Do stuff on when running in your production environment.</span>\n        loggerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">AddSerilog</span><span class=\"token punctuation\">(</span><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        application<span class=\"token punctuation\">.</span><span class=\"token function\">UseStatusCodePagesWithReExecute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/error/{0}/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">.</span><span class=\"token function\">IsStaging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Do stuff in the staging environment.</span>\n        application<span class=\"token punctuation\">.</span><span class=\"token function\">UseStagingSpecificMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    application\n        <span class=\"token punctuation\">.</span><span class=\"token function\">UseStaticFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">UseMvc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And this is the same code using the shorter, and prettier fluent interface style:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IApplicationBuilder</span> application<span class=\"token punctuation\">,</span> \n    <span class=\"token class-name\">IHostingEnvironment</span> environment<span class=\"token punctuation\">,</span> \n    <span class=\"token class-name\">ILoggerFactory</span> loggerFactory<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    loggerfactory\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddIfElse</span><span class=\"token punctuation\">(</span>\n            hostingEnvironment<span class=\"token punctuation\">.</span><span class=\"token function\">IsDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">AddConsole</span><span class=\"token punctuation\">(</span><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">AddSerilog</span><span class=\"token punctuation\">(</span><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    application\n        <span class=\"token punctuation\">.</span><span class=\"token function\">UseIfElse</span><span class=\"token punctuation\">(</span>\n            environment<span class=\"token punctuation\">.</span><span class=\"token function\">IsDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">UseDeveloperExceptionPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">UseStatusCodePagesWithReExecute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/error/{0}/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">UseIf</span><span class=\"token punctuation\">(</span>\n            environment<span class=\"token punctuation\">.</span><span class=\"token function\">IsStaging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">UseStagingSpecificMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">UseStaticFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">UseMvc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the above code, you can see that I've added <code class=\"language-inline-text\">UseIf</code> and <code class=\"language-inline-text\">UseIfElse</code> extension methods to the <code class=\"language-inline-text\">IApplicationBuilder</code>  which lets us use the fluent interface. What you'll also notice is that <code class=\"language-inline-text\">ILoggerFactory</code> also has <code class=\"language-inline-text\">AddIf</code> and <code class=\"language-inline-text\">AddIfElse</code> extension methods.</p>\n<h1 id=\"iconfigurationbuilder\"><a href=\"#iconfigurationbuilder\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IConfigurationBuilder</h1>\n<p>I didn't just stop there, I added similar <code class=\"language-inline-text\">AddIf</code> and <code class=\"language-inline-text\">AddIfElse</code> extension methods for <code class=\"language-inline-text\">IConfigurationBuilder</code>:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token function\">Startup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IHostingEnvironment</span> hostingEnvironment<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hostingEnvironment <span class=\"token operator\">=</span> hostingEnvironment<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> configurationBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConfigurationBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">SetBasePath</span><span class=\"token punctuation\">(</span>hostingEnvironment<span class=\"token punctuation\">.</span>ContentRootPath<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddJsonFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.json\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddJsonFile</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"config.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">hostingEnvironment<span class=\"token punctuation\">.</span>EnvironmentName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.json\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">optional</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hostingEnvironment<span class=\"token punctuation\">.</span><span class=\"token function\">IsDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            configurationBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AddUserSecrets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configuration <span class=\"token operator\">=</span> configurationBuilder\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddEnvironmentVariables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddApplicationInsightsSettings</span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">developerMode</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>hostingEnvironment<span class=\"token punctuation\">.</span><span class=\"token function\">IsProduction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token function\">Startup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IHostingEnvironment</span> hostingEnvironment<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hostingEnvironment <span class=\"token operator\">=</span> hostingEnvironment<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configuration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConfigurationBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">SetBasePath</span><span class=\"token punctuation\">(</span>hostingEnvironment<span class=\"token punctuation\">.</span>ContentRootPath<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddJsonFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.json\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddJsonFile</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"config.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">hostingEnvironment<span class=\"token punctuation\">.</span>EnvironmentName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.json\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">optional</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddIf</span><span class=\"token punctuation\">(</span>\n            hostingEnvironment<span class=\"token punctuation\">.</span><span class=\"token function\">IsDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">AddUserSecrets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddEnvironmentVariables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddApplicationInsightsSettings</span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">developerMode</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>hostingEnvironment<span class=\"token punctuation\">.</span><span class=\"token function\">IsProduction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"iservicecollection\"><a href=\"#iservicecollection\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IServiceCollection</h1>\n<p>As if that wasn't enough I also did the same with <code class=\"language-inline-text\">IServiceCollection</code> with the same <code class=\"language-inline-text\">AddIf</code> and <code class=\"language-inline-text\">AddIfElse</code> extension methods. In my experience, these would be used less often but I've added them for completeness.</p>\n<h1 id=\"fluent-me-up\"><a href=\"#fluent-me-up\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fluent me up!</h1>\n<p>You can get these extension methods and much more by installing the <a href=\"https://www.nuget.org/packages/Boxed.AspNetCore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boxed.AspNetCore</a> NuGet package or create a project using the <a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed</a> project templates. Finally, if you are so inclined, you can also take a look at the code for these extension methods in the <a href=\"https://github.com/Dotnet-Boxed/Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed Framework</a> project.</p>\n","heroImage":"/images/hero/Fluent-Interface-All-The-Things-1366x768.png"}},"context":{}}