{"hash":"bf764ee96deb3609d30f04790333c900a6988d0a","data":{"post":{"title":"Unit Testing dotnet new Templates","path":"/unit-testing-dotnet-new-templates/","date":"2019-08-21T00:00:00+00:00","dateModified":null,"timeToRead":3,"author":"Muhammad Rehan Saeed","headings":[{"value":"Example Usage"},{"value":"Where To Get It?"}],"tags":[{"id":".NET","title":".NET","path":"/tag/net/"},{"id":"dotnet","title":"dotnet","path":"/tag/dotnet/"},{"id":"dotnet new","title":"dotnet new","path":"/tag/dotnet-new/"},{"id":"NuGet","title":"NuGet","path":"/tag/nu-get/"},{"id":"Project Template","title":"Project Template","path":"/tag/project-template/"}],"description":"It's difficult to know if your 'dotnet new' based project will work if they have lots of options, in this post I show how to unit test them.","content":"<ul>\n<li><a href=\"/custom-project-templates-using-dotnet-new/\">Part 1 - Custom Project Templates Using dotnet new</a></li>\n<li><a href=\"/dotnet-new-feature-selection/\">Part 2 - dotnet new Feature Selection</a></li>\n<li><a href=\"/unit-testing-dotnet-new-templates/\">Part 3 - Unit Testing dotnet new Templates</a></li>\n</ul>\n<p>As I talked about in my previous post some time ago about <code class=\"language-text\">dotnet new</code> project templates, it's possible to enable feature selection, so that developers can toggle certain features of a project template on or off. This is not a feature that many templates in the wild use a lot. Quite often I've seen templates have no optional features or only a few. One reason is that it gets very complicated to test that toggling your optional features doesn't break the generated project in some way by stopping it from building for example. This is why I decided to write a small unit test helper library for <code class=\"language-text\">dotnet new</code> project templates. It is unit test framework agnostic and can work with xUnit, NUnit, MSTest or any other unit test framework.</p>\n<h2 id=\"example-usage\"><a href=\"#example-usage\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example Usage</h2>\n<p>Below is an example showing how you can use it inside an xUnit test project.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApiTemplateTest</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ApiTemplateTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> DotnetNew<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Install</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ApiTemplateTest</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApiTemplate.sln\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">Theory</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">InlineData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StatusEndpointOn\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"status-endpoint=true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">InlineData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StatusEndpointOff\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"status-endpoint=false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token class-name\">Task</span> <span class=\"token function\">RestoreAndBuild_CustomArguments_IsSuccessful</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">params</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arguments<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> tempDirectory <span class=\"token operator\">=</span> TempDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">NewTempDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> dictionary <span class=\"token operator\">=</span> arguments\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">,</span> StringSplitOptions<span class=\"token punctuation\">.</span>RemoveEmptyEntries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">ToDictionary</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">Last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> project <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> tempDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetNew</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"api\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> dictionary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> project<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetRestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> project<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">Fact</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token class-name\">Task</span> <span class=\"token function\">Run_DefaultArguments_IsSuccessful</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> tempDirectory <span class=\"token operator\">=</span> TempDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">NewTempDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> project <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> tempDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetNew</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"api\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DefaultArguments\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> project<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetRestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> project<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> project<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetRun</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">@\"Source\\DefaultArguments\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>httpClient<span class=\"token punctuation\">,</span> httpsClient<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">var</span> httpResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpsClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>HttpStatusCode<span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">,</span> httpResponse<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first thing it does in the constructor is install the <code class=\"language-text\">dotnet new</code> project templates in your solution. It needs to know the name of the solution file. It then walks the sub-directory tree below your solution file and installs all project templates for you.</p>\n<p>If we then look at the first unit test, we first need a temporary directory, where we can create a project from our <code class=\"language-text\">dotnet new</code> project template. We will generate a project from the template in this directory and then delete the directory at the end of the test. We then run <code class=\"language-text\">dotnet new</code> with the name of a project template, the name we want to give to the generated project and any custom arguments that particular project template supports. Using xUnit, I've parametrised the arguments, so we can run multiple tests while tweaking the arguments for each test. Running <code class=\"language-text\">dotnet new</code> returns a project which contains some metadata about the project that we've just created and we can also use it to further <code class=\"language-text\">dotnet</code> commands against.</p>\n<p>Finally, we run <code class=\"language-text\">dotnet restore</code> and <code class=\"language-text\">dotnet build</code> against the project. So this test ensures that toggling the <code class=\"language-text\">StatusEndpointOn</code> option on our project template doesn't stop the generated project from restoring NuGet packages or building successfully.</p>\n<p>The second unit test method is where it gets really cool. If the project template is an ASP.NET Core project, we can use <code class=\"language-text\">dotnet run</code> to start the project listening on some random free ports on the machine. The unit test framework then gives you two <code class=\"language-text\">HttpClient</code>'s (One for HTTP and one for HTTPS) with which to call your newly generated project. In summary, not only can you test that the generated projects build, you can test that the features in your generated project work as they should.</p>\n<p>This API is pretty similar to the ASP.NET Core <code class=\"language-text\">TestHost</code> API that also gives you a <code class=\"language-text\">HttpClient</code> to test the API with. The difference is that this framework is actually running the app using the <code class=\"language-text\">dotnet run</code> command. I have experimented with using the <code class=\"language-text\">TestHost</code> API to run the generated project in memory, so it could be run a bit faster but the .NET Core API's for dynamically loading DLL files needs some work which .NET Core 3.0 might solve.</p>\n<h2 id=\"where-to-get-it\"><a href=\"#where-to-get-it\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Where To Get It?</h2>\n<p>You can download the <a href=\"https://www.nuget.org/packages/Boxed.DotnetNewTest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boxed.DotnetNewTest</a> NuGet package or see the <a href=\"https://github.com/Dotnet-Boxed/Framework#boxeddotnetnewtest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a> on GitHub.</p>\n","heroImage":"/images/hero/Microsoft-.NET-1366x768.png"}},"context":{}}