{"hash":"54e4577666e0c483c2a165c02bcf25d756753da9","data":{"post":{"title":"The Problem with C# 10 Implicit Usings","path":"/the-problem-with-csharp-10-implicit-usings/","date":"2021-10-13T09:24:00+00:00","dateModified":null,"timeToRead":3,"author":"Muhammad Rehan Saeed","headings":[{"value":"What are Implicit Using Statements?"},{"value":"Build Errors"},{"value":"What Using's Were Added?"},{"value":"Conclusions"}],"tags":[{"id":"C# 10","title":"C# 10","path":"/tag/c-10/"},{"id":".NET","title":".NET","path":"/tag/net/"},{"id":"Implicit Using Statements","title":"Implicit Using Statements","path":"/tag/implicit-using-statements/"}],"description":"I tried using C# 10 implicit using statements and found that they had a fatal flaw which meant you couldn't use them under certain circumstances","content":"<div class=\"custom-block tip\"><p class=\"custom-block-title\">Update (2021-10-14)</p><p><a href=\"https://twitter.com/markrendle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mark Rendle</a> made an interesting suggestion on Twitter after seeing this blog post. I've updated the post below with his code.</p></div>\n<p>Yesterday I livestreamed myself upgrading a project to .NET 6 and C# 10. Along the way I tried using a new C# 10 feature called <a href=\"https://docs.microsoft.com/en-us/dotnet/core/compatibility/sdk/6.0/implicit-namespaces\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">implicit using statements</a> and discovered that it wasn't quite as straightforward as I first thought and you should probably not use it under certain circumstances.</p>\n<p>Here is the live stream for those who are interested (I'm eager to get any feedback on how I'm presenting as its not a natural skill for me):</p>\n<div class=\"youtube-embed\">\n    <div style=\"width: 100%; margin: 0 auto;\">\n        <div style=\"position: relative; padding-bottom: 56.25%; padding-top: 25px; height: 0;\">\n            <iframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"\n                src=\"https://www.youtube-nocookie.com/embed/FjnS4oF8K3E\"\n                allow=\"autoplay; encrypted-media\" allowfullscreen>\n            </iframe>\n        </div>\n    </div>\n</div>\n<h1 id=\"what-are-implicit-using-statements\"><a href=\"#what-are-implicit-using-statements\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What are Implicit Using Statements?</h1>\n<p>Adding the line below to your <code class=\"language-inline-text\">.csproj</code> project file turns the feature on:</p>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ImplicitUsings</span><span class=\"token punctuation\">></span></span>enable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ImplicitUsings</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Once enabled, depending on the type of project you have created you'll have the following global using statements added to your project implicitly.</p>\n<table>\n<thead>\n<tr>\n<th>SDK</th>\n<th>Default namespaces</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Microsoft.NET.Sdk</td>\n<td><code class=\"language-inline-text\">System</code><br><code class=\"language-inline-text\">System.Collections.Generic</code><br><code class=\"language-inline-text\">System.IO</code><br><code class=\"language-inline-text\">System.Linq</code><br><code class=\"language-inline-text\">System.Net.Http</code><br><code class=\"language-inline-text\">System.Threading</code><br><code class=\"language-inline-text\">System.Threading.Tasks</code></td>\n</tr>\n<tr>\n<td>Microsoft.NET.Sdk.Web</td>\n<td><code class=\"language-inline-text\">System.Net.Http.Json</code><br><code class=\"language-inline-text\">Microsoft.AspNetCore.Builder</code><br><code class=\"language-inline-text\">Microsoft.AspNetCore.Hosting</code><br><code class=\"language-inline-text\">Microsoft.AspNetCore.Http</code><br><code class=\"language-inline-text\">Microsoft.AspNetCore.Routing</code><br><code class=\"language-inline-text\">Microsoft.Extensions.Configuration</code><br><code class=\"language-inline-text\">Microsoft.Extensions.DependencyInjection</code><br><code class=\"language-inline-text\">Microsoft.Extensions.Hosting</code><br><code class=\"language-inline-text\">Microsoft.Extensions.Logging</code></td>\n</tr>\n<tr>\n<td>Microsoft.NET.Sdk.Worker</td>\n<td><code class=\"language-inline-text\">Microsoft.Extensions.Configuration</code><br><code class=\"language-inline-text\">Microsoft.Extensions.DependencyInjection</code><br><code class=\"language-inline-text\">Microsoft.Extensions.Hosting</code><br><code class=\"language-inline-text\">Microsoft.Extensions.Logging</code></td>\n</tr>\n</tbody>\n</table>\n<p>Sounds great, now you can delete a large portion of the using statements in your project right? Well not so fast, here are some problems I discovered along the way.</p>\n<h2 id=\"build-errors\"><a href=\"#build-errors\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build Errors</h2>\n<p>I discovered the first problem while multi-targetting a class library project for a NuGet package. I had targetted .NET 4.7.2 as well as other target frameworks like .NET 6 for backwards compatibility and found that <code class=\"language-inline-text\">System.Net.Http</code> could not be found. It turns out I hadn't referenced that particular NuGet package for .NET 4.7.2 and was now getting a build error.</p>\n<p>I could add the <code class=\"language-inline-text\">System.Net.Http</code> NuGet package for .NET 4.7.2 on its own and that would solve the problem but I really didn't like having the overhead of another unnecessary package reference. That also means extra work for me to maintain updating the version number or relying on tools like <a href=\"https://dependabot.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dependabot</a> and <a href=\"https://www.whitesourcesoftware.com/free-developer-tools/renovate/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Renovate</a> to submit PR's to upgrade the version number for me.</p>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span> <span class=\"token attr-name\">Label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Package References (.NET 4.7.2)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>$(TargetFramework)<span class=\"token punctuation\">'</span> == <span class=\"token punctuation\">'</span>net472<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>System.Net.Http<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>4.3.4<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://twitter.com/markrendle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mark Rendle</a> on Twitter suggested another workaround after seeing this blog post. His suggestion was to remove the offending using statement in the <code class=\"language-inline-text\">.csproj</code> file.</p>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Using</span> <span class=\"token attr-name\">Remove</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>System.Net.Http<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>This looks awfully strange to me. I'm not sure how I feel about adding or removing namespaces from C# project files yet. It doesn't seem very discoverable to me. So in this particular case I'm happy to avoid using implicit using statements for now.</p>\n<h2 id=\"what-usings-were-added\"><a href=\"#what-usings-were-added\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What Using's Were Added?</h2>\n<p>The second problem is trying to understand what using's have been added. As you can see from the table above, you could go and look in the <a href=\"https://docs.microsoft.com/en-us/dotnet/core/compatibility/sdk/6.0/implicit-namespaces\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">documentation</a> to figure this out but that's slow and time consuming. Another alternative is actually to build your project and then look in its <code class=\"language-inline-text\">obj</code> directory under:</p>\n<div class=\"line-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">My.Project\\obj\\Debug\\net472\\My.Project.GlobalUsings.g.cs</code></pre></div>\n<p>That's not ideal either. I think Visual Studio should ideally show you these using statements somehow.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusions</h1>\n<p>Implicit usings are <a href=\"https://devblogs.microsoft.com/dotnet/announcing-net-6-release-candidate-2/#net-sdk-c-project-templates-modernized\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">enabled by default</a> in the latest blank project templates shipped with .NET. Overall this is a cool feature that can remove the need for many duplicated lines of code in your project but I think there is a little too much magic going on here for my liking, so I think I'll be more careful about using this feature in the future.</p>\n","heroImage":"/images/hero/Microsoft-.NET-1366x768.png"}},"context":{}}