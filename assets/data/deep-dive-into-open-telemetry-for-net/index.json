{"hash":"b50eaae0f904623f3c709aad0c1e4c51945e6e1f","data":{"post":{"title":"Deep Dive into Open Telemetry for .NET","path":"/deep-dive-into-open-telemetry-for-net/","date":"2021-01-19T00:00:00+00:00","dateModified":null,"timeToRead":10,"author":"Muhammad Rehan Saeed","headings":[{"value":"Logging"},{"value":"Metrics"},{"value":"Tracing"},{"value":"Jaeger"},{"value":"Spans"},{"value":"Events"},{"value":"Attributes"},{"value":"IsRecording"},{"value":"Trace Semantic Conventions"},{"value":"Exporting Telemetry"},{"value":"Crossing the Process Boundary"},{"value":"Baggage"},{"value":"You're Already Using It"},{"value":"Up Next"}],"tags":[{"id":"Open Telemetry","title":"Open Telemetry","path":"/tag/open-telemetry/"},{"id":".NET","title":".NET","path":"/tag/net/"},{"id":".NET Core","title":".NET Core","path":"/tag/net-core/"},{"id":"ASP.NET Core","title":"ASP.NET Core","path":"/tag/asp-net-core/"},{"id":"Metrics","title":"Metrics","path":"/tag/metrics/"},{"id":"Logging","title":"Logging","path":"/tag/logging/"},{"id":"Tracing","title":"Tracing","path":"/tag/tracing/"},{"id":"Distributed Tracing","title":"Distributed Tracing","path":"/tag/distributed-tracing/"},{"id":"Span","title":"Span","path":"/tag/span/"},{"id":"Activity","title":"Activity","path":"/tag/activity/"},{"id":"Cloud Native Computing Foundation (CNCF)","title":"Cloud Native Computing Foundation (CNCF)","path":"/tag/cloud-native-computing-foundation-cncf/"}],"description":"How to use the Open Telemetry specification, tools and SDK's used to instrument, generate, collect, and export telemetry data (metrics, logs, and traces) using .NET and ASP.NET.","content":"<ol>\n<li><a href=\"/deep-dive-into-open-telemetry-for-net/\">Open Telemetry - Deep Dive into Open Telemetry for .NET</a></li>\n<li><a href=\"/open-telemetry-for-asp-net-core/\">Open Telemetry - Configuring Open Telemetry for ASP.NET Core</a></li>\n<li><a href=\"/exporting-open-telemetry-data-to-jaeger/\">Open Telemetry - Exporting Open Telemetry Data to Jaeger</a></li>\n<li>Open Telemetry - Optimally Configuring Open Telemetry for ASP.NET Core</li>\n</ol>\n<p>Open Telemetry is an open source specification, tools and SDK's used to instrument, generate, collect, and export telemetry data (metrics, logs, and traces). <a href=\"https://opentelemetry.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Open Telemetry</a> is backed by the <a href=\"https://www.cncf.io/webinars/fundamentals-of-opentelemetry/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cloud Native Computing Foundation (CNCF)</a> which backs a mind boggling array of popular open source projects. It's worth looking at the <a href=\"https://landscape.cncf.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CNCF Landscape</a> to see what I really mean. The SDK's support all the major programming languages including C# and ASP.NET Core.</p>\n<p>In this post, I'm going to discuss what Open Telemetry is all about, why you'd want to use it and how to use it with .NET specifically. With a typical application there are three sets of data that you usually want to record: metrics, logs and traces. Lets start by discussing what they are.</p>\n<h2 id=\"logging\"><a href=\"#logging\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logging</h2>\n<p>Provides insight into application-specific messages emitted by processes. In a .NET application, Open Telemetry support can easily be added if you use <code class=\"language-inline-text\">ILogger</code> for logging which lives in the <code class=\"language-inline-text\">Microsoft.Extensions.Logging</code> NuGet package. You'd typically already use this if you're building an ASP.NET Core application.</p>\n<h2 id=\"metrics\"><a href=\"#metrics\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Metrics</h2>\n<p>Provide quantitative information about processes running inside the system, including counters, gauges, and histograms. Support for metrics in Open Telemetry is still under development and being finalised at the time of writing. Examples of metrics are:</p>\n<ul>\n<li>Percentage CPU usage.</li>\n<li>Bytes of memory used.</li>\n<li>Number of HTTP requests.</li>\n</ul>\n<h2 id=\"tracing\"><a href=\"#tracing\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tracing</h2>\n<p>Also known as distributed tracing, this records the start and end times for individual operations alongside any ancillary data relevant to the operation. An example of this is recording a trace of a HTTP request in ASP.NET Core. You might record the start and end time of a request/response and the ancillary data would be the HTTP method, scheme, URL etc.</p>\n<p>If an ASP.NET Core application makes database calls and HTTP requests to external API's these could also be recorded if the database and API's which are in totally separate processes also support recording Open Telemetry tracing. It's possible to follow the trace of a HTTP request from a client, down to your API, down to a database and all the way back again. This allows you to get a deep understanding of where the time is being spent or if there is an exception, where it is occurring.</p>\n<h1 id=\"jaeger\"><a href=\"#jaeger\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jaeger</h1>\n<p>Collecting metrics, logs and traces is only half of the equation, the other half is exporting that data to various applications that know how to collect Open Telemetry formatted data, so you can view it. The endgame is to be able to see your data in an easily consumable fashion using nice visualisations, so you can spot patterns and solve problems.</p>\n<p>The two main applications that can collect and display Open Telemetry compatible trace data are <a href=\"https://www.jaegertracing.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jaeger</a> and Zipkin. Zipkin is a bit older and doesn't have as nice a UI, so I'd personally recommend Jaeger. It looks something like this:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1417' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-64ea155b9778b72a60583d001c4d4db7'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-64ea155b9778b72a60583d001c4d4db7)' width='2560' height='1417' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAjCAIAAACra5t9AAAACXBIWXMAAAsSAAALEgHS3X78AAAGzUlEQVRYw81YaW/cNhqe//8hQPOlm8tOt90Abvdo0hx1mxYpFigWu2kSH3N4To0OUrcoUve5jzSxYXsOTzaJvS%2beESiS0vDhe1Kde/fuPXiwc/v2bTRevXr18uXLx08e/7i///z5i7t3737xxe07d%2b7cunXr66%2b/2dvbe/To0e7u7s7OzuK6jTxoZWdrOZuPf/jyyz/dbaVdZCP379/H9eHDh189bAT9nTzLbMuaTmeD/uDkZCgr6mQykefzyXRqWVa32%2bsPBrOZlGV5fe2SZVlZlpc6q6pCZ1EUaOC2Yzk28xlADd20LEKJaVtBFHIhbMfGqAgDLrjruQ7gOoRSVdOap7ifZGmcJpeQnkOSJo7r8iDI8jzNsg0oi7wuizLPhM%2byJK6bNWZYaVUUWGx%2b8fG8aCTAwjjvaDrxhO9yhisLuB8KXNFe3LZtdtYGDMdyfLeZ1s65BCZAnHPhA0L4vu/Ztsk8V3D/EjhnwNmt7guZibnDJqYtu8wUoRtEjggBP4ywF%2bD2HqCArYmTKIp0Xe/EcdzoIwdR7ELe7lr6Xhb7eE4SjKZZs/HNG9q5S8BQmmHD8jhN8R94P56Kl2Sxl4s2hucu7xusb7gnFhuY7FB3gWOTAQfUfUfdt7rzljY4MByZcS8KvSSxfL/T7/W6jRy/efOm3%2b87jmOvF8s0yXzuOzZ3nQ1QJUmZTpltcdhP0%2bMuECzgNVdtOlWnU%2bE6za3nxsxLfS9lp/C9yPOoNMM0TPYaa7bPwByHOw6RZSymM6P6u6Pj6WSitmIYhlglsIxACNf3f1W0n1XyUqPrgNF9WQWWh16o5BmgaE9l9fFs/kSao73AU/k8VACd38%2bkx%2b2cF6r24ynQft4%2b8sNceSLJHZ4kA1UdD0cuiHowWZsxBvdPL0pjOmnK4/gHw96j1nfr8S0xcf2rbl/opNbfdVvh3AkjXpYcLliWYVWJslwHXpSiKIP1c4KywmgHy6K%2bfzIaIYaahgkTCiFRuLDdM4lbA%2bdR9LNBn%2brk2QbQFhc78ci%2boTu%2bHwdB1YbCug2Cm6SqqivnIIxicUgFiEO9o6PZbN4YumVCG2CRLEkcR9zoc3rA6eFakIMGFzsFPQzMfiL8IkkWi8Nvi/VvQSBqfJkzeJUsaYSAgMfYIuCsJMDIzFOGnjpaB1cZuksTHPnE0yZTj03CRIrTWZTMohSNlZDjtGxXXm5DAPusGbR7dESoDvshhMBl1xGAJ2zxzhWSF1UUpz2b/Ecd/aEOX8uD18oQjWW8Vk/eapOiTcDLaXi1CRXIlzpBNWFaJlJDEARrCSRJ2eTwcgOQQoHLnUgxeFDp1Y5SJ0GdR3URtohWIX5vZFv5ALw1yxJVlrpdjVIo4ZL7XiZw1a5ssF0QyS0tGx/GJonyxkzKNfgwJ0aEZFRDGKK6juy/Yfs/kkBr10WVZ4Wjx44BnXwCJ8aaEEk9XUMYRaH22Qk0/lAGgudEqvPsNCJ9BAEsF2nLNylqZtTPyLfLWey8fDwBSJJlIWd1yBZPfKwGwCAg6qTXQxhFMk42yichgJegNslsWpFJ5Tsr9bA1gbYw5EQZdrso9F3XuQYCmAAHKBE8bJpSqU6iZQ4fooE0ZTAhCSZkb46hn5DAYk5e1Uj5lau/X/25EuNDnDhLXZ2MRmOUojjjXCcBtCIcB1yzBofTsf/FhARRh0fHiqqiCroeEzo3p%2bEQUqUy5NqldZbUp669rQaamEAUaTBAGPVugAB8usAJDskhVcaVQ%2boi%2bzATyvMMPjAej1FKiOv1gQuddR0XVeIYlaksDKnaphZC4S8ZxvhkIMsyCiEc2XCQvRECi/InSlLhWP%2b07V9sZ9%2bwpmFUb6y8O9htpN/hZDabTt32VHb9JnReoH4ehj8Z9vfE%2bE6hPR6sT9YtARRuPAg0YqIatVrBeeCGCXDxTgr%2bNeL/HnLXz68gAHMZ63q3eyzP5Wb5MCHEpc9cSmwikCS%2bEP/QjV1FfWIY%2bVWv6mRJIpJE1S3kAdTSMCIhghvUACJKEIYHmvhd8o9IUF3txPAB15XnKCNI81HIshe57KY0gKwaBOHvqv/LzP1Ncf9gnOf5Bj9uwihs//D4eDwaIRPDiD7fgWZLH4AJ/Y3qXynan2V1V9LUKK7PTjkrCcDkLZtNJohCjQ7YDTsxNBAMlehwEh5Pwt4sCqJikwaQBwYa6R53KaVW%2b/3wxvLAJVuKI1OIb3X6F6J9Q7Q9SsJiBZNOjkouDGdzZTAYmKYJDaz8InTNBDCGZegeezF1nk3sZ1P7p5mDY/QKApTqZVF4TBBCuM9hPzhV/l9ooPm4nVh2bloN0Fj%2b56Io/gvS1g7/8nH0xQAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"2560\" alt=\"Jaeger Trace Detail\" data-srcset=\"/assets/static/Jaeger-Trace-Detail-3360x1859.82a2fbd.e4480ba32bccaff25e28606248083eeb.png 480w, /assets/static/Jaeger-Trace-Detail-3360x1859.cbab2cf.e4480ba32bccaff25e28606248083eeb.png 1024w, /assets/static/Jaeger-Trace-Detail-3360x1859.2665e34.e4480ba32bccaff25e28606248083eeb.png 1920w, /assets/static/Jaeger-Trace-Detail-3360x1859.42db587.e4480ba32bccaff25e28606248083eeb.png 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/Jaeger-Trace-Detail-3360x1859.42db587.e4480ba32bccaff25e28606248083eeb.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Jaeger-Trace-Detail-3360x1859.42db587.e4480ba32bccaff25e28606248083eeb.png\" width=\"2560\" alt=\"Jaeger Trace Detail\"></noscript></p>\n<p>The above image shows the trace from a 'frontend' application. You can see how it makes calls to MySQL, Redis and external API's using HTTP requests. The length of each line shows how long it took to execute. You can easily see all of the major operations executed in a trace from end to end. You can also drill into each individual line and see extra information relevant to that part of the trace. I'll show you how you can run Jaeger and collect Open Telemetry data in my next blog post.</p>\n<h1 id=\"spans\"><a href=\"#spans\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spans</h1>\n<p>Each line in the Jaeger screenshot above is called a Span or in .NET is represented by the <code class=\"language-inline-text\">System.Activities.Activity</code> type. It has a unique identifier, start and end time along with a parent span unique identifier too, so it can be connected to other spans in a tree structure representing an overall trace. Finally, a span can also contain other ancillary data that I will discuss further on.</p>\n<div class=\"custom-block tip\"><p class=\"custom-block-title\">Tip</p><p>Unfortunately, .NET's naming has significantly deviated from the official Open Telemetry specification, resulting in quite a lot of confusion on my part. Happily, I've been through that confusion, so you don't have to!</p><p>My understanding is that .NET already contained a type called <code class=\"language-inline-text\">Activity</code>, so the .NET team decided to reuse it instead of creating a new <code class=\"language-inline-text\">Span</code> type like you'd expect. This means that a lot of naming does not match up with the Open Telemetry specification. From this point forward you can use the words 'span' and 'activity' interchangeably.</p></div>\n<p>Recording your own traces using spans is pretty simple. First we must create an <code class=\"language-inline-text\">ActivitySource</code> from which spans or activities can be recorded. This just contains a little information about the source of the spans created from it.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ActivitySource</span> activitySource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ActivitySource</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"companyname.product.library\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"semver1.0.0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then we can call <code class=\"language-inline-text\">StartActivity</code> to start recording and finally call <code class=\"language-inline-text\">Dispose</code> to stop recording the span. </p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> activity <span class=\"token operator\">=</span> activitySource<span class=\"token punctuation\">.</span><span class=\"token function\">StartActivity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ActivityName\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Pretend to do some work.</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">LongRunningAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// Activity gets stopped automatically at end of this block during dispose.</span></code></pre></div>\n<h2 id=\"events\"><a href=\"#events\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Events</h2>\n<p>Along with our span we can record events. These are timestamped events that occur at a single point in time within your span.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> activity <span class=\"token operator\">=</span> activitySource<span class=\"token punctuation\">.</span><span class=\"token function\">StartActivity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ActivityName\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">LongRunningOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">LongRunningOperationAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Log timestamped events that can take place during an activity. </span>\n    Activity<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">?.</span><span class=\"token function\">AddEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ActivityEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Something happened.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Within the <code class=\"language-inline-text\">LongRunningOperationAsync</code> method, we don't have access to the current span. One way to get hold of it would be to pass it in as a method parameter. However, a better way that decouples the two operations is to use <code class=\"language-inline-text\">Activity.Current</code> which gives you access to the current span within the currently running thread.</p>\n<p>One common pitfall I can foresee is that <code class=\"language-inline-text\">Activity.Current</code> could be <code class=\"language-inline-text\">null</code> due to the caller deciding not to create a span for some reason. Therefore, we use the null conditional operator <code class=\"language-inline-text\">?.</code> to only call <code class=\"language-inline-text\">AddEvent</code> if the current span is not null.</p>\n<h2 id=\"attributes\"><a href=\"#attributes\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Attributes</h2>\n<p>Attributes are name value pairs of data that you can record as part of an individual span. The attribute names have a loose standard for how they are put together that I'll talk about further on.</p>\n<div class=\"custom-block tip\"><p class=\"custom-block-title\">Tip</p><p><code class=\"language-inline-text\">Tags</code> in .NET are called <code class=\"language-inline-text\">Attributes</code> in the <a href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/api.md#set-attributes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Open Telemetry specification</a>.</p></div>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> activity <span class=\"token operator\">=</span> activitySource<span class=\"token punctuation\">.</span><span class=\"token function\">StartActivity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ActivityName\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">LongRunningOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">LongRunningOperationAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Log an attribute containing arbitrary data.</span>\n    Activity<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">?.</span><span class=\"token function\">SetTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.method\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can add new attributes or update existing attributes using the <code class=\"language-inline-text\">Activity.SetTag</code> method. There is also an <code class=\"language-inline-text\">Activity.AddTag</code> method but that will throw if an attribute does not already exist, so I'd avoid using it.</p>\n<h1 id=\"isrecording\"><a href=\"#isrecording\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IsRecording</h1>\n<p><code class=\"language-inline-text\">IsRecording</code> is a flag on a span that returns <code class=\"language-inline-text\">true</code> if the end time of the span has not yet been set and <code class=\"language-inline-text\">false</code> if it has, thus signifying whether the span has ended. In addition it can also be set to <code class=\"language-inline-text\">false</code> if the application is sampling Open Telemetry spans i.e. you don't want to collect a trace for every single execution of the code but might only want a trace for say 10% of executions to reduce the significant overhead of collecting telemetry.</p>\n<div class=\"custom-block tip\"><p class=\"custom-block-title\">Tip</p><p>The <code class=\"language-inline-text\">Activity.IsAllDataRequested</code> property in .NET is called <code class=\"language-inline-text\">IsRecording</code> in the <a href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/api.md#isrecording\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Open Telemetry specification</a>.</p></div>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> activity <span class=\"token operator\">=</span> activitySource<span class=\"token punctuation\">.</span><span class=\"token function\">StartActivity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ActivityName\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">LongRunningOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">LongRunningOperationAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// It's possible to optionally request more data from a particular span.</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> activity <span class=\"token operator\">=</span> Activity<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>activity <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> activity<span class=\"token punctuation\">.</span>IsAllDataRequested<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        activity<span class=\"token punctuation\">.</span><span class=\"token function\">SetTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.url\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://www.mywebsite.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It's worth reading a bit more about <a href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/sdk.md#sampling\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Open Telemetry Sampling</a> for more details. In most real world applications, collecting telemetry for every execution of your code is prohibitively expensive and unrealistic, so you will likely be using some form of sampling. Therefore the <code class=\"language-inline-text\">IsRecording</code>/<code class=\"language-inline-text\">IsAllDataRequested</code> flag becomes something you should probably always check (as in the above example) before you add events or attributes to your span.</p>\n<h1 id=\"trace-semantic-conventions\"><a href=\"#trace-semantic-conventions\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Trace Semantic Conventions</h1>\n<p>Note the attribute names <code class=\"language-inline-text\">http.method</code> and <code class=\"language-inline-text\">http.url</code> I used in the above examples. There are certain commonly used attribute names that have been standardised in the Open Telemetry specification.</p>\n<p>Standardised attribute names use a <code class=\"language-inline-text\">lower_kebab_case</code> syntax with <code class=\"language-inline-text\">.</code> separator characters. Standardising the names of commonly used attribute names gives applications like Jaeger the ability to show nice UI customisations. Attribute names have been categorised under a few different buckets, it's worth spending some time taking a look at them:</p>\n<ul>\n<li><a href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/span-general.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">General</a>: General semantic attributes that may be used in describing different kinds of operations.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTTP</a>: Spans for both HTTP client and server.</li>\n<li><a href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Database</a>: Spans for SQL and NoSQL client calls.</li>\n<li><a href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/rpc.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RPC/RMI</a>: Spans for remote procedure calls (e.g., gRPC).</li>\n<li><a href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/messaging.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Messaging</a>: Spans for interaction with messaging systems (queues, publish/subscribe, etc.).</li>\n<li><a href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/faas.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FaaS</a>: Spans for Function as a Service (e.g., AWS Lambda).</li>\n<li><a href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/exceptions.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Exceptions</a>: Attributes for recording exceptions associated with a span.</li>\n</ul>\n<h1 id=\"exporting-telemetry\"><a href=\"#exporting-telemetry\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exporting Telemetry</h1>\n<p>There are many plugins for exporting data collected using Open Telemetry which I'll discuss in my next blog post about using Open Telemetry in ASP.NET Core. Therefore, it's highly unlikely that you'd need to manually write your own code to consume data collected using Open Telemetry.</p>\n<p>However, if you're interested then <a href=\"https://jimmybogard.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jimmy Bogard</a> has a very well written <a href=\"https://jimmybogard.com/activitysource-and-listener-in-net-5/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog post</a> about using <code class=\"language-inline-text\">ActivitySource</code> and <code class=\"language-inline-text\">ActivityListener</code> to listen to any incoming telemetry. In short, you can easily subscribe to consume Open Telemetry data like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> subscriber <span class=\"token operator\">=</span> DiagnosticListener<span class=\"token punctuation\">.</span>AllListeners<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>\n    listener <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Listener name </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">listener<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        listener<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>kvp <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Received event </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">kvp<span class=\"token punctuation\">.</span>Key</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">kvp<span class=\"token punctuation\">.</span>Value</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"crossing-the-process-boundary\"><a href=\"#crossing-the-process-boundary\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Crossing the Process Boundary</h1>\n<p>Earlier on I spoke about how it's possible to record a trace across process boundaries. For example collecting a trace from a client application through to a database and API both running in separate processes. Given what you now know about recording spans above, how is this possible?</p>\n<p>This is where the <a href=\"https://www.w3.org/TR/trace-context/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C Trace Context</a> standard comes in. It defines a series of HTTP headers that pass information from one process to another about any trace that is currently being recorded. There are two HTTP headers defined in the specification:</p>\n<ul>\n<li>\n<p><code class=\"language-inline-text\">traceparent</code> - Contains the <code class=\"language-inline-text\">version</code>, <code class=\"language-inline-text\">trace-id</code>, <code class=\"language-inline-text\">parent-id</code> and <code class=\"language-inline-text\">trace-flags</code> in an encoded form separated by dashes.</p>\n<ul>\n<li><code class=\"language-inline-text\">version</code> - The version of Open Telemetry being used which is always <code class=\"language-inline-text\">00</code> at the time of writing.</li>\n<li><code class=\"language-inline-text\">trace-id</code> - The unique identifier of the trace.</li>\n<li><code class=\"language-inline-text\">parent-id</code> - The unique identifier of the span which is acting as the current parent span.</li>\n<li><code class=\"language-inline-text\">trace-flags</code> - A set of flags for the current trace which determines whether the current trace is being sampled and the trace level.</li>\n</ul>\n</li>\n<li><code class=\"language-inline-text\">tracestate</code> - Vendor-specific data represented by a set of name/value pairs.</li>\n</ul>\n<p>I'm not sure why but the HTTP headers are defined in lower-case. Here is an example of what these headers look like in a HTTP request:</p>\n<div class=\"line-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token header-name keyword\">traceparent:</span> 00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-01\n<span class=\"token header-name keyword\">tracestate:</span> asp=00f067aa0ba902b7,redis=t61rcWkgMzE</code></pre></div>\n<p>If you're interested in what it looks like to actually implement the W3C Trace Context, <a href=\"https://jimmybogard.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jimmy Bogard</a> has been implementing <a href=\"https://jimmybogard.com/building-end-to-end-diagnostics-and-tracing-a-primer-trace-context/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Open Telemetry for NServiceBus</a> and shows how it can be done.</p>\n<h1 id=\"baggage\"><a href=\"#baggage\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Baggage</h1>\n<p>Similar to attributes, baggage is another way we can add data as name value pairs to a trace. The difference is that baggage travels across process boundaries using a <code class=\"language-inline-text\">baggage</code> HTTP header as defined in the <a href=\"https://www.w3.org/TR/baggage/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C Baggage</a> specification. It is also added to all spans in a trace.</p>\n<div class=\"line-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token header-name keyword\">baggage:</span> userId=alice,serverNode=DF:28,isProduction=false</code></pre></div>\n<p>Similar to the way attributes can be recorded using the <code class=\"language-inline-text\">AddTag</code> and <code class=\"language-inline-text\">SetTag</code> methods, with baggage we can use the <code class=\"language-inline-text\">AddBaggage</code> method. For some reason a <code class=\"language-inline-text\">SetBaggage</code> method that would also update baggage does not exist.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> activity <span class=\"token operator\">=</span> activitySource<span class=\"token punctuation\">.</span><span class=\"token function\">StartActivity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ActivityName\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">LongRunningOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">LongRunningOperationAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Log an attribute containing arbitrary data.</span>\n    Activity<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">?.</span><span class=\"token function\">AddBaggage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.method\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So why would you use baggage over attributes? Well, if you have a global unique identifier for a particular trace like a user ID, order ID or some session ID it might be useful to add it as baggage because it's relevant to all spans in your trace. However, you must be careful not to add too much baggage because it will add overhead when making HTTP requests.</p>\n<h1 id=\"youre-already-using-it\"><a href=\"#youre-already-using-it\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>You're Already Using It</h1>\n<p>The .NET team in their wisdom decided to take quite a large gamble on Open Telemetry. They not only repurposed their <code class=\"language-inline-text\">Activity</code> type to represent a span but they also instrumented several libraries, so you don't have to.</p>\n<p>The <code class=\"language-inline-text\">HttpClient</code> already adds the W3C Trace Context HTTP headers from the current span automatically if a trace is being recorded. Also an ASP.NET Core application already reads W3C Trace Context HTTP headers from incoming requests and populates the current span with that information.</p>\n<p>Since the .NET team has made it so easy to collect telemetry and integrated the <code class=\"language-inline-text\">Activity</code> type into the base class libraries, I expect a lot of other libraries and applications to follow this example.</p>\n<p>The <code class=\"language-inline-text\">ILogger</code> interface from the <code class=\"language-inline-text\">Microsoft.Extensions.Logging</code> NuGet package used commonly in an ASP.NET Core application is also able to collect logs compatible with Open Telemetry too.</p>\n<h1 id=\"up-next\"><a href=\"#up-next\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Up Next</h1>\n<p>I've discussed that Open Telemetry is all about collecting Logs, Metrics and Trace data and gone fairly deep into collecting Trace data. In my next post, I'll cover how you can configure ASP.NET Core and Open Telemetry traces and logs.</p>\n","heroImage":"/images/hero/Open-Telemetry-1600x900.png"}},"context":{}}