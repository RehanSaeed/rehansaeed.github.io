{"hash":"34e9ff3faf00b3811c8b86f44a5d9675a7bfd19f","data":{"post":{"title":"Model-View-ViewModel (MVVM) - Part 3 - INotifyPropertyChanged","path":"/model-view-viewmodel-mvvm-part3-inotifypropertychanged/","date":"2014-06-18T00:00:00+00:00","dateModified":null,"timeToRead":11,"author":"Muhammad Rehan Saeed","headings":[{"value":"Simple Example"},{"value":"Performance"},{"value":"Handling Dependent Properties"},{"value":"Dealing with Wrapped Objects"},{"value":"Using Reactive Extensions (Rx) to Replace the PropertyChanged Event"},{"value":"Implementing INotifyPropertyChanging"},{"value":"Conclusions"}],"tags":[{"id":".NET","title":".NET","path":"/tag/net/"},{"id":"Base Class Library","title":"Base Class Library","path":"/tag/base-class-library/"},{"id":"BCL","title":"BCL","path":"/tag/bcl/"},{"id":"C#","title":"C#","path":"/tag/c/"},{"id":"Design Patterns","title":"Design Patterns","path":"/tag/design-patterns/"},{"id":"Events","title":"Events","path":"/tag/events/"},{"id":"Explicit Interface Implementation","title":"Explicit Interface Implementation","path":"/tag/explicit-interface-implementation/"},{"id":"INotifyPropertyChanged","title":"INotifyPropertyChanged","path":"/tag/i-notify-property-changed/"},{"id":"INotifyPropertyChanging","title":"INotifyPropertyChanging","path":"/tag/i-notify-property-changing/"},{"id":"Model-View-ViewModel (MVVM)","title":"Model-View-ViewModel (MVVM)","path":"/tag/model-view-view-model-mvvm/"}],"description":"An base class implementation for the INotifyPropertyChanged interface. Used in the Model-View-ViewModel (MVVM) pattern. Targeted for best performance.","content":"<ul>\n<li><a href=\"/model-view-viewmodel-mvvm-part1-overview/\">Model-View-ViewModel (MVVM) - Part 1 - Overview</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part2-idisposable/\">Model-View-ViewModel (MVVM) - Part 2 - IDisposable</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part3-inotifypropertychanged/\">Model-View-ViewModel (MVVM) - Part 3 - INotifyPropertyChanged</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/\">Model-View-ViewModel (MVVM) - Part 4 - INotifyDataErrorInfo</a></li>\n</ul>\n<p>I know there have been lots ofÂ Model-View-ViewModel (MVVM) articles talking about <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChanged</a>. I've read <strong>lots</strong> of them and this is the aggregation of all the knowledge I've learned plus some cool new stuff (I've not seen it done anywhere else but I could be wrong) which I've also covered in my <a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) posts</a>.</p>\n<p>So what are the main aims of a base class implementing <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChanged</a>? Well, I think there are a few:</p>\n<ul>\n<li>Performance - Performance is king. It needs to be fast and I mean <strong>really</strong> fast. You can't afford for your UI to freeze up while your view works out all its bindings to the properties in your view model.</li>\n<li>Simplicity - I want to raise property changed events with one line of code and I don't want to mess around with strings if I can help it.</li>\n<li>Reactive Extensions (Rx) - Events are old school, I want an observable property changed event notification system instead of the <code class=\"language-text\">PropertyChanged</code> C# event.</li>\n<li>Human Error - I don't want to raise property change events for properties that don't exist by accident.</li>\n<li>Dependent Properties - Often, the value of one property depends on the value of another. I need to handle this somehow.</li>\n<li>Re-factoring - I don't want my code to break when I rename a property and forget to rename a string too.</li>\n<li>Has it Really Changed - I don't want to raise a property changed event if the value of a property has not really changed.</li>\n</ul>\n<p>So, without further ado, here is my implementation.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> Framework<span class=\"token punctuation\">.</span>ComponentModel\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>ComponentModel<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">.</span>Linq<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Reflection<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Notifies subscribers that a property in this instance is changing or has changed.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NotifyPropertyChanges</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Disposable</span><span class=\"token punctuation\">,</span> INotifyPropertyChanged <span class=\"token comment\">//, INotifyPropertyChanging</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Occurs when a property value changes.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">event</span> <span class=\"token class-name\">PropertyChangedEventHandler</span> INotifyPropertyChanged<span class=\"token punctuation\">.</span>PropertyChanged\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">add</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">+=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">remove</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">-=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Occurs when a property value is changing.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">// event PropertyChangingEventHandler INotifyPropertyChanging.PropertyChanging</span>\n        <span class=\"token comment\">// {</span>\n        <span class=\"token comment\">//     add { this.PropertyChanging += value; }</span>\n        <span class=\"token comment\">//     remove { this.PropertyChanging -= value; }</span>\n        <span class=\"token comment\">// }</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Occurs when a property value changes.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">PropertyChangedEventHandler</span> propertyChanged<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Occurs when a property value is changing.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">// private event PropertyChangingEventHandler PropertyChanging;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the when property changed observable event. Occurs when a property value changes.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value></span>\n        <span class=\"token comment\">/// The when property changed observable event.</span>\n        <span class=\"token comment\">/// &lt;/value></span>\n        <span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> WhenPropertyChanged\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">return</span> Observable\n                    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PropertyChangedEventHandler</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PropertyChangedEventArgs</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n                        h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                        h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">.</span>PropertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the when property changing observable event. Occurs when a property value is changing.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value></span>\n        <span class=\"token comment\">/// The when property changing observable event.</span>\n        <span class=\"token comment\">/// &lt;/value></span>\n        <span class=\"token comment\">// public IObservable&lt;EventPattern&lt;PropertyChangingEventArgs>> WhenPropertyChanging</span>\n        <span class=\"token comment\">// {</span>\n        <span class=\"token comment\">//     get</span>\n        <span class=\"token comment\">//     {</span>\n        <span class=\"token comment\">//         return Observable</span>\n        <span class=\"token comment\">//             .FromEventPattern&lt;PropertyChangingEventHandler, PropertyChangingEventArgs>(</span>\n        <span class=\"token comment\">//                 h => this.PropertyChanging += h,</span>\n        <span class=\"token comment\">//                 h => this.PropertyChanging -= h)</span>\n        <span class=\"token comment\">//             .AsObservable();</span>\n        <span class=\"token comment\">//     }</span>\n        <span class=\"token comment\">// }</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Raises the PropertyChanged event.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">CallerMemberName</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">string</span> propertyName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetRuntimeProperty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Check that the property name exists for this instance.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">PropertyChangedEventHandler</span> eventHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eventHandler <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">eventHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PropertyChangedEventArgs</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Raises the PropertyChanged event.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyNames\">The property names.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">params</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> propertyNames<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propertyNames <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> propertyName <span class=\"token keyword\">in</span> propertyNames<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Raises the PropertyChanging event.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">CallerMemberName</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">string</span> propertyName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetRuntimeProperty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Check that the property name exists for this instance.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// PropertyChangingEventHandler eventHandler = this.PropertyChanging;</span>\n\n            <span class=\"token comment\">// if (eventHandler != null)</span>\n            <span class=\"token comment\">// {</span>\n            <span class=\"token comment\">//     eventHandler(this, new PropertyChangingEventArgs(propertyName));</span>\n            <span class=\"token comment\">// }</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Raises the PropertyChanging event.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyNames\">The property names.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">params</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> propertyNames<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propertyNames <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> propertyName <span class=\"token keyword\">in</span> propertyNames<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Sets the value of the property to the specified value if it has changed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;typeparam name=\"TProp\">The type of the property.&lt;/typeparam></span>\n        <span class=\"token comment\">/// &lt;param name=\"currentValue\">The current value of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"newValue\">The new value of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if the property was changed, otherwise &lt;c>false&lt;/c>.&lt;/returns></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">bool</span> <span class=\"token generic-method\"><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TProp</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">ref</span> <span class=\"token class-name\">TProp</span> currentValue<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">TProp</span> newValue<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token class-name\">CallerMemberName</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">string</span> propertyName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                currentValue <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Sets the value of the property to the specified value if it has changed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;typeparam name=\"TProp\">The type of the property.&lt;/typeparam></span>\n        <span class=\"token comment\">/// &lt;param name=\"currentValue\">The current value of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"newValue\">The new value of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyNames\">The names of all properties changed.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if the property was changed, otherwise &lt;c>false&lt;/c>.&lt;/returns></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">bool</span> <span class=\"token generic-method\"><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TProp</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">ref</span> <span class=\"token class-name\">TProp</span> currentValue<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">TProp</span> newValue<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">params</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> propertyNames<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                currentValue <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Sets the value of the property to the specified value if it has changed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"equal\">A function which returns &lt;c>true&lt;/c> if the property value has changed, otherwise &lt;c>false&lt;/c>.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"action\">The action where the property is set.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if the property was changed, otherwise &lt;c>false&lt;/c>.&lt;/returns></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span>\n            Func<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> equal<span class=\"token punctuation\">,</span> \n            <span class=\"token class-name\">Action</span> action<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token class-name\">CallerMemberName</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">string</span> propertyName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Sets the value of the property to the specified value if it has changed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"equal\">A function which returns &lt;c>true&lt;/c> if the property value has changed, otherwise &lt;c>false&lt;/c>.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"action\">The action where the property is set.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyNames\">The property names.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if the property was changed, otherwise &lt;c>false&lt;/c>.&lt;/returns></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span>\n            Func<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> equal<span class=\"token punctuation\">,</span> \n            <span class=\"token class-name\">Action</span> action<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">params</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> propertyNames<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"simple-example\"><a href=\"#simple-example\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simple Example</h1>\n<p>An example of how you can use this base class is as follows.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatCountViewModel</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">NotifyPropertyChanges</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> numberOfCats<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> NumberOfCats\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberOfCats<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">set</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberOfCats<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"performance\"><a href=\"#performance\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance</h1>\n<p>As I said before, performance is king. A slow application is a frustrating application. However, there has always been a problem. When you want to raise a property changed event, you have to pass in a string. We can't check the validity of the string at compile time, only at runtime. So we can get errors due to typos etc. which can get overlooked.</p>\n<p>There are a lot of implementations of <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChanged</a> that use reflection or expression trees and as <a href=\"http://blog.quantumbitdesigns.com/2010/01/26/mvvm-lambda-vs-inotifypropertychanged-vs-dependencyobject\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> and <a href=\"http://blog.amusedia.com/2013/06/inotifypropertychanged-implementation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> blog show, using reflection is a terribly slow method of raising an event and to be avoided.</p>\n<p>Luckily, Microsoft introduced the <a href=\"http://msdn.microsoft.com/en-gb/library/system.runtime.compilerservices.callermembernameattribute.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CallerMemberNameAttribute</a> attribute, which means that as in the above example, we don't need to add a string for the property name, it gets added for us to the last optional parameter in the <code class=\"language-text\">SetProperty</code> method.</p>\n<p>The <code class=\"language-text\">SetProperty</code> method uses the <a href=\"http://msdn.microsoft.com/en-us/library/14akc2c7.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref keyword</a> to pass the parameter by reference (Passing parameters by reference is faster). It then checks to see if the <code class=\"language-text\">numberOfCats</code> parameter is different from the <code class=\"language-text\">value</code> parameter (There is no point raising a property changed event if they are the same). Only then, do we raise a property changed event.</p>\n<h1 id=\"handling-dependent-properties\"><a href=\"#handling-dependent-properties\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Handling Dependent Properties</h1>\n<p>But what about dependent properties. Where one property affects the value of another. Well, lets take a look at another example.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatCounter</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">NotifyPropertyChanges</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> numberOfCats<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> NumberOfCats\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberOfCats<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">set</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberOfCats<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NumberOfCats\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NumberOfCatsDescription\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> NumberOfCatsDescription <span class=\"token operator\">=></span> $<span class=\"token string\">\"{this.NumberOfCats} Cats Counted\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can see, that I've not done anything spectacular and just passed in the strings. As I'm using the <a href=\"http://msdn.microsoft.com/en-us/library/w5zay9db.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">params</a> keyword, you can pass in as many strings as you want and the <code class=\"language-text\">SetProperty</code> method will raise a property changed event for each one.</p>\n<p>If you give me a moment, I will explain why I think this is the right compromise to make. Lets make no mistake, you do need to compromise between performance and simplicity/maintainability. There are approaches which make this eventuality simpler and easier to understand but they can and will degrade performance.</p>\n<p>So does using strings cause problems? First of all, if you use a Visual Studio Add-in like Resharper, this problem is <a href=\"http://blog.jetbrains.com/dotnet/2012/07/24/inotifypropertychanged-support-in-resharper-7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">solved</a> as it checks that the strings match the property name for you. Secondly, as a backup the <code class=\"language-text\">OnPropertyChanged</code> method in the implementation above contains some <code class=\"language-text\">Debug.Assert</code> statements (These are removed in Release mode and have no effect on performance) to check that the property names exist and are correct, if they are not you get a error message. Thirdly, this is fairly rare in my experience and I can deal with the overhead of having a couple of extra strings.</p>\n<p>Again, this is a choice I've made to go with performance over maintainability.</p>\n<h1 id=\"dealing-with-wrapped-objects\"><a href=\"#dealing-with-wrapped-objects\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dealing with Wrapped Objects</h1>\n<p>What if you want to wrap an object that looks like the one below with a class that supports <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChanged</a>? This is a scenario I have not seen many people cover but occurs fairly often in my experience.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatCount</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> Count <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>An example view model for the CatCount class can be found below.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatCountModel</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">NotifyPropertyChanges</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CatCount</span> catCount<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> NumberOfCats\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catCount<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catCount<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">==</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catCount<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So here we are providing the <code class=\"language-text\">SetProperty</code> method with two delegates. We can't use the ref keyword we used earlier because this gives us the compiler error \"A property, indexer or dynamic member access may not be passed as an out or ref parameter\". So we use delegates as an alternative which is not as fast as the ref keyword but almost as fast.</p>\n<p>The first delegate determines if the cat count has actually changed. Only if it has (Remember, executing a delegate is far cheaper than updating the UI), do we call the next delegate which actually sets the value. Finally the <code class=\"language-text\">SetProperty</code> method raises a property changed event.</p>\n<h1 id=\"using-reactive-extensions-rx-to-replace-the-propertychanged-event\"><a href=\"#using-reactive-extensions-rx-to-replace-the-propertychanged-event\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Reactive Extensions (Rx) to Replace the PropertyChanged Event</h1>\n<p>C# events are old school. Reactive Extensions (Rx) provides a cleaner and far more powerful drop-in replacement for C# events. I'm not going to go over the advantages of Reactive Extensions here but you can take a look at a series of blog posts I've done in the <a href=\"/reactive-extensions-part1-replacing-events/\">past</a>.</p>\n<p>We can hide the <code class=\"language-text\">PropertyChanged</code> C# event by explicitly implementing the interface (Click <a href=\"http://stackoverflow.com/questions/143405/c-sharp-interfaces-implicit-implementation-versus-explicit-implementation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> for details on implicit versus explicit implementations of interfaces).</p>\n<p>The <code class=\"language-text\">PropertyChanged</code> C# event can still be accessed by first casting the object to <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChanged</a>. Binding in XAML languages, which uses this interface continues to work. Our new Reactive Extensions (Rx) observable event called <code class=\"language-text\">WhenPropertyChanged</code> of typeÂ <code class=\"language-text\">IObservable&lt;string&gt;</code> (The string is the property name) is now the default method of subscribing for property changed events and we've hidden away the old C# event.</p>\n<h1 id=\"implementing-inotifypropertychanging\"><a href=\"#implementing-inotifypropertychanging\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implementing INotifyPropertyChanging</h1>\n<p>Take another look at the title of this paragraph, it says <a href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanging%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChang<strong>ing</strong></a> and not <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChang<strong>ed</strong></a>.</p>\n<p>This interface has a single event called <code class=\"language-text\">PropertyChang**ing**</code> and is raised <strong>before</strong> a property is about to be changed. This interface is not actually used by any XAML framework but does complement the <code class=\"language-text\">INotifyPropertyChanged</code> interface and can be useful in your view models when you want to know that a property is about to change and do something about it.</p>\n<p>Given that we've written a base class, it is super easy to include it too. You should note that this interface only exists in the full .NET Framework and Silverlight. It does not exist on Windows Store or Windows Phone platforms.</p>\n<p>As we are writing a base class for a Portable Class Library (PCL), I've commented it out. However, if I were to create a full .NET or Silverlight class library, I would definitely put that code back in.</p>\n<p>If you find the interface useful and you too are using a Portable Class Library (PCL), you could take a copy of the <code class=\"language-text\">INotifyPropertyChanging</code> interface and include it with your base class. If Microsoft ever decide to include it into the PCL, you simply need to remove your class and use the one in the framework.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusions</h1>\n<p>I have gone through many iterations to get to this base class. As I've shown, I've had very particular goals in mind. Your mileage may vary but I believe with the tools Microsoft have given us, this is a good compromise and covers all the scenarios I can think of. I'd be very interested if anyone has any comments or thoughts on improvements. Feel free to sound-off in the comments.</p>\n","heroImage":"/images/hero/MVVM-1366x768.png"}},"context":{}}