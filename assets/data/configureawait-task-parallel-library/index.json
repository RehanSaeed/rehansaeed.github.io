{"hash":"ecef954a7b0e192b2374a4fe0d9b35dbd7ade147","data":{"post":{"title":"ConfigureAwait in Task Parallel Library (TPL)","path":"/configureawait-task-parallel-library/","date":"2014-02-07T00:00:00+00:00","dateModified":null,"timeToRead":2,"author":"Muhammad Rehan Saeed","headings":[],"tags":[{"id":".NET","title":".NET","path":"/tag/net/"},{"id":"C#","title":"C#","path":"/tag/c/"},{"id":"ConfigureAwait","title":"ConfigureAwait","path":"/tag/configure-await/"},{"id":"HttpClient","title":"HttpClient","path":"/tag/http-client/"},{"id":"Task Parallel Library","title":"Task Parallel Library","path":"/tag/task-parallel-library/"},{"id":"ThreadPool","title":"ThreadPool","path":"/tag/thread-pool/"},{"id":"Threads","title":"Threads","path":"/tag/threads/"},{"id":"TPL","title":"TPL","path":"/tag/tpl/"}],"description":"The importance of using ConfigureAwait when using the Task Parallel Library (TPL) to improve performance and reduce context switching.","content":"<p>The Task Parallel Library in conjunction with the <code class=\"language-inline-text\">async</code> and <code class=\"language-inline-text\">await</code> keywords are great but there are some subtleties which you should consider. One of these is the use of the ConfigureAwait method.</p>\n<p>If I wanted to get a list of the titles of the new posts from my RSS feed I could write the following code:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetBlogTitles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Current Thread = UI Thread</span>\n    <span class=\"token class-name\">HttpClient</span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// GetStringAsync = ThreadPool Thread</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> rss <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://rehansaeed.com/feed/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Current Thread = UI Thread</span>\n    <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> blogTitles <span class=\"token operator\">=</span> XDocument<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>rss<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Descendants</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Elements</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Current Thread = UI Thread</span>\n    <span class=\"token keyword\">return</span> blogTitles<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">UpdateUserInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Current Thread = UI Thread</span>\n    <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> blogTitles <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetBlogTitles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Current Thread = UI Thread</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ListBox<span class=\"token punctuation\">.</span>ItemsSource <span class=\"token operator\">=</span> blogTitles<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If I was to call this method, then the entire method would execute on the calling thread except the bit where we call <code class=\"language-inline-text\">GetStringAsync</code> which would go off and do its work on the ThreadPool thread and then we come back onto the original thread and do all our XML manipulation.</p>\n<p>Now if this was a client WPF or WinRT application which has a UI thread, all of the XML manipulation we are doing would be done on the UI thread. This is placing extra burden on the UI thread which could mean application freeze ups if the UI thread is being heavily taxed. The solution is simple, we add <code class=\"language-inline-text\">ConfigureAwait(false)</code> to the end of the call we are making to get the RSS XML. So now our new code looks like this:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetBlogTitles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Current Thread = UI Thread</span>\n    <span class=\"token class-name\">HttpClient</span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// GetStringAsync = ThreadPool Thread</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> rss <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://rehansaeed.com/feed/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Current Thread = ThreadPool Thread</span>\n    <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> blogTitles <span class=\"token operator\">=</span> XDocument<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>rss<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Descendants</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Elements</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Current Thread = ThreadPool Thread</span>\n    <span class=\"token keyword\">return</span> blogTitles<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">UpdateUserInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Current Thread = UI Thread</span>\n    <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> blogTitles <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetBlogTitles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Current Thread = UI Thread</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ListBox<span class=\"token punctuation\">.</span>ItemsSource <span class=\"token operator\">=</span> blogTitles<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So now all our XML manipulation is done on the <code class=\"language-inline-text\">ThreadPool</code> thread along with the HTTP GET we are doing using the <code class=\"language-inline-text\">HttpClient</code>. Notice however, that when we return the blog titles to the calling method we are back on the UI thread. Each time you do an <code class=\"language-inline-text\">await</code>, the default behaviour is to continue on the thread we started with. By adding <code class=\"language-inline-text\">ConfigureAwait(false)</code>, we are overriding this behaviour to continue on whatever thread the Task was running on.</p>\n<p>For more on the Task Parallel Library (TPL) I highly recommend reading <a href=\"http://blogs.msdn.com/b/toub/\" title=\"Stephen Toub&#x27;s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stephen Toub's</a> blog.</p>\n","heroImage":"/images/hero/Microsoft-.NET-1366x768.png"}},"context":{}}