{"hash":"f8240c5433bfc4eccb11016d49c83c683efb477f","data":{"post":{"title":"Reactive Extensions (Rx) – Part 4 – Replacing Timers","path":"/reactive-extensions-part4-replacing-timers/","displayDate":"11 March 2014","date":"2014-03-11T00:00:00+00:00","timeToRead":3,"author":"Muhammad Rehan Saeed","headings":[{"value":"Existing .NET Timers"},{"value":"Reactive Extensions (Rx) Timers"},{"value":"Conclusions"}],"tags":[{"id":".NET","title":".NET","path":"/tag/net/"},{"id":"C#","title":"C#","path":"/tag/c/"},{"id":"Reactive Extensions","title":"Reactive Extensions","path":"/tag/reactive-extensions/"},{"id":"Rx","title":"Rx","path":"/tag/rx/"},{"id":"Timer","title":"Timer","path":"/tag/timer/"}],"description":"You should definitely consider using Reactive Extensions (Rx) is as a direct replacement for .NET Timers. This post will explain how.","content":"<ul>\n<li><a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) - Part 1 - Replacing C# Events</a></li>\n<li><a href=\"/reactive-extensions-part2-wrapping-events/\">Reactive Extensions (Rx) - Part 2 - Wrapping C# Events</a></li>\n<li><a href=\"/reactive-extensions-part3-naming-conventions/\">Reactive Extensions (Rx) - Part 3 - Naming Conventions</a></li>\n<li><a href=\"/reactive-extensions-part4-replacing-timers/\">Reactive Extensions (Rx) - Part 4 - Replacing Timers</a></li>\n<li><a href=\"/reactive-extensions-part4-awaiting-observables/\">Reactive Extensions (Rx) - Part 5 - Awaiting Observables</a></li>\n<li><a href=\"/reactive-extensions-part6-task-toobservable/\">Reactive Extensions (Rx) - Part 6 - Task ToObservable</a></li>\n<li><a href=\"/reactive-extensions-part7-sample-events/\">Reactive Extensions (Rx) - Part 7 - Sample Events</a></li>\n<li><a href=\"/reactive-extensions-rx-part-8-timeouts/\">Reactive Extensions (Rx) - Part 8 - Timeouts</a></li>\n</ul>\n<p>Reactive Extensions (Rx) is a huge library. In this series of blog posts I've tried to illustrate real world applications where using Rx can significantly improve and/or simplify your code. So far I've talked about using Rx to replace standard C# events and also wrapping C# events with observables.</p>\n<p>In this post I'm going to talk about another area where Rx provides a nicer API surface, as compared to an existing .NET API. In particular, I'm talking about the .NET Timers. There are a few different timers available in the .NET framework. The main ones being <a href=\"http://msdn.microsoft.com/en-us/library/system.threading.timer%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">System.Threading.Timer</a> and <a href=\"http://msdn.microsoft.com/en-us/library/system.timers.timer%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">System.Timers.Timer</a>. Each one has their pros and cons but I'm not going to go into which ones are better as that's a whole <a href=\"http://stackoverflow.com/questions/1416803/system-timers-timer-vs-system-threading-timer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">other conversation</a>.</p>\n<h1 id=\"existing-net-timers\"><a href=\"#existing-net-timers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Existing .NET Timers</h1>\n<p>Below is a very simple example of how to use the <code class=\"language-text\">System.Timers.Timer</code> (<code class=\"language-text\">System.Threading.Timer</code> is very similar). We new-up a <code class=\"language-text\">Timer</code> with the number of milliseconds we want to timer to raise it's <code class=\"language-text\">Elapsed</code> event, register for the <code class=\"language-text\">Elasped</code> event and finally start the timer.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">StartTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Timer</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    timer<span class=\"token punctuation\">.</span>Elapsed <span class=\"token operator\">+=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>OnTimerElapsed<span class=\"token punctuation\">;</span>\n    timer<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnTimerElapsed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElapsedEventArgs</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do Stuff Here</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>SignalTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Console WriteLine Prints</span>\n    <span class=\"token comment\">// 11/03/2014 10:58:35</span>\n    <span class=\"token comment\">// 11/03/2014 10:58:40</span>\n    <span class=\"token comment\">// 11/03/2014 10:58:45</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"reactive-extensions-rx-timers\"><a href=\"#reactive-extensions-rx-timers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reactive Extensions (Rx) Timers</h1>\n<p>Now here is how to do almost the exact same thing with Reactive Extensions. In this scenario we use the <code class=\"language-text\">Interval</code> method to specify the timer interval and simply subscribe to the observable. The only difference is that we don't get a <code class=\"language-text\">DateTime</code> with the time of the timer elapsed event but an integer representing the number of times the timer elapsed delegate has been fired (Much more useful in my opinion, as you can always derive the time from this number).</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">StartTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Observable\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Interval</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>\n            x <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Do Stuff Here</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// Console WriteLine Prints</span>\n                    <span class=\"token comment\">// 0</span>\n                    <span class=\"token comment\">// 1</span>\n                    <span class=\"token comment\">// 2</span>\n                    <span class=\"token comment\">// ...</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But that's not all, Reactive Extensions provides another method which can be quite useful. In the example below which looks almost exactly the same, we use the <code class=\"language-text\">Timer</code> method instead of <code class=\"language-text\">Interval</code>. This method only calls the timer elapsed delegate once.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">StartTimerAndFireOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Observable\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>\n            x <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Do Stuff Here</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// Console WriteLine Prints</span>\n                <span class=\"token comment\">// 0</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">Timer</code> method has lots of overloads which you can take a look at. The example below calls the timer elapsed delegate every five seconds but only starts to do so, after a minute has passed.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">StartTimerInOneMinute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Observable\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>\n            x <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Do Stuff Here</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// Console WriteLine Prints</span>\n                <span class=\"token comment\">// 0</span>\n                <span class=\"token comment\">// 1</span>\n                <span class=\"token comment\">// 2</span>\n                <span class=\"token comment\">// ...</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The final thing you need to know about the <code class=\"language-text\">Interval</code> and <code class=\"language-text\">Timer</code> methods is that they can optionally take an <code class=\"language-text\">IScheduler</code> as a final parameter. This allows the timer elapsed delegate to be run on any thread of your choosing. In the example below we are subscribing the event on the WPF UI thread. There are several other <code class=\"language-text\">Scheduler</code>'s you can use, so just take a look.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">StartTimerOnUIThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Observable\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Interval</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> DispatcherScheduler<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>\n            x <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Do UI Stuff Here</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>If you haven't started using Reactive Extensions yet, then here is yet another reason to get going. What I have not shown in this post is the shear superhuman power you get when you use the Linq methods to modify your observable just before you make the call to <code class=\"language-text\">Subscribe</code>.</p>\n","cover_image":"/images/hero/Reactive-Extensions-1366x768.png"}},"context":{}}