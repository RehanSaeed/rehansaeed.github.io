{"hash":"49a10f75bf64fbcd5df32c5aec7ce8d0128aff05","data":{"post":{"title":"Reactive Extensions (Rx) - Part 2 - Wrapping C# Events","path":"/reactive-extensions-part2-wrapping-events/","date":"2014-02-13T00:00:00+00:00","dateModified":null,"timeToRead":3,"author":"Muhammad Rehan Saeed","headings":[{"value":"Wrapping an EventHandler C# Event"},{"value":"Wrapping an EventHandler C# Event"},{"value":"Wrapping a Custom Event Handler C# Event"},{"value":"Hiding Existing Events Using Explicit Interface Implementation"},{"value":"Summing Up"}],"tags":[{"id":".NET","title":".NET","path":"/tag/net/"},{"id":"C#","title":"C#","path":"/tag/c/"},{"id":"Events","title":"Events","path":"/tag/events/"},{"id":"Explicit Interface Implementation","title":"Explicit Interface Implementation","path":"/tag/explicit-interface-implementation/"},{"id":"INotifyPropertyChanged","title":"INotifyPropertyChanged","path":"/tag/i-notify-property-changed/"},{"id":"Reactive Extensions","title":"Reactive Extensions","path":"/tag/reactive-extensions/"},{"id":"Rx","title":"Rx","path":"/tag/rx/"}],"description":"Reactive Extensions IObservable wrappers for C# events and hiding the C# events entirely from subscribers using explicit interface implementations.","content":"<ol>\n<li><a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) - Replacing C# Events</a></li>\n<li><a href=\"/reactive-extensions-part2-wrapping-events/\">Reactive Extensions (Rx) - Wrapping C# Events</a></li>\n<li><a href=\"/reactive-extensions-part3-naming-conventions/\">Reactive Extensions (Rx) - Naming Conventions</a></li>\n<li><a href=\"/reactive-extensions-part4-replacing-timers/\">Reactive Extensions (Rx) - Replacing Timers</a></li>\n<li><a href=\"/reactive-extensions-part5-awaiting-observables/\">Reactive Extensions (Rx) - Awaiting Observables</a></li>\n<li><a href=\"/reactive-extensions-part6-task-toobservable/\">Reactive Extensions (Rx) - Task ToObservable</a></li>\n<li><a href=\"/reactive-extensions-part7-sample-events/\">Reactive Extensions (Rx) - Sample Events</a></li>\n<li><a href=\"/reactive-extensions-rx-part-8-timeouts/\">Reactive Extensions (Rx) - Timeouts</a></li>\n</ol>\n<p>Sometimes it is not possible to replace a C# event with a Reactive Extensions (Rx) event entirely. This is usually because we are implementing an interface which has a C# event and we don't own the interface.</p>\n<p>However, as I'll show in this post, its possible to create <code class=\"language-inline-text\">IObservable&lt;T></code> wrappers for C# events and even to hide the C# events entirely from consumers of the class.</p>\n<p>The method of wrapping C# events depends on the type of event handler used. Below are the three type of event handler and the method of wrapping them with an observable event.</p>\n<h1 id=\"wrapping-an-eventhandler-c-event\"><a href=\"#wrapping-an-eventhandler-c-event\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wrapping an EventHandler C# Event</h1>\n<p>The <code class=\"language-inline-text\">FromEventPattern</code> method is used to wrap the event. Notice we have to specify delegates for subscribing (<code class=\"language-inline-text\">+=</code>) and unsubscribing (<code class=\"language-inline-text\">-=</code>) to the event.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">EventHandler</span> BunnyRabbitsAttack<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IObservable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span> WhenBunnyRabbitsAttack\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Observable\n            <span class=\"token punctuation\">.</span><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">(</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"wrapping-an-eventhandlert-c-event\"><a href=\"#wrapping-an-eventhandlert-c-event\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wrapping an EventHandler<T> C# Event</h1>\n<p>This example is much the same as the last, except we have to deal with the event arguments. The <code class=\"language-inline-text\">FromEventPattern</code> method returns an <code class=\"language-inline-text\">EventPattern&lt;T></code> object, which contains the sender and the event arguments. We're only interested in the contents of the event arguments, so we use a Select to return just the <code class=\"language-inline-text\">BunnyRabbits</code> property.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">EventHandler<span class=\"token punctuation\">&lt;</span>BunnyRabbitsEventArgs<span class=\"token punctuation\">></span></span> BunnyRabbitsAttack<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IObservable<span class=\"token punctuation\">&lt;</span>BunnyRabbits<span class=\"token punctuation\">></span></span> WhenBunnyRabbitsAttack\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Observable\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>BunnyRabbitsEventArgs<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">.</span>BunnyRabbits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"wrapping-a-custom-event-handler-c-event\"><a href=\"#wrapping-a-custom-event-handler-c-event\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wrapping a Custom Event Handler C# Event</h1>\n<p>Some C# events use a custom event handler. In this case we have to specify the type of the event handler as a generic argument in the <code class=\"language-inline-text\">FromEventPattern</code> method.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">BunnyRabbitsEventHandler</span> BunnyRabbitsAttack<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IObservable<span class=\"token punctuation\">&lt;</span>BunnyRabbits<span class=\"token punctuation\">></span></span> WhenBunnyRabbitsAttack\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Observable\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>BunnyRabbitsEventHandler<span class=\"token punctuation\">,</span> BunnyRabbitsEventArgs<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">.</span>BunnyRabbits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"hiding-existing-events-using-explicit-interface-implementation\"><a href=\"#hiding-existing-events-using-explicit-interface-implementation\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hiding Existing Events Using Explicit Interface Implementation</h1>\n<p>The disadvantage of the above approach is that we now have two ways to access our event. One with the old style C# event and the other with our new Reactive Extensions event. With a bit of trickery we can hide the C# event in some cases.</p>\n<p>The <code class=\"language-inline-text\">INotifyPropertyChanged</code> interface is very commonly used by XAML developers. It has a single event called <code class=\"language-inline-text\">PropertyChanged</code>. To hide the <code class=\"language-inline-text\">PropertyChanged</code> C# event we can explicitly implement the interface (Click <a href=\"http://stackoverflow.com/questions/143405/c-sharp-interfaces-implicit-implementation-versus-explicit-implementation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> for details on implicit versus explicit implementations of interfaces). Secondly, we wrap the event as we did before.</p>\n<p>Now the <code class=\"language-inline-text\">PropertyChanged</code> C# event can only be accessed by first casting the object to <code class=\"language-inline-text\">INotifyPropertyChanged</code> (Binding in XAML languages, which uses this interface continues to work). Our new Reactive Extensions observable event is now the default method of subscribing for property changed events.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NotifyPropertyChanges</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">INotifyPropertyChanged</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">event</span> <span class=\"token return-type class-name\">PropertyChangedEventHandler</span> INotifyPropertyChanged<span class=\"token punctuation\">.</span>PropertyChanged\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">add</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">+=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">remove</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">-=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">PropertyChangedEventHandler</span> propertyChanged<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IObservable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> WhenPropertyChanged\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Observable\n                <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>PropertyChangedEventHandler<span class=\"token punctuation\">,</span> PropertyChangedEventArgs<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n                    h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                    h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">.</span>PropertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged<span class=\"token punctuation\">?.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PropertyChangedEventArgs</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"summing-up\"><a href=\"#summing-up\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summing Up</h1>\n<p>So it may not always be possible to get rid of, dare I say it legacy C# events but we can certainly wrap them with Reactive Extension observables and even hide them altogether.</p>\n","heroImage":"/images/hero/Reactive-Extensions-1366x768.png"}},"context":{}}