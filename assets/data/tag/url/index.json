{"hash":"f03eb2be0e3dd19edae43df01bb279dadab6d9b7","data":{"tag":{"title":"URL","path":"/tag/url/","belongsTo":{"edges":[{"node":{"title":"ASP.NET Core Hidden Gem - QueryHelpers","path":"/asp-net-core-hidden-gem-queryhelpers/","date":"14 July 2018","timeToRead":1,"description":"How to build a URL containing dynamic query arguments using the ASP.NET Core QueryHelpers.AddQueryString method. A hidden gem in ASP.NET Core.","content":"<p>I discovered a hidden gem in ASP.NET Core a couple of weeks ago that can help to build up and parse URL's called <code class=\"language-text\">QueryHelpers</code>. Here's how you can use it to build a URL using the `AddQueryString<code class=\"language-text\"></code> method:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">var</span> queryArguments <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">Dictionary</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token string\">\"static-argument\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>someFlagIsEnabled<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    queryArguments<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dynamic-argument\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">string</span> url <span class=\"token operator\">=</span> QueryHelpers<span class=\"token punctuation\">.</span><span class=\"token function\">AddQueryString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/example/path\"</span><span class=\"token punctuation\">,</span> queryArguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice that there are no question marks or ampersands in sight. Where this really shines is when you want to add multiple arguments and then need to write code to work out whether to add a question mark or ampersand.</p>\n<p>It's also worth noting that the values of the query arguments are URL encoded for you too. The type also has a <code class=\"language-text\">ParseQuery</code> method to parse query strings but that's less useful to us as ASP.NET Core controllers do that for you.</p>\n<p>Finally, .NET also has a type called <code class=\"language-text\">UriBuilder</code> that you should know about. It's more geared towards building up a full URL, rather than a relative URL as I'm doing above. It has a <code class=\"language-text\">Query</code> property that you can use to set the query string but it's only of type string, so much less useful than <code class=\"language-text\">QueryHelpers.AddQueryString</code>.</p>\n"}}]}}},"context":{}}