{"hash":"9e2831ca93f0faade8bef7d0e87e3959ff79f775","data":{"tag":{"title":".NET Core","path":"/tag/net-core/","belongsTo":{"edges":[{"node":{"title":"A Simple and Fast Object Mapper","path":"/a-simple-and-fast-object-mapper/","date":"05 March 2019","timeToRead":9,"description":".NET Boxed mapper is an object to object mapper that is simpler and faster than Automapper and makes zero allocations of memory, thus making the garbage collector do less work.","content":"<p>I have a confession to make...I don't use <a href=\"https://github.com/AutoMapper/AutoMapper\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Automapper</a>. For those who don't know Automapper is the number one object to object mapper library on NuGet by far. It takes properties from one object and copies them to another. I couldn't name the second place contender and looking on NuGet, nothing else comes close. This post talks about object mappers, why you <strong>might</strong> not want to use Automapper and introduces a faster, simpler object mapper that you <strong>might</strong> want to use instead.</p>\n<h1 id=\"why-use-an-object-mapper\"><a href=\"#why-use-an-object-mapper\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Why use an Object Mapper</h1>\n<p>This is a really good question. Most of the time, it boils down to using Entity Framework. Developers want to be good citizens and not expose their EF Core models in the API surface area because this can have really bad security implications (See overposting <a href=\"https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/implementing-basic-crud-functionality-with-the-entity-framework-in-asp-net-mvc-application\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>).</p>\n<p>I've received a lot of comments at this point in the conversation saying \"Why don't you use <a href=\"https://github.com/StackExchange/Dapper\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dapper</a> instead. Then you don't need model classes for your data layer, you can just go direct to your view model classes via Dapper\". Dapper is really great, don't get me wrong but it's not always the right tool for the job, there are distinct disadvantages to using Dapper instead of EF Core:</p>\n<ol>\n<li>I have to write SQL. That's not so bad (You should learn SQL!) but it takes time to context switch and you often find yourself copying and pasting code back and forth from SQL Management Studio or <a href=\"https://docs.microsoft.com/en-us/sql/azure-data-studio/what-is?view=sql-server-2017\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Azure Data Studio</a> (I've started using it, you should too). It just makes development a bit slower, that's all.</li>\n<li>EF Core can be run in-memory, making for very fast unit tests. With Dapper, I have to run functional tests against a real SQL Server database which is slow, brittle and a pain to setup. Before each test, you need to ensure the database is setup with just the right data, so your tests are repeatable, otherwise you end up with flaky tests. Don't underestimate the power of this point.</li>\n<li>EF Core Migrations can automatically generate the database for me. With Dapper, I have to use external tools like Visual Studio Database Projects, <a href=\"https://dbup.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DbUp</a> or <a href=\"https://flywaydb.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flyway</a> to create my database. That's an extra headache at deployment time. EF Core lets you cut out the extra time required to manage all of that.</li>\n<li>EF Core Migrations can automatically handle database migrations for me. Migrating databases is hard! Keeping track of what state the database is in and making sure you've written the right <code class=\"language-text\">ALTER TABLE</code> scripts is extra work that can be automated. EF Core handles all that for me. Alternatively, Visual Studio Database Projects can also get around this problem.</li>\n<li>I can switch database provider easily. Ok...ok...nobody does this in the real world and I can only think of one case where this happened. People always mention this point though for some reason.</li>\n<li>EF Core defaults to using the right data types, while on the other hand human beings...have too often chosen the wrong data types and then paid the penalties later on when the app is in production. Use <code class=\"language-text\">NVARCHAR</code> instead of <code class=\"language-text\">VARCHAR</code> and <code class=\"language-text\">DATETIMEOFFSET</code> instead of <code class=\"language-text\">DATETIME2</code> or even <code class=\"language-text\">DATETIME</code> people! I've seen professional database developers make these mistakes all the time. Automating this ensures that the correct decision is made all the time.</li>\n<li>EF Core is not that much slower than using Dapper. We're not talking about orders of magnitude slower as it was with EF6. Throwing away all of the above benefits for slightly better speed is not a trade-off that everyone can make though, it depends on the app and situation.</li>\n</ol>\n<p>You need to use the right tool for the right job. I personally use Dapper, where there is an existing database with all the migrations etc. already handled by external tools and use EF Core where I'm working with a brand new database.</p>\n<h1 id=\"what-is-good-about-automapper\"><a href=\"#what-is-good-about-automapper\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What is good about Automapper?</h1>\n<p>Automapper is great when you have a small project that you want to throw together quickly and the objects you are mapping to and from have the same or similar property names and structure.</p>\n<p>It's also great for unit testing because once you've written your mapper, testing it is just a matter of adding a one liner to test that all the properties in your object have a mapping setup for them.</p>\n<p>Finally if you use Automapper with Entity Framework, you can use the ProjectTo method which uses the property mapping information to limit the number of fields pulled back from your database making the query a lot more efficient. I think this is probably the biggest selling point of Automapper. The alternative is to write your own Entity Framework Core projection.</p>\n<h1 id=\"what-is-wrong-with-automapper\"><a href=\"#what-is-wrong-with-automapper\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What is wrong with Automapper?</h1>\n<p>Cezary Piatek writes a <a href=\"https://cezarypiatek.github.io/post/why-i-dont-use-automapper/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">very good rundown</a> of some of the problems when using Automapper. I'm not going to repeat what he says but here is a short description:</p>\n<ol>\n<li>In the real world, mapping between identical or similar classes is not that common.</li>\n<li>If you have similar classes you are mapping between, there is no guarantee that they will not diverge, requiring you to write increasingly complex Automapper code or rewriting the mapping logic without Automapper.</li>\n<li>Finding all usages of a property no longer works when using Automapper unless you explicitly map every property, lowering discoverability.</li>\n<li>\n<p>If you have a complex scenario, <a href=\"https://jimmybogard.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jimmy Bogard</a> (the author of the tool) <a href=\"https://jimmybogard.com/automapper-usage-guidelines/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">suggests not using Automapper</a>:</p>\n<ul>\n<li>\"DO NOT use AutoMapper except in cases where the destination type is a flattened subset of properties of the source type\"</li>\n<li>\"DO NOT use AutoMapper to support a complex layered architecture\"</li>\n<li>\"AVOID using AutoMapper when you have a significant percentage of custom configuration in the form of Ignore or MapFrom\"</li>\n</ul>\n</li>\n<li>If you're mapping from database models to view models in an API, then dumping your database schema out as JSON makes for a bad API. You usually want more complex nested objects.</li>\n<li>How much time does it really save? Object mapping code is the simplest code a developer can write, I can do it without thinking and knock a few mappings out in a couple of minutes.</li>\n<li>Automapper is complex, it has a massive <a href=\"https://automapper.readthedocs.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">documentation</a> site just to show you how to use it and just checkout the 29 point list of <a href=\"https://jimmybogard.com/automapper-usage-guidelines/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">guidelines</a> on how to use it. Why should copying values from one object to another need to be so complex?</li>\n</ol>\n<h1 id=\"a-simple-and-fast-object-mapper\"><a href=\"#a-simple-and-fast-object-mapper\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A Simple and Fast Object Mapper</h1>\n<p>I wrote an object mapper library that consists of a couple of interfaces and a handful of extension methods to make mapping objects slightly easier. The API is super simple and very light and thus fast. You can use the <a href=\"https://www.nuget.org/packages/Boxed.Mapping/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boxed.Mapping</a> NuGet package or look at the code at on GitHub in the <a href=\"https://github.com/Dotnet-Boxed/Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dotnet-Boxed/Framework</a> project. Lets look at an example. I want to map to and from instances of these two classes:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MapFrom</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> BooleanFrom <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DateTimeOffset</span> DateTimeOffsetFrom <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> IntegerFrom <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> StringFrom <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MapTo</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> BooleanTo <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DateTimeOffset</span> DateTimeOffsetTo <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> IntegerTo <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> StringTo <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The implementation for an object mapper using the .NET Boxed Mapper is shown below. Note the <code class=\"language-text\">IMapper</code> interface which is the heart of the .NET Boxed Mapper. There is also an <code class=\"language-text\">IAsyncMapper</code> if for any reason you need to map between two objects asynchronously, the only difference being that it returns a <code class=\"language-text\">Task</code>.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoMapper</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IMapper</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MapFrom</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MapTo</span> destination<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        destination<span class=\"token punctuation\">.</span>BooleanTo <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>BooleanFrom<span class=\"token punctuation\">;</span>\n        destination<span class=\"token punctuation\">.</span>DateTimeOffsetTo <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>DateTimeOffsetFrom<span class=\"token punctuation\">;</span>\n        destination<span class=\"token punctuation\">.</span>IntegerTo <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>IntegerFrom<span class=\"token punctuation\">;</span>\n        destination<span class=\"token punctuation\">.</span>StringTo <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>StringFrom<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And here is an example of how you would actually map a single object, array or list:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsageExample</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IMapper</span> mapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DemoMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MapTo</span> <span class=\"token function\">MapOneObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MapFrom</span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> MapTo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">MapArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span><span class=\"token function\">MapArray</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span> <span class=\"token function\">MapList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span><span class=\"token function\">MapList</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I told you it was simple! Just a few convenience extension methods bundled together with an interface that makes it just ever so slightly quicker to write object mapping than rolling your own implementation. If you have more complex mappings, you can compose your mappers in the same way that your models are composed.</p>\n<h1 id=\"performance\"><a href=\"#performance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Performance</h1>\n<p>Keeping things simple makes the .NET Boxed Mapper fast. I put together some benchmarks using <a href=\"https://github.com/dotnet/BenchmarkDotNet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Benchmark.NET</a> which you can find <a href=\"https://github.com/Dotnet-Boxed/Framework/tree/master/Benchmarks/Boxed.Mapping.Benchmark\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>. The baseline is hand written mapping code and I compare that to Automapper and the .NET Boxed Mapper.</p>\n<p>I even got <a href=\"https://stackoverflow.com/questions/46500630/how-to-improve-performance-of-c-sharp-object-mapping-code\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a bit of help from the great Jon Skeet himself</a> on how to improve the performance of instantiating an instance when using the generic new() constraint which it turns out is pretty slow because it uses <code class=\"language-text\">Activator.CreateInstance</code> under the hood.</p>\n<h2 id=\"object-to-object-mapping-benchmark\"><a href=\"#object-to-object-mapping-benchmark\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Object to Object Mapping Benchmark</h2>\n<p>This benchmark measures the time taken to map from a <code class=\"language-text\">MapFrom</code> object to the <code class=\"language-text\">MapTo</code> object which I show above.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 1024' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ee36e7cf070b15bb61938aa9d2168ff2'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ee36e7cf070b15bb61938aa9d2168ff2)' width='1024' height='1024' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAABACAIAAAAlC%2baJAAAACXBIWXMAAAsSAAALEgHS3X78AAAH4UlEQVRo3u1aa1Mb5xWW7XG%2b9b800%2blMp7%2biHzJNZ5q2SdvYARIgxi6m09aeTtN0nE79pW4mqSObiw3YAxiwoYAkJCQsc0sQtUFadOWmve%2b7N61Wq0vP7guKMMgIF2OU0ZmHHSQ9e3Se97y3o3dthRIzDCMUDGqalk6nZVkWRbS1tUVRdCaTgXckSUqlNMPIEERIFM3/U6rKcayqpuBThJAky2QySdNMNpslSTIajSmWpVSFIAjwo6XgDpXnObhufwVChf/PbKUv4Au%2b/OKLwcHBgf4%2bu93ucDpHRkbb2zs62jt6uru7Ojt7e%2b85XZP3ertv3W4fGh52OBzDQ4Ojo6P2r252dnbOzi2MjowA/5bdPjQ4COS73T09Pb0P%2bu7b7bfAwPO9%2b/f7%2bgfGx8f7%2bvrAodPpOkoB%2bXwemj9ltZO2bWn4Y1mWpmn4hGGYjY2NrGEAR9d1%2bCiT0SE/kBycN3w70KB1gQB3KbKM3wcDKk5XxvxHxU4g7dmDDAKrSABQeUgwGMtyDGNeLQgch3geCQIv8NBV4L1SA3nbd%2b0YL2zbc%2b%2bzJbeU3l70wJYxEFypAGBD%2bzEI0ZJUBCWKcOUEBC1KMwcbsHCIldFNw9GX%2b/QwAoDOcsg1Lt25Ld27I/V2YcjdHcLyU1oQmMpiwgKYiu0oBdA8r9z4h37%2bF%2bnmc%2bnG35poel%2bv/xVyO2lJZijqpAtgeF6%2beSN94QOt7WPtcpOJtub0xQbk80BHOukCwA0jCPKX/4Tm11qbtN99ZKK1MX2hTvR5YHJhrf59oJUO0Ers6AYxzsB%2bApDXXQUZqAmoCagJqAl4LQLwdi%2bXy%2bGVuJoE4NCBtLyyQlGUuZwgpPx7/4WMVRTO%2brIDDRYm2I1yFdverWupwZb7gAwoqgouYId%2bhCsxBHTcK3FuZzNXhWOgNgvVBLx6AbzXnRRFEoymi6CrRYB2oc6YnjJU1WBZg%2bcxsjwvsSx98gWkWhuNlrr%2bkYdXovG/rYT%2bGiQAnwaJqyshz/oGaKCORUDespcRoLY2Flrq3%2brqsnn8Zxwem3MKcMbltY27PwkSkIfknq50fBmAoIGBlZUrKbGAt%2b/esXlnzrq8pyd9gLNuH8j4jAhnBYG0In7VJSVFkj6vN5kki3sfU4Asia5JdyUZ%2bKklwGz4SR/gDAhwTF0LrRrHlYH1raT3ycwWuVsABJ1IJGAbd/IF5L6ezd/vKqwn4IWh69sCFFn%2bz9hY/oRnAIfbebPw85/k/b7AajhMEDgPNkkUXa7JE96FdCsDo/NzV%2b90PUskzFCtLmNmAPrP4mKgKgS8s0zYxiZvbCbZSHja749EoqYA/GN3VQjoTlK/WQ7NiVIhayBRTKVSh1sHXvsgftFKDLMQDIhcbv964KTMQvn83qOO7ZISyrGlQADWCLOM2lNSlhEwDQJgIcshRD135nH8JSVkQNd1GA/muldmJd5XAGSg3Ep8gkrKKhgDVT%2bIawJqAmoCvisCOGsdqGwhMyuya%2bUrsiNcBw5eyL47AmpjoDIBwN8N3PhVIoDjaUl%2bDpwkV4MAoHE8Fwkj1wSadGzD7USOMfT1HE7Bc3idAqBfUwyzCxRFS5LgdZsPkLTUpS98YKKlXv/wPfVf12nIDGjcjeMSYIVbCpiDdEFIc9wusAwrSfz0lNZSbz5D0toIUC83FVrq3Nev/XD%2bmx/NLmD8eHbhzZn5d5eeHk7At9vp3U%2brqG3NhUsf/qz7rs03%2b4ZVCQDe8Dy2Ob2fmQI4ci3BloBbS9Draz2xhD0Su72DW5FYRzgaE5D42KtdbNDamrFzBZxfbOj/%2b6fQKKegdSychqvD84Mn87TVkSoSAKVZRtdxQaPcuK6f/2W6%2bXy68X1AqulcoeHXb7XfNn8bnXCDa8AZ55RtzPUXIpwnk/LvP9Za6rRLDYDUpQbjYj19uel7j8ZsDu%2bpCY9twoOvZyfcj1lO83m0%2bvfSTeewcxWc17/b98kVm8t3yjFls3AaruPu7/vnaOuZtwMEFKvKza0tc0HheeT3SUP90siQ9GgQID4aTD180L2w0EqErwZDfwoSgCtB4vJKaHJzS2UYNDosDQ9IDx9gyMMD/MjQteWVP4ZWr1rMK9Ytfw4SEY6XVgkRyJZny/lQengg4Hb9IbSKPWPnbSuhzyPRSktKLAN45uCDeRmJtKwUQckypahpScqZhwNc1joZAOR2zgdKySZfkhlFzSJkcN%2bSs9aRAmd10VLPcCVlRVQU8GbxuaLz9M48dpi90M7PyuZ5sAXEcyISRKtK5xACwFQIVTzG9qHxDhlDQghBrBaZhrloh0zhybXEuSiYD0OCc4QEXhQ5Ydct9M5vBZVuJYqHCEXDXStp2fr6Ok3TSZJU1dReZpFvGBlgAj8WiyXJpJHNFvL7k/O5HBBI0txJra6uxuMJmGYpmtZLjjP2PdR4kYC9RlNULBqDmBLxeDAYjEQiiqK8gA8Cnj17Fo/H19bWEmtrup4pz81vbGxEIxGQGotGQQP4j0ajmfLt/TICDmvQX5cC3zx%2bAuZ3OByHimb/brAnyaUvbS/h7UC%2bLEnRaCwQCITD4dwL%2bYd1fhwZeGnD0UNZsLS0tLm5GQmHoTtBV4RWePr0v/AyEFiKRKMw6cH7MOMDB0aa7ZUGdKgWxWSIa3xsbHFxccGy2dnZ6enpJ37//Nycz%2bubmZmB6CG3MPbj5tCJ/w/EelmB1GJwYQAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1024\" alt=\"Simple object to object mapping benchmark\" data-srcset=\"/assets/static/Boxed.Mapping-Object-Benchmark-1024x1024.82a2fbd.6d9d2acc31b5e3f38a87bc0efb2b5240.png 480w, /assets/static/Boxed.Mapping-Object-Benchmark-1024x1024.cbab2cf.6d9d2acc31b5e3f38a87bc0efb2b5240.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/Boxed.Mapping-Object-Benchmark-1024x1024.cbab2cf.6d9d2acc31b5e3f38a87bc0efb2b5240.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Boxed.Mapping-Object-Benchmark-1024x1024.cbab2cf.6d9d2acc31b5e3f38a87bc0efb2b5240.png\" width=\"1024\" alt=\"Simple object to object mapping benchmark\"></noscript></p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Runtime</th>\n<th align=\"right\">Mean</th>\n<th align=\"right\">Ratio</th>\n<th align=\"right\">Gen 0/1k Op</th>\n<th align=\"right\">Allocated Memory/Op</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Baseline</td>\n<td>Clr</td>\n<td align=\"right\">7.877 ns</td>\n<td align=\"right\">1.00</td>\n<td align=\"right\">0.0178</td>\n<td align=\"right\">56 B</td>\n</tr>\n<tr>\n<td>BoxedMapper</td>\n<td>Clr</td>\n<td align=\"right\">25.431 ns</td>\n<td align=\"right\">3.07</td>\n<td align=\"right\">0.0178</td>\n<td align=\"right\">56 B</td>\n</tr>\n<tr>\n<td>Automapper</td>\n<td>Clr</td>\n<td align=\"right\">264.934 ns</td>\n<td align=\"right\">31.97</td>\n<td align=\"right\">0.0277</td>\n<td align=\"right\">88 B</td>\n</tr>\n<tr>\n<td>Baseline</td>\n<td>Core</td>\n<td align=\"right\">9.327 ns</td>\n<td align=\"right\">1.00</td>\n<td align=\"right\">0.0178</td>\n<td align=\"right\">56 B</td>\n</tr>\n<tr>\n<td>BoxedMapper</td>\n<td>Core</td>\n<td align=\"right\">17.174 ns</td>\n<td align=\"right\">1.84</td>\n<td align=\"right\">0.0178</td>\n<td align=\"right\">56 B</td>\n</tr>\n<tr>\n<td>Automapper</td>\n<td>Core</td>\n<td align=\"right\">158.218 ns</td>\n<td align=\"right\">16.97</td>\n<td align=\"right\">0.0279</td>\n<td align=\"right\">88 B</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"list-mapping-benchmark\"><a href=\"#list-mapping-benchmark\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>List Mapping Benchmark</h2>\n<p>This benchmark measures the time taken to map a List of <code class=\"language-text\">MapFrom</code> objects to a list of <code class=\"language-text\">MapTo</code> objects.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 1024' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-8ae5e080913ceb797a12c53ee487f0ff'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-8ae5e080913ceb797a12c53ee487f0ff)' width='1024' height='1024' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAABACAIAAAAlC%2baJAAAACXBIWXMAAAsSAAALEgHS3X78AAAIjUlEQVRo3u1a%2b1NbxxWWCXb%2blv7SRzqTttOpp39Cf25p2k4NduryahJje6aJPZ2p0yZ2M8EpyaQthkA6QWAZkA2yjXhIqiQeMgIa0FsCpPt%2bPwUS9Nx7kSyEAGFMLFzOfLOzV3vu3v12zzl7dO%2baNrdLLBalaSadTouiyPM8iqAIgsiyDL8IggA/bmxsrIIkk6qqSKJIUZQkyYqiCroQBJHSmlSe4yRJEnguFAphOKHIMlzSujK0gibHcpvPQ0yFF9lMZui%2b9auent7evs7OzsFBq8Ph6O7q%2bvTTto6OTrO512q1DvTfsw0Pt7V9dt9q7TX3mM09Dx4MWSyWjo4OUHY6nXfu/Ku19XZfb5/b7b7zz8/b73S0t7cPDPSbzea7FstDmw06/%2bKLLrvd/vwJgKytrcF8i5KkqDBrinFJUSSCojCFUI9Go4ouab0JptOoSPoqgUAdw3FYPU0butAF%2boHbdd01ox/QXF9fz5QnsOzlEoAHkyQJa00RBEWSUNIkydCUBoahaZplWSihHdQoXYoqdIEmlROSKlY26nnJ91lSgHa5BOCpOI4TNA1z%2bBQcj3E8xXEkQWit%2bwnoGAMlyhZj9Lu1lkdAXyaWYXCYP980393O93TzX3VpgEpXO%2bd2EixLlEEA5EUQ0IWjaUwQuUFLuu4XalOd2nBOQ1NduvbnQnc7LogEhlUiAfAqmqEhuoGB46LIDVvVpvPK1WblcqOGq83AQTB/SQoiqZvHvqI7A02WLYf1AfDd5UQCQg0DvUgyDwQaarWhX6rXcLlRrT8nmrshjFP6bO0rMCBwZapsMfx%2bt1aIV2WbEAMmJHBDgzsJCD3dBGxVlWlCT6MQfULghMD/NwFwYlyUuCFrSQKVG0ZPTKgCCBgp68vgA8eSQDab1bug2N1TCSBQualENrvBciw882kyVzIKiS8mCp3kQicETgi8FKnEhi4v3Qpk1tdB41gQwFDU5XAgCJrPGzQCiizZ7XbYyCqfwAqScng8KXQ7gWw2s7y8fCwIZH2TG%2bauzdUEXKyn01sERIEfHrZV%2bkZmDLfzH5s1P9v0OOdC4XAwaKyDiefY0bExWA8USWEoRpOV%2bFrFWIGh6alr3V3/TSSgnsmZjCmRiM/656AG93MgDKPlQkOVlQuldQI1i0GTbfSTJEJGwk63OxKJagRUVS0MUpVpQgaBf6PYb78OTHH8Zmad5ThZlku93D1JJY4wCm1s7PzUcZILPZsTA8PtoHd8szmS1yqkIJAYVvTsA68AjJ9hi6B9/jkePgANySS1ML8N83NMKHSEBMSWxs2mui8/b/vuk4Wz3pkfT/oAZyd93/FMX18MiBSJlUkAx3GWpZ/MKC2NyuWmLVxpVt66KN2%2btftyHpqA0NKw2Xz%2b/U8%2bNo27qx%2bPm0YmANV2h%2bnhaM3snExRGF4%2bAY72TStv/155Jwd4RFOd9PEHxHP5yFdyIzMI3Px7q8nhPW13VI06AWfGXKbH42/45xUgQByQgDFuAy0NSvN5qfVDnIAAQWxD%2bQQymUwqlUJSSMlPTAaBD3UCr8DEjzoB1VsEFtIMQ5SZCwErXmCe%2bHYSUFtvSgxTBDGXHe3/WgX2B0EUFEXR3wsVh9E9CPzSv6DCLTvCIqWnNyWiJ8fTvplCAnJLQ7r5AvHRX%2b0rq4V4vLLqTqYOHEb3MKFdCGgmhAIHli0EwXGwCsUflUuZkASdv/Wm/cb102MuwBm9fBU6tztf80xjsO08LyfebQWAADHvp6e99MxkHoxvik6livcs4LMLgZEb141uT%2bkl%2bJhpxPFtzxT6TRAgSf7WDeUPFzRrzlv2pfrzw7Yf%2bOZ%2bOjlzdspn4CfeGTuKyU9mpLIJYN88AflSvQrDulT//bv3TGOuqlzY1fBozLyaSs/6xKMjUDIX2seJKUoj0LyNAJQ/tPSbJtzVubCrjck%2bYUkhaX/5BKYxPR68gBWA8nWdQFVOX8PIxN2ktgLHwIROCBySwPbTKsKVJnjGrbbbJufkmVHnK2MuwKvj/4EB/cog8Lf3lbd/p1yB5KxRhtRVL390b8Dk8JzO6QNO2R1bBICqcQ7mcqMEnb9z0f6XPxk61Xp5Wt8HvnegfSCrn05jaQqXJN56L11XAxxgHQBiY93mhTf%2b/NFNLZl7NAYTD6iGqGKz18xqG5lw47r65q/Vxjpt3Rpq0w21ckPta%2bY%2b06irKqev4eGoOYmsQRitP2f0DJCg84u/eXTtqqFzSi%2brdOVvubxomU4MQ49GI4nlZYZmSI5jFub5/j7%2bwQB/vx/APhhYG7g77nK2BCPvLQbeXQoCri0FW74O9MSXBZpmx0f4QUte38Bn/rkrgdB7urKBPy4GZnFCiMe5AjWoK4OWJfvjdws04a6ri4Hb4SikhHSZx21AKZvNshyHw18W7e2QhAtiHoh%2baDRL0%2bsUlaEBNAAuJZKEbAHn%2bEJlMEJcFNc4LkORhmYeLChTVKEmJoioILKilNnRuZrLZw/gA8apReO8ogFIKTmG4Yw3ZywLIMBPSNIAYZxCLNAHbOkzmjIMN6%2bM5c8sFmiC18Hmw7IMDemT0X/uFjynfoCPfBvbRdvaOA7DMBRFV5NJSLmhwnH8Ts28gDUiCALK0UgEQzFFVfdQht5w/T9qKBSKx%2bO4/j9AUYpvOcDB1yIyUDIsE4tF4/FYMpkMBINLS0swJYUvuIsE7DAQCESj0UQivrKyKgjCHo%2bAPmOxWCQSicVjwVBoKbAEzzIIPOPJ3UOKwSoYCIza7W63xzkxQVLMHmz36Gc3KWo1PUN3%2b%2brLshwJh/1%2bP5R7T2fJ8R3q7PQLFGP0EDTn5ubAtCLhSDQaA8cIh8MLCwthfUbAMiHoQQnuCDopBDEd3WjAGQ40o4YyjMtms836/T7fDIjX63W5XB63Z2pqyulwTnq9MHpggiBoHLwnFv8fdIX37cBobVcAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1024\" alt=\"List to list mapping benchmark\" data-srcset=\"/assets/static/Boxed.Mapping-List-Benchmark-1024x1024.82a2fbd.227210f035fe80b53fca1ce1c9f6923b.png 480w, /assets/static/Boxed.Mapping-List-Benchmark-1024x1024.cbab2cf.227210f035fe80b53fca1ce1c9f6923b.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/Boxed.Mapping-List-Benchmark-1024x1024.cbab2cf.227210f035fe80b53fca1ce1c9f6923b.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Boxed.Mapping-List-Benchmark-1024x1024.cbab2cf.227210f035fe80b53fca1ce1c9f6923b.png\" width=\"1024\" alt=\"List to list mapping benchmark\"></noscript></p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Runtime</th>\n<th align=\"right\">Mean</th>\n<th align=\"right\">Ratio</th>\n<th align=\"right\">Gen 0/1k Op</th>\n<th align=\"right\">Allocated Memory/Op</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Baseline</td>\n<td>Clr</td>\n<td align=\"right\">1.833 us</td>\n<td align=\"right\">1.00</td>\n<td align=\"right\">2.0542</td>\n<td align=\"right\">6.31 KB</td>\n</tr>\n<tr>\n<td>BoxedMapper</td>\n<td>Clr</td>\n<td align=\"right\">3.295 us</td>\n<td align=\"right\">1.80</td>\n<td align=\"right\">2.0523</td>\n<td align=\"right\">6.31 KB</td>\n</tr>\n<tr>\n<td>Automapper</td>\n<td>Clr</td>\n<td align=\"right\">10.569 us</td>\n<td align=\"right\">5.77</td>\n<td align=\"right\">2.4872</td>\n<td align=\"right\">7.65 KB</td>\n</tr>\n<tr>\n<td>Baseline</td>\n<td>Core</td>\n<td align=\"right\">1.735 us</td>\n<td align=\"right\">1.00</td>\n<td align=\"right\">2.0542</td>\n<td align=\"right\">6.31 KB</td>\n</tr>\n<tr>\n<td>BoxedMapper</td>\n<td>Core</td>\n<td align=\"right\">2.237 us</td>\n<td align=\"right\">1.29</td>\n<td align=\"right\">2.0523</td>\n<td align=\"right\">6.31 KB</td>\n</tr>\n<tr>\n<td>Automapper</td>\n<td>Core</td>\n<td align=\"right\">3.220 us</td>\n<td align=\"right\">1.86</td>\n<td align=\"right\">2.4872</td>\n<td align=\"right\">7.65 KB</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"speed\"><a href=\"#speed\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Speed</h2>\n<p>It turns out that Automapper does a really good job on .NET Core in terms of speed but is quite a bit slower on .NET Framework. This is probably down to the intrinsic improvements in .NET Core itself. .NET Boxed is quite a bit faster than Automapper on .NET Framework but the difference on .NET Core is much less at around one and a half times. The .NET Boxed Mapper is also very close to the baseline but is a bit slower. I believe that this is due to the use of method calls on interfaces, whereas the baseline mapping code is only using method calls on concrete classes.</p>\n<h2 id=\"zero-allocations\"><a href=\"#zero-allocations\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Zero Allocations</h2>\n<p>.NET Boxed has zero allocations of memory while Automapper allocates a small amount per mapping. Since object mapping is a fairly common operation these small differences can add up over time and cause pauses in the app while the garbage collector cleans up the memory. There seems to be a trend I've seen in .NET for having zero allocation code. If you care about that, then this might help.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>What I've tried to do with the .NET Boxed Mapper is fill a niche which I thought that Automapper was not quite filling. A super simple and fast object mapper that's just a couple of interfaces and extension methods to help you along the way and provide a skeleton on which to hang your code. If Automapper fits your app better, go ahead and use that. If you think it's useful, you can use the <a href=\"https://www.nuget.org/packages/Boxed.Mapping/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boxed.Mapping</a> NuGet package or look at the code at on GitHub in the <a href=\"https://github.com/Dotnet-Boxed/Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dotnet-Boxed/Framework</a> project.</p>\n"}},{"node":{"title":"Is ASP.NET Core now a Mature Platform?","path":"/is-asp-net-core-now-a-mature-platform/","date":"18 December 2018","timeToRead":9,"description":"ASP.NET Core a large developer base, a large number of GitHub projects, StackOverflow questions, bloggers and companies who use it. It's a mature platform.","content":"<h1 id=\"update-12012019\"><a href=\"#update-12012019\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Update (12/01/2019)</h1>\n<p>It seems that Damian Edwards (The ASP.NET Core Project Manager) likes this post and agrees with the points I've made! It's great to hear that he's is in alignment with my thoughts and that's a great indication that the pain points of the platform will get solved in the future. Take a look at what he says in the ASP.NET Community Stand-up below:</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/ho-VF2dAszI?start=1299\" frameborder=\"0\" allow=\"accelerometer; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h1 id=\"the-upgrade-train\"><a href=\"#the-upgrade-train\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Upgrade Train</h1>\n<p>I started using ASP.NET Core back when it was still called ASP.NET 5 and it was still in beta. In those early days every release introduced a sea change. The beta's were not beta's at all but more like alpha quality bits. I spent more time than I'd like just updating things to the latest version with each release.</p>\n<p>Compared to the past, updates are moving at a glacial pace. Compared to the full fat .NET Framework though, it's been like moving from a camel to an electric car. When releases do come there is still a lot in each release. If you have a number of micro services using ASP.NET Core, it's not quick to get them all updated. Also, it's not just ASP.NET Core but all of the satellite assemblies built on top of .NET Core that keep changing too, things like Serilog and Swashbuckle.</p>\n<p>What about other platforms? Well, I'm familiar with Node.js and the situation there is bordering on silly. Packages are very unstable and constantly being rev'ed. Keeping up and staying on latest is a constant battle almost every day. Each time you upgrade a package, there is also a danger that you will break something. With .NET Core, there are fewer packages and they are much more stable.</p>\n<p>Overall, things move fast in software development in general and for me that's what keeps it interesting. ASP.NET Core is no exception.</p>\n<h1 id=\"show-me-the-apis\"><a href=\"#show-me-the-apis\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Show me the API's!</h1>\n<p>.NET Core and ASP.NET Core started out very lightweight. There were few API's available. You often had to roll your own code, even for basic features that should exist.</p>\n<p>In today's world, a lot of API's have been added and where there are gaps, the community has filled them in many places. The .NET Framework still has a lot of API's that have not been ported across yet. A lot of these gaps are Windows specific and I'm sure a lot will be filled in the .NET Core 3.0 time frame.</p>\n<p>When I make a comparison with Node.js and take wider community packages into consideration, I'd say that .NET Core has fewer API's. Image compression API's don't even exist on .NET for example. We were late to the party with Brotli compression which was recently added to .NET Core and is soon going to be added to the ASP.NET Core compression middleware, so we'll get there eventually. We have <a href=\"https://github.com/graphql-dotnet/graphql-dotnet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL.NET</a> which is very feature rich but it still lags behind the JavaScript Apollo implementation slightly where it has first party support (Perhaps that comparison is a little unfair as GraphQL is native to Node.js). When I wanted to add Figlet font support to <a href=\"http://colorfulconsole.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Colorful.Console</a> (Figlet fonts let you draw characters using ASCII art), I had to base my implementation off of a JavaScript one. I'm not the only one who translates JavaScript code to C# either.</p>\n<p>With all this said, Node.js and JavaScript in general has it's own unique problems, otherwise I'd be using it instead of being a mainly .NET Core developer.</p>\n<h1 id=\"its-open-sauce\"><a href=\"#its-open-sauce\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>It's Open Sauce</h1>\n<p>Making .NET Core and ASP.NET Core open source has made a huge difference. We'd all occasionally visit the .NET Framework docs to understand how an API worked but today the place to go is GitHub where you can not only see the code but read other peoples issues and even raise issues of your own. There is often someone who has been there and done it all before you.</p>\n<p>Not only that but a huge community has grown up with bloggers and new projects being more commonplace. It cannot be underestimated how much this change has improved a developers standard of living. Just take a look at the brilliant <a href=\"https://discoverdot.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">discoverdot.net</a> site where you can see 634 GitHub .NET projects for all the evidence you need.</p>\n<h1 id=\"feel-the-powa\"><a href=\"#feel-the-powa\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Feel the Powa!</h1>\n<p>ASP.NET Core's emphasis on performance is refreshing. It's doing well in the <a href=\"https://www.techempower.com/benchmarks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TechEmpower benchmarks</a> with more improvements in sight. It's nice to get performance boosts from your applications every time you upgrade your application without having to do any work at all yourself.</p>\n<p>While the platform is miles ahead of Node.js there are newer languages like Go that are also quite nice to write code for but blazing fast too. However, I'm not sure you can be as productive writing Go as with .NET Core. Also, you've got to use the write tool for the job. There are definitely cases where Go does a better job.</p>\n<p>One interesting effort that I've been keeping an eye on for some time now is .NET Native where C# code is compiled down to native code instead of an intermediate language. This means that the intermediate language does not need to be JIT'ed and turned into machine code at runtime which speeds up execution the first time the application is run. A nice side effect of doing this is that you also end up with a single executable file. You get all the benefits of a low level language like Go or Rust with none of the major drawbacks! I've been expecting this to hit for some time now but it's still not quite ready.</p>\n<h1 id=\"security-is-boring-but-important\"><a href=\"#security-is-boring-but-important\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Security is Boring but Important</h1>\n<p>This is a subject that most people have never thought about much. It's trivial for an evil doer to insert some rogue code into an update to a package and have that code running in applications soon after. In fact that's what happened with the <a href=\"https://github.com/dominictarr/event-stream/issues/116\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">event-stream NPM package</a> recently. I highly recommend reading Jake Archibald's post <a href=\"https://jakearchibald.com/2018/when-packages-go-bad/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">\"What happens when packages go bad\"</a>.</p>\n<p>What about .NET Core? Well, .NET is in fairly rare position of having a large number of official packages written by and maintained by Microsoft. This means that you need less third party packages and in fact you can sometimes get away with using no third party dependencies what so ever. What this also means, is that your third party dependencies that you do end up using also have fewer other dependencies in turn.</p>\n<p>NuGet also recently added support for <a href=\"https://blog.nuget.org/20150203/package-signing.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">signed packages</a>, which stops packages from being tampered with between NuGet's server and your build machine.</p>\n<p>Overall this is all about reducing risk. There will always be a chance that somebody will do something bad. I'd argue that there is less of a risk of that happening on the .NET platform.</p>\n<h1 id=\"who-is-using-it\"><a href=\"#who-is-using-it\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Who is using it?</h1>\n<p>Bing.com is <a href=\"https://blogs.msdn.microsoft.com/dotnet/2018/08/20/bing-com-runs-on-net-core-2-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">running on ASP.NET Core</a> and a site doesn't get much bigger than that. StackOverflow is <a href=\"https://nickcraver.com/blog/2018/11/29/stack-overflow-how-we-do-monitoring/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">working on their transition</a> to .NET Core. The <a href=\"https://github.com/OrchardCMS/OrchardCore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Orchard CMS</a> uses .NET Core. Even WordPress and various PHP applications can be run on .NET Core these days using <a href=\"https://www.peachpie.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">peachpie</a>.</p>\n<h1 id=\"whats-still-missing\"><a href=\"#whats-still-missing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What's Still Missing?</h1>\n<p>First of all, let me say that every platform has gaps that are sometimes filled by the community. There are several missing API's that seem obvious to me but have yet to be built or improved enough. Here are a few basic examples of things that could be improved and where maybe the small team of 20 ASP.NET Core developers (Yes, their team is that small and they've done a tremendous job of building so much with so few resources, so they definitely deserve a pat on the back) could perhaps better direct their efforts.</p>\n<h2 id=\"caching-could-be-better\"><a href=\"#caching-could-be-better\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Caching Could be Better</h2>\n<p>The response caching still only supports in-memory caching. If you want to cache to Redis using the IDistributedCache, <a href=\"https://github.com/aspnet/AspNetCore/issues/2603\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bad luck</a>. Even if you go with it and use the in-memory cache, if you're using cookies or the Authorization HTTP header, you've only got more <a href=\"https://github.com/aspnet/AspNetCore/issues/2606\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bad luck</a> as response caching turns itself off in those cases. Caching is an intrinsic part of the web, we need to do a better job of making it easier to work with.</p>\n<h2 id=\"everyone-is-partying-with-lets-encrypt\"><a href=\"#everyone-is-partying-with-lets-encrypt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Everyone is Partying with Lets Encrypt</h2>\n<p>Security is hard! HTTPS is hard! Dealing with certificates is hard! What if you could use some middleware and supply it with a couple of lines of configuration and never have to think about any of it ever again? Isn't that something you'd want? Well, it turns out that Nate McMaster has built a <a href=\"https://github.com/natemcmaster/LetsEncrypt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LetsEncrypt middleware</a> that does just that but he needs some help to <a href=\"https://github.com/natemcmaster/LetsEncrypt/issues/2#issuecomment-426501116\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">persuade his boss</a> to build the feature, so up-vote this <a href=\"https://github.com/aspnet/KestrelHttpServer/issues/2971\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">issue</a>.</p>\n<p>Microsoft seems a bit late to the part, it's also one of the top voted feature requests on <a href=\"https://feedback.azure.com/forums/169385-web-apps/suggestions/15099342-add-support-for-let-s-encrypt-in-the-azure-portal\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Azure's User Voice</a> too.</p>\n<h2 id=\"http2-and-http3\"><a href=\"#http2-and-http3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HTTP/2 and HTTP/3</h2>\n<p>HTTP/2 support in ASP.NET Core is available in 2.2 but it's not battle tested so you can't run it at the edge, wide open to the internet for fear of getting hacked.</p>\n<p>HTTP/3 (<a href=\"https://www.zdnet.com/article/http-over-quic-to-be-renamed-http3/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">formerly named QUIC</a>) support has been talked about and the ground work for it has already been done so that the Kestrel web server can support multiple protocols easily. Lets see hoq quickly we can get support.</p>\n<p>One interesting thing about adding support for more protocols to ASP.NET Core is that most people can't make use of them or don't need to. ASP.NET Core applications are often hidden away behind a reverse proxy web server like IIS or NGINX who implement these protocols themselves. Even using something like Azure App Service means that you run behind a special fork of IIS. So I've been thinking, what is the point? Well, you've could use Kubernetes to expose your ASP.NET Core app over port 80 and get the performance boost of not having to use a reverse proxy web server as a man in the middle. Also, contrary to popular belief, Kubernetes can expose multiple ASP.NET Core applications over port 80 (at least <a href=\"https://stackoverflow.com/questions/53415487/what-are-the-advantages-of-using-kubernetes-ingress-in-azure-aks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Azure AKS can</a>).</p>\n<h2 id=\"serving-static-files\"><a href=\"#serving-static-files\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Serving Static Files</h2>\n<p>Serving static files is one of the most basic features. There are a few things that could make this a lot better. You <a href=\"https://github.com/aspnet/AspNetCore/issues/2457\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">can't use</a> the authorization middleware to limit access to static files but I believe that's changing in ASP.NET Core 3.0. Serving GZIP'ed or Brotli'ed content is a must today. Luckily dynamic Brotli compression will soon be available. What's <a href=\"https://github.com/aspnet/AspNetCore/issues/2458\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">not available</a> is serving pre-compressed static files.</p>\n<h1 id=\"is-it-a-mature-platform\"><a href=\"#is-it-a-mature-platform\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Is It A Mature Platform?</h1>\n<p>There is a lot less churn. There are a lot of open source projects you can leverage. A large enough developer base has now grown up, so you see a lot more GitHub projects, StackOverflow questions, bloggers like myself and companies who make their living from the platform.</p>\n<p>There seems to be a trend at the moment where people are jumping ship from long standing platforms and languages to brand new ones. Android developers have jumped from Java to Kotlin (and have managed to delete half their code in the process, Java is so verbose!). The poor souls who wrote Objective C, have jumped to Swift. Where once applications would be written in C++, they are now written in Go or Rust. Where once people wrote JavaScript, they are still writing JavaScript (TypeScript has taken off but not completely)...ok that has not changed. .NET Core seems to be the only one that seems to have bucked the trend and tried to reinvent itself completely while not changing things too much and still succeeding in the process.</p>\n<p>So yes, yes it is, is my answer.</p>\n"}},{"node":{"title":".NET Boxed","path":"/net-boxed/","date":"13 May 2018","timeToRead":2,"description":".NET Boxed is a set of project templates with batteries included, providing the minimum amount of code required to get you going faster.","content":"<p><a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed</a> is a set of project templates with batteries included, providing the minimum amount of code required to get you going faster. Right now it includes API and GraphQL project templates.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 150 150' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-cea8b7b62fb532e5aa641ae3cca5390f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-cea8b7b62fb532e5aa641ae3cca5390f)' width='150' height='150' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAsSAAALEgHS3X78AAAOaElEQVR42u1aaWwbxxWm5LYo2h9tkT9VkZ/9UaAoAjSJkibyJXFFrmy5PmJblkiJpA7qtmLLV3zEjeMj/VOgQNErCIqiKFo4d9G0aI4mRVsEaJygadIgFrk6uDykWD4kW7YlcV/fm5m9yCW1pCS3QErgYXZnZ2fmffO9Y3bo8fz/5/4XCKVZ2dKW9gTCmYpgOF0RiKR5SfcRXjKJ0HNetkQyrB1/lq7oO5msGDynVgycSTIZPJus6H9SrQh2mP0EI/xd1o/lfT6G/Zo9F3Nr7Zj0tLSmVl75ZtEpKf8/u0AIxqrMsSmQEiDwjvcEUp/DFbgbV74KV6YKV6IK77HMsJIJXvPnmaoWIex5KFPVeyJZhQyoGjyT5HIuWdV3SmV9Ge/q7S0lv6Y25nhC7g60Zb7AlA9xEPYEkyuj/K6mJCHr2blb9YSjkxXCFM4HI5OA9bMocyQ4sTn92qgLZ/LrsF3fE%2brc4Fl1buCMELzuP63OtXZhmxC9l99XEbmOogVCqbd3bJ/4jK58qHvKs6dFXT4AOpKILOu8uS3VFI5eB1QOCARnmbKUU2Z9eApCPZMweDYFg%2bdSvNQF7yMDGQiEpor06ywEQHv3LWgJpY4JU9Dn6tndpC5n9VXd/tnK7w4kv4QrpLZ1TNOgiwx5l4KrqqFtapGBlIb013DlbTL4lKp17EtpLa3YPuK%2bXyFZAqIlnL6Nc/2GUL5y2abQIjwr0nYNv0/9KBKdI%2bXnUUAMDm4FlYOO/bjaT6mASptyWkUGqBA9kgQECUrp0zKHhXDXdWLBH2muoe7JiqYWbr7L9PqpNeJ%2bbWvkE3BA391EI2mmXPdjSaasDQAU9AnQ%2b7haqvJWEDQOwiyOk2q1mW2pYZG8fqgTnUiA06fq8x%2bh40tdCHdeI0UWS139oAWE3pNcWab4WTsA/adUaO0U70Tc9RnkbfW5ZFs7LlGZaQok77Kar65LSauvOxNE8mCke44GWyiH%2boz%2boTSglwf09nmrbwUh1JuCQFvZLGDmSWaK4/2cm29GN193yu/ek/DkOJGv8/DFvG3W4qBKAwCVCvelHelvAIC%2boX0oxf1ApLT%2bg3ZTyLa2TwMuZK3VjJdkwU70%2boiYZ%2bfOhCcUnawUq/9yBMNewGH1g8Xobq1j9p8B9PJFAOC%2boetgkjGA3gm6Na18FiyGOq9iSE2/39h4cY2RG0QnPbubi4TF5mBK9/5rBAv2kFPJCXkFFS1WT6saPZzMjwBWBiAAPceTNPEllbeOFyxqCvbcoOA%2bgUJGjtP4Mr7EY75rx5cpSl1MgU0GnDWd4aDFB2CWCLgpMpzmMiKCJszWyA1adLN2MgV9AxFst8R8dHw4iXkxES03rDneFyhJKdzx2Tx/IWnrTjEWsHcLjVMg1OblBmS%2boTTLDcK9UxVNe1QP7insIDSJGyPmt6VqgkVifrAEuwyK%2bB/qSS%2bpeD%2bVyJDIYMp1QhQsNzcIppwZ4PFspkYXQhTzw6XH/EIOsH0vOcAkc3bFhNp0DqdY1limCdhZEOIRAXXK7Nw1cZd122z8hk7OGKsfbM8cbu/BmN%2beXsBrLDOaKAtK6xLPyDd0HVJh7/cn0AQSaOsJVg6cnTBk8By/pzY9x9APRIr3W2j8nHf0uc9znTJPC8ZX9g5PmwBsaRxjiGzyK1/Ztm18eseOFGzbPpFF0YTAcmTr1nEI772MHn4Wuo/OcDkm5Khdeo7PQMfwFdi%2bA9/dtrxxLfMXkgDU9Zuk63e3jFUaAPi9cQaALClf89XFb/jqFPDVxjW81ny1MbBJXRwlZkptTlmX37Z%2bYwwCXXPQdQAwFwDo3G%2bXDktJbUJ984BzMvuojdvmUF/rME7uHGuN9zQhWVmaoH4fEDqbAMiSDkD8q36vcl2Wxqih5pdQcCJ%2bSQFexnlpFckilnvZeo9lMHoDzQAVHda4HNAcr7sOAoQHboFcr9j7t43pMB%2bnuZnPSI9sQz0D4P5iAFThAwRgVAegcKfeAoNLDs9wtRgAB2mVs6biOdKxX2MMCA/cNgFYGVkCAN0EvASAyQB5JQa3ABA9DAyEQgDQsyiyJNTvEgCpdABkb%2bx%2brmssHwC/N4cBKwKAwuyyrfcmRPbOQ3NkhimZqzyBE%2bi6ztsNLZgmdOcZsMIACGkOX0MPnECHOMKuGQhI%2bU40CbomhvjReTX4RxGka9DgG10lABQBgOLCByyfekZ7mZiApsC9OweBnKKhvJebChNyctJq%2bYBYYQYwE5AKAGDx9nJB71yg3gZE3AhxZA6tuN/Qn8tSAYdaBuA575gASAIAyQaAIkxAWTUTsItiUVph1LetuLTiYwoAEiWGQW8ZYfBOi1SuCcScMkEdgDETAJfKEX0bMHQV895yPbVxeo%2b/21AfzxMWDiVrO70%2b7tBeYVI6A5YZBWhy3g0x2FATY%2blnIRDq1sVg49oYp7xetx7rani9k9SuixntNtSMFGxntM/p3xUA/mXkAaSshEoHmsZhaECFbY0K5urOIHSEJ6CvW4VNPkXsE%2bIQacOdYK8KvdFEnvR1J6CrfYK1a2sZh/6eBPR0mc/7e1TWxto%2b2pEwWSa5zAMMAMrwAZt8cXj4gYvwwvNXgX5vvDbDVjSX6hJuiD784CYsLmqwa/souye58M4NKPa7enWBMeftv1/Pe6Zp2by6W7ey8MhW3r8suQyD%2bQwgH6BoTl7bthlhACgIwAi89MJVYxLnTmdg7XdG2DNZvC9tjFsAGGP30oY4vHuBA/DDH3wCJ09k4PQTk/Dk9zJMzpyahOOPpRmjhgaS2O8kPs/AiaNp%2bNUvL7P3CBhqc/pUhj17/HgaNvuRYY4MsJiA5OQDpFhZDKjJAeDy9ALs2jHG/AJjApmJAGBhwWQAPX/v3TlcSQ12bhuFB%2b%2b9COsfHoF1CN66h0YYiHRPK0n2TffErvvuuQhD/Sob6ze/vgzf/tbH7Dm9tx7fIx8gF/ABsgBAdmKAXBcr0wRG4OWXOABvvTnLylf/NMMm0%2bArYAIbBACMARqEW8eZrTc2KNCIK7hZiG5KDSIKUN3GtSNw5GCKjfPcs1cYSI2yGUVK3wtIiv5BJD8MLpHM5JrAo4Mq/O2v3F5PHEvjSsZYG5sJ7OAm4EUTeO/dG4wBZBYPVXMvv%2bFhITX844Z1XApzpPDhAxyAZ89fMcytWB4gu4kC5WSCOgNeFADsRWo27x5jqzo1NQ/bt4ziBijO7JgBsGD6AK/hAzRm7/v2JuHQcAoO7k%2bxcvjRJFtZKwgMAGTW4WE7AAVWvrTdoH8FACBq3nvPx/Czn1xi92QaZM/U1gBAMIDkwj8KRwFiRiuGP8oBDFNgDIgZDHhOB8CnOO4fZFdhUJiAvyQTsDtBHYCD%2b5NIX67wB/%2b6yeposjUPjsBHH%2bUAIJwg/c6gF89lwP6hJGxp4AzQQ9qmMk3AiAKSQxTwG3uBchig2BhAAGzEuE2r1tOZYHWqeps5w/f/OWcLg9YowHzA/RdZtkcrvL6gD4gvDwBnH6AsbQKWLSbztj67E3zxeRMAmjzZ7lpc9V88My3C1RV4B%2bmezVqdYMxwgqHgOKsjL0996pK7RS4KgFQ2AO5TYZoQ5dvrBc1zfQAHYMRId6l9bOQmc3QzM4tw48YiND0yZskDOADBPeN8n%2bCNG2ky/8zujgF6uC3LCebvBp0B0Dc9lM8fO5K2MeCF5zgAB/ZxAPTdGdGY9ggEAP2uXFkQAPAoQKkwmQU5Oz1xkiW72BnAneAhEQXO/1ZnwCp/E6SJ0GrQBCYn53nI61PBi7ZODu4Pr1wzooAOgM4QMgXK2OhHJtC8a0wkQnH494fcUV66tABTkwssdE5N8etpzChHlVssSyTAaA7kBCmqHD3MAfjdy1fZ%2bO58wAR9cuMA1DnmAUUAMDY1cXjm6Wl4HTc9NDEChahLefpf3pplOz7avOhem0o6ydm6eRReevEqC4ssN6jlucFPf3yJ9fXaqzPwxuuzFpmBN/88C6/8/prRXv8mQFvkzsgEvIXPKXrQ%2bA31SwGgFPsitEQmmONciNbrH4oZq6Ln6mQKeh3LFMWmSWcPrRTR1SdydVn0RfX0bq5QZkjPrGHQ2IJv5OORP8rfeitFwqD4KiwpS%2b0GC4RByfwaI%2bfYJtG90McQRl9fPM9bUz96PRf7dZ5zk6z9KWwuyz4X0PMA9j1AcpkISUvUSy7aFDtek8S2e6l%2bJBdHdFLJYXBslb8K3/EPqqv3SaxckcWZIcV6WbpTAEz8FwGwOTGFnQ41bp6ALVtUdlwmO50EOdTJOQcssiVCyS4YUPSDCMZGuwlIK0dnfaVlcVi6qWGcHZbS2SADodYEQT9CWzEzkVwzILYqDCDF6GDUX8fPBUn58OA8Ow7vOqBBx75FBoIPmUDgNG5OuDscdXtmUXomuLJOkFaUzgAfafqEnf5GUPko/U%2bA/iyBwv44gSA0Ikhbt6cg1E//EBm98z5gVY7HJRMA%2bvdHZO8C/5NEzj9F6Fn70CI7Mid2yCt8OiwbqbB7ALIChOWJRH%2b2imnB6A0tegg0VFZDJXnpIAiOhgzQ5HpFW5HxTXEdBWZFKrkoQFi2IABZBCCLymU79mtZVDRfDvCS2oQHbmeRAdmVGl/IoiyNu/ogsrDJlwIKGQ31qigTuAtTxb1VEhYp8NyHpZSAUO8i9D4G0H3IIodzSpSeI%2bgPhgA2%2bVWHcRM583KqSxSY4wRs9k8W/JucXn4WQbgPafsANqhmUsdLWdzL7F6x1Zli1svimgQ3M9XIgGo0gerO4SyKVo0rbsqwKciAamRANZoA70tSUKxzUGzzMkSyz0d/J0celKXYF8UhkP2/wjoIn4afg/KKUdKfh%2biLKSu9cUNkL69DBog6RdRZRTHaypb3kQGVyIBKZEAlrrJdDtjvkQGVyIBKZADvS8qfgz9v3LiYc27bfNGV/zQteNHffwCNhfydtsQs/QAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"150\" alt=\".NET Boxed Icon\" data-srcset=\"/assets/static/Icon-512x512-150x150.3dd133e.a0ebb8c2e5ea61194b6fd34bce8b1a7d.png 150w\" data-sizes=\"(max-width: 150px) 100vw, 150px\" data-src=\"/assets/static/Icon-512x512-150x150.3dd133e.a0ebb8c2e5ea61194b6fd34bce8b1a7d.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Icon-512x512-150x150.3dd133e.a0ebb8c2e5ea61194b6fd34bce8b1a7d.png\" width=\"150\" alt=\".NET Boxed Icon\"></noscript></p>\n<h1 id=\"aspnet-core-api-boxed\"><a href=\"#aspnet-core-api-boxed\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ASP.NET Core API Boxed</h1>\n<p>The default <a href=\"https://github.com/Dotnet-Boxed/Templates/blob/master/Docs/API.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASP.NET Core API Boxed</a> options will give you an API with <a href=\"https://swagger.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Swagger</a>, ASP.NET Core versioning, HTTPS and much more enabled right out of the box. You can totally turn any of that off if you want to, the point is that it's up to you.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1440' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-e893d7ea09a05ef40bf7d839439ec1a1'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-e893d7ea09a05ef40bf7d839439ec1a1)' width='2560' height='1440' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAIAAAC2bqvFAAAACXBIWXMAAAsSAAALEgHS3X78AAAGE0lEQVRYw82YW2/URhSAt7z0rS/9BX3uv0BVQxGovFRVVfUXVO1LhehFtNCSh760laBSKiQqQOF%2bTUJSyKWkkBsk2U2WvWZv3vXY4%2bv6fhmP486uky0hXsA0LFjfHp89Hnvm%2bMycYztxbCKxnf6pxNdXdvWPvTWw8M7JhXd/u/f2j%2bPE/kZk41j0TyaOjia%2bu7br8FDi6Mibl2a/uHz/4PDit5PZnyKZyB79O/Pzmdk9R%2b4k%2bid2bb9g4kKybzsXV/pOTe%2b98ODjO8XPp8vf33z06bnl984v951PbmX5/cjTn0aqb/DhB2dm95%2be3Te4cGCueHKheHaxMrhSvxhJqn4h3bg%2blTsyuLT7YnLP9gsmPORFst7asIcd5JnY99Z98jcgP99va0Hg45bS7fSn4XkYI4zJHpmuZLqiYYu6LXSHt13NQzjyagkUtWGMGZarUTSRAMAG2UOeomiiiKLEQq5eB5LcpOqM4zjkMi%2b8tYf1PHTtI8IB13XJbV5NZ6fuztz6a/L2%2bN3l5GqVaiwur/xzf345mX6wmBoaGV9cXqUawHbs/zH%2bHdgS3Q7oDhZ0j1dsqDiC6iBMpgx2kUtGTG6Hhz2i%2bOsYeS4xvnYOkOkpSDIDBV6UAeQ5QYKcoBsGGToZruM6hFAhMuS1i4BlWbqhm5YZYpgGueWd4XbjNXKATJIgWPfC9bPJMx14GW54T80SkYu4lYVEUczn8qapkZRHbGSux8J7kfwaAena0HXvBdaAqJolWmZlSzVd3Uaq5ahmPLQdQtZN3XJiOEAWZrDuDmXxodvB4YlgpmhVGxIrI17FrwbNFzXP6TIzo6YQQr6H1kRzmlJm6lpVMqCiQ83iXhGka8mwuy2wqAggN8DBFTj/ZeH0wdK5afZRlQO0IbKWDC25Ix%2bnY4H2S4G3mk6XJBEdgXWM0zy4vpYeLmeyHEvLMlAURlUZNZTb6dgVoDR3Flpp8praLddFOGA7LkmgJ27l%2bo5O7u//e2A0U6VhpszmKmy%2bRhQmX%2bOyZSZbYUOIJVdlCZkSKAOpzmsUp%2b4gNU6lybOAG52vo9MoKQDJnHB5jLo%2bXk/mRA7qNK3SoEWDVkIZKk9YGFZnobGzMKwhiGa3mhPlgI2CAKWO%2b9d3ByP7grWbFrMmKlWk17FOYaP%2bDEibHaaGNdqLjEAXB0ghC1A96S5dQ6khBPKOBO0m9FQeK5wnQ9RrWFcRu1X9bnXAd0fL%2bPBMcGwhmKfsGtMsMWqeEitQ4w2/94iG56DnXwOkDmBUhsb9nDRXVBq8JsuKKKuipEiy2lSM3qNqpvv8DpDHZLII/MyfwdhHwfhnVum2yJSbIMdTGZUt%2blqj59Q9jXGR8/wOuMgP3MaSs3jWSV2yQdYSgM3XLb5hC7QrAVdiNmVPEIGr8HEi4LQigK7ewF99s37osDF9T6zUmoU1PldQShXMMI/BtiRo87jlP2WzQaiD0BIbBDnXjRWBIDBTK%2bKlq/K1G1q%2boHG8xkCVYTWWs3jhSQQxwhhJu6XJ8fGAnCVJMSLQrsT%2b7xOlvb/Ofnh8fmC8UGrAVIlJrdErJZChuEyNe1QlT0jspgLDv%2bkq7BzKUhyhfQiulkGopCtMluKrvBaLCq81RC1uJcbzWfbUSP70WHEhA0kAGoxCsyqRDbYN02zpTEdpbsAqHYUOdbZZBxtHiUKMDKfHAkCdl4wYEQgrcfoPf/RAMP5JUBq2QEECaaW2IrJZrVUXt6LX/O3GrQ22KtWYVLDW8OJFwA9QbcadG3AennJB2pY5UwQtJMZSoNNrWEcVnBgRaL0PIH/Eon4wkv3m6j2FLnFcQeQyLFiTeOAYPYZ2DOjEmkLkfQB5j0x5WGPGNLCmy4KhQV1lNZUzdMmxeozs2k3HivE%2bEH5TIeUb1hlNkFsfYTtfZXv%2bGZHMfMMw2rc1jgMYY0Vp5grFWq3W/vxG1lArvb4KHE03iIzhQPg0OlXGv8wFJx4ESzW7Sks1qHOq90rgNSxqcSLQqgM%2bWmp4g0nv8qqXZx3AK0AwJN3bwNiUL5VOR7rXNGJOodYs8kk9boExClfB46duyJdKp6ONvqId%2bBeCgPNX6x%2bSAwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"2560\" alt=\"ASP.NET Core API Boxed Preview\" data-srcset=\"/assets/static/API-Preview.82a2fbd.0bdb82969eacb3cbc71b95a4fa2c1550.png 480w, /assets/static/API-Preview.cbab2cf.0bdb82969eacb3cbc71b95a4fa2c1550.png 1024w, /assets/static/API-Preview.2665e34.0bdb82969eacb3cbc71b95a4fa2c1550.png 1920w, /assets/static/API-Preview.42db587.0bdb82969eacb3cbc71b95a4fa2c1550.png 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/API-Preview.42db587.0bdb82969eacb3cbc71b95a4fa2c1550.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/API-Preview.42db587.0bdb82969eacb3cbc71b95a4fa2c1550.png\" width=\"2560\" alt=\"ASP.NET Core API Boxed Preview\"></noscript></p>\n<h1 id=\"aspnet-core-graphql-boxed\"><a href=\"#aspnet-core-graphql-boxed\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ASP.NET Core GraphQL Boxed</h1>\n<p>If you haven't read about or learned <a href=\"http://graphql.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL</a> yet, I really suggest you go and follow their short online tutorial. It's got some distinct advantages over standard REST'ful API's (and some disadvantages but in my opinion the advantages carry more weight).</p>\n<p>Once you've done that, the next thing I suggest you do is to create a project from the <a href=\"https://github.com/Dotnet-Boxed/Templates/blob/master/Docs/GraphQL.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASP.NET Core GraphQL Boxed</a> project template. It implements the GraphQL specification using <a href=\"https://github.com/graphql-dotnet/graphql-dotnet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL.NET</a> and a few other NuGet packages. It also comes with a really cool GraphQL playground, so you can practice writing queries, mutations and subscriptions.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1440' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b8112c39fcdb6371db5861693073117b'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b8112c39fcdb6371db5861693073117b)' width='2560' height='1440' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAIAAAC2bqvFAAAACXBIWXMAAAsSAAALEgHS3X78AAAGbElEQVRYw81Yy47jRBTtBQimO04cJy5X4vidOIld5VcSJ7GdB5numWFgGKERArFALGAJK/gQNrPhA1ggxC9yq9yZ7h56mE7HLSEdlcp53lP3nHuvffJINnC4XYT%2bwJiiUaK4sWQHgtrvWbaojTiGgjqoKTbGXnkJa4OvtU7/DNu1bv9RS70Vp%2b3eqdx717uHAn5NVJ224Ypdu4Z0WAVsnNTUUfDq519f7b5Ivg6fvooff2nNn8pulM5DLcj1YNWjedudSjol9lqjBVxqAVvhLcmJGyaV%2bkmtY/0bQtf%2bsNX7QFJrHfvWDxwKoetI%2blC2PVjhx5v6UNTdk6YdiSY9NeOaHQo6BYhWKFqRYIR1IyghmvwVK6ibVxDMoAGfhK/fhqYT1ww63b3YvvxWGqWyv6wEbW/ZHi9kD8A2kp2eNMzQmV8MsyddWgg6qRu0RGO/eQ/gKwz0LQgaEc3gt9e///Hn39ZkK40Wsl/IflYh2iSzv38BBAJIAsuDFcK5wiU/9T0N/sr9UNP85199980PPykk7wZLLUgRqSx65OeiP3/61y8nZZRwWk0raJocnA9AsqO75uEd%2bAgPa06MSKEGC2exw8m54ufyeMnglWt2tYH1AAKZRBbp6x8ZAWkwldxFy1u043XbW4A1m3ZYchAMWqK%2bXw8CZBWOn6UboozOlfhcma6UbItma5Su0XzNNrO1AvvpWplvUFQwJnenkRQgIQqBNkaTNk3xaIqdmWWnXWuiWhPNmvYA9lS3Z3CpWzNkJwfRgNxy87FjVsItTj9Tki3Odspig1ef4GyrhIUc5CjMyxVxtgdgnHEPWJHohAxwZkbQMkMmJCOUDNgwSFCFzEACpV2zx53ACaCSQLTrpC/w9DMcXyhRDhlQJivmCu8aDjcDI8DsCwbwJ2VJua6Zt3CwDUoC7FyXiK5w9gznF0qyQaUTvArczCQEpwsEpGgGHEQ3qh9n3NslxG2gLDe42CpBlfX0KgNSnDajmejGrJA/AAEQksJlU8nB3yAAJoY/g%2bilYAp9rfYQBLwlDjdKsEXBRiGVZgCOnxHQSGMQNdwJ6lM8JI2qVMQIZJiuGA3wQHIuMwK89nvLigjsMwBBN70ZDpNuEje9pG5VLKFLHydPUAi1f4OSjQzmpplMc/nQ6nkzA9wDIBtwM500w1nDieo2jGtVZWBPwFuCfvD8i878czx7gicXKFyh6QqlGyVZHW1iNpZRcRSLrJjSynx8VUb3GYC448fMBuUQUZEHYJAmLBVQTzXyQGX0kgPJFVBRsEIThuMr0lUGgEaFod9KACophtDpmquf474N%2bIYHmhabFPhfkstmrPPWq%2b9RIQFagJAQJ4ACBpiCZHKchFr9pGHHdTOCJlCHCdSJma50yEwgD2i7TyXnxk3CERLKuA2eMgklhVLOobP1kVUolPoTcZxJNG8GCxwXWrLqDRa2Plfd2I59OyKqHzJux2eAFAqTzYIXpX03OM7KjADoB0bRxiCsD6O2E6o2G0VlI4bZ86xHzzR67958Y5QgORigfT1cksmkiioEaEAJGiZ1LvfatdkTRr2GWU0ZhcmZO5iP0BS0lO3zUAUBNk6Tadm89hHfU/fvlFDZyOCeJvoEzXc43SEwdMQR5Mf2gYZBaj2vpnmC5tcvQe7TE6CCab7A6hjb1N8aJVgnftFZvOwkF534MYJClPCGcAwBiB6Dq8ZL5GXIy1veXCRLQH08b47n7PmPcQCNphPLw7TtTku8PU7TQiYrmRSgIuRXJCGpnzjphTN/4i6fDfNPzenO8lPbS7XRVHbhhnimOJPLWeN9gFPvkHxcPO/PLwDO/EK0ozdFBqJHR5TL/5hGaZM9VnnziMpv6b7EAUJqwoDERiP/jgDZMCnuAcosM8AmCFp99HyU6I2QHcgWVZwA98OW4Z/i/llnAKjxtdzcHQLH5b7rMu%2by6IuHiJ4ROMP9ujqEoB9hB/bVAji0x4uHUM4NAoI6lDseQFDdMzy4%2bnuOYwmUfffhCJSJruPBwCKqOe72fKMXar1A7RGkel2VCB33/0MAksnAaxq6TuCs09dNTzfHqj6W1FFXpa3uGI4f1Py/ykDLW0qjRWt8iUsJgY8h0I8Vp8Sp4jziKxjj9EgbVEoAIu7SrD/bGfFaj9ZGtAaDcQ903TfVQziw5rwHUIX4LFQJZD9XSNYNCgxjFck6vBv%2bA%2bVwvObvPzbGAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"2560\" alt=\"ASP.NET Core GraphQL Boxed Preview\" data-srcset=\"/assets/static/GraphQL-Preview.82a2fbd.702b586ec4be2f1e0070d3b5c5fa8625.png 480w, /assets/static/GraphQL-Preview.cbab2cf.702b586ec4be2f1e0070d3b5c5fa8625.png 1024w, /assets/static/GraphQL-Preview.2665e34.702b586ec4be2f1e0070d3b5c5fa8625.png 1920w, /assets/static/GraphQL-Preview.42db587.702b586ec4be2f1e0070d3b5c5fa8625.png 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/GraphQL-Preview.42db587.702b586ec4be2f1e0070d3b5c5fa8625.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/GraphQL-Preview.42db587.702b586ec4be2f1e0070d3b5c5fa8625.png\" width=\"2560\" alt=\"ASP.NET Core GraphQL Boxed Preview\"></noscript></p>\n<p>This is the only GraphQL project template that I'm aware of at the time of writing and it's pretty fully featured with sample queries, mutations and subscriptions.</p>\n<h1 id=\"aspnet-core-boilerplate\"><a href=\"#aspnet-core-boilerplate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ASP.NET Core Boilerplate</h1>\n<p>.NET Boxed used to be called ASP.NET Core Boilerplate. That name was kind of forgettable and there was another great project that had a very similar name. I put off renaming for a long time because it was too much work but I finally relented and got it done.</p>\n<p>In the end I think it was for the best. The new <a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed</a> branding and logo are much better and I've opened it up to .NET project templates in general, instead of just ASP.NET Core project templates.</p>\n<p>Thanks to <a href=\"https://twitter.com/jongalloway\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jon Galloway</a> and <a href=\"https://twitter.com/jfollas\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jason Follas</a> for helping to <a href=\"https://twitter.com/jongalloway/status/991342926067154945\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">work out the branding</a>.</p>\n<h1 id=\"how-can-i-get-it\"><a href=\"#how-can-i-get-it\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>How can I get it?</h1>\n<ol>\n<li>Install the latest .NET Core SDK.</li>\n<li>Run <code class=\"language-text\">dotnet new --install &quot;Boxed.Templates::*&quot;</code> to install the project template.</li>\n<li>Run <code class=\"language-text\">dotnet new api --help</code> to see how to select the feature of the project.</li>\n<li>Run <code class=\"language-text\">dotnet new api --name &quot;MyTemplate&quot;</code> along with any other custom options to create a project from the template.</li>\n</ol>\n<h1 id=\"boxed-updates\"><a href=\"#boxed-updates\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Boxed Updates</h1>\n<p>There are new features and improvements planned on the GitHub <a href=\"https://github.com/Dotnet-Boxed/Templates/projects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">projects</a> tab. ASP.NET Core 2.1 is coming out soon, so look out for updates which you can see in the GitHub <a href=\"https://github.com/Dotnet-Boxed/Templates/releases\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">releases</a> tab when they go live.</p>\n"}},{"node":{"title":"ASP.NET Core Caching in Practice","path":"/asp-net-core-caching-in-practice/","date":"20 October 2017","timeToRead":6,"description":"How to use and implement Cache-Control, Cache-Control Immutable, E-Tag, Last-Modified and If-Modified-Since Caching HTTP headers in ASP.NET Core.","content":"<h1 id=\"cache-control-http-header\"><a href=\"#cache-control-http-header\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cache-Control HTTP Header</h1>\n<p>The <a href=\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cache-Control</a> HTTP header can be used to set how long your resource can be cached for. However, the problem with this HTTP header is that you need to be able to predict the future and know before hand when the cache will become invalid. For some use cases, like writing an API where someone could change the resource at any time that's just not feasible.</p>\n<p>I recommend you read the response caching middleware <a href=\"https://docs.microsoft.com/en-us/aspnet/core/performance/caching/middleware\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">documentation</a>, it's not necessary as I do a quick overview next but the knowledge below builds upon it. The simple way to set the cache control header is directly on the action method like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ResponseCache</span><span class=\"token punctuation\">(</span>Duration <span class=\"token operator\">=</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">,</span> Location <span class=\"token operator\">=</span> ResponseCacheLocation<span class=\"token punctuation\">.</span>Any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">IActionResult</span> <span class=\"token function\">GetCats</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Adding the <code class=\"language-text\">ResponseCache</code> attribute just adds the <code class=\"language-text\">Cache-Control</code> HTTP header but does not actually cache the response on the server. To do that you also need to add the response caching middleware like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IApplicationBuilder</span> application<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    application<span class=\"token punctuation\">.</span><span class=\"token function\">UseResponseCaching</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UseMvc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Instead of hard coding all of your cache settings in the <code class=\"language-text\">ResponseCache</code> attribute, it's possible to store them in the <code class=\"language-text\">appsettings.json</code> configuration file. To do so, you need to use a feature called cache profiles which look like this:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ResponseCache</span><span class=\"token punctuation\">(</span>CacheProfile<span class=\"token operator\">=</span><span class=\"token string\">\"Cache1Hour\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">IActionResult</span> <span class=\"token function\">GetCats</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Startup</span>\n<span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IConfiguration</span> configuration<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token function\">Startup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configuration <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        services\n            <span class=\"token punctuation\">.</span>Configure<span class=\"token operator\">&lt;</span>Dictionary<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> CacheProfile<span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">.</span><span class=\"token function\">GetSection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CacheProfiles\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddMvc</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Read cache profiles from appsettings.json configuration file</span>\n                <span class=\"token keyword\">var</span> cacheProfiles <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configuration<span class=\"token punctuation\">.</span>GetSection<span class=\"token operator\">&lt;</span>Dictionary<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> CacheProfile<span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> keyValuePair <span class=\"token keyword\">in</span> cacheProfiles<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    options<span class=\"token punctuation\">.</span>CacheProfiles<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>keyValuePair<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n    <span class=\"token comment\">// Omitted</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"CacheProfiles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Cache1Hour\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"Duration\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">,</span>\n     <span class=\"token property\">\"Location\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Any\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Omitted...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now all your caching can be configured from a single configuration file.</p>\n<h2 id=\"cache-control-immutable-directive\"><a href=\"#cache-control-immutable-directive\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cache-Control Immutable Directive</h2>\n<p><code class=\"language-text\">Cache-Control</code> also has a new draft directive called <code class=\"language-text\">immutable</code>. When you add this to the HTTP header value, you are basically telling the client that this resource never changes even if it has expired. You might be asking, why do we need this? Well, it turns out that when you refresh a page in a browser, it goes off to the server and checks to see if the resource has expired or not.</p>\n<div class=\"line-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token header-name keyword\">Cache-Control:</span> max-age=365000000, immutable</code></pre></div>\n<p>It turns out that you get a massive reduction in requests to your server by implementing this directive. Read more about it in these links:</p>\n<ul>\n<li><a href=\"https://tools.ietf.org/html/draft-mcmanus-immutable-00\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IETF Draft Spec</a></li>\n<li><a href=\"https://hacks.mozilla.org/2017/01/using-immutable-caching-to-speed-up-the-web/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using Immutable Caching To Speed Up The Web</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cache-Control</a></li>\n<li><a href=\"https://bitsup.blogspot.co.uk/2016/05/cache-control-immutable.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cache-Control: immutable</a></li>\n<li><a href=\"https://code.facebook.com/posts/557147474482256\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">This browser tweak saved 60% of requests to Facebook</a></li>\n</ul>\n<p>This directive has not yet been implemented in ASP.NET Core but I've raised an issue on GitHub <a href=\"https://github.com/aspnet/HttpAbstractions/issues/763\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> and there is also another issue <a href=\"https://github.com/aspnet/ResponseCaching/issues/97\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> to add the immutable directive to the static files middleware. If you really wanted to, it's really easy to add this directive today, as you just need to append the word <code class=\"language-text\">immutable</code> onto the end of your <code class=\"language-text\">Cache-Control</code> HTTP header.</p>\n<p>A word of warning! You need to make sure that your resource really never changes. You can do this in Razor by using the <code class=\"language-text\">asp-append-version</code> attribute on your script tags:</p>\n<div class=\"line-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>~/site.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">asp-append-version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>This will append a query string to the link to site.js which will contain a hash of the contents of the file. Each time the file changes, the hash is changed and thus you can safely mark the resource as immutable.</p>\n<h1 id=\"e-tags\"><a href=\"#e-tags\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>E-Tags</h1>\n<p><a href=\"https://en.wikipedia.org/wiki/HTTP_ETag\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">E-tags</a> are typically generated in three ways (Read the link to understand what they are):</p>\n<ol>\n<li>Hashing the HTTP response body - You'd want to use a very fast and collision resistant hash function like MD5 (MD5 is broken security wise and you should never use it but it's ok to use it for caching). Unfortunately, this method is slow because you have to load the entire response body into memory (which is not the default in ASP.NET Core which streams it straight to the client for better performance) to hash it. If you're still interested in implementing this E-Tags using this method <a href=\"https://madskristensen.net/post/send-etag-headers-in-aspnet-core\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mads Kristensen</a> wrote a nice blog post showing how it can be done.</li>\n<li>Last modification timestamp - The E-Tag can literally be the time the object was last modified which you can store in your database (I usually store created and modified timestamps for anything I store in a database anyway). This solves the performance problem above but now what is the difference between doing this and using the Last Modified HTTP header?</li>\n<li>Revision Number - This could be some kind of integer stored in the database which gets incremented each time the data is modified. I don't see any advantage of doing this over using the last modification timestamp above, unless you have a naturally occurring revision number in your data that you could use.</li>\n</ol>\n<p>One additional thing you need to be careful of is the <code class=\"language-text\">Accept</code>, <code class=\"language-text\">Accept-Encoding</code> and <code class=\"language-text\">Accept-Language</code> HTTP headers. Any time you send a different response based on these HTTP headers, your E-Tag needs to be different e.g. a JSON non-gzip'ed response in Mandarin needs to have a different E-Tag to an XML gzip'ed response in Urdu.</p>\n<p>For option one, this can be achieved by calculating the hash after the response body has gone through GZIP compression. For the second and third options, you would need to append the value of the Accept HTTP headers to the last modified date or revision number and then hash all of that.</p>\n<h1 id=\"last-modified--if-modified-since\"><a href=\"#last-modified--if-modified-since\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Last-Modified &#x26; If-Modified-Since</h1>\n<p>I'm assuming you already know about the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Last-Modified</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">If-Modified-Since</a> HTTP headers. If not, go ahead and read the links. Below is an example controller and action method that returns a list of cats.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[controller]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatsController</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">ControllerBase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ICatRepository</span> catRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ICatMapper</span> catMapper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CatsController</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">ICatRepository</span> catRepository<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">ICatMapper</span> catMapper<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catRepository <span class=\"token operator\">=</span> catRepository<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catMapper <span class=\"token operator\">=</span> catMapper<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">GetCats</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> cats <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catRepository<span class=\"token punctuation\">.</span><span class=\"token function\">GetAll</span><span class=\"token punctuation\">(</span>cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> lastModified <span class=\"token operator\">=</span> cats<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">?</span> \n            <span class=\"token punctuation\">(</span>DateTimeOffset<span class=\"token punctuation\">?</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> \n            cats<span class=\"token punctuation\">.</span><span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>ModifiedTimestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypedHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>LastModified <span class=\"token operator\">=</span> lastModified<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">var</span> requestHeaders <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypedHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>requestHeaders<span class=\"token punctuation\">.</span>IfModifiedSince<span class=\"token punctuation\">.</span>HasValue <span class=\"token operator\">&amp;&amp;</span>\n            requestHeaders<span class=\"token punctuation\">.</span>IfModifiedSince<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">>=</span> lastModified<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">StatusCode</span><span class=\"token punctuation\">(</span>StatusCodes<span class=\"token punctuation\">.</span>Status304NotModified<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">var</span> catViewModels <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catMapper<span class=\"token punctuation\">.</span><span class=\"token function\">MapList</span><span class=\"token punctuation\">(</span>cats<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>catViewModels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All of our cats have a ModifiedTimestamp, so we know when they were last changed. There are four scenarios that this action method handles:</p>\n<ol>\n<li>Our repository does not contain any cats, so just always return an empty list.</li>\n<li>No <code class=\"language-text\">Last-Modified</code> HTTP header exists in the request, so we just return all cats.</li>\n<li><code class=\"language-text\">Last-Modified</code> HTTP header exists and cats have been modified since that date, so return all cats.</li>\n<li><code class=\"language-text\">Last-Modified</code> HTTP header exists but no cats have been modified since that date, so return a 304 Not Modified response.</li>\n</ol>\n<p>In all cases, except when we have no cats at all, we set the Last-Modified date to the latest date than any cat has been modified.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>Which caching HTTP headers you pick, depends on your data but at a minimum, I would add E-Tags or <code class=\"language-text\">Last-Modified</code>. Add <code class=\"language-text\">Cache-Control</code> where possible, usually for static assets.</p>\n"}},{"node":{"title":"Structured Data using Schema.NET","path":"/structured-data-using-schema-net/","date":"02 July 2017","timeToRead":3,"description":"Schema.NET is Schema.org objects turned into strongly typed C# POCO classes for use in .NET.","content":"<h1 id=\"what-is-schemaorg\"><a href=\"#what-is-schemaorg\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What is Schema.org?</h1>\n<p><a href=\"https://schema.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Schema.org</a> defines a set of standard classes and their properties for objects and services in the real world. There are nearly 700 classes at the time of writing defined by schema.org. This machine readable format is a common standard used across the web for describing things.</p>\n<h1 id=\"where-is-schemaorg-used\"><a href=\"#where-is-schemaorg-used\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Where is Schema.org Used?</h1>\n<h3 id=\"websites\"><a href=\"#websites\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Websites</h3>\n<p>Websites can define Structured Data in the head section of their html to enable search engines to show richer information in their search results. Here is an example of how <a href=\"https://developers.google.com/search/docs/guides/intro-structured-data\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google</a> can display extended metadata about your site in it's search results.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 466 710' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-992f88c2ee13a69491769036f62f9e20'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-992f88c2ee13a69491769036f62f9e20)' width='466' height='710' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAABiCAYAAADgDdXjAAAACXBIWXMAAAsSAAALEgHS3X78AAAflklEQVR42uV8B3jj1ZWv92Vfkre8XZaEsFnIS9lN9sGXEJIvJEsLoS1JgGWAhHzU3UAIhJI8AoEAM8wSAiwlMAPDMN0znnHvvXfLtmRbtmR1yZIly1bvvfr3zv2rWJJlzwwZavx9x/92df/3nn7OPfdfsrq6imQy%2bRcLJfF4nDthiPhLAvYXi8VQwv5lbnzk/9g8cmHDZhsg4KNKSe48EccqcXLuJLl7q8mic9sQAR8NQudMPpHIf0YizSDvXjKZN7%2bPNAKKTX41GkGoqQbu3z8Cx903w3HXTXA/9gACFaVI%2bn15SDguAhLUaR5rFb40w0YZmTuFiCv2nsL%2bCycfU8m5SVv%2b9TyCc2G58GspYOcXnQf7lqsQm58rygl5CCicBEMEA2Yhco%2bJdCfJJHuezOqaPxcJhRPPWKa8vjPXydTk4zoNbNddAuul58P6/Qtgv/5yuB//FdxPPgL7Lf/GIcJx541ILC9tjoBk%2boHb5cDExDhWzNZNB%2bt0OIoO/lQhYKO%2b15RY6tr10H/A8j2a/A8ugOfZx5GwWVLEYZOjMXr37UJ0ZYW7jseJiKsbiACHzWgIR4%2bWYXBwEAMDw1Ar5RgaHoXNakF3VzdMZgt4Y6MYGx1BW0sTxCIR%2bIKpzNBOKRIYQcbGxhCJRIogIaXgkvZ2hA5%2bGrYfnQfXrx9Y64QjZuFYCuW/CALs5mWUV9YgFPBj146dOHCgFH293XjiiafB509i69ZtaGrtQnV1Ofa%2btQNbn3oaL7z0ElasKW5I/pkIyHChUqkkAgzAbrev44oU9VMISMgfRWK4BJHaTyOunkh1Eo%2bRiK6iSxRDoyCKZkEYzVNRtMzEUMePQWVO5I11nQh0tbehtLQUx8qr0NnRjrq6ejp2or6%2bHi3NLdi/bx/e2LkDfT1dqKooR21DE4KRaHYCa%2bx58hyRae/3%2b7G0tAQej4doNFoEAamxJkS3ItZRgujY2UgmHNn3RuOr%2bPGrAXxnqx8X/5cf/7rdj0vo%2bPUnfdjVk%2bKoRLJQCeaYiEg4vKYIswovybFRQ20VxvhTx5H9VbxbZsjtz%2bPxZAmTj4AUFRPi2xHpKgGGzgBCS0jTlkPAljcCuOQ5Py7/ox9XvhDAD18OcMh4p28DBHAXkRDmZudgtdqJAnrojSY4iQ2XjXoYV8xw2GwIBEMIEYIsZhMsFjMsViscdhusNjtMKyZ6HvyzOSBjATZUgskYJ8EJzXNATwnaW/8Bg4v9qTkkohzRRIY4JjRRyE0xHByO4LI/pDihYSq2AQdwL0lCKVdgeGgYEpkEwtl5iKZnSNkJwZsQoKutBdNz8zAsGTFJCkpCtlUwIwCfN4TxSSFm%2bHwo1Zp1NvzU%2bwGJlArzzmBvy7k4r%2bJm/FvLA7CHnEX7fKIiTNzg4zhBk9EByXcRDAVDQcQKXMxc5ZXxHd5LjzLrI6T1wGPju/DVsmvxnaqbcF3rA%2bjSj8ISdMAScENgncF9LVW4lFF/WwxP1wSzCvBdBUPrbfFqnhNUTGO/V38ZLR6Jh3F3z5McEi6ouBFfL78BVzTcjWsaf45vVmzBNyqvxbn7foOb3tbB5kmJ5rtGwMlGZ%2b9lLJBCQooLwvEI/iDYje9W/xTnHvsxvkbIYMDOGRLuH3oKywFTnlL/WESDuUhgfwseA44qmjlkbOfvwl5JNYRW2TqL9rELhxlLJ3IQUaxtskhO4GOTEMlVjAkWoOVB8vgpMZYT/NikxE7yj82d44C8cDd9/pcAWRHITLwwH5BpyM5ZOJkBrn36mHvvI4mATFqc/ZnNZgiFQs4Pz020nrBy%2bqiKQEYxDA8PY3Z2FkajEan7qYYapR0ttXLwRvTobNWg%2bsgc%2bAITJGIzhrvV6O1eAH9yJetmfiTXBRiwibe3t0OhUOT5zGq5FSN9izAavBgdXCREGLC46MGSwQ2V1Aa93kPBkf8jlVgtmg9gcuz1ejnWeDdBzUd2ZYhNOKXQ4tnMMDvPvR%2bLxbP32Hn2Oud%2bRpnmQmE/ue0Kn%2bXeL9bXiUDhuzbrlyVcikaDedfH8RKLpayLKdDVE1iq2mi160Tbn%2bz9HB1A8k4YWVk2ElZi2TeHQ6kMSiSd9sr8hQIBBALBNVYiTMbi6Vg7kTGdKbFyOJwIp7NMAfpdLsIDfn827cVSYZzo0aNQMLQeeasZ07yaE4qvFplUlKVj6F1%2bbi6RcCQ9rkR2HkWzwqGAF3UNjWioqUJXTx8OHSjF4b37IZyfR2dnN/j8KXS1NGBwZBqzUxM4fPgYhgZ7sJ%2bO7c311GYAR8qOYmxsCGK5ApXlFZgWTmL/oSOorahHb0cLjlbVoLy0DGMjQzhWWU1WZwjd7c2oqmtBc30d%2bgb60dTegaqyCvR0tWHP/oMQTE5CIppFdUMzWprq0dHRhrIj5XReh7a%2bQcwKRWhraURdczMOHypDZ1s72uhdxyqPobGpFXWNTWhqqIFILEN9YyM8/kAWCXlWgGHI6XTC7rBzlJKIJaTZLVyay%2bfzEfhhtbLrCEcpt8uJUDhE7Z1cHtHjcsFgMBKVUplZRlGP10PghdPhgovaO6mNy%2bGgZwHqywo/vcfv83LpNLVSBbfHiyD1yd7lYWsUNHmH002c4oPV7kAwGIDTboVBv8Qpa5PZBLudxmyzwWhaoTG5uHPGdT7ql1k19g61QgqHy8uNN9fhy%2bOASCRMlGxHX1cn2rt7MTk%2bioH%2bAbS3tEMmmSdKtaCjuwdV1VVcurynbwgyokx3Ty96ewYwStQTTE2jk37b29sPvVaNrr5%2b9Pd1QyyWE7V5GB8dRT%2b176N7/FkpWpubMDA4zL1/YrQfbZ29RM029PV0Y3RiGnLipLHBfkwSV42MzaGLOK27fwg6nQ5j5LMM8cbRwtr39UGr06OfxttPYxwcnuQ4YXhwAC2tHRjoHcDY0CCkSs3G%2bQC21GW12GFZWYFMJoPX48aiVgfdgo6Tp0Wdhl6ig0qlhFIp45KmPuIYhUJFmF4hKhqhX1yEjAa9sKCB22nHArU36BeJSg7MS%2bSw2ezQaBZgXDJAodRS3wv0Di3CEbIq0RBcxAGyeTGU9P5F/TK3AmVZXoLZYsaCRkdtNdxEV5aX6V1aWBwWLK/oCSEqeH12yBUSep%2bW/JJFiEQSLnkrJhHWaRcxPzeL6dn5NAKS6zkgGPRx1BTNCiEkb3BqWkQeoJxb/ZkVzkEsnCGqTEEqU3AdiOeE4E0K6Nk05uVKTp4jZBKtJDajIyOEKBVk5FCJJVKYaMIzc/OYE05hXiqFVCqHVDgBnmAe8yIR3F4ftDTIaT6fQ5RGrSGRUIA3PoHa%2bnriBBnEUgnpFx4MpKgdVsatagx0LWBy1EgIc2KCZwF/wAgB30RiEz85R4i7iEfR092NcVJQYomMlI8QczMCTJLya2lqRmNtDbHcFPoGR0l%2bzeT68tDd20ds1otpwrZgnMetKcrlKlKOA5ji86g9jxAmh4om0DM4Aql4BsPEil3dfRAKRjErUqGhugZzYin3zklqP02IZ/pgkjdGCBaCP8EjUewHb2Kc%2bh0iKsvhdgQxLVihPlYICRoM92gwOGjAeJ%2bOvNRF6PTebMI2A6e0ROZUe7u5meVT7e5ulmbPcYVXszaUeXjMNmd%2bwK6LxXvMxiYLUlG5S9uFkMihRCFlCqm1DgpC7VQfa7CaZN5rzvUJOm95IuAls9PQ0ILa2krS9LVo7eggU%2bTHQIeaZNkOEX8Z0zMr6OsmJWPwEKtpwaPAaGxQj%2blJA%2bkCE4KB%2bKYxQT4l1lMGx/nNRun3Yu1OGgHBgI9bkh4Y6EX/AJkNkjmvx49p3hIpOAMkgmXMzpnIYVGS1me22wOlxErmawlzfAPG6BgOxVO595w1xc0ol6FWsXuZ%2b%2b9FwnZdTvC9lMEPW18bcoDP40JjXRNkSjX0ZL8VdJybncHI8Cg5MiLMi%2bdhNCxicGgUS8smstciyNVaaJi5I1MmkWvIV9DBSp4Y0/zsT8CfxPDIMBrqmjFHZtPjjXMam4mURuUgF9cEtztCXKQnEbJAK7dCrXKRWx7lnk3zV8h7jBxXmRV7vhnnFNcB5FpOjk2gqrYedVWVnH9eU1mJXTt34tDhUs4EmckpaWtpxbFjFWitq0JtUxu6WtswRmaqsqoBTU2NMJJbOzIwiFA0STZeiG7mPVbVgTc6jCUSm54mOZqb1OhoVmGgR01iZSWEO9HTuYD2BjlGB5ewvOSBaJpMXLcOS0b/ukzT8bJOhc83tQLvlQhkosEPUwZoUw4IhwIYJ0/LYrVxXpjJbCY3cwUz07Oc62mmYEOnW6R7JgowWLAShJJY2eMJk7vq4c6tFh8pRx8FO3HEyZTOkdUQzlgoSAlBKbfBbvFDNGOGxRakoCgIs9lPbnKYM2NqpZPcWA/mppe5o0Hvpn5i8LnDFItYSVTCnLg4rX4skRWKxpJw2en31Bd7ZjH5yZuNw%2b%2bNkHhaOEXtsAbJ/Q4d3w9ImUE73njtVex65yB279yB117biYrqCjz/3CsoK92LvXsOoPzQQbzw4osYGhkkdzNEbKtGXY0c42QOJ8eNaKyYR22lDG1tKgQpghwdMKCuQgGFzI66WjlaqlkApED5YQmqj4jR1qgkT1BKUagXrdUK%2bq0CFYdmSUQUOLBfBIFgEUuEiLpjUgy0q1BTq8SRnXwSwXnSVS4MkYmuODhH1zJUHhTRe6xYUFrQ3CBFRZkE3fSuzg7diThCJ8euq8f1vhIn3ucqS0%2blK78Sq3neZjQaSS9qpgbP1h8s5rXKTyZm0XCMwtx4NqeZIei6JX2sbi4CEYqVWeTGWJ%2bVvUTpfmrRJOUZhoJBjvXZeTSSygmoCONMYXl8YQp/nRTVJdjI4CLuYAkivzdM4uOjftjAkuRrRBH0R7mBBugYjcY58NN5ZvKZ7M/J%2buLFJohs0fjq5rXCnAi4XSjd9w5p/IN4%2bb%2bfx1t7DlJ8PYjqyirs2vEa3tpfymWJ3tq1F4cP7IefECYY1qO9ah7TcxbUHJmjCG0BI71qHCkjFpWQHOocqKkjrU/Q20X3ia1rysSQk0hM8ZaJrdVoqZeh6qiE5Np3QusK72bd4fgikPXHE6RQXGTLrTBZrFwGZlYohFKl5mJ1H4WtNlKSVnrGZYaJ4uFQjKOu2xmm5xGKFAPEKTGOYyL0zGEnJeUKw271QSKmPv3sWZyUYIjjAvabZYMXoVD8fVtXKMoBCWJplrA46c6SKZYv/PN5okXbe2nCJ5u9fV8QwHJtpftKcbSqlktQHquswxGm9f/wPMorqlBWdgRavQlahRXDAzo0VskwSv6/iIKglkYF2onNG%2bjYXKdEMBRCXekcamqU6G5XopYsRe1RKbQLdpQfmENTg5LeISUTGslj%2bw%2bQA1Y5pRYJhaFZWIBCLoNGq4dOq4VkXgzdoh4qpZJcWR/ZfB9kUjvMZO%2b1GjvcRFG2UiwXmTFGgZNCYuYQYFnxY0Htho7aTE4sk7tsJV/CD5s5AIslQOc%2bxGOJ95XyGyJg7Ub8A/fSPjARcDvseHvnW6S1G7ja4LqaOvL7G7jq8O6%2bAfLzU3n5%2buY2dDbVoqmxEUePVeFo%2bRFU1zehncUEFPyYjT5yfubR3qYl315Bv9ejhhyVvnYNBgeWMD1hwCTPAKnE/mcVVZ5yBISJ/c3LK%2bDxxsCfmibPboJMmQgLGjUE00Ju6XzfO7sxNimAhOUKJ8bR3tmN6ZlpjE9MktcmoOhQSVo9DJ3ahsE%2bPdRSFhlaKMhawfysiVxpN/kFHixqHFAqHevs8we%2bOvz%2bs%2bKHRAQybJhdOS2oFyosl0lu8rxYhicvX5eb%2bfmwcMCmq8ObJBmKelx5ub31eb71cv%2bh4IDU6qmW5N0XCKYdoxjFBstkHpMfuNZ%2bX5Sgy2HD26%2b9hCpyhNiqakX5Qbz%2b%2bh5yjg6jrr6WQs4qeIPhjwUSiucEvR4YFrXkuztJ44%2bgb6CHNDzF7GT2mpqbyctrhtsX2HDRIZ7Mh%2bPm7dI7PLNQUMhcvP9kClgNwia7zPLeU7D9rujK0MlYgePpi%2bM9O5Xtk5u0Xy2Y0%2brxiqVzt6osW7zoH1/AsGARncMqDPN1iERjG4aVTooKe4xBDC4H0b0UQC%2bde6ObUJRc5XBPO0It9RyE25uQsJo3bM/qDbrJt6iTmNBKsUgtHbXO4MZIyBR9edwIq%2bQnvnc4nk5k1nXJ8E9X7cQ3rtuNx1/qxK2/roEt/cJcBCTSR545hLOP6nBWmRbn1ejx1cpFiByRvDa5A4vrdTD%2b8%2bdgvu5yWG75IZa%2b8lkEm%2btTbXJ2pWQmZ/JFcOVBPs55ZQAlD9Wj5Bc1%2bONQaq0/lihO6ahuActP/T8s3HQNln9zHxKZPcSbLY5mMrmtA0p88/p38NiLnZiY0eKO39bB6Qmto1BmcmOEgCtbl9Gk88NKcf2WbhNm7ZF1FMoMLiKTYmX70/C53fA6HLBWlMFbeTSdIVuPgGXyLv%2bjToxtfSq8w9fjzloRXhxe2AABqQDLfmQ/5l59AdIXnoX67lvgaq7L9n9cBDT3KXDutbuwfUcf%2bsaUuOnBKrg8oXWKJIOAcULA/63WY8ETRbs%2bgK9V6SF1riEg%2b5s0AsIUbap%2bfhcsUwJYp6ew8OxWOCuOZTlgrQQ%2b1f%2biK4SHW6SYMLjw%2bpgOr45q8fakPsu1uVt4MpuqHeWlmNv6OGb/%2bw%2bYvfFquPs60whInBgHfOvf9%2bBnv6nFm0fGcdltpfAHohtywIwjivNrDbi4aQkX1BtwAZ3LXNENOSBqNGLynH/E1Ln/AuG3voHxz54BR3vbOgplfmsPRnFt6RR%2bUiHEd3fz8M23xrBHYNhUBBIuJ5ae%2bz3mtlwD46vPc35OxvXeEAFMCYZDUUSICkarD3ZnAL5gBCa7f1PP0O4KQkPUNwTj0LgiWCEFGMt4gYVyR45VNBRBwqCDn0TBRqY2qlUTWwTXm0qs7fXV0FimVzxQuYOYNXngCEQ29EZDwUjOCk14QzO5zgzaLH4M9WnR0awBf1iP1iYVmioVEE0to6ZagdEhfV4GJ1NXoJwzoadVhZ5GBToq59FYq4JcZstPcqbbWmkSjTUK8ARWTExaMDZhQmfvEhronkBgWZchCnmD5I%2bYMdSlRn%2bDCmMUZbYck6OvWQEVRZeFk0oS8drqldwy28igHh0tC2ioEKO3Wwu5yrF5gUQkEkeAMKuYt0Ett0GpdkA%2bb%2bfCV7ncgRWjtygHROl3er0bcoUTRr0LMpmdW60p7jQlYTL6uJUitsLjdvghFVu5a5MpsG5CrBRXr/diUeeCTuOESuXkxrTC0vH%2bSFHTzJKsGgq39YSgod4FzEytYNnkQyAY2ywafO8coZP5yMJmpbenqv0GOmA1J7xNciWviRwoLF4ozNUX/i63MKmwSGmjAomNcviF4fVG7VfTn885kfb5CHgfEyKnNJAqwo25dUfHK9cp%2bIJEBMMDfdAZjNyaHCtnZSWzXCkqQZwrN49yiyJ2O7mY4dROclYoHQwGESL3lgErkfX6vFjS6%2bFw%2b0jGbVxtYTgS4UpuT3UeMJXISa7b8xTjlvbim%2bIuDwEOmwVH9r6NyopyvPKnHXQ8gmNlZSg7Vo1tTz2L6dk59PX24PXXdmLf3lLsPXgAPYODEM0I8MYbb%2bCtt3dj9%2b7d2LN7HxqaW3D4QClqG7qgkovx5ju7cOTQAUyLlFlzeyq24GaerywbwBfMYEowBfG8mKt5Fs/OYnpaCKvNAZ1OAzGZXLFIDOHMLGwO13oOCIWCXEms22XHFP1QKhGjq7MHErkKU3wBzFY7FGxbPXUgkcohIC9uQbcIu8XEFTWyJTRWCyyVSrGo10IimYfZZKY%2byXZTQCKaEyMUWdu%2bvroZbFLuUgxBoWCAq1tYUKuxsKAlXyYEj5Os1vIKgoEQnDSnZdMKtPRsSW%2bAy%2b35cCRFT4S6a15qIm9rT7JI/uBk%2b48V7hrLQGpbTPrjKnY7JsYn8gscWUKUYV41g1D7PgS7DyPYsR%2bhoXrIjXWY1L2MqcWd3FFpakEqvlnFm78W4a6v9eL%2b7wzivm8VwLdTcO/5A1AJ3Xn1ArkEKnae8f8DbS0w/%2bhqWG%2b9Gdaf3pSCgnPzD6%2bCv6oixQGkl4ruHc79e%2bKJJ1BTU5P/nPnrDAH1byD8k9MR/vmXEb7tTMR/exVqpi7GHwdK8KehEvyxrwR1c9dmv2Lz%2bDVjOL%2bkEpeW1OOikro8uDgN3y2pxdyQLU3ptRyFSCTCD37wA5x11lm44447OMJk9Uk6hPYdPgT9587A0j9/CYazz4L%2bH8%2bE/vNnckfD2Z/j7i%2beeTo8O15PIYCUeNGssFwux/j4OPh8Pl599VXuszashD5bfZFGQLhtD8L3fhXhX1%2bI8APnIfbsLWievQ6vj5Zg9/hpeH2kBK2SW7MIeObfJ7jJXvupFlz9181paEodP5G6vqKkEeJRezoxu2bSrrjiClx99dXo7OxESUkJXnzxxawcZxDgPXYU2v9zNnTf/haMN14P4623pOEnWLrpRixe%2bG1oz/k8XG%2b/leaAcO5%2bgdQo2QvuuusuDssPPvggHnvsMe769ttv53aVpvzt1IdMQs27ELzjbAQf%2bDqC//klRH9/PRpmrsDLRP03CQkvD5agSXxDFgFP3zBBFK7B5SUNuIy44FLumIIr/qoR36cjgywCEmscyXZ/sE/8bNu2jUPAk08%2bmTLfOV%2bPcx8rg/z002DZtwcBmhfbNcJCLLZYy66tNdWQ/d3fwLHrzXwOyEye2fBHH30U9957Lzf5%2b%2b67j4N77rkHO3bsyPuQGftFovcw8NvvAVuvIVm5BHjlP9EhuQe7%2befg0NTXsXvybHQpHs4i4Mkfj%2bPmr7Tgtzf2475LunD3BZ345WXduOeiDtx1fgcevqYHP/5MM2YH13PAli1b8MUvfhEHDx7EJz/5SQ4RhRzgJLMtOePvYSeOZdkLJ1mihZdehH1xkbt2zAohOfOzsO3cmY%2bAjBNhMpm4if/yl7/E/fffz8GvfvUr3HnnnVk9wK0IpQdVt%2bDE9f1G3DayjJsHl/DgpBMe1VYEZy%2bDX3Q9AkI6ap5DJmT/3TU83Pj5JjxzxxCeuX0Yj1zbi0dv6MVvruvFvRd14bEtffjh3zZhLo2AzPK5iUwYo/r27du5vUbs/Gc/%2b1l2PBkE2I8cwezpp8Pc3QPmcllJjOU33wQTca6PbeaY5GPus2fC8saOjTngd7/7HX7xi19kEcCAcQRjOYYg7ofJVOywTR5ESaMfJe0BlDR78Zl%2b0guzxA3E%2biARYMeE%2bHpk1laeuj6lA64kuU%2bJQR0u/0QDndfj6k814Mr/2cDdF4%2bscQDSJfk33HgzN/GLL/oeLrzwO7jp5p%2buub9pBNgIAYJP/y8Y6uvB4lYXebPM4ntofux6ZWAQfHpu2rFzvRLMIIGxGKP4Qw89hAceeICDhx9%2bmNMBzNPjwt9EqnTtJQVNvtmN0zo9KGl14quDMQRFNwKk/JKkBFfpGCMlGM/RAd8jLc%2bU3ZV/1ZSCktTxipLU%2beU5OoDhOek3A0t9iHotmJqTwRVc5SQqZJFjVfASkt6lbEhgLj0M3mmnY%2bbSyyH7/TOQb9sOxX89D/nW7ZA/8yyE11yLsU//bxgLOSDX/FmtNjzyyCO47bbbcffdd3PAFCITi4WFhTwEbJUSAmrdKGkhBDS48JmeBILCK4F%2bQsAwcQCZw7joR2sccN04Z%2bau%2bkQTp%2b1zIYOQ7%2bdxQOqjSXHTNOK87cDsyzTpFxEffw5J0R4kLHPE/mHSSakXrOw/hKHTzsDYWV/ACB1H/ubvMUrAnRPwzjoHw3RteLWIGcw1hBqNGgcO7idTyMPk5CT27duH%2bfn5rN3N1DNWGUP4waQf1/N9uHrCi7uFUYTUWwHJ5ViVEusLL0GUdEAGAdu28MnW13Nm8Kr/kZowM3%2b5iMhFQKGTl7SKkDSQnHm0%2bUvsaREwHSzF2N99BmPnfAW8L3wFk1/8Jzr/Msa/8GWMnv0ljNL9gU/9LRZf%2bVOhDlhNp8QCXNUlFykVKfLK88II606TFy4jeW0sB8cgEkWUxrJkjMOe/rIVI06Gu1RiByQCG2QzdmjmPdArvNz5ssaPlYUAB%2bw8EkopP1Zo6XCEyJ%2bPUISaQIT6YsAKQ5mCTMTza4zcyzZox8QIUIxiFsqgGBHBo1TDMq9GQEuWgCLUoFaHmNtdLByOc7m68v1idHQocHivEKOjy1ltvO7LbnSvt1WN8goJuloVGO7ToaFOic4mGRprxRCL7Zk0bRbBWpUd3a1yNDapMJD%2b8IJAYNywGFcyY0b5MRlGe9SoZbXEFVL0UP/DowbMjC9Bq3UiGktks9lOewgd7Yvo7mH7Bu3gTZgxNGzA3v1yCEXOdfFwwcbJVUQpWjOQaTObfVwJm88fLb7gmB7kgsoBvdELq4miSGcIK0s%2brmp7md2z%2bLkcYySSyHupx80KKqPw0pENOBjIbN1dn7lx2IJcotbvo7bECTZzEB5XmNtoyX7v90cQDseyCVd2jIaicLJiTR89C9A59eG0BRCgay5LnUie3La5jXKACcL8zOQSeEOLaKiUoZ24oK5ajpFeDQ7tFROlpGhtVEIuc66FwCf4jgzHyMQmDHUqieJLxy2kOJn84YZJ0cL83PESFmyTVMAf47DNqkWDQVYGG%2bMozI7seTLtM7yb%2bl7mBzDxY8XU8bRXuPpuvlGS/Ev5tvgmWeBiX8bLIoB94ODjBpFohEt4rBVxrRV1sTwma8N9QiOvOuxjAqtcsbYHCgrr2TcN2G5yqVRGEeUytzHbwVJiae%2b35OPK%2biwvaKAocH5ewuUy5ARSiZTb0e72rq1w/X9uAIBQ4aS0KgAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"466\" alt=\"Google Logo Structured Data Example\" data-srcset=\"/assets/static/Google-Logo-Structured-Data-Example.f8e1fd6.46d51b5fb7cda99c59233a4e6ab1dc0d.png 466w\" data-sizes=\"(max-width: 466px) 100vw, 466px\" data-src=\"/assets/static/Google-Logo-Structured-Data-Example.f8e1fd6.46d51b5fb7cda99c59233a4e6ab1dc0d.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Google-Logo-Structured-Data-Example.f8e1fd6.46d51b5fb7cda99c59233a4e6ab1dc0d.png\" width=\"466\" alt=\"Google Logo Structured Data Example\"></noscript></p>\n<p>Using structured data in html requires the use of a script tag with a MIME type of <code class=\"language-text\">application/ld+json</code> like so:</p>\n<div class=\"line-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>application/ld+json<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"@context\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://schema.org\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"@type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Organization\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://www.example.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Unlimited Ball Bearings Corp.\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"contactPoint\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"@type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ContactPoint\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"telephone\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"+1-401-555-1212\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"contactType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Customer service\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"windows-uwp-sharing\"><a href=\"#windows-uwp-sharing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Windows UWP Sharing</h3>\n<p>Windows UWP apps let you share data using schema.org classes. <a href=\"https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/appxmanifestschema/element-sharetarget\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Here</a> is an example showing how to share metadata about a book.</p>\n<h1 id=\"enter-schemanet\"><a href=\"#enter-schemanet\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enter Schema.NET</h1>\n<p>Schema.NET is Schema.org objects turned into strongly typed C# POCO classes for use in .NET. All classes can be serialized into JSON/JSON-LD. Here is a simple Schema.NET example that defines the name and URL of a website:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">var</span> website <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    AlternateName <span class=\"token operator\">=</span> <span class=\"token string\">\"An Alternative Name\"</span><span class=\"token punctuation\">,</span>\n    Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Your Site Name\"</span><span class=\"token punctuation\">,</span>\n    Url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uri</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> jsonLd <span class=\"token operator\">=</span> website<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The code above outputs the following JSON-LD:</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@context\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"http://schema.org\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"WebSite\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"alternateName\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"An Alternative Name\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Your Site Name\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://example.com\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There are dozens more examples based on Google's Structured Data documentation with links to the relevant page in the unit tests of the Schema.NET project.</p>\n<h1 id=\"classes--properties\"><a href=\"#classes--properties\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Classes &#x26; Properties</h1>\n<p>schema.org defines classes and properties, where each property can have a single value or an array of multiple values. Additionally, properties can have multiple types e.g. an <code class=\"language-text\">Address</code> property could have a type of <code class=\"language-text\">string</code> or a type of <code class=\"language-text\">PostalAddress</code> which has it's own properties such as <code class=\"language-text\">StreetAddress</code> or <code class=\"language-text\">PostalCode</code> which breaks up an address into it's constituent parts.</p>\n<p>To facilitate this Schema.NET uses some clever C# generics and implicit type conversions so that setting a single or multiple values is possible and that setting a <code class=\"language-text\">string</code> or <code class=\"language-text\">PostalAddress</code> is also possible:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Single string address</span>\n<span class=\"token keyword\">var</span> organization <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Organization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Address <span class=\"token operator\">=</span> <span class=\"token string\">\"123 Old Kent Road E10 6RL\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Multiple string addresses</span>\n<span class=\"token keyword\">var</span> organization <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Organization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Address <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span> \n        <span class=\"token string\">\"123 Old Kent Road E10 6RL\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"456 Finsbury Park Road SW1 2JS\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Single PostalAddress address</span>\n<span class=\"token keyword\">var</span> organization <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Organization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Address <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PostalAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        StreetAddress <span class=\"token operator\">=</span> <span class=\"token string\">\"123 Old Kent Road\"</span><span class=\"token punctuation\">,</span>\n        PostalCode <span class=\"token operator\">=</span> <span class=\"token string\">\"E10 6RL\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Multiple PostalAddress addresses</span>\n<span class=\"token keyword\">var</span> organization <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Organization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Address <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PostalAddress</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">PostalAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            StreetAddress <span class=\"token operator\">=</span> <span class=\"token string\">\"123 Old Kent Road\"</span><span class=\"token punctuation\">,</span>\n            PostalCode <span class=\"token operator\">=</span> <span class=\"token string\">\"E10 6RL\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">PostalAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            StreetAddress <span class=\"token operator\">=</span> <span class=\"token string\">\"456 Finsbury Park Road\"</span><span class=\"token punctuation\">,</span>\n            PostalCode <span class=\"token operator\">=</span> <span class=\"token string\">\"SW1 2JS\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This magic is all carried out using the <code class=\"language-text\">Value&lt;T&gt;</code>, <code class=\"language-text\">Value&lt;T1, T2&gt;</code>, <code class=\"language-text\">Value&lt;T1, T2, T3&gt;</code> etc. types. These types are all <code class=\"language-text\">structs</code> for best performance too.</p>\n<h1 id=\"where-to-get-it\"><a href=\"#where-to-get-it\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Where to Get It?</h1>\n<p>Download the Schema.NET <a href=\"https://www.nuget.org/packages/Schema.NET\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NuGet package</a> or take a look at the code on <a href=\"https://github.com/RehanSaeed/Schema.NET\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a>. At some point I'll find the time to write a quick ASP.NET Core tag helper that wraps Schema.NET.</p>\n"}},{"node":{"title":"ASP.NET Core Lazy Command Pattern","path":"/asp-net-core-lazy-command-pattern/","date":"08 April 2017","timeToRead":5,"description":"Move your ASP.NET Core MVC action method logic into lazily loaded commands using the command pattern, to reduce Controller complexity.","content":"<div class=\"custom-block tip\"><p class=\"custom-block-title\">TLDR</p><p>Move your ASP.NET Core MVC action method logic into lazily loaded commands using the command pattern.</p></div>\n<p>When writing your Controllers in ASP.NET Core, you can end up with a very long class if you're not careful. You may have written several action methods with a few lines of code in each, you may be injecting a few services into your controller and you may have commented your action methods to support Swagger. The point is it's very easy to do, here is an example:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[controller]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RocketController</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IPlanetRepository</span> planetRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IRocketRepository</span> rocketRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">RocketController</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IPlanetRepository</span> planetRepository<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IRocketRepository</span> rocketRepository<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planetRepository <span class=\"token operator\">=</span> planetRepository<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository <span class=\"token operator\">=</span> rocketRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{rocketId}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">GetRocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rocketId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> rocket <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository<span class=\"token punctuation\">.</span><span class=\"token function\">GetRocket</span><span class=\"token punctuation\">(</span>rocketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rocket <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">NotFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>rocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{rocketId}/launch/{planetId}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">LaunchRocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rocketId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> planetId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> rocket <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository<span class=\"token punctuation\">.</span><span class=\"token function\">GetRocket</span><span class=\"token punctuation\">(</span>rocketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rocket <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">NotFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">var</span> planet <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planetRepository<span class=\"token punctuation\">.</span><span class=\"token function\">GetPlanet</span><span class=\"token punctuation\">(</span>planetId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>planet <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">NotFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository<span class=\"token punctuation\">.</span><span class=\"token function\">VisitPlanet</span><span class=\"token punctuation\">(</span>rocket<span class=\"token punctuation\">,</span> planet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>rocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"the-command-pattern\"><a href=\"#the-command-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Command Pattern</h1>\n<p>This is where the command pattern can come in handy. The command pattern moves logic from each action method and injected dependencies into their own class like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[controller]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RocketController</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> Lazy<span class=\"token operator\">&lt;</span>IGetRocketCommand<span class=\"token operator\">></span> getRocketCommand<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> Lazy<span class=\"token operator\">&lt;</span>ILaunchRocketCommand<span class=\"token operator\">></span> launchRocketCommand<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">RocketController</span><span class=\"token punctuation\">(</span>\n        Lazy<span class=\"token operator\">&lt;</span>IGetRocketCommand<span class=\"token operator\">></span> getRocketCommand<span class=\"token punctuation\">,</span>\n        Lazy<span class=\"token operator\">&lt;</span>ILaunchRocketCommand<span class=\"token operator\">></span> launchRocketCommand<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getRocketCommand <span class=\"token operator\">=</span> getRocketCommand<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>launchRocketCommand <span class=\"token operator\">=</span> launchRocketCommand<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{rocketId}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">GetRocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rocketId<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getRocketCommand<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span>rocketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{rocketId}/launch/{planetId}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">LaunchRocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rocketId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> planetId<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>launchRocketCommand<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span>rocketId<span class=\"token punctuation\">,</span> planetId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IGetRocketCommand</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IAsyncCommand</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GetRocketCommand</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IGetRocketCommand</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IRocketRepository</span> rocketRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">GetRocketCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IRocketRepository</span> rocketRepository<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository <span class=\"token operator\">=</span> rocketRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rocketId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> rocket <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository<span class=\"token punctuation\">.</span><span class=\"token function\">GetRocket</span><span class=\"token punctuation\">(</span>rocketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rocket <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NotFoundResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkObjectResult</span><span class=\"token punctuation\">(</span>rocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All the logic and dependencies in the controllers gets moved to the command which now has a single responsibility. The controller now has a different set of dependencies, it now lazily injects one command per action method.</p>\n<p>You may have noticed the <code class=\"language-text\">IAsyncCommand</code> interface. I keep four of these handy to inherit from. They all outline an <code class=\"language-text\">ExecuteAsync</code> method to execute the command and return an <code class=\"language-text\">IActionResult</code> but they have a differing number of parameters. I personally feel if you are needing more than three parameters you should be using a class to represent your parameters, so I've put the limit on three parameters.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IAsyncCommand</span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IAsyncCommand</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IAsyncCommand</span><span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T1</span> parameter1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T2</span> parameter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IAsyncCommand</span><span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">,</span> T3<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T1</span> parameter1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T2</span> parameter2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T3</span> parameter3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"why-so-lazy\"><a href=\"#why-so-lazy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Why so Lazy?</h1>\n<p>Why do we use <code class=\"language-text\">Lazy&lt;T&gt;</code>? Well the answer is that if we have multiple action methods on our controller, we don't want to instantiate the dependencies for every action method if we are only planning on using one action method. Registering our Lazy commands requires a bit of extra work in out <code class=\"language-text\">Startup.cs</code>. We can register lazy dependencies like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...Omitted</span>\n    services\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddScoped</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IGetRocketCommand</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">GetRocketCommand</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddScoped</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">Lazy</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IGetRocketCommand</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IGetRocketCommand</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"httpcontext-and-actioncontext\"><a href=\"#httpcontext-and-actioncontext\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HttpContext and ActionContext</h1>\n<p>Now you might be thinking, how do I access the <code class=\"language-text\">HttpContext</code> or <code class=\"language-text\">ActionContext</code> if I want to set a HTTP header for example? Well, you can use the <code class=\"language-text\">IHttpContextAccessor</code> or <code class=\"language-text\">IActionContextAccessor</code> interfaces for this purpose. You can register them in your <code class=\"language-text\">Startup</code> class like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...Omitted</span>\n    services\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IHttpContextAccessor</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpContextAccessor</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IActionContextAccessor</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ActionContextAccessor</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that they can be registered as singletons. You can then use them to get hold of the <code class=\"language-text\">HttpContext</code> or <code class=\"language-text\">ActionContext</code> objects for the current HTTP request. Here is a really simple example.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SetHttpHeaderCommand</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">ISetHttpHeaderCommand</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IHttpContextAccessor</span> httpContextAccessor<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">GetRocketCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IHttpContextAccessor</span> httpContextAccessor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>httpContextAccessor <span class=\"token operator\">=</span> httpContextAccessor<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>httpContextAccessor<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Rocket\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Saturn V\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"unit-testing\"><a href=\"#unit-testing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Unit Testing</h1>\n<p>Another upside to the command pattern is that testing each command becomes super simple. You don't need to setup a controller with lots of dependencies that you don't care about. You only need to write test code for that single feature.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>For a full working example, take a look at the <a href=\"https://github.com/Dotnet-Boxed/Templates/blob/master/Docs/API.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed API</a> project template which makes full use of the Lazy Command Pattern.</p>\n"}},{"node":{"title":"dotnet new Feature Selection","path":"/dotnet-new-feature-selection/","date":"26 March 2017","timeToRead":9,"description":"How to add feature selection to your dotnet new template using symbols (bool, string, choice, computed) and pre-processor directives.","content":"<ul>\n<li><a href=\"/custom-project-templates-using-dotnet-new/\">Part 1 - Custom Project Templates Using dotnet new</a></li>\n<li><a href=\"/dotnet-new-feature-selection/\">Part 2 - dotnet new Feature Selection</a></li>\n<li><a href=\"/unit-testing-dotnet-new-templates/\">Part 3 - Unit Testing dotnet new Templates</a></li>\n</ul>\n<p>In my last post I showed how to <a href=\"/custom-project-templates-using-dotnet-new/\">get started</a> with using <code class=\"language-text\">dotnet new</code> to build project templates. In this post, I'm going to build on that knowledge and show how to add feature selection to your project template so developers can choose to add or remove bits of your template. If you check out my <a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed API</a> project template, you'll see that I have 17 features for you to set. If you run the help command against my template you'll see a description of each and instructions on how you can set them (I've cleaned up the CLI output, the current help commands output is pretty awful but this is being <a href=\"https://github.com/dotnet/templating/issues/348\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">addressed</a> in the next version of <code class=\"language-text\">dotnet new</code>).</p>\n<div class=\"line-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PS C:\\Users\\rehan.saeed&gt; dotnet new api --help\nTemplate Instantiation Commands for .NET Core CLI.\n\nUsage: dotnet new [arguments] [options]\n\nArguments:\n  template  The template to instantiate.\n\nOptions:\n  -l|--list         List templates containing the specified name.\n  -lang|--language  Specifies the language of the template to create\n  -n|--name         The name for the output being created. If no name is specified, the name of the current directory is\nused.\n  -o|--output       Location to place the generated output.\n  -h|--help         Displays help for this command.\n  -all|--show-all   Shows all templates\n\n.NET Boxed API (C#)\nAuthor: Muhammad Rehan Saeed (RehanSaeed.com)\nOptions:\n  -Ti|--Title: The name of the project which determines the assembly product name. If the Swagger feature is enabled,\n    shows the title on the Swagger UI.\n    string - Optional\n    Default: Project Title\n  -D|--Description: A description of the project which determines the assembly description. If the Swagger feature is\n    enabled, shows the description on the Swagger UI.\n    string - Optional\n    Default: Project Description\n  -Au|--Author: The name of the author of the project which determines the assembly author, company and copyright\n    information.\n    string - Optional\n    Default: Project Author\n  -Sw|--Swagger: Swagger is a format for describing the endpoints in your API. Swashbuckle is used to generate a\n    Swagger document and to generate beautiful API documentation, including a UI to explore and test operations,\n    directly from your routes, controllers and models.\n    bool - Optional\n    Default: true\n  -T|--TargetFramework: Decide which version of the .NET Framework to target.\n    .NET Core         - Run cross platform (on Windows, Mac and Linux). The framework is made up of NuGet packages\n                        which can be shipped with the application so it is fully stand-alone.\n    .NET Framework    - Gives you access to the full breadth of libraries available in .NET instead of the subset\n                        available in .NET Core but requires it to be pre-installed.\n    Both              - Target both .NET Core and .NET Framework.\n    Default: Both\n  -P|--PrimaryWebServer: The primary web server you want to use to host the site.\n    Kestrel        - A web server for ASP.NET Core that is not intended to be internet facing as it has not been\n                     security tested. IIS or NGINX should be placed in front as reverse proxy web servers.\n    WebListener    - A Windows only web server. It gives you the option to take advantage of Windows specific\n                     features, like Windows authentication, port sharing, HTTPS with SNI, HTTP/2 over TLS\n                     (Windows 10), direct file transmission, and response caching WebSockets (Windows 8).\n    Default: Kestrel\n  -Re|--ReverseProxyWebServer: The internet facing reverse proxy web server you want to use in front ofthe primary\n    web server to host the site.\n    Internet Information Services (IIS) - A flexible, secure and manageable Web server for hosting anything on the\n                                          Web using Windows Server. Select this option if you are deploying your site\n                                          to Azure web apps. IIS is preconfigured to set request limits for security.\n    NGINX                               - A free, open-source, cross-platform high-performance HTTP server and\n                                          reverse proxy, as well as an IMAP/POP3 proxy server. It does have a Windows\n                                          version but its not very fast and IIS is better on that platform. If the\n                                          HTTPS Everywhere feature is enabled, NGINX is pre-configured to enable the\n                                          most secure TLS protocols and ciphers for security and to enable HTTP 2.0\n                                          and SSL stapling for performance.\n    Both                                - Support both reverse proxy web servers.\n    Default: Both\n  -C|--CloudProvider: Select which cloud provider you are using if any, to add cloud specific features.\n    Azure    - The Microsoft Azure cloud. Adds logging features that let you see logs in the Azure portal.\n    None     - No cloud provider is being used.\n    Default: None\n  -A|--Analytics: Monitor internal information about how your application is running, as well as external user\n    information.\n    Application Insights    - Monitor internal information about how your application is running, as well as\n                              external user information using the Microsoft Azure cloud.\n    None                    - Not using any analytics.\n    Default: None\n  -Ap|--ApplicationInsightsInstrumentationKey: Your Application Insights instrumentation key\n    e.g. 11111111-2222-3333-4444-555555555555.\n    string - Optional\n    Default: APPLICATION-INSIGHTS-INSTRUMENTATION-KEY\n  -H|--HttpsEverywhere: Use the HTTPS scheme and TLS security across the entire site, redirects HTTP to HTTPS and\n    adds a Strict Transport Security (HSTS) HTTP header with preloading enabled. Configures the primary and reverse\n    proxy web servers for best security and adds a development certificate file for use in your development environment.\n    bool - Optional\n    Default: true\n  -Pu|--PublicKeyPinning: Adds the Public-Key-Pins (HPKP) HTTP header to responses. It stops man-in-the-middle\n    attacks by telling browsers exactly which TLS certificate you expect. You must have two TLS certificates for this\n    to work, if you get this wrong you will have performed a denial of service attack on yourself.\n    bool - Optional\n    Default: false\n  -CO|--CORS: Browser security prevents a web page from making AJAX requests to another domain. This restriction is\n    called the same-origin policy, and prevents a malicious site from reading sensitive data from another site.\n    CORS is a W3C standard that allows a server to relax the same-origin policy. Using CORS, a server can explicitly\n    allow some cross-origin requests while rejecting others.\n    bool - Optional\n    Default: true\n  -X|--XmlFormatter: Choose whether to use the XML input/output formatter and which serializer to use.\n    DataContractSerializer - The default XML serializer you should use. Requires the use of [DataContract] and\n                             [DataMember] attributes.\n    XmlSerializer          - The alternative XML serializer which is slower but gives more control. Uses the\n                             [XmlRoot], [XmlElement] and [XmlAttribute] attributes.\n    None                   - No XML formatter.\n    Default: None\n  -S|--StatusController: An endpoint that returns the status of this API and its dependencies, giving an indication\n    of its health. This endpoint can be called by site monitoring tools which ping the site or by load balancers\n    which can remove an instance of this API if it is not functioning correctly.\n    bool - Optional\n    Default: true\n  -R|--RequestId: Require that all requests send the X-Request-ID HTTP header containing a GUID. This is useful where\n    you have access to the client and server logs and want to correlate a request and response between the two.\n    bool - Optional\n    Default: false\n  -U|--UserAgent: Require that all requests send the User-Agent HTTP header containing the application name and\n    version of the caller.\n    bool - Optional\n    Default: false\n  -Ro|--RobotsTxt: Adds a robots.txt file to tell search engines not to index this site.\n    bool - Optional\n    Default: true\n  -Hu|--HumansTxt: Adds a humans.txt file where you can tell the world who wrote the application. This file is a good\n    place to thank your developers.\n    bool - Optional\n    Default: true</code></pre></div>\n<p>As you can see from the output, there are a few different types of feature you can create. You can also choose to make a feature required or optional. An optional feature, if not specified by the user will fall-back to a default value. Here are the different types available:</p>\n<ul>\n<li><strong>bool</strong> - This feature can be turned on or off and has a default of true or false.</li>\n<li><strong>string</strong> - This can be used to do a string replacement in your template. It has a default value which you can set to any arbitrary value.</li>\n<li><strong>choice</strong> - This is a feature with two or more named choices. Each choice can have it's own description. The default value must be one of the choices.</li>\n<li><strong>computed</strong> - These are features flags that can be computed based on other symbols.</li>\n</ul>\n<h1 id=\"bool-symbols\"><a href=\"#bool-symbols\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bool Symbols</h1>\n<p>You can create a boolean feature by adding symbols section to your template.json file. If you look at the example below, I've specified an optional bool symbol, with a default value of true.</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"symbols\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Swagger\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parameter\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"datatype\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bool\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"isRequired\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"defaultValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In your code, you can then use the symbol name, in this case <code class=\"language-text\">Swagger</code> as a pre-processor directive in C# code:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> (Swagger)</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Swagger feature was selected\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">else</span></span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Swagger feature was not selected\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p>This is really cool because you can still run the application as a template author and the project will still work. If you define a <code class=\"language-text\">Swagger</code> constant in your project properties, your feature will turn on or off too. This makes debugging your project template very easy as a template author.</p>\n<p>If you want to use the symbol in files other than C# where pre-processor directives do not exist, you can use the comment syntax specific to that file extension, so in a JavaScript file would use the <code class=\"language-text\">//</code> syntax:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">//#if (Swagger)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Swagger feature was selected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//#else</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Swagger feature was not selected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//#endif</span></code></pre></div>\n<p>Most file extensions that have their own comment syntax have been catered for. For text files where there is no comment syntax or for any file extension that the templating engine doesn't know about you can use the <code class=\"language-text\">#</code> character:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> (Swagger)</span>\n<span class=\"token class-name\">Swagger</span> feature was selected\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">else</span></span>\n<span class=\"token class-name\">Swagger</span> feature was not selected\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p>You can look at <a href=\"https://github.com/dotnet/templating/blob/cb9edbfe02c038a306fbcb6bbe162462d5fb59f0/src/Microsoft.TemplateEngine.Orchestrator.RunnableProjects/Config/ConditionalConfig.cs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> code in the templating engine for a full list of supported file extensions and comment types.</p>\n<h1 id=\"string-symbols\"><a href=\"#string-symbols\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>String Symbols</h1>\n<p>String symbols can be used to do simple file replace operations.</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"symbols\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Title\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parameter\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"datatype\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"isRequired\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"defaultValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Default Project Title\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"replaces\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PROJECT-TITLE\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above symbol looks for a <code class=\"language-text\">PROJECT-TITLE</code> string and replaces it with whatever the user specifies or with the default value <code class=\"language-text\">Default Project Title</code> if the user doesn't set anything.</p>\n<h1 id=\"choice-symbols\"><a href=\"#choice-symbols\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Choice Symbols</h1>\n<p>A choice symbol is useful when you have more than two options and can't use bool.</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"symbols\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"TargetFramework\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parameter\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"datatype\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"choice\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"isRequired\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"choices\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"choice\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".NET Core\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"choice\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".NET Framework\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"choice\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Both\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"defaultValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Both\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the example above, you have the choice of selecting a target framework, with a value of <code class=\"language-text\">.NET Core</code>, <code class=\"language-text\">.NET Framework</code> or <code class=\"language-text\">Both</code>. Each choice has it's own description and the overall symbol also has it's description.</p>\n<h1 id=\"computed-symbols\"><a href=\"#computed-symbols\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Computed Symbols</h1>\n<p>In the above example, you can't use the value '.NET Core' as a C# pre-processor variable because it contains a dot and a space. This is where a computed symbol comes in handy.</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"symbols\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"NETCore\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"computed\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(TargetFramework == \\\".NET Core\\\" || TargetFramework == \\\"Both\\\")\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"NETFramework\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"computed\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(TargetFramework == \\\".NET Framework\\\" || TargetFramework == \\\"Both\\\")\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here I have set up two computed symbols which determines whether '.NET Core' or '.NET Framework' was selected individually in the previous choice symbol. I have named these symbols without a dot or space i.e. <code class=\"language-text\">NETCore</code> and <code class=\"language-text\">NETFramework</code> so I can use these as C# pre-processor symbols, the same way I showed above.</p>\n<h1 id=\"conditionally-deleting-files-or-folders\"><a href=\"#conditionally-deleting-files-or-folders\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conditionally Deleting Files or Folders</h1>\n<p>You can also use symbols to delete certain files or folders. In this example, I've extended my bool symbol example to additionally remove two files and a folder if the feature is deselected by the user.</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"symbols\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Swagger\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parameter\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"datatype\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bool\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"isRequired\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"defaultValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sources\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"modifiers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"condition\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(!Swagger)\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"Constants/HomeControllerRoute.cs\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Controllers/HomeController.cs\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"ViewModelSchemaFilters/**/*\"</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You do this by adding source modifiers. I've added one here with a condition and three file and folder exclusions. The exclusions use a globbing pattern.</p>\n<h1 id=\"whats-next\"><a href=\"#whats-next\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What's Next?</h1>\n<p>There are several other useful features of the templating engine which I'll cover in a follow up post as this is starting to get quite long. Feel free to take a look at the <a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a> for my API template to see a full example.</p>\n"}},{"node":{"title":"Cleaning Up CSPROJ","path":"/cleaning-up-csproj/","date":"18 March 2017","timeToRead":8,"description":"I show how to make the new Visual Studio 2017 .NET Core based csproj XML concise and pretty for hand editing.","content":"<div class=\"custom-block tip\"><p class=\"custom-block-title\">TLDR</p><p>I show how to make csproj XML concise and pretty for hand editing.</p></div>\n<p>I used <code class=\"language-text\">project.json</code> since Beta 7 and got used to hand editing it, I've continues that practice with <code class=\"language-text\">.csproj</code> files and I think you should too. Recent version of Visual Studio have made a lot of performance improvements but it's still a lot slower than hand editing a text file.</p>\n<p>The NuGet package screen in Visual Studio is achingly slow. Bulk editing takes seconds. I can update NuGet package references, package properties etc. all in one go, rather than visiting multiple disparate UI's in Visual Studio. Finally, I create new projects by copying and pasting an existing csproj and tweaking it. Much faster than Visual Studio's New Project dialogue.</p>\n<h1 id=\"install-project-file-tools\"><a href=\"#install-project-file-tools\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Install Project File Tools</h1>\n<p>The <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-madsk.ProjectFileTools\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Project File Tools</a> Visual Studio extension gives you intellisense for NuGet packages in the new csproj projects. Unfortunately, due to MSBuild being around for so long and being so complex, intellisense for the rest of the project XML consists of a massive list of possible properties so it becomes less useful than it was in <code class=\"language-text\">project.json</code>.</p>\n<h1 id=\"dotnet-migrate---wow-thats-ugly\"><a href=\"#dotnet-migrate---wow-thats-ugly\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>dotnet migrate - Wow that's ugly!</h1>\n<p>After migrating my <code class=\"language-text\">project.json</code> projects to csproj using Visual Studio 2017 (You could also use the <code class=\"language-text\">dotnet migrate</code> command), I found that that the XML generated was pretty ugly and contained superfluous elements you just didn't need. Here is an example csproj library project straight after migration:</p>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Description</span><span class=\"token punctuation\">></span></span>...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Description</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Copyright</span><span class=\"token punctuation\">></span></span>Copyright © Muhammad Rehan Saeed. All rights Reserved<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Copyright</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AssemblyTitle</span><span class=\"token punctuation\">></span></span>Dotnet Boxed Framework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AssemblyTitle</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>VersionPrefix</span><span class=\"token punctuation\">></span></span>2.2.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>VersionPrefix</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Authors</span><span class=\"token punctuation\">></span></span>Muhammad Rehan Saeed (RehanSaeed.com)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Authors</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFrameworks</span><span class=\"token punctuation\">></span></span>netstandard1.6;net461<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFrameworks</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TreatWarningsAsErrors</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TreatWarningsAsErrors</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>GenerateDocumentationFile</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>GenerateDocumentationFile</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AssemblyName</span><span class=\"token punctuation\">></span></span>Boxed.AspNetCore<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AssemblyName</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AssemblyOriginatorKeyFile</span><span class=\"token punctuation\">></span></span>../../../Key.snk<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AssemblyOriginatorKeyFile</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SignAssembly</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SignAssembly</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PublicSign</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">'</span>$(OS)' != 'Windows_NT' <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PublicSign</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageId</span><span class=\"token punctuation\">></span></span>Boxed.AspNetCore<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageTags</span><span class=\"token punctuation\">></span></span>ASP.NET;ASP.NET Core;MVC;Boxed;Muhammad Rehan Saeed;Framework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageTags</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReleaseNotes</span><span class=\"token punctuation\">></span></span>Updated to ASP.NET Core 1.1.2.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageReleaseNotes</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageIconUrl</span><span class=\"token punctuation\">></span></span>https://raw.githubusercontent.com/Dotnet-Boxed/Framework/master/Images/Icon.png<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageIconUrl</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageProjectUrl</span><span class=\"token punctuation\">></span></span>https://github.com/Dotnet-Boxed/Framework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageProjectUrl</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageLicenseUrl</span><span class=\"token punctuation\">></span></span>https://github.com/Dotnet-Boxed/Framework/blob/master/LICENSE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageLicenseUrl</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageRequireLicenseAcceptance</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageRequireLicenseAcceptance</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RepositoryType</span><span class=\"token punctuation\">></span></span>git<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RepositoryType</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RepositoryUrl</span><span class=\"token punctuation\">></span></span>https://github.com/Dotnet-Boxed/Framework.git<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RepositoryUrl</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>GenerateAssemblyConfigurationAttribute</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>GenerateAssemblyConfigurationAttribute</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>GenerateAssemblyCompanyAttribute</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>GenerateAssemblyCompanyAttribute</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>GenerateAssemblyProductAttribute</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>GenerateAssemblyProductAttribute</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>..\\Framework\\Framework.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.AspNetCore.Mvc.Abstractions<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1.1.2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.AspNetCore.Mvc.Core<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1.1.2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Extensions.Caching.Abstractions<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1.1.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Extensions.Configuration.Binder<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1.1.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Newtonsoft.Json<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>9.0.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>StyleCop.Analyzers<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1.0.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PrivateAssets</span><span class=\"token punctuation\">></span></span>All<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PrivateAssets</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageReference</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">'</span>$(TargetFramework)' == 'netstandard1.6' <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>System.Xml.XDocument<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>4.3.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">'</span>$(TargetFramework)' == 'net461' <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Reference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>System.ServiceModel<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Reference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>System.Xml<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Reference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>System.Xml.Linq<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Reference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>System<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Reference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.CSharp<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"understanding-new-csproj-projects\"><a href=\"#understanding-new-csproj-projects\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Understanding new csproj Projects</h2>\n<p>The top of the project contains a new SDK property. This imports some MSBuild targets and props files in your dotnet installation folder shown below:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 989 422' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-8defb9421912b5b66bd3c47ddcd88c4d'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-8defb9421912b5b66bd3c47ddcd88c4d)' width='989' height='422' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAbCAIAAABDQh69AAAACXBIWXMAAA7DAAAOwwHHb6hkAAAG9UlEQVRYw81Y2Y4bRRQ1P8Cn8EtIPCKe%2bATyDhKfwAMPeeIlAYQUAgiFLDOZZGy3x3Yv7n2tXqv3bnOqamyciRPiCJG58pTK1dVVdzvnXs9k5cVhbHv54BMvyKhFqqhoI9p5SWlFeZA3cdmLD%2bGf%2bP/9ENr5WY1JUg1%2bWplBup%2b7SUloP6Gls62fjtvtlv7R1Z6k%2bEWeN3Xluc7Z0yeERHgyjuz5BxFcXVWlUKAoct9zxTxLUxIx3SZf/Wh%2b88D59lf7zn3j3jTGUtf3e427rhuGAV/wGcax54/E1//8s32XdX77wFeDvFWCavLRF39%2b/OWjT%2b6cTz57%2bOl3q%2b1Qy7Ky0TZd12OT6zjL5TIvCszhCWUtJ2mGObOKG7k3ddzJfn7Una%2bvv37O0Q2H0vUDhu%2bfBZ/flSd3z/yfZuT%2bZfjDRXBh5NgPN0M/jF3XIgJty8aei5jvTxQBweb9IkYRNPF0/2LHRRjQvSqH2/YHHuhwXPCwrJu8aiZ53XdlireEteJxGEaU0oH81tZ5XpSr1UrX9TAM67p2XXe9XstcsHh1dZWmadM0m81msVioqlqWJVYkScrzHHPDMDzPq6qKEDKdTvE6Nh/6FXuyLHMch2d54ft%2bzAU7Cx75G0EQc1wRCQyERdc2TT/A7lEkBgSKwvN95fUsAG2eAzMpMASX1HUDVXAfRhiJU6ABXsSVsBCLsB8rmENRzKEctuFF2BAEAawaXhVsw/4kSaBaXVX8ogKvYAXrIiA3hCO7gpKYTIKs3o5D07J0aXeyyxwEhKUN1NqlUNfvIC6OHjmyIdADo8C9mIgEEFeKA/vdHFLVjbhIpE/LrxeZcyOFsK3mvjiaexNQ%2b3YH9tdRhz9otlqtcRwtK82wNcPN8nKP43cHLs7RDEczXdcnuuWquqMaTlW3Ylte0KVihCR9HbX4GoTxxvRa7hchAmYshSLKVn%2b3u7kdy9JM0TTdMJHfiqrCPlYeKH3%2b/DnixeE/vndNuObfA2uHg7N4JIejZ%2b94oj9KTdcRsIquqIo4DJB9IM0kicMo7LmVMODs7AypD7O36eOY%2bJqqmZZlmMZaUSzTkFVFmPd2QcCBAWAGxTGKwizLUTExqZpWQDlNkzTNojCMk/Td/QIDmJu3bfhYfqmYwXIhLRaSaZnCwrKqTdu5uLjgKo5jIVGaoThAe9CF5dgxiTa6jjT915uQ0nECFZlkec5BWNOiQPazBKtrAXf4Do9PNmAcao2keVnDKxmXPQjgqvPzcx6Bfkz/ClxjraqWaWqgTFW7nM8MQ7%2bcXpIkfnvTAcTBclCqHwQYmRlpGgZBxU7ewhLm%2bzgOfC8i8ekGNKGhPwHI5DVIf4XhxYuLqu0Af9OydxgYR7oqaYYkSOIYmQCmC6MIirC6UVLGG7sqdiwCAziUMimwGZgGfYMNRXIjhljHV3gQaXySAZyFhiYtUlrWOB6nlCXlhM3bpixnKdSICDxBBK7W8kbTZJSztYIIqJo6l6QVkm8uvXx54Tru0VDANtuyUZ7gfgzI%2bCxNgsAveQTA/ZjDNWgigzA6PQItkTVJVnX4HppJ0mI2m4P0S1SfiMDTzE9jPxbTIot9sFqcRCEDpO04gKbn%2b6hcjutAD04mr8geAyxt4A9Ixoo0HFXsMIAIo1BiDc8QoPeJQF2GvF60%2b/IhWA8TXAy1YMC2uCShw6h2o6uKip5vtV47jo2cQ3cxm88A0zchAafC92EQCmHltihQImvOQqLXwOvAQBiR98AAUuNM1XT0ntJsbprWdX2h1A8juI0VV0Qge5YQH7yEpPc9z3FcGAEDTNM0TBPtkONYwIxt8z%2bLrQuTRGFGyABTxBNjwVK94H3UtQFJmjAGj0l2Igv1wmdNNwioiTJ%2b4LkeN/IIDGMp52kMKkGiQ1PGpLYNdSxo7Ni6vnFdprsir9HDqRoTsqMUnAu9oXHCyZQ1M1UF1zSCRpsmQ2IxA0Cj2ckRGMi0SgOEFwmN8yMuIfvqC7bhBnRj/DDwndVyDRAvZRlMisy5Wi41VZHlFWiVd%2bpvLGSu68BmXIGR4wH09Q%2bNhqyEJafTKGUGdLOf89Vc1Q2AGOwOaBq6jgnSA7WWY6BnVaFLmqaOWa4mQLDwKAgVtVWsiKZftEn7znFX/AcO3KrkNUz8TOAt4PWPBwQEAktoeTqI6bDtxjd5rucR6Le3UiYxN%2bDrR/TPZSAvZmgkptNLwQPCf3AqPH17DRARIOVYt/ixUpUUASxFH7qvoNcsdGtkEJ3siLTcGaCQLqUoBZSRG6WC2oSgDoAfb3ME8NOmuyelshM75sZm/Gge8gD7KUPpB/zX0A1phnHqF4uIkqID9U%2biovUDYpuWqtu0ara3WIQLkTEPZurDpf3L2cqP878BXjGMlsJNeqkAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"989\" alt=\"dotnet SDK's\" data-srcset=\"/assets/static/Dotnet-SDKs.82a2fbd.f6ee5d689654afff06f277f818e4dfa0.png 480w, /assets/static/Dotnet-SDKs.0e80f0d.f6ee5d689654afff06f277f818e4dfa0.png 989w\" data-sizes=\"(max-width: 989px) 100vw, 989px\" data-src=\"/assets/static/Dotnet-SDKs.0e80f0d.f6ee5d689654afff06f277f818e4dfa0.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Dotnet-SDKs.0e80f0d.f6ee5d689654afff06f277f818e4dfa0.png\" width=\"989\" alt=\"dotnet SDK's\"></noscript></p>\n<p>If you root around in those files, you can find defaults for all kinds of settings. Here are some of the nuggets I discovered about the web projects:</p>\n<ul>\n<li>The <code class=\"language-text\">NETStandard.Library</code> version <code class=\"language-text\">1.6.1</code> NuGet package is referenced for you by default.</li>\n<li>The <code class=\"language-text\">wwwroot</code> folder is excluded from compilation but included in the published output.</li>\n<li><code class=\"language-text\">web.config</code>, <code class=\"language-text\">.cshtml</code> and <code class=\"language-text\">.json</code> files are published by default.</li>\n<li>Server garbage collection is turned on by default using the <code class=\"language-text\">ServerGarbageCollection</code> setting.</li>\n<li><code class=\"language-text\">PreserveCompilationContext</code> is set to true by default.</li>\n<li><code class=\"language-text\">node_modules</code>, <code class=\"language-text\">jspm_packages</code> and <code class=\"language-text\">bower_components</code> are excluded by default.</li>\n</ul>\n<h2 id=\"assemblyinfocs-is-partially-dead\"><a href=\"#assemblyinfocs-is-partially-dead\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AssemblyInfo.cs is Partially Dead</h2>\n<p>You don't need <code class=\"language-text\">AssemblyInfo.cs</code> anymore by default as the csproj Package settings also set many of the assembly attributes. In fact, you didn't really need it with <code class=\"language-text\">project.json</code> either but the default templates mostly included it for some reason. However, I still found I needed to resurrect it in some cases to use the <code class=\"language-text\">InternalsVisibleTo</code> attribute. <code class=\"language-text\">InternalsVisibleTo</code> allows my unit test projects to access internal members in my library project. After a <code class=\"language-text\">dotnet migrate</code>, you may see the following elements which stop certain assembly attributes from being generated. You can safely delete these.</p>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- ...Omitted --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>GenerateAssemblyConfigurationAttribute</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>GenerateAssemblyConfigurationAttribute</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>GenerateAssemblyCompanyAttribute</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>GenerateAssemblyCompanyAttribute</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>GenerateAssemblyProductAttribute</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>GenerateAssemblyProductAttribute</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"remove-system-references\"><a href=\"#remove-system-references\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Remove System.* References</h2>\n<p>You no longer need to explicitly reference <code class=\"language-text\">System.*</code> references in your csproj. David Fowler recommends that you always reference the <code class=\"language-text\">NETStandard.Library</code> meta NuGet package gives you most <code class=\"language-text\">System.*</code> references. You get <code class=\"language-text\">NETStandard.Library</code> by default if you use the SDK attribute at the top of the csproj:</p>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- ...Omitted --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>This meant that I could remove the entire code block below except System.ServiceModel because that reference is not given to you by the NETStandard.Library NuGet package.</p>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">'</span>$(TargetFramework)' == 'netstandard1.6' <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>System.Xml.XDocument<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>4.3.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">'</span>$(TargetFramework)' == 'net461' <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Reference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>System.ServiceModel<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Reference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>System.Xml<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Reference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>System.Xml.Linq<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Reference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>System<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Reference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.CSharp<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"turn-elements-into-attributes\"><a href=\"#turn-elements-into-attributes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Turn Elements into Attributes</h2>\n<p>For some reason dotnet migrate produces overly verbose XML in some cases by outputting XML elements instead of attributes. I have a NuGet reference to <code class=\"language-text\">StyleCop.Analyzers</code> which is a build time dependency and I don't want it to be output to my bin directory. You do this by setting the <code class=\"language-text\">PrivateAssets</code> property but you can turn this:</p>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>StyleCop.Analyzers<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1.0.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PrivateAssets</span><span class=\"token punctuation\">></span></span>All<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PrivateAssets</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageReference</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Into this:</p>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>StyleCop.Analyzers<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>All<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h2 id=\"label-your-sections\"><a href=\"#label-your-sections\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Label your Sections</h2>\n<p>You can label your <code class=\"language-text\">PropertyGroup</code> and <code class=\"language-text\">ItemGroup</code> elements using the <code class=\"language-text\">Label</code> attribute:</p>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span> <span class=\"token attr-name\">Label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Package<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- NuGet Packages Omitted --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>So the question becomes, how should we label them? Well, the convention I use is to use the same label names as the ones in Visual Studio's project properties screen:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 113 171' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-241bf34798a8c5d93630253bba24f110'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-241bf34798a8c5d93630253bba24f110)' width='113' height='171' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAABhCAIAAADp%2bzAaAAAACXBIWXMAAA7DAAAOwwHHb6hkAAASpElEQVR42u1biVNjR36e/yRVqcpRG6/P8dh7OLW7WV%2bbil0bp7Zqyy5X4irb2bXXzm68WXs89z2cQvctdICQ0C1ASIAOJCQkISEkkLiRhBDolp70dMDMdPo9AcMw4PHYDDDJdDWPp379Wv318f2%2b/nXrRD6fL%2bTzKPI4RVjh7XCiXMyNR5AzA7Xzg49HPDtQ80YQCCOXwwFsoLm%2bYOmv28DfkcDfPg4RVrVnqlQr5bJ1AOulnD5Ueo4OTjHBi48mHmzJz9NBf/A%2bAM/QwEkGeGFHhB8hqhcY3xRhBljcszTw3D4Z4PfBKyz8ecYDivr28Vk60AVLleKDAMD4T3xwioF990nG3afb9zD9FS74EQu8JgI/Y2NIduF/gQ6ehlVngn/uBK%2bwNjOcZOy%2bPlQ8iTcHBHC7nMvsB%2bAkEzxDBa9KwOAieL8TPEUDz1LxNqZjLz%2bDt/eLDPD3FPClGXzYDX4lAW9ywT9QwCnWJrCX2eAZCnhJAP7UB37CAr%2bRgZ%2bzsHJeYmGvwx57mrZZlecfHgB8/T3ZrUAUgaMIzuM9AMB%2b/wEVfD4ImC5wVgd%2bSMMq2uwAFDt4SwA%2bMYBWeD8K3hFh6b9Xgo96wC954EMDYLvAfyrAb9VYhi96wLs64ImCz1Tgs17wCgd8NoQVeMEAfiEAN%2byA4gJf9YLnqN%2blE56igLc6bhtnSoXCXgCep4EX%2bYA5Bj5QYl/5Cy6gj4MPJOD9PtBgAi1O8F9K8I4KtA6DMybwkRJcHgaf6gDNAV5lg59wwL/KwEUb0AbAr6Wg1Qpe5YNWO/i4H7QNg1N0cGkEnNEDlhv8phsw3eA12Nv0hx5LL7MwOnq3eyOZKewGAMcPxPduH%2bgJgbMmoJ0FX2ixBnu7HbyjBY0mcNUK3usAr8tBiwVctIDfqcB5M/izEdBs4HkSeIkP6B7waR/o9GFVbLOBn/NAgw38yQTIJvA3BPAXC7g0AK6ZwE/bAdML3uaCHz4kAJgZDtd3um7b5kvI/T0Ar7DEr2DNZOCvWrGWbhwGpDHAdgOKE/xbJ7jqBCIPIDnB%2b1LwiR78uwz8ZQj8ugOctQHyCPhYAxrs4Now4LrB6wKsuz7XgLND4A0RuDgCWm3g8hB4SwzOD4BX2sFNG3iT83A9UJ85Hyg3pleQSjG/9xyA8UdsnG2Y4CQdvMwDTXbwHzLwChv8gAYu28AnSvBTNjaZ4KyFEwZOTTi/X2CCN0XYlD3FAa8JsF6GiT/mgp/xsAzP0cALLPArEXiZifHgS/h0h9eT34mFDMHSnZ0sZAiVYKGwKie3Ivzuk3XDgbPK22LwYxbeVEzwL53gH9kYjZxi3sP326xSJ4r6aITlPIc3cD3D03iGunHYHrEPGyEH9t9jB9Bcf6gER9WztE2WxJiOfvcjvIez4umtxKeom/d1Qnx2%2b56%2bO%2b5MxIqi3y322a2Sn6E9dISV0e2UEvDONFP6Jf/264J94xvC229s3wvu3h9JhFWFBFrdBgClaTKTX1gtPEYRVnhbUZ947NcD8A%2bSUXZ3zGWym3FXejabz2Sz2yl4nvtff7QxtwvAfSFXQIpltAxDqYTkdmRH8FCCqfV8%2bXyxCK1JIX90YTcAqI%2bQYmll3t/B53D4orGpMIqieA0LEE7I4wqEpt1jjnA8jaLlWzXU63HORlZLxXtwHi2AbKVSHTMrSUKlx6JtoHCXV5Orq4l0ci0Wi8%2bEJpdmgywGIRDNJpfnxp0jRBppeGKhWsaV4TEBUK5UJ2yaBjJDIeJ19BlHB1UqnWveZxWJelQagc3pFYtY3smQkEYQCrh//OprayBcRYvZ4wXAqr1GoOq1cq5I3qcQ9wz4YqFRgUDTLeMYR9yy7vYehZwl0gEARDyqxXfMegAfQgoCX74w5SQQ6FqVmNMu7xHQm8gSiZQxMOzsENIHDYYWAtU34T5/8YxxfKFWLh2fHsAmcWzWJ%2bCxmDy%2bzTebS0UUHcIOoWTE6fd67cG5JdeoNZ7KOgzKdj5frOqdW05AJjouPVAPkEZL9VAsFgoIJKJypYx9QIoIfFYsFfKFUgmFzyvl8vGi0R09kcdjDr/HDBj%2bD7MidxPrKUcaTuQf8/AEwLEFkMXD/VMjf%2b%2b433WfxafKMQBQgCSDsUz%2bHuUHxRxkISzsyHj3vlgsQr6CVPXAbz1AkPsAyGWWI0sLS1HImYXcJuvA5EQ8tppMZbOZ7GZP5NLpzLYJW11ZnpubiyzHs1u13BG2P8JXsdYp5A%2bGxfawxChamfEMNTQ1UilESa%2b1VKnBZoemoVJBpzyuycmAStUViqar1dqdWrGvV%2bEOhqHxTkenia3XqUyezuREKjUknyuW0CKCGRSsW6AIh7YED8Vs0jvuW8siFUywf18zsp%2bUUHHUxrDPSmC1Twb8E5ML8fCMyznhHR%2bdnQlx2cSpSHrc2tfB5569dt3qX6zV1ldnxwgMVjRTQVLLQ%2bbhRDrjdY5MzS46zX1iiWo2EvPYDJ0CvqLfOu0x/u6jD7sG3b6RwXZ%2b52R4DVfjuQMCkMXEXMCm%2bersueYbN8QGu62vS6JyzHvNHLZC3EUbsLmkXVyr1UojMbxe54XLF8w%2bDEBq0Xf%2bzH83UXg2x6iAxTCPjkkE3A4e4/yFay3XLzaQWcSGy51KHb2F0G80trWRbS5H05nTUr09lsrCPsgdbA94LGqapC8ZmaKS6ZJOfu/gRHjCzOIoZDLO0Ii7W8JVSyU0YR9Uo0Iu2TQ%2bt76%2bsTrnIdAZs9EUFB3%2bYe21Kzdk2n4xpfFcM9fusDlHrXwmfS6e1nBp6n6LUNS1mC6EXAZCE8kxFS6jxYPrAVxOB0Z6rjQRuiVCpkDhcRjaWkjUG9cpHLVKzTc5PFIxd8znYxCaOsWi/zl73uoP12q15KLv%2bvVLHd1qi9OXWg6d%2b%2bOnOl9syWNsbSEo%2bgyBgF/KZ0wtxVVcms7i4lPbOjU6k6Gnpelmv3OmWkazBwUAWxAXkPRazD1qM9sc4dUUimQDHrfH64/G4tHoUnwtEQkvZgtIdG5yxO6YnJ5PpDLwlXw2GRh3ms2WMX8QNuf87MxqOo8WC9MTLtPwyFJsdTm8lMpko0sL8WQ6PDs1MTnlcztcvlAeKea/%2bwja1w4gZdgRFUgRGH9CAimjKKQLuKIv4FeYWiiWKlCiFrdZpFDnGRQtYRYDk7EYUxbRMlYOgr%2bLWxKYDrkJZsNKLZVy%2bdwjscQ7OfouY%2bMpm195H4/v1Ke7381vvbv9%2bIDE7BMx9wTAo1qR4WI0t%2b/0ONYAcIaprW%2bs16qQY3J7rfq/jeQ8Mq8EVKCrkVlDn6pXb1pO5iDfYdXFGQOSYKWMLi8G55eWoUrDKBX%2bw8BgnVLcAoaDhOEw/I17aKFKpeYyiJvJdGk7g96pXomvhqMrCFYjJL4cTmQyFgVTNuCB9n91bS22HAlH45joxJ5GYvEEtKkw62osEl1JQHD5Rwxiby3kMEjUtvF4yNZwo0GplDU1NuudwUWvpfHmVaFSo%2b7iKXoHRWzmgHVUr%2blqbGodGJuesutaW1obb1ymyIdWpsdZTCqZSB%2bemIcYHumU2VON1sYGu06f/ZrQRtebrFaT7ual0zepULaRBr1LANweUdDe%2b%2b2H3RYvkl0z6tQNl75uYgk5BKonisyMKFp4HbzmK%2bcaqaQb59hKCzTosFEOdwhVa47%2bDjKvM1uquPrETSShpovdQG7nUclqWOlS3iSl/P6jP/DVQ0ZtRwtRqOpiN1M4tJbWwYkl90BXG18sIrWyZP2hUDC8vIYLiMOdxChaDrhMgw7vxu07SxMjLBabTWdIDa4Fv72t6XqXRm8Z6hv1TOmk7e1CAY/HY9LpMoM96LFyOfy2pgsNgt74rJ9JaWF3yEIL8eL3WKx8D9diARNtdTLJpFMZjFchx5Ty2XQylcYUHT5rYb5sBi6R81DVLQXH5F0iKpFhmpit1mowPZFM5R%2b91/HBlnjbCYEx7F2PBNaohS2vBJSa0YWg1WLxBxcRqEZhk%2bNt8PhIiRy2hN/Y2ID6On8s/ELfBUL2G9THEzH3/1CN1qfv/WumYyVFv4FG4Xo2m4KMiXnXCvUNDtxxW0e16ffF/YQwY32xmd3bH3z4ahTySXhqlEImsrksdrtkLpqAxggqgvX1GlrIDBt1C6t5cGsd22XC98CLKLayh4t3TIDjfoCjBbC50d3Kk2byOaOUc7VNVKhWfA6jbsiezqQ72Q1CqXLAZF/NpOemptbS2cVQMLqWmZ90arU9ZsdYLJFBsF46UgBeaw9H3l%2bu3kFTc9Rmslqjam5ubbh8ni3V8SiX2jgiPoMqVqmFJEYgHNcJ%2bPIePYtG0Wrkn/35C0sgWisf3r73vgDaVUN3AEgueNhkeuv1K1dJPK1SYjDahDyKf6WYnXMxGCwOmbeQyJplYiqJypWb8X1v8rA/fPQAxi2qSy0Ut8vJpRN7LL7R3m4CjW22O%2bHihdn8JUUgFTEp3X3GLhalo0vecPoSv1ve2txmNBlOnztjmYgcLQBsSbkWme3VKpUKjd0bLJTKSDYxrFdJVL1z4fhMwNmnUWoN5kSuFFvw9yg1Q0Z7dDXpsw9JRbwL1xrGlxKVEpI7KgCb7lGkVK3WMN8iiuLKDIHrzGqlAtmmhJarWKggmIcQhXngk2I6rleLGVR2n9mde/TLyG9hyLZZvS5udgid7Se5rV29%2bsZeOpVMpjKYS/QxlRKYzxd35z7RQk8A7JwFuXv97Hu6GY8jAFgtyDa1ahXbmMBWv4X9xn0J2ww/ZgBgm0J5tjjtt7s8K4lUdGE2upIoFPL3bF7ksOqn11bm5ubhkh%2bfu7ltHX6Yp3D2cquUS15rP5PJEkvkrsDMrN8TWoxVa1X4tFwuFxEExa/lSiW1Ehkb82Ywf2kJd4YWcX2K2YpDO4i5GwAc9tUaahCTm1nKUu1OtZgzD2pnlpOj/V0kEqmFxhz1B3TSdlJrm1AxMD8TsIyO%2bp1DTDKJSKT6llYDdh2FRGwlkfWuYBU9jIN0J/YYQIViLhnuYrddbqIGF1dkAmL/kJHexlpciVFar8gNg7SmG%2bZRN4tI1%2bq0nUq5XsamCVRmrYTOFnGY3MDisoTVQFcN31qvHsIaf28pkUpnbt9aH5TSiMxuRTdPq5C1EgXondvdAqpcP9DF50XicSGJIlEopRrVkFrYM%2byfcegarzQ0EDirpXWTitveM7JRqxwBANy1iIwatUw6h0mm6YddWgXfGQjJuHS%2bqOPMudOKQYtGJlmKxWTt/B69oWdAb9PLDCP%2bkKOfL9b2yjt5fOGVS1%2bxNfZbRwKgviBOra2EpiZnFyKFYjGVWIW1mPIMy0SCFiLNF16FugcO7mQikUqnU3DhnEymMxnsNp2ZD3rUUjGhhWibWqw8Ysf6Ny7qcarBmCSLbdwjubRzWC%2bXa7zBRQSKzXqeu8f4MR8iNnWQvN9llsuUDk8oXzwkTfoNxy63yBy/liu1jY318qZUvpu%2bvYO9aUDK1bqD8WjXA/sriwdV6/CPzT1Ro8cUwObxvNzhe5sPRMzl4GK3VluHK98yuuXv3zFTd2DMP1Bm7%2bCC3GEAqG/ER6a9nXw2Vygem1wsFrHf/ZTLaAE7C1XEzxluHihCIc/ivwzK49f6tjd%2bggh7iu2O5Qt1OoZshZ9eLOXzuUcLAHJItbY%2brOU3MEUT9v7LDbQEUokthjzeQKaAZhMRl8sdXctkU/Ex1%2bjkfBRBssuRGJTXsWgskVxbmAnOzi%2bn8adz4Xgxn57wumeW4mUUmZnyjQdmMvkD9p3uvc1q7%2b%2b83Ew2G3RizcBCyMekEgktLWKFRkinEBhCXyik4jNJLCaBzLQ6hoUM8XIiJmV19PV3Xzl/ZdDilHBprRSq0e7ul4mJRAKBQO/v0zbfbFLqjLEMghyohdtvn7jz3JWLzddvWnxhs4T06ZfXOwRMjlAsE3ChivZZeq838%2b8AMGVSMagMDqM7VUhJmAKZStSlNkYmrDdaeWUA1lfGP//4E5qwi0psUfXo2RSKyRnKIoWDHUR7DCE4fU2adlq3Pj3nvtlMkol4TSTO2GRwdnpmbsZHbbpKJNGabhKdwZC6gydXqSlttOHhoSunb0jUQrHCsDw9fvNqo20iOO93Nl66qjKP%2bP3BSGTBapCdOX0huFIoH2gXnNhrNYxOT4waHd5apTCgVbsnQnp5O5Uj8EwEBrSydrFsfjkx5TAwGFSpdihbRBxDPVwmT6Ea8AXco%2b4JtFJ1D6mpVKptfHbGO8KgELr7LCG/q53L6bc4M/niwc7jfX9DU99hx0kFKeGHnxHsxAr%2bD5JRCcV3vksF/NA6dtS9XKo/h9XDnmLv4T%2b3wW6Km68%2bAr/diQdqm9zdY4q7dd7WScbtY4q7jyxu2ZB7SnsiJf5vAfhfIgVG/vhsO/8AAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"113\" alt=\"Project Properties Tabs\" data-srcset=\"/assets/static/Project-Properties-Tabs.a9e6044.3877a34892c8e4ba6ecad0a28f0d04f1.png 113w\" data-sizes=\"(max-width: 113px) 100vw, 113px\" data-src=\"/assets/static/Project-Properties-Tabs.a9e6044.3877a34892c8e4ba6ecad0a28f0d04f1.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Project-Properties-Tabs.a9e6044.3877a34892c8e4ba6ecad0a28f0d04f1.png\" width=\"113\" alt=\"Project Properties Tabs\"></noscript></p>\n<h1 id=\"the-end-result\"><a href=\"#the-end-result\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The End Result</h1>\n<p>This is what my csproj looks like at the end of all that. I've removed all the extra fluff you don't need and labelled the properties in a way that makes navigating the file with your eye that much quicker.</p>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span> <span class=\"token attr-name\">Label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Build<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFrameworks</span><span class=\"token punctuation\">></span></span>netstandard1.6;net461<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFrameworks</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TreatWarningsAsErrors</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TreatWarningsAsErrors</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>GenerateDocumentationFile</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>GenerateDocumentationFile</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CodeAnalysisRuleSet</span><span class=\"token punctuation\">></span></span>../../../MinimumRecommendedRulesWithStyleCop.ruleset<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CodeAnalysisRuleSet</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span> <span class=\"token attr-name\">Label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Package<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>VersionPrefix</span><span class=\"token punctuation\">></span></span>2.2.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>VersionPrefix</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Authors</span><span class=\"token punctuation\">></span></span>Muhammad Rehan Saeed (RehanSaeed.com)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Authors</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Product</span><span class=\"token punctuation\">></span></span>Dotnet Boxed Framework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Product</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Description</span><span class=\"token punctuation\">></span></span>...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Description</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Copyright</span><span class=\"token punctuation\">></span></span>Copyright © Muhammad Rehan Saeed. All rights Reserved<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Copyright</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageRequireLicenseAcceptance</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageRequireLicenseAcceptance</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageLicenseUrl</span><span class=\"token punctuation\">></span></span>https://github.com/Dotnet-Boxed/Framework/blob/master/LICENSE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageLicenseUrl</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageProjectUrl</span><span class=\"token punctuation\">></span></span>https://github.com/Dotnet-Boxed/Framework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageProjectUrl</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageIconUrl</span><span class=\"token punctuation\">></span></span>https://raw.githubusercontent.com/Dotnet-Boxed/Framework/master/Images/Icon.png<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageIconUrl</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RepositoryUrl</span><span class=\"token punctuation\">></span></span>https://github.com/Dotnet-Boxed/Framework.git<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RepositoryUrl</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RepositoryType</span><span class=\"token punctuation\">></span></span>git<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RepositoryType</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageTags</span><span class=\"token punctuation\">></span></span>ASP.NET;ASP.NET Core;MVC;Boxed;Muhammad Rehan Saeed;Framework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageTags</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReleaseNotes</span><span class=\"token punctuation\">></span></span>Updated to ASP.NET Core 1.1.2.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageReleaseNotes</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span> <span class=\"token attr-name\">Label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Signing<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SignAssembly</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SignAssembly</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AssemblyOriginatorKeyFile</span><span class=\"token punctuation\">></span></span>../../../Key.snk<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AssemblyOriginatorKeyFile</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PublicSign</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">'</span>$(OS)' != 'Windows_NT' <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PublicSign</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span> <span class=\"token attr-name\">Label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Project References<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>..\\Boilerplate\\Boilerplate.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span> <span class=\"token attr-name\">Label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Package References<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.AspNetCore.Mvc.Abstractions<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1.1.2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.AspNetCore.Mvc.Core<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1.1.2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Extensions.Caching.Abstractions<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1.1.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Extensions.Configuration.Binder<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1.1.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Newtonsoft.Json<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>9.0.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>StyleCop.Analyzers<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>All<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">'</span>$(TargetFramework)' == 'net461' <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>.NET 4.6.1 Package References<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Reference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>System.ServiceModel<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">></span></span></code></pre></div>\n"}},{"node":{"title":"Cross-Platform DevOps for .NET Core","path":"/cross-platform-devops-net-core/","date":"28 January 2017","timeToRead":9,"description":"Learn how to use Cake, AppVeyor and Travis CI continuous integration build systems to perform cross-platform DevOps for .NET Core based projects.","content":"<p>If you're a library author or writing a cross-platform application then .NET Core is great but it throws up the question, how do you test that your code works on all operating systems? Well the answer is simple, you build and test your code on each platform.</p>\n<p>This post builds on <a href=\"http://andrewlock.net\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Andrew Lock's</a> work where he shows in two blog posts how to build, test and deploy your .NET Core NuGet packages using <a href=\"http://andrewlock.net/publishing-your-first-nuget-package-with-appveyor-and-myget/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AppVeyor</a> (Windows) and <a href=\"http://andrewlock.net/adding-travis-ci-to-a-net-core-app/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Travis CI</a> (Mac and Linux) continuous integration build systems.</p>\n<p>In Andrew's blog posts, he writes PowerShell (Windows) or Bash (Mac and Linux) scripts to build, test and deploy his code. There were two problems here.</p>\n<ol>\n<li>Code is duplicated because you have to write your shell scripts twice.</li>\n<li>I've already grudgingly learned how to write PowerShell and done a little Bash but found both languages pretty ugly and difficult to use for more complex scenarios.</li>\n</ol>\n<p>I only want to write my shell script once, I don't want to have to learn Bash in-depth and I don't want to write PowerShell if I can help it. Around the same time I was reading Andrew's blog posts, I read about <a href=\"http://cakebuild.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cake</a> build.</p>\n<h1 id=\"cake\"><a href=\"#cake\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cake</h1>\n<p>Cake lets you write your build, test and deployment script in C# and it provides lots of helper methods to get stuff done making your script very terse. You can get syntax highlighting and intellisense for your Cake scripts by installing the <a href=\"https://marketplace.visualstudio.com/items?itemName=vs-publisher-1392591.CakeforVisualStudio\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio</a> or <a href=\"https://marketplace.visualstudio.com/items?itemName=cake-build.cake-vscode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio Code</a> extensions.</p>\n<p>Building and testing your .NET Core code using Cake is dead dimple. Grab the <code class=\"language-text\">build.cake</code>, <code class=\"language-text\">build.ps1</code> and <code class=\"language-text\">build.sh</code> files from the Cake <a href=\"http://cakebuild.net/docs/tutorials/getting-started\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Getting Started</a> guide and drop them at the root of your project. Here is an example of my project and the files we'll be dealing with in this post:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 325 437' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-f5aafa2e0343572c5ddb79fa0dcf80c4'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-f5aafa2e0343572c5ddb79fa0dcf80c4)' width='325' height='437' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAABWCAIAAADwhAcPAAAACXBIWXMAAAsSAAALEgHS3X78AAARLklEQVR42tVb55PjRnafv9Jf7E%2b2y2XfN9lVKttXrpN83rN0K2lXG2Z3dnaHQ05kznGYc845ghEEwBxBRDdIzixXGjlUWUuq6w2m0WyC/dDv9wLewxH7s8asG/sbaUfbRRMjGu%2bw9HKXh3WjQWPY9T%2bKOkDGAAPcmui%2bFc9%2bwUyCoD%2bZjCbTyYaNDTdg6Ye8A2sGBqZ5/G%2bongn0S9WiVHalFl/bPf47o16jM1lcTo1SJhaJzWYHTq%2bZOjgGMM0s8/sNA61Oy3CnzYf97kDw8kJwI1JcScRXFxcul0Oj1o6X5KExsG7U/JFVrUVoORtFovEVxRwmuI9%2b6YMNgDeH9S1nDkt0fiJC1MCzqnzDzNOcONHkbDajfyOadMsAM7AsEn9LDRwcBmpZneGu2WrGool%2br1fK51LJTLFYSibiHbT/UTsdFohRxTT2dzSqBH18PtYrFRK52qBUKSUK4eWlwexw2Rxv3x5nKy1u8gEywCyq1LTIEAPQX8wmdajRw1AU/MEwgmD4ctZud7pwZ4GvfjMgftBC7GGC96cgnuZJRM2u2pyEkASO4xTNPKKUDtgSW/H07%2biRF/SHvY5Gr%2b0PR%2bPxpI91C5XafLFkDnwHOEsc%2bastiAlcq5HwTt/y%2bFcS4RXv4koiVXMOBEMfMANDP95W0rMcJ04UCdXKxUKuUq3mspl8IZ9MZ%2bhDRcLRf/8xc8j43WVgOBxiGIIg3Y2R4mKAtR%2bx8aZ3goSH4yExAJZb5lolGo2OhiMwQuDLFb4aDQYohs3nc3y5pLhGLpY4QZAUSa0I8rAYyOfz8UQimUwNhkMwkggFNTa7TqNQqkRut8fkdGk1cp1C6XB7rUat0WS%2buREPZstDcCuO1qil8oVCuVJJptLD0Wg1n2rlivdCUTjki4bcDpvt9PLaZrcGrWaTzRFw2cKRsFiqWJL0IeB6i4HxZNofDPuDPklystFpQsVyHXRWBIUvp/FEilgbMWAQiPW68RVxICg4mqzYNMZWxmxtzOaHbLbPZjC2OGYrEyaF0BmMASPQks1idBoFfSaDUkmEAp1cn8329k9HQ5z1tdnB2tR2R8tghwnBTLjLxHpsvMemhmwMo30NHJxGEDreZ5JDNjViIzDha1LhLhuC90wcA5EuCw2Ii1DnxNMsDthkj%2bFr7TxDTOlO840RfaxybYnIXDlrEdOGC3yd51ztudA7NcleEnAFM9Euu0c6GizZKMIWMPwPutLXhgqQJT80ey3UfyfQvzy9/PKHs/88Vb0Rq755fXltjv3xWPj8QvZBqP%2bGJ1UmeokeG4YZwP8eiduBQIdtTNghzpT6ZBJj/Q3cXhh560tXaeiqTn2Nqb%2bxdFUm2lBN6i1EukywufJA80Cb2u/Stwz0FqyryTqbrKXO2Jusu8V626wPZn0dZnP0tGkw4ofBOOntUKDvARM6rLfFuAE1OfIAarF7oe0OIHNOo7fGJEBwBGFjKBvH2MQax4CiCB0Dp30gLfR6kAGDMZSJIkwSYGbAzd%2bnCAU7bH9BV3tzax4DSjPQxM0Z1JxB7lLwXbpjTCGe%2bsKShnXxTqAxNSQ6pnTXkum5KiN3ZaD0l3ThusKXcUBkHAWQ%2bOwMABDHEDbRWfylIPkPolx9zt4l6l98/eob3u3Lc/GTU8n3Z/JvTm7/9c8nT3nKb9/dPrsy/XBy%2bV4blVij//5O8t0J/4VA%2bSee1A7R%2b2FgswPdGdMc4qH6BNgyew4514Vfi7Vii/%2bVyKAKNXSRmtKXF9liZ2qfNlSVOtPu6kSgcV9Y084sbMvAqjAUaDOxfalRDrVtNoKyyT7XCXTZ%2bAAAgwmjTKBDhzE2gjHRHutrEb4OFQGqE2PDKOtp4MEumMOGEDCBA5J/H7RlINih7bmuMdP1NMlglw3CjL/NEegDTkJdMJUOwEwQZrlBmPG1mcC677sn/74Y2FjiJLry1tuvzQ5LvOytza05BOxGDGEsyYarNrVkMQ80i3bJMEwHWwt7HktgnEbarw3eihBw5mwN4ok7%2b2/OxInZbvaF1eHqf7x8d3JrvzAEXgjEr4SWP7yTSBxJgT7AU7l//%2bzDH388e/KK//TyLn4IlniMs64W%2bSHaeO5Oy6w2YyBlyyGvruRnMvuPfLVA7%2bHrAj9KzFf6gEDnPZHYn/IUx9eaZ%2bdyoauYwA7DFwL4AxowAuxucxVYu3gBmI72mDDCRNYIDnSoEMIEOwAeTBRjgU8aQWmAB6C%2b9k5H/SXradJxmIjBhLuOAx8BKCLgJnialKdFr10G4EpwMAXTNgTcijVw2UMgDsRg6eQKZ6klVKv7m6swuN/tFYgEwLYE6vMwTARbq2CbAMBN9hkgNs7iAHgcwPxFD4COBjgbh0l0PBNB4688FWd9pY9UXlwpVL6qIVr/IDVcmBPf3xj18YrYkRAYwjJX6c2VwlRcAk4%2bv919zBtdsimEStaaTz25fxLZnRCuj1a//3D97FT53XvZqxv1yxvTt9emK53t2zPpDx%2bkb6QusTl0V1wAbw%2bgBQRl%2b6WjEbADMB0pd2O5ejRbD7aIcIc0p2F/Y2bNYMCx8zcW5gzmynWE9pSrtnCVx8EmDrRn9EBEqDNjTRBrh1lbd00tEBiw9jZrbTDgaGuCDncKxp0wd8qNAKpz0w6Bjtoz1lFb6oNFQKZI2VEcrn0bzhEKdYE3QW9cnY3bwxEClBfnUxwIHcEL1l4YlIqFYDjc7TTDZdSQbF/fhdy1uac2kTmi6ljrwhI3ZRBrpn2ucVpKixi6fwP8EcSAAWu%2b3%2b20Q4l0Ml%2bKQwOpL/fVs9ffvhL/cCZ/%2bv76KU/1L6%2bvbyzRP73kPTk%2beyEJAQ9i/eiFPQTiRMgF4cFKL1wbePNdf33hqoxFjqQ2Ur%2b1pMBu6BNtoSuniTalrqwp3TFnhwey9C0D8IwL0gMI6wOeM8oFA8CFDoN7DJyIPhtCOQLBQBDhBgNdBnQ2ttnP2Wx63QfHrVMNTnd93c/gZh8xDEvSDEHRJMVQFEmA4042hmZYiqapnWQHvS06YKn7zmacord5A5Lm5qy/yH0KTn9VOnrIpi5JutmbrJMDi3gsBtUq0Wgsl8tVy6V2q%2b50O%2bOJSCiWqkGVUMBTKhVms1mhkHW6XaVyLhJLdrA%2bVMolM1ySaj6dLBZLilxW69DqVy41OtqkTqHB8q%2bvM1/IC6CfikeSmWrQ4y4US3z%2b2SX/nc5mtzptEunVG75EopIJzt8Kby9zxZLVYTNazQaD9PTi%2bv3llVKpCQWTzXpOIpeKpVqb2ShSKICrwu3k/Ub9v9P28fp0ubIVe%2bokvE6zIoFgqFDIBQLBZK5QSIc9wVC9WS9VitFEyhP0e9y2eCLpdrkrtRrUgNLpaKletzqc0WjE4/BkM/FssZaMpH1eh8sfxKnPkh/4ScPxJRB9LgnAfJKD2fRXBEANQ5LEQ%2bJ7AwcaQIhYbWSSWedNyF%2b/Vo1jgCCITDpTLJTqjeZkMt4slKvxAyviGgHWsf5HrjNlFFf/R5LrPCC9PWdocJGH7B%2bzUzb4ORiAIOjLf/7yjH/25MmTYCjE0mQNgv7HX16tVvi69oMgicVy8bEo6vOnmNqtTiULVUMtIPTlcrVRr5gMSqB/vD6/y%2bez6JVub8DlcuhNlljYHwlH/KFIIhrS6bU2m6OPwDaH2%2bEwOKwOnKT2wwAK9d7%2b7vLsH4XhUKRYLHXglt9pSqdj57zrs1thyGpwOF2vTz5YLaYz3vnN1Y3BYNQrZDanXcDjx8OBy1uJxWE0ypS9yeKTEpfPl6UkqRE6aebg8XhMratb10dqPp%2bvgGTTnI1aLpc4kJnFHIzPppON8Mxns9FotFytOLiS5F4KoR60EENSBHWvNAAud8sNmJ0k/Ud0AqAfQML%2biF6v1Wq1Hh8ff/3V18lkcpP6/qXSiYOrldisVSQSDQcjlUo1HI4YclXMZzPZRBlqVCHI7bZi/UGrUc/lk93eqFzMIQhardXaTahcq7OfX%2bp/LkK9Xu/58%2bdOh1Muk4PTRrWslAqFsluV5k6vNYikAoNSf/r2pUilzlWqRuXF9ZX4zmJV3l4otJbxBN8vCxwDAKxqtVoul0ciEXA6GSBXF/xio91q1qFGq1zOQ9VaJpuBka7P543H481GAyirfg9B%2b/3Vas9VH0ePlfrRQMk8elNJYrVjXA%2biEnnLALj3Op1Oq9HWarV7V4LzIB/qhjZFfyyneD7VRYfAwHA45PP5Ar7g7IwHDC3Q67lMEuuPCOAkrB0y4AYRBDXE2v3x4BArthaLxe3tLVBBp6enqVS6Uikcv33jtppfvjnR6w3FYlktFysV4vO3xye8y417fEDl9xsxAHagUCg0m03AzHA0jEaCNos1nUlrNZpsoeK4M2Ty6aDHY7Y6Zjixb835sx24l/ifNmKFdxF0t2BuW053YLXTXJvN5sAaDAZbEd9i9dPK3cOtWgTBSrvdAWF4Op2ZTqbAgZtORrP5vAnV6612h2vwfDGHuzCKYc1Wa7bADwcGWwZgmIuGERQFRi1fKWfTAZlU5I/lQpGAxmAQ3/L1OuWtQhvwOgRCMTqcH86ebBmAoDrwluvNJtiBegNyO00mszEYScZTSbfPn82lVHKhIxiz6pWqO/tkjh8WA6D1%2b/0ugnTgDggUQQAANgRYgAGGAd8OQ9HligC2oN/rzWeLQb83my8OS4Q2lZebCH0Xtg%2bqZxvibO46wymie63FbGp8N239IIDa9Cmaun8PcPvhw9nDNR8qgx8mbEc2F9v2mYfPHlWAR5uHKMCJEInEMqkcAHbr89AUQPOGN2r9lJDZPkzaXmI6GeMr4n9/q%2bj7BxbgMB6PcIK6V8rbEIrcPtzEKWo7OJ3NlvhqV9GDhfUHA%2bbnlthoMJ6%2bey%2bXKXr9Qb2at5oNLrsplMxUSgUIqlWr5XgiUYHq4/6k027G4zGoUlSoZQ5vpFYu1aBGu92uQRBQUMlEpFKtQbVSNJECuquQz%2bcL%2bWarXcxEPZFEqVRuNBp6m00qEgTDqeVimoyHssVKuVTJpjMel1VrNIVBYB4NawymTCrmdLlC0Xgqk%2b606uFYqFYuery%2bYqX%2b0x0AobDH4z3n8c13ZhgGWGjxT57fioUylUitUd0K%2bNo7%2ba1IIxSLZReKy9sbnehKrVWdCAQymfzFMzBTZtTdqRUqoUyuEV6o1CqhUiwW6S7PP7w8fiOXy254vFvh7fHJu%2bM376Ri2alQeH31XiORa5Qgprh6ffLuknssqbgQnL9%2b/dZ6p1QZ9edXQr1MZrFYLq8lwNMXytRSIe/Vjy/ESj1w4nsoOhiMNnK%2bfbDlcDi9Xp/VYgVoBpuFwu3ReNjrY9P5FEWQ8WQ0GS/Ho1GtUoURDJ9NR9NRfzhGkS6MoADWAPRgE/rD0XIyHs/Gw/FkMl4MQcSAYUCtjfo9oNk6YOagD65WbbSmswmKwOViuQd%2bo4eBHwWX6mHgQ3Q0Hg1GQwTtTYb9WrU%2bGAwz6XimWAG/iWLAmcTANrabrW6395GBx0KCx17/YT6JAnZQ%2bH9WSL/0lUdfV1jhi91XAB7XQvfwJz%2bZsaOINpe/h9zDhbZvBtE7uoJhPgYNuwpkt23eKFqDldnRUsxWWd1/cfeazM4g/YB9dic/MF6SuTZXe48iHavFGE/EwM61IRDZt0OhQDiSAEdgKHw%2bt8sPYgZyDLazNyBXq1Q2C4zg/p5KrFdf6y/%2bgpf8e2GWyw9k4scvvpOrlN5YRnJ9zuOdBTN5j8P948vvJFfnb3jvFWbvYDQSCd4pZXKF2sgTi/vr1yaYPT7YIig6DU%2bdZe5VSWzQrxSzkUjIH4pUQHSTS9kczmyhWikXE7Fovlzwh2KVSq2UTbfbdX84avf5cYLYsyV%2btD0Y5q1UPyTOHsLkX44lPlv7L0enOdh5YeilAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"325\" alt=\"Cake Files\" data-srcset=\"/assets/static/CakeFiles.5cb2611.7864d7a669527e8e63c068f3b1bead00.png 325w\" data-sizes=\"(max-width: 325px) 100vw, 325px\" data-src=\"/assets/static/CakeFiles.5cb2611.7864d7a669527e8e63c068f3b1bead00.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/CakeFiles.5cb2611.7864d7a669527e8e63c068f3b1bead00.png\" width=\"325\" alt=\"Cake Files\"></noscript></p>\n<p>The <code class=\"language-text\">build.ps1</code> and <code class=\"language-text\">build.sh</code> files are shell scripts that download the Cake executable and execute the build.cake C# script. They also take any parameters that are passed to them and pass them onto your cake script. Now paste the following into your <code class=\"language-text\">build.cake</code> file:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Target - The task you want to start. Runs the Default task if not specified.</span>\n<span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> <span class=\"token function\">Argument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Target\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Default\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Configuration - The build configuration (Debug/Release) to use.</span>\n<span class=\"token comment\">// 1. If command line parameter parameter passed, use that.</span>\n<span class=\"token comment\">// 2. Otherwise if an Environment variable exists, use that.</span>\n<span class=\"token keyword\">var</span> configuration <span class=\"token operator\">=</span> \n    <span class=\"token function\">HasArgument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Configuration\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token function\">Argument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Configuration\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token function\">EnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Configuration\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">?</span> <span class=\"token function\">EnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Configuration\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"Release\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// The build number to use in the version number of the built NuGet packages.</span>\n<span class=\"token comment\">// There are multiple ways this value can be passed, this is a common pattern.</span>\n<span class=\"token comment\">// 1. If command line parameter parameter passed, use that.</span>\n<span class=\"token comment\">// 2. Otherwise if running on AppVeyor, get it's build number.</span>\n<span class=\"token comment\">// 3. Otherwise if running on Travis CI, get it's build number.</span>\n<span class=\"token comment\">// 4. Otherwise if an Environment variable exists, use that.</span>\n<span class=\"token comment\">// 5. Otherwise default the build number to 0.</span>\n<span class=\"token keyword\">var</span> buildNumber <span class=\"token operator\">=</span>\n    <span class=\"token function\">HasArgument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BuildNumber\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token generic-method\"><span class=\"token function\">Argument</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BuildNumber\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n    AppVeyor<span class=\"token punctuation\">.</span>IsRunningOnAppVeyor <span class=\"token punctuation\">?</span> AppVeyor<span class=\"token punctuation\">.</span>Environment<span class=\"token punctuation\">.</span>Build<span class=\"token punctuation\">.</span>Number <span class=\"token punctuation\">:</span>\n    TravisCI<span class=\"token punctuation\">.</span>IsRunningOnTravisCI <span class=\"token punctuation\">?</span> TravisCI<span class=\"token punctuation\">.</span>Environment<span class=\"token punctuation\">.</span>Build<span class=\"token punctuation\">.</span>BuildNumber <span class=\"token punctuation\">:</span>\n    <span class=\"token function\">EnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BuildNumber\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">?</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token function\">EnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BuildNumber\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// A directory path to an Artefacts directory.</span>\n<span class=\"token keyword\">var</span> artefactsDirectory <span class=\"token operator\">=</span> <span class=\"token function\">Directory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./Artefacts\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Deletes the contents of the Artefacts folder if it should contain anything from a previous build.</span>\n<span class=\"token function\">Task</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Clean\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Does</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">CleanDirectory</span><span class=\"token punctuation\">(</span>artefactsDirectory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Run dotnet restore to restore all package references.</span>\n<span class=\"token function\">Task</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Restore\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">IsDependentOn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Clean\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Does</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">DotNetCoreRestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Find all csproj projects and build them using the build configuration specified as an argument.</span>\n <span class=\"token function\">Task</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Build\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">IsDependentOn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Restore\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Does</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> projects <span class=\"token operator\">=</span> <span class=\"token function\">GetFiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./**/*.csproj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> project <span class=\"token keyword\">in</span> projects<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">DotNetCoreBuild</span><span class=\"token punctuation\">(</span>\n                project<span class=\"token punctuation\">.</span><span class=\"token function\">GetDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullPath<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">DotNetCoreBuildSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    Configuration <span class=\"token operator\">=</span> configuration\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Look under a 'Tests' folder and run dotnet test against all of those projects.</span>\n<span class=\"token comment\">// Then drop the XML test results file in the Artefacts folder at the root.</span>\n<span class=\"token function\">Task</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">IsDependentOn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Build\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Does</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> projects <span class=\"token operator\">=</span> <span class=\"token function\">GetFiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./Tests/**/*.csproj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> project <span class=\"token keyword\">in</span> projects<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">DotNetCoreTest</span><span class=\"token punctuation\">(</span>\n                project<span class=\"token punctuation\">.</span><span class=\"token function\">GetDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullPath<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">DotNetCoreTestSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    ArgumentCustomization <span class=\"token operator\">=</span> args <span class=\"token operator\">=></span> args\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-xml\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>artefactsDirectory<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">.</span><span class=\"token function\">CombineWithFilePath</span><span class=\"token punctuation\">(</span>project<span class=\"token punctuation\">.</span><span class=\"token function\">GetFilenameWithoutExtension</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullPath <span class=\"token operator\">+</span> <span class=\"token string\">\".xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    Configuration <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">,</span>\n                    NoBuild <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Run dotnet pack to produce NuGet packages from our projects. Versions the package</span>\n<span class=\"token comment\">// using the build number argument on the script which is used as the revision number </span>\n<span class=\"token comment\">// (Last number in 1.0.0.0). The packages are dropped in the Artefacts directory.</span>\n<span class=\"token function\">Task</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pack\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">IsDependentOn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Does</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> revision <span class=\"token operator\">=</span> buildNumber<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> project <span class=\"token keyword\">in</span> <span class=\"token function\">GetFiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./Source/**/*.csproj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">DotNetCorePack</span><span class=\"token punctuation\">(</span>\n                project<span class=\"token punctuation\">.</span><span class=\"token function\">GetDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullPath<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">DotNetCorePackSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    Configuration <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">,</span>\n                    OutputDirectory <span class=\"token operator\">=</span> artefactsDirectory<span class=\"token punctuation\">,</span>\n                    VersionSuffix <span class=\"token operator\">=</span> revision\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The default task to run if none is explicitly specified. In this case, we want</span>\n<span class=\"token comment\">// to run everything starting from Clean, all the way up to Pack.</span>\n<span class=\"token function\">Task</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Default\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">IsDependentOn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Executes the task specified in the target argument.</span>\n<span class=\"token function\">RunTarget</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>At the top of the script some arguments are defined. Values for these arguments can be set by passing values to the shell scripts via command line, they can come from environment variables or they can come from continuous integration build systems that Cake knows about (It knows all the common ones including TFS, TeamCity, Jenkins and Bamboo). In the above script I show how to get a build number from AppVeyor or Travis CI if the script is currently being run using those systems. This makes the code very short, terse and to the point.</p>\n<p>The rest of the script is made up of a series of chained tasks which execute one after the other, starting with the task with no dependencies. Alternatively you can pass in a Target argument which specifies which task you'd like the script to start executing from. A key thing to note is that the script does not need to know about any file names or file paths, everything is done by convention.</p>\n<p>One very important effect of using Cake is that your build script is easily testable. I've used many continuous integration systems that have their own proprietary tasks and when a slower build fails, debugging it was a nightmare, since it could only be done on the build machine. Since Cake is just a script, you can run it on your local machine and test it to your hearts content which gives you a quicker tighter development loop.</p>\n<h1 id=\"appveyor\"><a href=\"#appveyor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AppVeyor</h1>\n<p><a href=\"https://www.appveyor.com/docs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AppVeyor</a> is my favourite CI system but only works if you are hosting your code with Git based repositories and it only runs builds on Windows. All you need to do is sign-up, enable AppVeyor for your git repository and add an appveyor.yml file which is in <a href=\"https://en.wikipedia.org/wiki/YAML\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">YAML</a> format. Here is one of my commented appveyor.yml files:</p>\n<div class=\"line-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'{build}'</span>\n\n<span class=\"token key atrule\">pull_requests</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># Do not increment build number for pull requests</span>\n  <span class=\"token key atrule\">do_not_increment_build_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">nuget</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># Do not publish NuGet packages for pull requests</span>\n  <span class=\"token key atrule\">disable_publish_on_pr</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># Set the DOTNET_SKIP_FIRST_TIME_EXPERIENCE environment variable to stop wasting time caching packages</span>\n  <span class=\"token key atrule\">DOTNET_SKIP_FIRST_TIME_EXPERIENCE</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token comment\"># Disable sending usage data to Microsoft</span>\n  <span class=\"token key atrule\">DOTNET_CLI_TELEMETRY_OPTOUT</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">build_script</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">ps</span><span class=\"token punctuation\">:</span> .\\build.ps1\n\n<span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span> off\n\n<span class=\"token key atrule\">artifacts</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># Store NuGet packages</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> .\\Artefacts\\**\\*.nupkg\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> NuGet\n<span class=\"token comment\"># Store xUnit Test Results</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> .\\Artefacts\\**\\*.xml\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> xUnit Test Results\n\n<span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token comment\"># Publish NuGet packages</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span> NuGet\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> production\n  <span class=\"token key atrule\">api_key</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">secure</span><span class=\"token punctuation\">:</span> 73eFUWSfho6pxCy1VRP1H0AYh/SFiyEREV+/ATcoj0I+sSH9dec/WXs6H2Jy5vlS\n  <span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Only publish from the master branch</span>\n    <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master\n    <span class=\"token comment\"># Only publish if the trigger was a Git tag</span>\n    <span class=\"token comment\"># git tag v0.1.0-beta</span>\n    <span class=\"token comment\"># git push origin --tags</span>\n    <span class=\"token key atrule\">appveyor_repo_tag</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>It basically executes the <code class=\"language-text\">build.ps1</code> file at the root of my project and collects all the NuGet package and XML unit test result files in my artefacts folder. I also set some environment variables to turn off some lesser known .NET Core features for a faster build.</p>\n<p>AppVeyor, knows about NuGet and I use AppVeyor as my primary build system to publish my NuGet packages (You don't want AppVeyor and Travis CI both publishing your NuGet packages). Now I could have created a task in my cake file to publish NuGet packages and only execute that task if I was running on AppVeyor but AppVeyor has a pretty easy to use configuration file that I've chosen to do this step instead.</p>\n<p>To publish packages to NuGet, you sign-up and receive an API key. Of course, you don't want to share that with the whole world by checking it into GitHub or Bitbucket, so AppVeyor lets you <a href=\"https://ci.appveyor.com/tools/encrypt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">encrypt</a> it and paste the encrypted value into the appveyor.yml file.</p>\n<h1 id=\"travis-ci\"><a href=\"#travis-ci\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Travis CI</h1>\n<p><a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Travis CI</a> is very similar to AppVeyor but it targets both Mac and Linux. All you have to do is sign-up, turn on Travis for your repository and stick a .travis.yml file in the root of your project. Here is mine:</p>\n<div class=\"line-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> csharp\n<span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> linux\n  <span class=\"token punctuation\">-</span> osx\n\n<span class=\"token comment\"># .NET CLI require Ubuntu 14.04</span>\n<span class=\"token key atrule\">sudo</span><span class=\"token punctuation\">:</span> required\n<span class=\"token key atrule\">dist</span><span class=\"token punctuation\">:</span> trusty\n<span class=\"token key atrule\">addons</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">apt</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">packages</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> gettext\n    <span class=\"token punctuation\">-</span> libcurl4<span class=\"token punctuation\">-</span>openssl<span class=\"token punctuation\">-</span>dev\n    <span class=\"token punctuation\">-</span> libicu<span class=\"token punctuation\">-</span>dev\n    <span class=\"token punctuation\">-</span> libssl<span class=\"token punctuation\">-</span>dev\n    <span class=\"token punctuation\">-</span> libunwind8\n    <span class=\"token punctuation\">-</span> zlib1g\n\n<span class=\"token comment\"># .NET CLI requires OSX 10.11</span>\n<span class=\"token key atrule\">osx_image</span><span class=\"token punctuation\">:</span> xcode7.2\n\n<span class=\"token comment\"># Ensure that .NET Core is installed</span>\n<span class=\"token key atrule\">dotnet</span><span class=\"token punctuation\">:</span> 1.0.0<span class=\"token punctuation\">-</span>preview2<span class=\"token punctuation\">-</span>1<span class=\"token punctuation\">-</span><span class=\"token number\">003177</span>\n<span class=\"token comment\"># Ensure Mono is installed</span>\n<span class=\"token key atrule\">mono</span><span class=\"token punctuation\">:</span> latest\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Set the DOTNET_SKIP_FIRST_TIME_EXPERIENCE environment variable to stop wasting time caching packages</span>\n  <span class=\"token punctuation\">-</span> DOTNET_SKIP_FIRST_TIME_EXPERIENCE=true\n    <span class=\"token comment\"># Disable sending usage data to Microsoft</span>\n  <span class=\"token punctuation\">-</span> DOTNET_CLI_TELEMETRY_OPTOUT=true\n\n<span class=\"token comment\"># You must run this command to give Travis permissions to execute the build.sh shell script:</span>\n<span class=\"token comment\"># git update-index --chmod=+x build.sh</span>\n<span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> ./build.sh</code></pre></div>\n<p>You'll notice that we are specifying that we want to build our code on both Mac and Linux. Travis CI will actually run one build for each operating system. We then specify some details about the version of operating system we want to use and what we would like to install on them.</p>\n<p>Once again, I set the .NET environment variables to make the build a bit quicker and finally we run the <code class=\"language-text\">build.sh</code> Bash script to kick things off. Note that you need to run the following command to give Travis permission to execute the build.sh file (This is Linux after all):</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">git update<span class=\"token operator\">-</span>index <span class=\"token operator\">--</span>chmod=<span class=\"token operator\">+</span>x build<span class=\"token punctuation\">.</span>sh</code></pre></div>\n<p>Another thing to note is that if you are still using the older xproj project system and your unit tests are using xUnit, then your tests will not run due to this <a href=\"https://github.com/dotnet/cli/issues/3073\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bug</a>. There is a very nasty workaround in the link.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>If you want to learn how to add AppVeyor and Travis CI build status badges to your Git repository ReadMe or learn how to deploy to MyGet/NuGet using tags, I recommend going back to read Andrew's blog post which is still useful. If you're looking for more examples of Cake build scripts, you can take a look at the following Cake repositories:</p>\n<ul>\n<li><a href=\"https://github.com/cake-build/cake\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cake</a> - Cake builds itself with Cake! They have a very complicated build setup. This repository is great for learning about Cake helper methods that you can use in your scripts.</li>\n<li><a href=\"https://github.com/RehanSaeed/Serilog.Exceptions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Serilog.Exceptions</a> - Builds, tests and deploys .NET Core NuGet packages.</li>\n<li><a href=\"https://github.com/Dotnet-Boxed/Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed Framework</a> - Builds, tests and deploys .NET Core NuGet packages.</li>\n<li><a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed Templates</a> - Builds, tests and deploys a <code class=\"language-text\">dotnet new</code> NuGet package.</li>\n</ul>\n"}}]}}},"context":{}}