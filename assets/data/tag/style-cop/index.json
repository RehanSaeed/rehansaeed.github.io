{"hash":"6ac3167c41ff30f1b78a5b3b41d3ca86ae123a0f","data":{"tag":{"title":"StyleCop","path":"/tag/style-cop/","belongsTo":{"edges":[{"node":{"title":"A Very Generic .editorconfig File (Updated)","path":"/generic-editorconfig-file/","date":"1 October 2017","timeToRead":3,"description":"A .editorconfig file define and maintain consistent coding styles between different editors and IDEs for file with different file extensions.","content":"<h1 id=\"what-is-a-editorconfig-file\"><a href=\"#what-is-a-editorconfig-file\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is a .editorconfig File?</h1>\n<p>A <code class=\"language-text\">.editorconfig</code> file helps developers define and maintain consistent coding styles between different editors and IDEs for file with different file extensions. These configuration files are easily readable and they work nicely with version control systems. An <code class=\"language-text\">.editorconfig</code> file defines various settings per file extension such as charsets and tabs vs spaces.</p>\n<p><a href=\"https://www.hanselman.com/blog/TabsVsSpacesAPeacefulResolutionWithEditorConfigInVisualStudioPlusNETExtensions.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Scott Hanselman</a> recently wrote a blog post about this file. You can also find out more from the official docs at <a href=\"http://editorconfig.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">editorconfig.org</a> and the <a href=\"https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio Docs</a> which I recommend you read.</p>\n<h1 id=\"a-very-generic-editorconfig\"><a href=\"#a-very-generic-editorconfig\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A Very Generic .editorconfig</h1>\n<p>I wrote a generic <a href=\"https://github.com/RehanSaeed/EditorConfig/blob/master/.editorconfig\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.editorconfig</a> file supporting the following file types:</p>\n<ul>\n<li>C# - .cs, .csx, .cake</li>\n<li>Visual Basic - .vb</li>\n<li>Script - .sh, .ps1, .psm1, .bat, .cmd</li>\n<li>XML - .xml, .config, .props, .targets, .nuspec, .resx, .ruleset</li>\n<li>JSON - .json, .json5</li>\n<li>YAML - .yml,  .yaml</li>\n<li>HTML - .htm, .html</li>\n<li>JavaScript - .js, .ts, .tsx, .vue</li>\n<li>CSS - .css, .sass, .scss, .less</li>\n<li>SVG - .svg</li>\n<li>Markdown - .md</li>\n<li>Visual Studio - .sln, .csproj, .vbproj, .vcxproj, .vcxproj.filters, .proj, .projitems, .shproj</li>\n<li>Makefile</li>\n</ul>\n<p>Extensive code style settings for C# and VB.NET have been defined that require the latest C# features to be used. In addition, it sets various more advanced C# style settings. All C# related code styles are consistent with <a href=\"https://github.com/DotNetAnalyzers/StyleCopAnalyzers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">StyleCop's</a> default styles. You can find our more about the C# code style settings from the official <a href=\"https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docs</a> and also in <a href=\"http://kent-boogaart.com/blog/editorconfig-reference-for-c-developers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kent Boogaart's</a> blog post.</p>\n<h1 id=\"how-do-i-use-it\"><a href=\"#how-do-i-use-it\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How do I use It?</h1>\n<p>All you have to do is drop it into the root of your project. Then any time you open a file in Visual Studio, the <code class=\"language-text\">.editorconfig</code> file settings will be used to help format the document and also raise warnings if your code style and formatting does not conform.</p>\n<p>For Visual Studio Code, you can install the <a href=\"https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">EditorConfig for VS Code</a> extension to get support.</p>\n<h1 id=\"exciting-july-2018-update\"><a href=\"#exciting-july-2018-update\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exciting July 2018 Update</h1>\n<p>I noticed that Microsoft silently released several new C# code style settings. I'm not sure when they were released but they're available in the current Visual Studio 15.7 update. The majority of them are to enforce the use of newer C# 7.3 syntax. I updated my generic <code class=\"language-text\">.editorconfig</code> file to add these new settings with C# 7.3 as the default.</p>\n<p>Microsoft also updated their documentation for <code class=\"language-text\">.editorconfig</code> settings pertaining to .NET, so I added links to the docs site, so it's easy to see what each setting does and change it, if it's not to your liking. I've also included a undocumented dozen settings. There is an <a href=\"https://github.com/MicrosoftDocs/visualstudio-docs/issues/1070\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">open issue</a> on GitHub to get them documented, so it's easy to see what they do.</p>\n<p>In addition, while I was working on this, I added support for a few more file extensions, including <code class=\"language-text\">yaml</code> (<code class=\"language-text\">yml</code> was already there), <code class=\"language-text\">json5</code> (If you haven't heard of <code class=\"language-text\">json5</code>, <a href=\"https://json5.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">check it out</a>), <code class=\"language-text\">cmd</code> and <code class=\"language-text\">bat</code> (If you haven't switched to PowerShell yet, what are you waiting for).</p>\n<p>Finally, Microsoft <a href=\"https://blogs.msdn.microsoft.com/visualstudio/2018/06/26/visual-studio-2017-version-15-8-preview-3/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">announced last week</a> that the Visual Studio 15.8 update which is currently being released as preview 3 will automatically fix errors when you format the document using the <kbd>CTRL+K</kbd> followed by <kbd>CTRL+D</kbd> shortcut. This is huge! It means that you can drop a <code class=\"language-text\">.editorconfig</code> file in an existing codebase and with a few clicks or keyboard shortcuts (if that's how you roll) you can clean up your code base to use the latest C# 7.3 features and a code style that suits you.</p>\n"}},{"node":{"title":"Naming Conventions","path":"/naming-conventions/","date":"4 September 2014","timeToRead":3,"description":"Code is written to be read by humans, not machines. Naming conventions and standard code styling can boost productivity, particularly if working in teams.","content":"<p>Code is written to be read by humans, not for machines so it makes sense that following some basic ground rules for the look and feel of your code could make your code easier to read and boost your productivity. This is particularly important if you work in teams where each developer can go off and write their code in entirely different ways. Reading these different styles hinders your productivity. In my opinion if you add up all the few extra seconds here and there, it all adds up to extra hours or even days wasted over the course of a year per developer.</p>\n<div class=\"custom-block warning\"><p class=\"custom-block-title\">Disclaimer</p><p>At the end of the day, there are no rules for coding style. This is all a matter of personal preference.</p></div>\n<p>I have recently been doing a fair amount of T-SQL and C++ and thought I'd look into some form of naming conventions for the two languages. If you've read my previous blog post '<a href=\"/stop-brace-wars-use-stylecop/\">Stop the Brace Wars, Use StyleCop</a>', then you'll know how I feel about coding style in the C# language.</p>\n<h1 id=\"sql-coding-style\"><a href=\"#sql-coding-style\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL Coding Style</h1>\n<p>The SQL language is an interesting case, its a really old language from 1974 and in those days they didn't even have keyboards that could deal with upper and lower case letters!</p>\n<p>A lot of examples you'll see in books have used all-caps for the SQL keywords like <code class=\"language-text\">SELECT</code> and <code class=\"language-text\">WHERE</code>. As is <a href=\"http://en.wikipedia.org/wiki/All_caps#cite_note-autogenerated62-4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">widely researched</a>, all-caps is <strong>really</strong> bad for readability. However, as <a href=\"http://stackoverflow.com/questions/608196/why-should-i-capitalize-my-sql-keywords\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> Stack Overflow article shows, all-caps is still a really popular style of writing SQL.</p>\n<div class=\"line-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> s<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>Size\n<span class=\"token keyword\">FROM</span> Spaceship s\n<span class=\"token keyword\">WHERE</span> s<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">'Death Star'</span></code></pre></div>\n<div class=\"line-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> s<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>Size\n<span class=\"token keyword\">from</span> Spaceship s\n<span class=\"token keyword\">where</span> s<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">'Death Star'</span></code></pre></div>\n<p>In the above example, the all capitals doesn't look too bad. It's a very short SQL statement and helps break up the three parts of the query. You could argue, that the SQL keywords are coloured blue, so we don't need the capitalization and that's a pretty good argument. As an aside please remember that colour blindness affects approximately 1 in 12 men and 1 in 200 women in the world (<a href=\"http://en.wikipedia.org/wiki/Color_blindness\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a>).</p>\n<p>But this is a really simple SQL statement, if you start writing a stored procedure of any complexity, things get ugly pretty fast (Imagine writing C# with upper case keywords, yuck!). Happily though, SQL developers seemed to have cottoned onto this. A lot more real world SQL examples on blogs and forums seem to be all lower-case. Even to me though, all lower case SQL does not look entirely correct, perhaps I've just been conditioned into all-caps, it is however easier to read for more complex T-SQL.</p>\n<h1 id=\"c-coding-style\"><a href=\"#c-coding-style\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C++ Coding Style</h1>\n<p>C++ is fairly similar to C#, so for me as a mainly C# developer it's easier to write in a similar style. However, I was not happy with this approach and wanted to see what was being done elsewhere and what was the more 'correct' approach, if there was one.</p>\n<p>I found the <a href=\"http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google C++ Style Guide</a> which is a really detailed, yet simple set of guidelines for how to write your C++. Definitely worth a quick read.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusions</h1>\n<p>Coding style is a deeply personal subject and a pretty important one too that is often overlooked. In my opinion, it's always worth spending a little time looking up the preferred methods (There will usually be more than one) of writing in any particular language and picking one of the most popular approaches.</p>\n<p>If you're working in a team, you'll reap the benefits pretty quickly. Code written by others will look just like yours, saving you precious seconds. Even if your a solo developer, you'll benefit. Developers are inherently plagiarists, copying snippets of code found on-line written by others. Using a common coding style will mean that your style is more likely to be the same as the next snippet of code you or I shamelessly copy from the internet.</p>\n"}},{"node":{"title":"Stop The Brace Wars, Use StyleCop","path":"/stop-brace-wars-use-stylecop/","date":"8 February 2014","timeToRead":3,"description":"StyleCop analyzes C# source code to enforce a set of style and consistency rules. Rehan advocates its use in this thought provoking article.","content":"<p>There is an on-going war among developers. This silent war has claimed countless hours of developer time through hours wasted in pointless meetings and millions of small skirmishes over the style of each developers written code. This post outlines a peace treaty, a way forward if you will but first I will outline the problem.</p>\n<h1 id=\"unverscores-versus-the-this-keyword\"><a href=\"#unverscores-versus-the-this-keyword\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unverscores Versus the 'this' Keyword</h1>\n<p>This is the main battlefront where most time is wasted and where developers are most entrenched in their forward positions. To use underscores for your field names or the <code class=\"language-text\">this</code> keyword. I myself am in this <code class=\"language-text\">this</code> camp but neither has a clear advantage in the battlefield. The underscores make it marginally quicker to access your fields using intelli-sense, while the <code class=\"language-text\">this</code> keyword makes it quicker to differentiate class members from static members.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> _property<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> Property\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> _property<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> property<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> Property\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"the-brace-war\"><a href=\"#the-brace-war\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Brace War</h1>\n<p>This lesser known conflict is where JavaScript styling has leaked into C#. The default formatting rules in visual studio usually quashes this conflict but there are still those who see white space as wasted space and will go the extra mile by changing the Visual Studio settings to 'fix' this problem. I personally stick to the defaults and find the other method hard to read, a small sacrifice of a few extra lines is worth the gain in readability.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> Property\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> Property <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"field-property-constructor-and-method-ordering\"><a href=\"#field-property-constructor-and-method-ordering\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Field, Property, Constructor and Method Ordering</h1>\n<p>Some (like me), like to have all fields, properties, constructors and methods separated into their own groups. Others prefer fields grouped with properties, and members from implemented interfaces kept together. Again, there is no real right way, the former allows quick navigation to find what you need, while the latter allows quick navigation of members which relate to each other.</p>\n<h1 id=\"using-statements-inside-or-outside-the-namespace\"><a href=\"#using-statements-inside-or-outside-the-namespace\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Statements Inside or Outside the Namespace</h1>\n<p>Here is one area where there is a clear advantage in one camp. As outlined in this <a href=\"http://stackoverflow.com/questions/125319/should-usings-be-inside-or-outside-the-namespace\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stack Overflow post</a>, adding using statements inside the namespace can sometimes save a few seconds of troubleshooting. Yet even here, Visual Studio lets us down by having using statements outside the namespace as the default.</p>\n<h1 id=\"stepping-on-peoples-feet\"><a href=\"#stepping-on-peoples-feet\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stepping on Peoples Feet</h1>\n<p>Looking at another developers code can be an interesting experience. The style, look and feel of any code can vary wildly, even if they are written in the same language. Many times, I have found it difficult to find what I'm looking for and it takes time to adjust to each unique style.</p>\n<p>Many a time, these large differences can occur even in the same teams, reducing productivity. This leads to the inevitable 'standards' meetings, where a teams of developers sit in a room and discuss underscores versus <code class=\"language-text\">this</code> and other differences at length. My own experience is that each side is entrenched and hunkering down into their positions, not wanting to have to change their writing style. In the end, the majority wins out or people continue working in their own way and people get used to it.</p>\n<h1 id=\"the-solution-for-peace\"><a href=\"#the-solution-for-peace\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Solution For Peace</h1>\n<p>I would argue that as there is no clear superior coding style, it is a pointless waste of time arguing over it. However, there is something to be said for a commons coding style. This is where <a href=\"http://stylecop.codeplex.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">StyleCop</a> comes in. It is a set of style rules which can be applied to your C# code.</p>\n<p>There need be no lengthy discussion or arguing over it. Keep the default rules (turn off the comment rules if you choose) and you quickly have a set of standards that can be universally applied and tested not just in your team but universally by all C# developers around the world.</p>\n<p>Download some sample code from <a href=\"https://github.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a> and be at ease at the familiar look to the hopefully well designed code. I paint a rosy picture but I see more and more developers using StyleCop. It takes a week to get used to the change in your writing style, I myself switched from underscores to <code class=\"language-text\">this</code> and have never looked back. You can too.</p>\n"}}]}}},"context":{}}