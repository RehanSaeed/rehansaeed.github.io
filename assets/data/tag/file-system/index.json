{"hash":"f13fee3d4e928eb947bf0e6ed3c24e5ad9337a47","data":{"tag":{"title":"File System","belongsTo":{"edges":[{"node":{"title":"Docker Read-Only File Systems","path":"/docker-read-file-systems/","date":"13 November 2017","timeToRead":1,"description":"How to use a read-only file system in Docker to secure your Docker containers using the docker run CLI command and Docker compose or docker swarm.","content":"<p>For a little bit of added security you can make the file system of your container read-only, excluding any volumes you may have created. If anyone hacks into your container, they will be unable to change any files.</p>\n<h1 id=\"docker-run\"><a href=\"#docker-run\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker Run</h1>\n<p>When using the docker run command using the CLI, you can simply use the following command:</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">--</span>read<span class=\"token operator\">-</span>only redis</code></pre></div>\n<h1 id=\"docker-composeswarm\"><a href=\"#docker-composeswarm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker Compose/Swarm</h1>\n<p>To set a read-only file system, you simply need to set the <code class=\"language-text\">read_only</code> flag to <code class=\"language-text\">true</code>, like so:</p>\n<div class=\"line-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> redis<span class=\"token punctuation\">:</span>4.0.1<span class=\"token punctuation\">-</span>alpine\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> myoverlay\n    <span class=\"token key atrule\">read_only</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    \n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  myoverlay<span class=\"token punctuation\">:</span></code></pre></div>\n<p>So above, I have a Docker stack file for use with Docker Swarm showing how to start Redis with a read-only file system.</p>\n<h1 id=\"what-is-supported\"><a href=\"#what-is-supported\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What is Supported?</h1>\n<p>Not all images support having them started with a read-only file system. Some require access to write temp files and the like. You can usually get away with using a volume in this case because volumes are still writeable even if you enable the read-only file system. In my research, I found it hard to determine if an image supported the feature, so I simply tried it out and found that most failed.</p>\n<p>I discovered that Redis was the only image that I was running that had <a href=\"https://github.com/docker-library/redis/issues/109\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">full support</a>, several Elastic Stack containers failed to start and even my ASP.NET Core images failed to start. I since raised a GitHub issue <a href=\"https://github.com/Microsoft/aspnet-docker/issues/66\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>, trying to find out why the container fails to start and seeing if there is any workaround.</p>\n"}}]}}},"context":{}}