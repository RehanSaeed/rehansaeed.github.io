{"hash":"24b96d2cbc31a85e339866129f50966cf11ece4a","data":{"tag":{"title":".NET Boxed","path":"/tag/net-boxed/","belongsTo":{"edges":[{"node":{"title":"The Fastest NuGet Package Ever Published (Probably)","date":"2020-07-08T08:34:00+00:00","dateModified":"2020-09-17T09:29:00+00:00","timeToRead":6,"description":"The fastest way to create a new NuGet package project and get it published with all the bells and whistles like continuous integration (CI) builds and drafted release notes.","path":"/the-fastest-nuget-package-ever-published-probably/","published":true}},{"node":{"title":"A Simple and Fast Object Mapper","date":"2019-03-05T00:00:00+00:00","dateModified":null,"timeToRead":9,"description":".NET Boxed mapper is an object to object mapper that is simpler and faster than Automapper and makes zero allocations of memory, thus making the garbage collector do less work.","path":"/a-simple-and-fast-object-mapper/","published":true}},{"node":{"title":".NET Boxed","date":"2018-05-13T00:00:00+00:00","dateModified":null,"timeToRead":2,"description":".NET Boxed is a set of project templates with batteries included, providing the minimum amount of code required to get you going faster.","path":"/net-boxed/","published":true}},{"node":{"title":"The Dotnet Watch Tool Revisited","date":"2018-04-30T00:00:00+00:00","dateModified":null,"timeToRead":2,"description":"The dotnet watch tool is a file watcher for dotnet that restarts the application when changes in the source code are detected. You can use dotnet watch in Visual Studio by using the launchSettings.json configuration file.","path":"/the-dotnet-watch-tool-revisited/","published":true}},{"node":{"title":"ASP.NET Core Lazy Command Pattern","date":"2017-04-08T00:00:00+00:00","dateModified":null,"timeToRead":4,"description":"Move your ASP.NET Core MVC action method logic into lazily loaded commands using the command pattern, to reduce Controller complexity.","path":"/asp-net-core-lazy-command-pattern/","published":true}},{"node":{"title":"dotnet new Feature Selection","date":"2017-03-26T00:00:00+00:00","dateModified":null,"timeToRead":9,"description":"How to add feature selection to your dotnet new template using symbols (bool, string, choice, computed) and pre-processor directives.","path":"/dotnet-new-feature-selection/","published":true}},{"node":{"title":"SEO Friendly URL's for ASP.NET Core","date":"2016-12-17T00:00:00+00:00","dateModified":null,"timeToRead":7,"description":"An SEO friendly URL is human readable and gives your site a higher page rank. Learn how to implement SEO friendly URL's using ASP.NET Core.","path":"/seo-friendly-urls-asp-net-core/","published":true}},{"node":{"title":"The Dotnet Watch Tool","date":"2016-09-10T00:00:00+00:00","dateModified":null,"timeToRead":2,"description":"The dotnet watch tool is a file watcher for dotnet that restarts the application when changes in the source code are detected.","path":"/the-dotnet-watch-tool/","published":true}},{"node":{"title":"NGINX for ASP.NET Core In-Depth","date":"2016-08-21T00:00:00+00:00","dateModified":null,"timeToRead":11,"description":"NGINX is a popular open source web server. It can act as a reverse proxy server for ASP.NET Core web apps. How to configure NGINX for ASP.NET Core.","path":"/nginx-asp-net-core-depth/","published":true}},{"node":{"title":"ASP.NET Core Fluent Interface Extensions","date":"2016-06-26T00:00:00+00:00","dateModified":null,"timeToRead":2,"description":"Using the fluent interface style in with ASP.NET Core Fluent Interface Extension methods. Building on top of the work done by Khalid Abuhakmeh.","path":"/asp-net-core-fluent-interface-extensions/","published":true}},{"node":{"title":"Social TagHelpers for ASP.NET Core","date":"2016-03-19T00:00:00+00:00","dateModified":null,"timeToRead":5,"description":"Enhance the experience of sharing a page from your site through the use of social media meta tags implemented with ASP.NET Core TagHelpers.","path":"/social-taghelpers-for-asp-net-core/","published":true}},{"node":{"title":"Subresource Integrity TagHelper Using ASP.NET Core - Part 2","date":"2016-03-12T00:00:00+00:00","dateModified":null,"timeToRead":4,"description":"Use an ASP.NET Core TagHelper to implement Subresource Integrity (SRI) to ensure that external resources have not been tampered with. With is part 2.","path":"/subresource-integrity-taghelper-using-asp-net-core-part-2/","published":true}},{"node":{"title":"Subresource Integrity TagHelper Using ASP.NET Core - Part 1","date":"2016-03-06T00:00:00+00:00","dateModified":null,"timeToRead":3,"description":"Use an ASP.NET Core TagHelper to implement Subresource Integrity (SRI) to ensure that external resources have not been tampered with.","path":"/subresource-integrity-taghelper-using-asp-net-core/","published":true}}]}}},"context":{}}