{"hash":"2e3b8743cc017733db3a4d1576a5fa9b4f1f79d1","data":{"tag":{"title":".NET Boxed","path":"/tag/net-boxed/","belongsTo":{"edges":[{"node":{"title":"A Simple and Fast Object Mapper","path":"/a-simple-and-fast-object-mapper/","date":"5 March 2019","timeToRead":9,"description":".NET Boxed mapper is an object to object mapper that is simpler and faster than Automapper and makes zero allocations of memory, thus making the garbage collector do less work.","content":"<p>I have a confession to make...I don't use <a href=\"https://github.com/AutoMapper/AutoMapper\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Automapper</a>. For those who don't know Automapper is the number one object to object mapper library on NuGet by far. It takes properties from one object and copies them to another. I couldn't name the second place contender and looking on NuGet, nothing else comes close. This post talks about object mappers, why you <strong>might</strong> not want to use Automapper and introduces a faster, simpler object mapper that you <strong>might</strong> want to use instead.</p>\n<h1 id=\"why-use-an-object-mapper\"><a href=\"#why-use-an-object-mapper\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Why use an Object Mapper</h1>\n<p>This is a really good question. Most of the time, it boils down to using Entity Framework. Developers want to be good citizens and not expose their EF Core models in the API surface area because this can have really bad security implications (See overposting <a href=\"https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/implementing-basic-crud-functionality-with-the-entity-framework-in-asp-net-mvc-application\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>).</p>\n<p>I've received a lot of comments at this point in the conversation saying \"Why don't you use <a href=\"https://github.com/StackExchange/Dapper\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dapper</a> instead. Then you don't need model classes for your data layer, you can just go direct to your view model classes via Dapper\". Dapper is really great, don't get me wrong but it's not always the right tool for the job, there are distinct disadvantages to using Dapper instead of EF Core:</p>\n<ol>\n<li>I have to write SQL. That's not so bad (You should learn SQL!) but it takes time to context switch and you often find yourself copying and pasting code back and forth from SQL Management Studio or <a href=\"https://docs.microsoft.com/en-us/sql/azure-data-studio/what-is?view=sql-server-2017\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Azure Data Studio</a> (I've started using it, you should too). It just makes development a bit slower, that's all.</li>\n<li>EF Core can be run in-memory, making for very fast unit tests. With Dapper, I have to run functional tests against a real SQL Server database which is slow, brittle and a pain to setup. Before each test, you need to ensure the database is setup with just the right data, so your tests are repeatable, otherwise you end up with flaky tests. Don't underestimate the power of this point.</li>\n<li>EF Core Migrations can automatically generate the database for me. With Dapper, I have to use external tools like Visual Studio Database Projects, <a href=\"https://dbup.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DbUp</a> or <a href=\"https://flywaydb.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flyway</a> to create my database. That's an extra headache at deployment time. EF Core lets you cut out the extra time required to manage all of that.</li>\n<li>EF Core Migrations can automatically handle database migrations for me. Migrating databases is hard! Keeping track of what state the database is in and making sure you've written the right <code class=\"language-text\">ALTER TABLE</code> scripts is extra work that can be automated. EF Core handles all that for me. Alternatively, Visual Studio Database Projects can also get around this problem.</li>\n<li>I can switch database provider easily. Ok...ok...nobody does this in the real world and I can only think of one case where this happened. People always mention this point though for some reason.</li>\n<li>EF Core defaults to using the right data types, while on the other hand human beings...have too often chosen the wrong data types and then paid the penalties later on when the app is in production. Use <code class=\"language-text\">NVARCHAR</code> instead of <code class=\"language-text\">VARCHAR</code> and <code class=\"language-text\">DATETIMEOFFSET</code> instead of <code class=\"language-text\">DATETIME2</code> or even <code class=\"language-text\">DATETIME</code> people! I've seen professional database developers make these mistakes all the time. Automating this ensures that the correct decision is made all the time.</li>\n<li>EF Core is not that much slower than using Dapper. We're not talking about orders of magnitude slower as it was with EF6. Throwing away all of the above benefits for slightly better speed is not a trade-off that everyone can make though, it depends on the app and situation.</li>\n</ol>\n<p>You need to use the right tool for the right job. I personally use Dapper, where there is an existing database with all the migrations etc. already handled by external tools and use EF Core where I'm working with a brand new database.</p>\n<h1 id=\"what-is-good-about-automapper\"><a href=\"#what-is-good-about-automapper\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What is good about Automapper?</h1>\n<p>Automapper is great when you have a small project that you want to throw together quickly and the objects you are mapping to and from have the same or similar property names and structure.</p>\n<p>It's also great for unit testing because once you've written your mapper, testing it is just a matter of adding a one liner to test that all the properties in your object have a mapping setup for them.</p>\n<p>Finally if you use Automapper with Entity Framework, you can use the ProjectTo method which uses the property mapping information to limit the number of fields pulled back from your database making the query a lot more efficient. I think this is probably the biggest selling point of Automapper. The alternative is to write your own Entity Framework Core projection.</p>\n<h1 id=\"what-is-wrong-with-automapper\"><a href=\"#what-is-wrong-with-automapper\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What is wrong with Automapper?</h1>\n<p>Cezary Piatek writes a <a href=\"https://cezarypiatek.github.io/post/why-i-dont-use-automapper/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">very good rundown</a> of some of the problems when using Automapper. I'm not going to repeat what he says but here is a short description:</p>\n<ol>\n<li>In the real world, mapping between identical or similar classes is not that common.</li>\n<li>If you have similar classes you are mapping between, there is no guarantee that they will not diverge, requiring you to write increasingly complex Automapper code or rewriting the mapping logic without Automapper.</li>\n<li>Finding all usages of a property no longer works when using Automapper unless you explicitly map every property, lowering discoverability.</li>\n<li>\n<p>If you have a complex scenario, <a href=\"https://jimmybogard.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jimmy Bogard</a> (the author of the tool) <a href=\"https://jimmybogard.com/automapper-usage-guidelines/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">suggests not using Automapper</a>:</p>\n<ul>\n<li>\"DO NOT use AutoMapper except in cases where the destination type is a flattened subset of properties of the source type\"</li>\n<li>\"DO NOT use AutoMapper to support a complex layered architecture\"</li>\n<li>\"AVOID using AutoMapper when you have a significant percentage of custom configuration in the form of Ignore or MapFrom\"</li>\n</ul>\n</li>\n<li>If you're mapping from database models to view models in an API, then dumping your database schema out as JSON makes for a bad API. You usually want more complex nested objects.</li>\n<li>How much time does it really save? Object mapping code is the simplest code a developer can write, I can do it without thinking and knock a few mappings out in a couple of minutes.</li>\n<li>Automapper is complex, it has a massive <a href=\"https://automapper.readthedocs.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">documentation</a> site just to show you how to use it and just checkout the 29 point list of <a href=\"https://jimmybogard.com/automapper-usage-guidelines/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">guidelines</a> on how to use it. Why should copying values from one object to another need to be so complex?</li>\n</ol>\n<h1 id=\"a-simple-and-fast-object-mapper\"><a href=\"#a-simple-and-fast-object-mapper\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A Simple and Fast Object Mapper</h1>\n<p>I wrote an object mapper library that consists of a couple of interfaces and a handful of extension methods to make mapping objects slightly easier. The API is super simple and very light and thus fast. You can use the <a href=\"https://www.nuget.org/packages/Boxed.Mapping/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boxed.Mapping</a> NuGet package or look at the code at on GitHub in the <a href=\"https://github.com/Dotnet-Boxed/Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dotnet-Boxed/Framework</a> project. Lets look at an example. I want to map to and from instances of these two classes:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MapFrom</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> BooleanFrom <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DateTimeOffset</span> DateTimeOffsetFrom <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> IntegerFrom <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> StringFrom <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MapTo</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> BooleanTo <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DateTimeOffset</span> DateTimeOffsetTo <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> IntegerTo <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> StringTo <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The implementation for an object mapper using the .NET Boxed Mapper is shown below. Note the <code class=\"language-text\">IMapper</code> interface which is the heart of the .NET Boxed Mapper. There is also an <code class=\"language-text\">IAsyncMapper</code> if for any reason you need to map between two objects asynchronously, the only difference being that it returns a <code class=\"language-text\">Task</code>.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoMapper</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IMapper</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MapFrom</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MapTo</span> destination<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        destination<span class=\"token punctuation\">.</span>BooleanTo <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>BooleanFrom<span class=\"token punctuation\">;</span>\n        destination<span class=\"token punctuation\">.</span>DateTimeOffsetTo <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>DateTimeOffsetFrom<span class=\"token punctuation\">;</span>\n        destination<span class=\"token punctuation\">.</span>IntegerTo <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>IntegerFrom<span class=\"token punctuation\">;</span>\n        destination<span class=\"token punctuation\">.</span>StringTo <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>StringFrom<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And here is an example of how you would actually map a single object, array or list:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsageExample</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IMapper</span> mapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DemoMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MapTo</span> <span class=\"token function\">MapOneObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MapFrom</span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> MapTo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">MapArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span><span class=\"token function\">MapArray</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span> <span class=\"token function\">MapList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span><span class=\"token function\">MapList</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I told you it was simple! Just a few convenience extension methods bundled together with an interface that makes it just ever so slightly quicker to write object mapping than rolling your own implementation. If you have more complex mappings, you can compose your mappers in the same way that your models are composed.</p>\n<h1 id=\"performance\"><a href=\"#performance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Performance</h1>\n<p>Keeping things simple makes the .NET Boxed Mapper fast. I put together some benchmarks using <a href=\"https://github.com/dotnet/BenchmarkDotNet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Benchmark.NET</a> which you can find <a href=\"https://github.com/Dotnet-Boxed/Framework/tree/master/Benchmarks/Boxed.Mapping.Benchmark\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>. The baseline is hand written mapping code and I compare that to Automapper and the .NET Boxed Mapper.</p>\n<p>I even got <a href=\"https://stackoverflow.com/questions/46500630/how-to-improve-performance-of-c-sharp-object-mapping-code\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a bit of help from the great Jon Skeet himself</a> on how to improve the performance of instantiating an instance when using the generic new() constraint which it turns out is pretty slow because it uses <code class=\"language-text\">Activator.CreateInstance</code> under the hood.</p>\n<h2 id=\"object-to-object-mapping-benchmark\"><a href=\"#object-to-object-mapping-benchmark\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Object to Object Mapping Benchmark</h2>\n<p>This benchmark measures the time taken to map from a <code class=\"language-text\">MapFrom</code> object to the <code class=\"language-text\">MapTo</code> object which I show above.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 1024' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ee36e7cf070b15bb61938aa9d2168ff2'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ee36e7cf070b15bb61938aa9d2168ff2)' width='1024' height='1024' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAABACAIAAAAlC%2baJAAAACXBIWXMAAAsSAAALEgHS3X78AAAH4UlEQVRo3u1aa1Mb5xWW7XG%2b9b800%2blMp7%2biHzJNZ5q2SdvYARIgxi6m09aeTtN0nE79pW4mqSObiw3YAxiwoYAkJCQsc0sQtUFadOWmve%2b7N61Wq0vP7guKMMgIF2OU0ZmHHSQ9e3Se97y3o3dthRIzDCMUDGqalk6nZVkWRbS1tUVRdCaTgXckSUqlNMPIEERIFM3/U6rKcayqpuBThJAky2QySdNMNpslSTIajSmWpVSFIAjwo6XgDpXnObhufwVChf/PbKUv4Au%2b/OKLwcHBgf4%2bu93ucDpHRkbb2zs62jt6uru7Ojt7e%2b85XZP3ertv3W4fGh52OBzDQ4Ojo6P2r252dnbOzi2MjowA/5bdPjQ4COS73T09Pb0P%2bu7b7bfAwPO9%2b/f7%2bgfGx8f7%2bvrAodPpOkoB%2bXwemj9ltZO2bWn4Y1mWpmn4hGGYjY2NrGEAR9d1%2bCiT0SE/kBycN3w70KB1gQB3KbKM3wcDKk5XxvxHxU4g7dmDDAKrSABQeUgwGMtyDGNeLQgch3geCQIv8NBV4L1SA3nbd%2b0YL2zbc%2b%2bzJbeU3l70wJYxEFypAGBD%2bzEI0ZJUBCWKcOUEBC1KMwcbsHCIldFNw9GX%2b/QwAoDOcsg1Lt25Ld27I/V2YcjdHcLyU1oQmMpiwgKYiu0oBdA8r9z4h37%2bF%2bnmc%2bnG35poel%2bv/xVyO2lJZijqpAtgeF6%2beSN94QOt7WPtcpOJtub0xQbk80BHOukCwA0jCPKX/4Tm11qbtN99ZKK1MX2hTvR5YHJhrf59oJUO0Ers6AYxzsB%2bApDXXQUZqAmoCagJqAl4LQLwdi%2bXy%2bGVuJoE4NCBtLyyQlGUuZwgpPx7/4WMVRTO%2brIDDRYm2I1yFdverWupwZb7gAwoqgouYId%2bhCsxBHTcK3FuZzNXhWOgNgvVBLx6AbzXnRRFEoymi6CrRYB2oc6YnjJU1WBZg%2bcxsjwvsSx98gWkWhuNlrr%2bkYdXovG/rYT%2bGiQAnwaJqyshz/oGaKCORUDespcRoLY2Flrq3%2brqsnn8Zxwem3MKcMbltY27PwkSkIfknq50fBmAoIGBlZUrKbGAt%2b/esXlnzrq8pyd9gLNuH8j4jAhnBYG0In7VJSVFkj6vN5kki3sfU4Asia5JdyUZ%2bKklwGz4SR/gDAhwTF0LrRrHlYH1raT3ycwWuVsABJ1IJGAbd/IF5L6ezd/vKqwn4IWh69sCFFn%2bz9hY/oRnAIfbebPw85/k/b7AajhMEDgPNkkUXa7JE96FdCsDo/NzV%2b90PUskzFCtLmNmAPrP4mKgKgS8s0zYxiZvbCbZSHja749EoqYA/GN3VQjoTlK/WQ7NiVIhayBRTKVSh1sHXvsgftFKDLMQDIhcbv964KTMQvn83qOO7ZISyrGlQADWCLOM2lNSlhEwDQJgIcshRD135nH8JSVkQNd1GA/muldmJd5XAGSg3Ep8gkrKKhgDVT%2bIawJqAmoCvisCOGsdqGwhMyuya%2bUrsiNcBw5eyL47AmpjoDIBwN8N3PhVIoDjaUl%2bDpwkV4MAoHE8Fwkj1wSadGzD7USOMfT1HE7Bc3idAqBfUwyzCxRFS5LgdZsPkLTUpS98YKKlXv/wPfVf12nIDGjcjeMSYIVbCpiDdEFIc9wusAwrSfz0lNZSbz5D0toIUC83FVrq3Nev/XD%2bmx/NLmD8eHbhzZn5d5eeHk7At9vp3U%2brqG3NhUsf/qz7rs03%2b4ZVCQDe8Dy2Ob2fmQI4ci3BloBbS9Draz2xhD0Su72DW5FYRzgaE5D42KtdbNDamrFzBZxfbOj/%2b6fQKKegdSychqvD84Mn87TVkSoSAKVZRtdxQaPcuK6f/2W6%2bXy68X1AqulcoeHXb7XfNn8bnXCDa8AZ55RtzPUXIpwnk/LvP9Za6rRLDYDUpQbjYj19uel7j8ZsDu%2bpCY9twoOvZyfcj1lO83m0%2bvfSTeewcxWc17/b98kVm8t3yjFls3AaruPu7/vnaOuZtwMEFKvKza0tc0HheeT3SUP90siQ9GgQID4aTD180L2w0EqErwZDfwoSgCtB4vJKaHJzS2UYNDosDQ9IDx9gyMMD/MjQteWVP4ZWr1rMK9Ytfw4SEY6XVgkRyJZny/lQengg4Hb9IbSKPWPnbSuhzyPRSktKLAN45uCDeRmJtKwUQckypahpScqZhwNc1joZAOR2zgdKySZfkhlFzSJkcN%2bSs9aRAmd10VLPcCVlRVQU8GbxuaLz9M48dpi90M7PyuZ5sAXEcyISRKtK5xACwFQIVTzG9qHxDhlDQghBrBaZhrloh0zhybXEuSiYD0OCc4QEXhQ5Ydct9M5vBZVuJYqHCEXDXStp2fr6Ok3TSZJU1dReZpFvGBlgAj8WiyXJpJHNFvL7k/O5HBBI0txJra6uxuMJmGYpmtZLjjP2PdR4kYC9RlNULBqDmBLxeDAYjEQiiqK8gA8Cnj17Fo/H19bWEmtrup4pz81vbGxEIxGQGotGQQP4j0ajmfLt/TICDmvQX5cC3zx%2bAuZ3OByHimb/brAnyaUvbS/h7UC%2bLEnRaCwQCITD4dwL%2bYd1fhwZeGnD0UNZsLS0tLm5GQmHoTtBV4RWePr0v/AyEFiKRKMw6cH7MOMDB0aa7ZUGdKgWxWSIa3xsbHFxccGy2dnZ6enpJ37//Nycz%2bubmZmB6CG3MPbj5tCJ/w/EelmB1GJwYQAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1024\" alt=\"Simple object to object mapping benchmark\" data-srcset=\"/assets/static/Boxed.Mapping-Object-Benchmark-1024x1024.82a2fbd.6d9d2acc31b5e3f38a87bc0efb2b5240.png 480w, /assets/static/Boxed.Mapping-Object-Benchmark-1024x1024.cbab2cf.6d9d2acc31b5e3f38a87bc0efb2b5240.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/Boxed.Mapping-Object-Benchmark-1024x1024.cbab2cf.6d9d2acc31b5e3f38a87bc0efb2b5240.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Boxed.Mapping-Object-Benchmark-1024x1024.cbab2cf.6d9d2acc31b5e3f38a87bc0efb2b5240.png\" width=\"1024\" alt=\"Simple object to object mapping benchmark\"></noscript></p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Runtime</th>\n<th align=\"right\">Mean</th>\n<th align=\"right\">Ratio</th>\n<th align=\"right\">Gen 0/1k Op</th>\n<th align=\"right\">Allocated Memory/Op</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Baseline</td>\n<td>Clr</td>\n<td align=\"right\">7.877 ns</td>\n<td align=\"right\">1.00</td>\n<td align=\"right\">0.0178</td>\n<td align=\"right\">56 B</td>\n</tr>\n<tr>\n<td>BoxedMapper</td>\n<td>Clr</td>\n<td align=\"right\">25.431 ns</td>\n<td align=\"right\">3.07</td>\n<td align=\"right\">0.0178</td>\n<td align=\"right\">56 B</td>\n</tr>\n<tr>\n<td>Automapper</td>\n<td>Clr</td>\n<td align=\"right\">264.934 ns</td>\n<td align=\"right\">31.97</td>\n<td align=\"right\">0.0277</td>\n<td align=\"right\">88 B</td>\n</tr>\n<tr>\n<td>Baseline</td>\n<td>Core</td>\n<td align=\"right\">9.327 ns</td>\n<td align=\"right\">1.00</td>\n<td align=\"right\">0.0178</td>\n<td align=\"right\">56 B</td>\n</tr>\n<tr>\n<td>BoxedMapper</td>\n<td>Core</td>\n<td align=\"right\">17.174 ns</td>\n<td align=\"right\">1.84</td>\n<td align=\"right\">0.0178</td>\n<td align=\"right\">56 B</td>\n</tr>\n<tr>\n<td>Automapper</td>\n<td>Core</td>\n<td align=\"right\">158.218 ns</td>\n<td align=\"right\">16.97</td>\n<td align=\"right\">0.0279</td>\n<td align=\"right\">88 B</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"list-mapping-benchmark\"><a href=\"#list-mapping-benchmark\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>List Mapping Benchmark</h2>\n<p>This benchmark measures the time taken to map a List of <code class=\"language-text\">MapFrom</code> objects to a list of <code class=\"language-text\">MapTo</code> objects.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 1024' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-8ae5e080913ceb797a12c53ee487f0ff'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-8ae5e080913ceb797a12c53ee487f0ff)' width='1024' height='1024' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAABACAIAAAAlC%2baJAAAACXBIWXMAAAsSAAALEgHS3X78AAAIjUlEQVRo3u1a%2b1NbxxWWCXb%2blv7SRzqTttOpp39Cf25p2k4NduryahJje6aJPZ2p0yZ2M8EpyaQthkA6QWAZkA2yjXhIqiQeMgIa0FsCpPt%2bPwUS9Nx7kSyEAGFMLFzOfLOzV3vu3v12zzl7dO%2baNrdLLBalaSadTouiyPM8iqAIgsiyDL8IggA/bmxsrIIkk6qqSKJIUZQkyYqiCroQBJHSmlSe4yRJEnguFAphOKHIMlzSujK0gibHcpvPQ0yFF9lMZui%2b9auent7evs7OzsFBq8Ph6O7q%2bvTTto6OTrO512q1DvTfsw0Pt7V9dt9q7TX3mM09Dx4MWSyWjo4OUHY6nXfu/Ku19XZfb5/b7b7zz8/b73S0t7cPDPSbzea7FstDmw06/%2bKLLrvd/vwJgKytrcF8i5KkqDBrinFJUSSCojCFUI9Go4ouab0JptOoSPoqgUAdw3FYPU0butAF%2boHbdd01ox/QXF9fz5QnsOzlEoAHkyQJa00RBEWSUNIkydCUBoahaZplWSihHdQoXYoqdIEmlROSKlY26nnJ91lSgHa5BOCpOI4TNA1z%2bBQcj3E8xXEkQWit%2bwnoGAMlyhZj9Lu1lkdAXyaWYXCYP980393O93TzX3VpgEpXO%2bd2EixLlEEA5EUQ0IWjaUwQuUFLuu4XalOd2nBOQ1NduvbnQnc7LogEhlUiAfAqmqEhuoGB46LIDVvVpvPK1WblcqOGq83AQTB/SQoiqZvHvqI7A02WLYf1AfDd5UQCQg0DvUgyDwQaarWhX6rXcLlRrT8nmrshjFP6bO0rMCBwZapsMfx%2bt1aIV2WbEAMmJHBDgzsJCD3dBGxVlWlCT6MQfULghMD/NwFwYlyUuCFrSQKVG0ZPTKgCCBgp68vgA8eSQDab1bug2N1TCSBQualENrvBciw882kyVzIKiS8mCp3kQicETgi8FKnEhi4v3Qpk1tdB41gQwFDU5XAgCJrPGzQCiizZ7XbYyCqfwAqScng8KXQ7gWw2s7y8fCwIZH2TG%2bauzdUEXKyn01sERIEfHrZV%2bkZmDLfzH5s1P9v0OOdC4XAwaKyDiefY0bExWA8USWEoRpOV%2bFrFWIGh6alr3V3/TSSgnsmZjCmRiM/656AG93MgDKPlQkOVlQuldQI1i0GTbfSTJEJGwk63OxKJagRUVS0MUpVpQgaBf6PYb78OTHH8Zmad5ThZlku93D1JJY4wCm1s7PzUcZILPZsTA8PtoHd8szmS1yqkIJAYVvTsA68AjJ9hi6B9/jkePgANySS1ML8N83NMKHSEBMSWxs2mui8/b/vuk4Wz3pkfT/oAZyd93/FMX18MiBSJlUkAx3GWpZ/MKC2NyuWmLVxpVt66KN2%2btftyHpqA0NKw2Xz%2b/U8%2bNo27qx%2bPm0YmANV2h%2bnhaM3snExRGF4%2bAY72TStv/155Jwd4RFOd9PEHxHP5yFdyIzMI3Px7q8nhPW13VI06AWfGXKbH42/45xUgQByQgDFuAy0NSvN5qfVDnIAAQWxD%2bQQymUwqlUJSSMlPTAaBD3UCr8DEjzoB1VsEFtIMQ5SZCwErXmCe%2bHYSUFtvSgxTBDGXHe3/WgX2B0EUFEXR3wsVh9E9CPzSv6DCLTvCIqWnNyWiJ8fTvplCAnJLQ7r5AvHRX%2b0rq4V4vLLqTqYOHEb3MKFdCGgmhAIHli0EwXGwCsUflUuZkASdv/Wm/cb102MuwBm9fBU6tztf80xjsO08LyfebQWAADHvp6e99MxkHoxvik6livcs4LMLgZEb141uT%2bkl%2bJhpxPFtzxT6TRAgSf7WDeUPFzRrzlv2pfrzw7Yf%2bOZ%2bOjlzdspn4CfeGTuKyU9mpLIJYN88AflSvQrDulT//bv3TGOuqlzY1fBozLyaSs/6xKMjUDIX2seJKUoj0LyNAJQ/tPSbJtzVubCrjck%2bYUkhaX/5BKYxPR68gBWA8nWdQFVOX8PIxN2ktgLHwIROCBySwPbTKsKVJnjGrbbbJufkmVHnK2MuwKvj/4EB/cog8Lf3lbd/p1yB5KxRhtRVL390b8Dk8JzO6QNO2R1bBICqcQ7mcqMEnb9z0f6XPxk61Xp5Wt8HvnegfSCrn05jaQqXJN56L11XAxxgHQBiY93mhTf%2b/NFNLZl7NAYTD6iGqGKz18xqG5lw47r65q/Vxjpt3Rpq0w21ckPta%2bY%2b06irKqev4eGoOYmsQRitP2f0DJCg84u/eXTtqqFzSi%2brdOVvubxomU4MQ49GI4nlZYZmSI5jFub5/j7%2bwQB/vx/APhhYG7g77nK2BCPvLQbeXQoCri0FW74O9MSXBZpmx0f4QUte38Bn/rkrgdB7urKBPy4GZnFCiMe5AjWoK4OWJfvjdws04a6ri4Hb4SikhHSZx21AKZvNshyHw18W7e2QhAtiHoh%2baDRL0%2bsUlaEBNAAuJZKEbAHn%2bEJlMEJcFNc4LkORhmYeLChTVKEmJoioILKilNnRuZrLZw/gA8apReO8ogFIKTmG4Yw3ZywLIMBPSNIAYZxCLNAHbOkzmjIMN6%2bM5c8sFmiC18Hmw7IMDemT0X/uFjynfoCPfBvbRdvaOA7DMBRFV5NJSLmhwnH8Ts28gDUiCALK0UgEQzFFVfdQht5w/T9qKBSKx%2bO4/j9AUYpvOcDB1yIyUDIsE4tF4/FYMpkMBINLS0swJYUvuIsE7DAQCESj0UQivrKyKgjCHo%2bAPmOxWCQSicVjwVBoKbAEzzIIPOPJ3UOKwSoYCIza7W63xzkxQVLMHmz36Gc3KWo1PUN3%2b%2brLshwJh/1%2bP5R7T2fJ8R3q7PQLFGP0EDTn5ubAtCLhSDQaA8cIh8MLCwthfUbAMiHoQQnuCDopBDEd3WjAGQ40o4YyjMtms836/T7fDIjX63W5XB63Z2pqyulwTnq9MHpggiBoHLwnFv8fdIX37cBobVcAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1024\" alt=\"List to list mapping benchmark\" data-srcset=\"/assets/static/Boxed.Mapping-List-Benchmark-1024x1024.82a2fbd.227210f035fe80b53fca1ce1c9f6923b.png 480w, /assets/static/Boxed.Mapping-List-Benchmark-1024x1024.cbab2cf.227210f035fe80b53fca1ce1c9f6923b.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/Boxed.Mapping-List-Benchmark-1024x1024.cbab2cf.227210f035fe80b53fca1ce1c9f6923b.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Boxed.Mapping-List-Benchmark-1024x1024.cbab2cf.227210f035fe80b53fca1ce1c9f6923b.png\" width=\"1024\" alt=\"List to list mapping benchmark\"></noscript></p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Runtime</th>\n<th align=\"right\">Mean</th>\n<th align=\"right\">Ratio</th>\n<th align=\"right\">Gen 0/1k Op</th>\n<th align=\"right\">Allocated Memory/Op</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Baseline</td>\n<td>Clr</td>\n<td align=\"right\">1.833 us</td>\n<td align=\"right\">1.00</td>\n<td align=\"right\">2.0542</td>\n<td align=\"right\">6.31 KB</td>\n</tr>\n<tr>\n<td>BoxedMapper</td>\n<td>Clr</td>\n<td align=\"right\">3.295 us</td>\n<td align=\"right\">1.80</td>\n<td align=\"right\">2.0523</td>\n<td align=\"right\">6.31 KB</td>\n</tr>\n<tr>\n<td>Automapper</td>\n<td>Clr</td>\n<td align=\"right\">10.569 us</td>\n<td align=\"right\">5.77</td>\n<td align=\"right\">2.4872</td>\n<td align=\"right\">7.65 KB</td>\n</tr>\n<tr>\n<td>Baseline</td>\n<td>Core</td>\n<td align=\"right\">1.735 us</td>\n<td align=\"right\">1.00</td>\n<td align=\"right\">2.0542</td>\n<td align=\"right\">6.31 KB</td>\n</tr>\n<tr>\n<td>BoxedMapper</td>\n<td>Core</td>\n<td align=\"right\">2.237 us</td>\n<td align=\"right\">1.29</td>\n<td align=\"right\">2.0523</td>\n<td align=\"right\">6.31 KB</td>\n</tr>\n<tr>\n<td>Automapper</td>\n<td>Core</td>\n<td align=\"right\">3.220 us</td>\n<td align=\"right\">1.86</td>\n<td align=\"right\">2.4872</td>\n<td align=\"right\">7.65 KB</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"speed\"><a href=\"#speed\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Speed</h2>\n<p>It turns out that Automapper does a really good job on .NET Core in terms of speed but is quite a bit slower on .NET Framework. This is probably down to the intrinsic improvements in .NET Core itself. .NET Boxed is quite a bit faster than Automapper on .NET Framework but the difference on .NET Core is much less at around one and a half times. The .NET Boxed Mapper is also very close to the baseline but is a bit slower. I believe that this is due to the use of method calls on interfaces, whereas the baseline mapping code is only using method calls on concrete classes.</p>\n<h2 id=\"zero-allocations\"><a href=\"#zero-allocations\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Zero Allocations</h2>\n<p>.NET Boxed has zero allocations of memory while Automapper allocates a small amount per mapping. Since object mapping is a fairly common operation these small differences can add up over time and cause pauses in the app while the garbage collector cleans up the memory. There seems to be a trend I've seen in .NET for having zero allocation code. If you care about that, then this might help.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>What I've tried to do with the .NET Boxed Mapper is fill a niche which I thought that Automapper was not quite filling. A super simple and fast object mapper that's just a couple of interfaces and extension methods to help you along the way and provide a skeleton on which to hang your code. If Automapper fits your app better, go ahead and use that. If you think it's useful, you can use the <a href=\"https://www.nuget.org/packages/Boxed.Mapping/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boxed.Mapping</a> NuGet package or look at the code at on GitHub in the <a href=\"https://github.com/Dotnet-Boxed/Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dotnet-Boxed/Framework</a> project.</p>\n"}},{"node":{"title":".NET Boxed","path":"/net-boxed/","date":"13 May 2018","timeToRead":2,"description":".NET Boxed is a set of project templates with batteries included, providing the minimum amount of code required to get you going faster.","content":"<p><a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed</a> is a set of project templates with batteries included, providing the minimum amount of code required to get you going faster. Right now it includes API and GraphQL project templates.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 150 150' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-cea8b7b62fb532e5aa641ae3cca5390f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-cea8b7b62fb532e5aa641ae3cca5390f)' width='150' height='150' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAsSAAALEgHS3X78AAAOaElEQVR42u1aaWwbxxWm5LYo2h9tkT9VkZ/9UaAoAjSJkibyJXFFrmy5PmJblkiJpA7qtmLLV3zEjeMj/VOgQNErCIqiKFo4d9G0aI4mRVsEaJygadIgFrk6uDykWD4kW7YlcV/fm5m9yCW1pCS3QErgYXZnZ2fmffO9Y3bo8fz/5/4XCKVZ2dKW9gTCmYpgOF0RiKR5SfcRXjKJ0HNetkQyrB1/lq7oO5msGDynVgycSTIZPJus6H9SrQh2mP0EI/xd1o/lfT6G/Zo9F3Nr7Zj0tLSmVl75ZtEpKf8/u0AIxqrMsSmQEiDwjvcEUp/DFbgbV74KV6YKV6IK77HMsJIJXvPnmaoWIex5KFPVeyJZhQyoGjyT5HIuWdV3SmV9Ge/q7S0lv6Y25nhC7g60Zb7AlA9xEPYEkyuj/K6mJCHr2blb9YSjkxXCFM4HI5OA9bMocyQ4sTn92qgLZ/LrsF3fE%2brc4Fl1buCMELzuP63OtXZhmxC9l99XEbmOogVCqbd3bJ/4jK58qHvKs6dFXT4AOpKILOu8uS3VFI5eB1QOCARnmbKUU2Z9eApCPZMweDYFg%2bdSvNQF7yMDGQiEpor06ywEQHv3LWgJpY4JU9Dn6tndpC5n9VXd/tnK7w4kv4QrpLZ1TNOgiwx5l4KrqqFtapGBlIb013DlbTL4lKp17EtpLa3YPuK%2bXyFZAqIlnL6Nc/2GUL5y2abQIjwr0nYNv0/9KBKdI%2bXnUUAMDm4FlYOO/bjaT6mASptyWkUGqBA9kgQECUrp0zKHhXDXdWLBH2muoe7JiqYWbr7L9PqpNeJ%2bbWvkE3BA391EI2mmXPdjSaasDQAU9AnQ%2b7haqvJWEDQOwiyOk2q1mW2pYZG8fqgTnUiA06fq8x%2bh40tdCHdeI0UWS139oAWE3pNcWab4WTsA/adUaO0U70Tc9RnkbfW5ZFs7LlGZaQok77Kar65LSauvOxNE8mCke44GWyiH%2boz%2boTSglwf09nmrbwUh1JuCQFvZLGDmSWaK4/2cm29GN193yu/ek/DkOJGv8/DFvG3W4qBKAwCVCvelHelvAIC%2boX0oxf1ApLT%2bg3ZTyLa2TwMuZK3VjJdkwU70%2boiYZ%2bfOhCcUnawUq/9yBMNewGH1g8Xobq1j9p8B9PJFAOC%2boetgkjGA3gm6Na18FiyGOq9iSE2/39h4cY2RG0QnPbubi4TF5mBK9/5rBAv2kFPJCXkFFS1WT6saPZzMjwBWBiAAPceTNPEllbeOFyxqCvbcoOA%2bgUJGjtP4Mr7EY75rx5cpSl1MgU0GnDWd4aDFB2CWCLgpMpzmMiKCJszWyA1adLN2MgV9AxFst8R8dHw4iXkxES03rDneFyhJKdzx2Tx/IWnrTjEWsHcLjVMg1OblBmS%2boTTLDcK9UxVNe1QP7insIDSJGyPmt6VqgkVifrAEuwyK%2bB/qSS%2bpeD%2bVyJDIYMp1QhQsNzcIppwZ4PFspkYXQhTzw6XH/EIOsH0vOcAkc3bFhNp0DqdY1limCdhZEOIRAXXK7Nw1cZd122z8hk7OGKsfbM8cbu/BmN%2beXsBrLDOaKAtK6xLPyDd0HVJh7/cn0AQSaOsJVg6cnTBk8By/pzY9x9APRIr3W2j8nHf0uc9znTJPC8ZX9g5PmwBsaRxjiGzyK1/Ztm18eseOFGzbPpFF0YTAcmTr1nEI772MHn4Wuo/OcDkm5Khdeo7PQMfwFdi%2bA9/dtrxxLfMXkgDU9Zuk63e3jFUaAPi9cQaALClf89XFb/jqFPDVxjW81ny1MbBJXRwlZkptTlmX37Z%2bYwwCXXPQdQAwFwDo3G%2bXDktJbUJ984BzMvuojdvmUF/rME7uHGuN9zQhWVmaoH4fEDqbAMiSDkD8q36vcl2Wxqih5pdQcCJ%2bSQFexnlpFckilnvZeo9lMHoDzQAVHda4HNAcr7sOAoQHboFcr9j7t43pMB%2bnuZnPSI9sQz0D4P5iAFThAwRgVAegcKfeAoNLDs9wtRgAB2mVs6biOdKxX2MMCA/cNgFYGVkCAN0EvASAyQB5JQa3ABA9DAyEQgDQsyiyJNTvEgCpdABkb%2bx%2brmssHwC/N4cBKwKAwuyyrfcmRPbOQ3NkhimZqzyBE%2bi6ztsNLZgmdOcZsMIACGkOX0MPnECHOMKuGQhI%2bU40CbomhvjReTX4RxGka9DgG10lABQBgOLCByyfekZ7mZiApsC9OweBnKKhvJebChNyctJq%2bYBYYQYwE5AKAGDx9nJB71yg3gZE3AhxZA6tuN/Qn8tSAYdaBuA575gASAIAyQaAIkxAWTUTsItiUVph1LetuLTiYwoAEiWGQW8ZYfBOi1SuCcScMkEdgDETAJfKEX0bMHQV895yPbVxeo%2b/21AfzxMWDiVrO70%2b7tBeYVI6A5YZBWhy3g0x2FATY%2blnIRDq1sVg49oYp7xetx7rani9k9SuixntNtSMFGxntM/p3xUA/mXkAaSshEoHmsZhaECFbY0K5urOIHSEJ6CvW4VNPkXsE%2bIQacOdYK8KvdFEnvR1J6CrfYK1a2sZh/6eBPR0mc/7e1TWxto%2b2pEwWSa5zAMMAMrwAZt8cXj4gYvwwvNXgX5vvDbDVjSX6hJuiD784CYsLmqwa/souye58M4NKPa7enWBMeftv1/Pe6Zp2by6W7ey8MhW3r8suQyD%2bQwgH6BoTl7bthlhACgIwAi89MJVYxLnTmdg7XdG2DNZvC9tjFsAGGP30oY4vHuBA/DDH3wCJ09k4PQTk/Dk9zJMzpyahOOPpRmjhgaS2O8kPs/AiaNp%2bNUvL7P3CBhqc/pUhj17/HgaNvuRYY4MsJiA5OQDpFhZDKjJAeDy9ALs2jHG/AJjApmJAGBhwWQAPX/v3TlcSQ12bhuFB%2b%2b9COsfHoF1CN66h0YYiHRPK0n2TffErvvuuQhD/Sob6ze/vgzf/tbH7Dm9tx7fIx8gF/ABsgBAdmKAXBcr0wRG4OWXOABvvTnLylf/NMMm0%2bArYAIbBACMARqEW8eZrTc2KNCIK7hZiG5KDSIKUN3GtSNw5GCKjfPcs1cYSI2yGUVK3wtIiv5BJD8MLpHM5JrAo4Mq/O2v3F5PHEvjSsZYG5sJ7OAm4EUTeO/dG4wBZBYPVXMvv%2bFhITX844Z1XApzpPDhAxyAZ89fMcytWB4gu4kC5WSCOgNeFADsRWo27x5jqzo1NQ/bt4ziBijO7JgBsGD6AK/hAzRm7/v2JuHQcAoO7k%2bxcvjRJFtZKwgMAGTW4WE7AAVWvrTdoH8FACBq3nvPx/Czn1xi92QaZM/U1gBAMIDkwj8KRwFiRiuGP8oBDFNgDIgZDHhOB8CnOO4fZFdhUJiAvyQTsDtBHYCD%2b5NIX67wB/%2b6yeposjUPjsBHH%2bUAIJwg/c6gF89lwP6hJGxp4AzQQ9qmMk3AiAKSQxTwG3uBchig2BhAAGzEuE2r1tOZYHWqeps5w/f/OWcLg9YowHzA/RdZtkcrvL6gD4gvDwBnH6AsbQKWLSbztj67E3zxeRMAmjzZ7lpc9V88My3C1RV4B%2bmezVqdYMxwgqHgOKsjL0996pK7RS4KgFQ2AO5TYZoQ5dvrBc1zfQAHYMRId6l9bOQmc3QzM4tw48YiND0yZskDOADBPeN8n%2bCNG2ky/8zujgF6uC3LCebvBp0B0Dc9lM8fO5K2MeCF5zgAB/ZxAPTdGdGY9ggEAP2uXFkQAPAoQKkwmQU5Oz1xkiW72BnAneAhEQXO/1ZnwCp/E6SJ0GrQBCYn53nI61PBi7ZODu4Pr1wzooAOgM4QMgXK2OhHJtC8a0wkQnH494fcUV66tABTkwssdE5N8etpzChHlVssSyTAaA7kBCmqHD3MAfjdy1fZ%2bO58wAR9cuMA1DnmAUUAMDY1cXjm6Wl4HTc9NDEChahLefpf3pplOz7avOhem0o6ydm6eRReevEqC4ssN6jlucFPf3yJ9fXaqzPwxuuzFpmBN/88C6/8/prRXv8mQFvkzsgEvIXPKXrQ%2bA31SwGgFPsitEQmmONciNbrH4oZq6Ln6mQKeh3LFMWmSWcPrRTR1SdydVn0RfX0bq5QZkjPrGHQ2IJv5OORP8rfeitFwqD4KiwpS%2b0GC4RByfwaI%2bfYJtG90McQRl9fPM9bUz96PRf7dZ5zk6z9KWwuyz4X0PMA9j1AcpkISUvUSy7aFDtek8S2e6l%2bJBdHdFLJYXBslb8K3/EPqqv3SaxckcWZIcV6WbpTAEz8FwGwOTGFnQ41bp6ALVtUdlwmO50EOdTJOQcssiVCyS4YUPSDCMZGuwlIK0dnfaVlcVi6qWGcHZbS2SADodYEQT9CWzEzkVwzILYqDCDF6GDUX8fPBUn58OA8Ow7vOqBBx75FBoIPmUDgNG5OuDscdXtmUXomuLJOkFaUzgAfafqEnf5GUPko/U%2bA/iyBwv44gSA0Ikhbt6cg1E//EBm98z5gVY7HJRMA%2bvdHZO8C/5NEzj9F6Fn70CI7Mid2yCt8OiwbqbB7ALIChOWJRH%2b2imnB6A0tegg0VFZDJXnpIAiOhgzQ5HpFW5HxTXEdBWZFKrkoQFi2IABZBCCLymU79mtZVDRfDvCS2oQHbmeRAdmVGl/IoiyNu/ogsrDJlwIKGQ31qigTuAtTxb1VEhYp8NyHpZSAUO8i9D4G0H3IIodzSpSeI%2bgPhgA2%2bVWHcRM583KqSxSY4wRs9k8W/JucXn4WQbgPafsANqhmUsdLWdzL7F6x1Zli1svimgQ3M9XIgGo0gerO4SyKVo0rbsqwKciAamRANZoA70tSUKxzUGzzMkSyz0d/J0celKXYF8UhkP2/wjoIn4afg/KKUdKfh%2biLKSu9cUNkL69DBog6RdRZRTHaypb3kQGVyIBKZEAlrrJdDtjvkQGVyIBKZADvS8qfgz9v3LiYc27bfNGV/zQteNHffwCNhfydtsQs/QAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"150\" alt=\".NET Boxed Icon\" data-srcset=\"/assets/static/Icon-512x512-150x150.3dd133e.a0ebb8c2e5ea61194b6fd34bce8b1a7d.png 150w\" data-sizes=\"(max-width: 150px) 100vw, 150px\" data-src=\"/assets/static/Icon-512x512-150x150.3dd133e.a0ebb8c2e5ea61194b6fd34bce8b1a7d.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Icon-512x512-150x150.3dd133e.a0ebb8c2e5ea61194b6fd34bce8b1a7d.png\" width=\"150\" alt=\".NET Boxed Icon\"></noscript></p>\n<h1 id=\"aspnet-core-api-boxed\"><a href=\"#aspnet-core-api-boxed\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ASP.NET Core API Boxed</h1>\n<p>The default <a href=\"https://github.com/Dotnet-Boxed/Templates/blob/master/Docs/API.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASP.NET Core API Boxed</a> options will give you an API with <a href=\"https://swagger.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Swagger</a>, ASP.NET Core versioning, HTTPS and much more enabled right out of the box. You can totally turn any of that off if you want to, the point is that it's up to you.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1440' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-e893d7ea09a05ef40bf7d839439ec1a1'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-e893d7ea09a05ef40bf7d839439ec1a1)' width='2560' height='1440' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAIAAAC2bqvFAAAACXBIWXMAAAsSAAALEgHS3X78AAAGE0lEQVRYw82YW2/URhSAt7z0rS/9BX3uv0BVQxGovFRVVfUXVO1LhehFtNCSh760laBSKiQqQOF%2bTUJSyKWkkBsk2U2WvWZv3vXY4%2bv6fhmP486uky0hXsA0LFjfHp89Hnvm%2bMycYztxbCKxnf6pxNdXdvWPvTWw8M7JhXd/u/f2j%2bPE/kZk41j0TyaOjia%2bu7br8FDi6Mibl2a/uHz/4PDit5PZnyKZyB79O/Pzmdk9R%2b4k%2bid2bb9g4kKybzsXV/pOTe%2b98ODjO8XPp8vf33z06bnl984v951PbmX5/cjTn0aqb/DhB2dm95%2be3Te4cGCueHKheHaxMrhSvxhJqn4h3bg%2blTsyuLT7YnLP9gsmPORFst7asIcd5JnY99Z98jcgP99va0Hg45bS7fSn4XkYI4zJHpmuZLqiYYu6LXSHt13NQzjyagkUtWGMGZarUTSRAMAG2UOeomiiiKLEQq5eB5LcpOqM4zjkMi%2b8tYf1PHTtI8IB13XJbV5NZ6fuztz6a/L2%2bN3l5GqVaiwur/xzf345mX6wmBoaGV9cXqUawHbs/zH%2bHdgS3Q7oDhZ0j1dsqDiC6iBMpgx2kUtGTG6Hhz2i%2bOsYeS4xvnYOkOkpSDIDBV6UAeQ5QYKcoBsGGToZruM6hFAhMuS1i4BlWbqhm5YZYpgGueWd4XbjNXKATJIgWPfC9bPJMx14GW54T80SkYu4lYVEUczn8qapkZRHbGSux8J7kfwaAena0HXvBdaAqJolWmZlSzVd3Uaq5ahmPLQdQtZN3XJiOEAWZrDuDmXxodvB4YlgpmhVGxIrI17FrwbNFzXP6TIzo6YQQr6H1kRzmlJm6lpVMqCiQ83iXhGka8mwuy2wqAggN8DBFTj/ZeH0wdK5afZRlQO0IbKWDC25Ix%2bnY4H2S4G3mk6XJBEdgXWM0zy4vpYeLmeyHEvLMlAURlUZNZTb6dgVoDR3Flpp8praLddFOGA7LkmgJ27l%2bo5O7u//e2A0U6VhpszmKmy%2bRhQmX%2bOyZSZbYUOIJVdlCZkSKAOpzmsUp%2b4gNU6lybOAG52vo9MoKQDJnHB5jLo%2bXk/mRA7qNK3SoEWDVkIZKk9YGFZnobGzMKwhiGa3mhPlgI2CAKWO%2b9d3ByP7grWbFrMmKlWk17FOYaP%2bDEibHaaGNdqLjEAXB0ghC1A96S5dQ6khBPKOBO0m9FQeK5wnQ9RrWFcRu1X9bnXAd0fL%2bPBMcGwhmKfsGtMsMWqeEitQ4w2/94iG56DnXwOkDmBUhsb9nDRXVBq8JsuKKKuipEiy2lSM3qNqpvv8DpDHZLII/MyfwdhHwfhnVum2yJSbIMdTGZUt%2blqj59Q9jXGR8/wOuMgP3MaSs3jWSV2yQdYSgM3XLb5hC7QrAVdiNmVPEIGr8HEi4LQigK7ewF99s37osDF9T6zUmoU1PldQShXMMI/BtiRo87jlP2WzQaiD0BIbBDnXjRWBIDBTK%2bKlq/K1G1q%2boHG8xkCVYTWWs3jhSQQxwhhJu6XJ8fGAnCVJMSLQrsT%2b7xOlvb/Ofnh8fmC8UGrAVIlJrdErJZChuEyNe1QlT0jspgLDv%2bkq7BzKUhyhfQiulkGopCtMluKrvBaLCq81RC1uJcbzWfbUSP70WHEhA0kAGoxCsyqRDbYN02zpTEdpbsAqHYUOdbZZBxtHiUKMDKfHAkCdl4wYEQgrcfoPf/RAMP5JUBq2QEECaaW2IrJZrVUXt6LX/O3GrQ22KtWYVLDW8OJFwA9QbcadG3AennJB2pY5UwQtJMZSoNNrWEcVnBgRaL0PIH/Eon4wkv3m6j2FLnFcQeQyLFiTeOAYPYZ2DOjEmkLkfQB5j0x5WGPGNLCmy4KhQV1lNZUzdMmxeozs2k3HivE%2bEH5TIeUb1hlNkFsfYTtfZXv%2bGZHMfMMw2rc1jgMYY0Vp5grFWq3W/vxG1lArvb4KHE03iIzhQPg0OlXGv8wFJx4ESzW7Sks1qHOq90rgNSxqcSLQqgM%2bWmp4g0nv8qqXZx3AK0AwJN3bwNiUL5VOR7rXNGJOodYs8kk9boExClfB46duyJdKp6ONvqId%2bBeCgPNX6x%2bSAwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"2560\" alt=\"ASP.NET Core API Boxed Preview\" data-srcset=\"/assets/static/API-Preview.82a2fbd.0bdb82969eacb3cbc71b95a4fa2c1550.png 480w, /assets/static/API-Preview.cbab2cf.0bdb82969eacb3cbc71b95a4fa2c1550.png 1024w, /assets/static/API-Preview.2665e34.0bdb82969eacb3cbc71b95a4fa2c1550.png 1920w, /assets/static/API-Preview.42db587.0bdb82969eacb3cbc71b95a4fa2c1550.png 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/API-Preview.42db587.0bdb82969eacb3cbc71b95a4fa2c1550.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/API-Preview.42db587.0bdb82969eacb3cbc71b95a4fa2c1550.png\" width=\"2560\" alt=\"ASP.NET Core API Boxed Preview\"></noscript></p>\n<h1 id=\"aspnet-core-graphql-boxed\"><a href=\"#aspnet-core-graphql-boxed\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ASP.NET Core GraphQL Boxed</h1>\n<p>If you haven't read about or learned <a href=\"http://graphql.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL</a> yet, I really suggest you go and follow their short online tutorial. It's got some distinct advantages over standard REST'ful API's (and some disadvantages but in my opinion the advantages carry more weight).</p>\n<p>Once you've done that, the next thing I suggest you do is to create a project from the <a href=\"https://github.com/Dotnet-Boxed/Templates/blob/master/Docs/GraphQL.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASP.NET Core GraphQL Boxed</a> project template. It implements the GraphQL specification using <a href=\"https://github.com/graphql-dotnet/graphql-dotnet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL.NET</a> and a few other NuGet packages. It also comes with a really cool GraphQL playground, so you can practice writing queries, mutations and subscriptions.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1440' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b8112c39fcdb6371db5861693073117b'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b8112c39fcdb6371db5861693073117b)' width='2560' height='1440' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAIAAAC2bqvFAAAACXBIWXMAAAsSAAALEgHS3X78AAAGbElEQVRYw81Yy47jRBTtBQimO04cJy5X4vidOIld5VcSJ7GdB5numWFgGKERArFALGAJK/gQNrPhA1ggxC9yq9yZ7h56mE7HLSEdlcp53lP3nHuvffJINnC4XYT%2bwJiiUaK4sWQHgtrvWbaojTiGgjqoKTbGXnkJa4OvtU7/DNu1bv9RS70Vp%2b3eqdx717uHAn5NVJ224Ypdu4Z0WAVsnNTUUfDq519f7b5Ivg6fvooff2nNn8pulM5DLcj1YNWjedudSjol9lqjBVxqAVvhLcmJGyaV%2bkmtY/0bQtf%2bsNX7QFJrHfvWDxwKoetI%2blC2PVjhx5v6UNTdk6YdiSY9NeOaHQo6BYhWKFqRYIR1IyghmvwVK6ibVxDMoAGfhK/fhqYT1ww63b3YvvxWGqWyv6wEbW/ZHi9kD8A2kp2eNMzQmV8MsyddWgg6qRu0RGO/eQ/gKwz0LQgaEc3gt9e///Hn39ZkK40Wsl/IflYh2iSzv38BBAJIAsuDFcK5wiU/9T0N/sr9UNP85199980PPykk7wZLLUgRqSx65OeiP3/61y8nZZRwWk0raJocnA9AsqO75uEd%2bAgPa06MSKEGC2exw8m54ufyeMnglWt2tYH1AAKZRBbp6x8ZAWkwldxFy1u043XbW4A1m3ZYchAMWqK%2bXw8CZBWOn6UboozOlfhcma6UbItma5Su0XzNNrO1AvvpWplvUFQwJnenkRQgIQqBNkaTNk3xaIqdmWWnXWuiWhPNmvYA9lS3Z3CpWzNkJwfRgNxy87FjVsItTj9Tki3Odspig1ef4GyrhIUc5CjMyxVxtgdgnHEPWJHohAxwZkbQMkMmJCOUDNgwSFCFzEACpV2zx53ACaCSQLTrpC/w9DMcXyhRDhlQJivmCu8aDjcDI8DsCwbwJ2VJua6Zt3CwDUoC7FyXiK5w9gznF0qyQaUTvArczCQEpwsEpGgGHEQ3qh9n3NslxG2gLDe42CpBlfX0KgNSnDajmejGrJA/AAEQksJlU8nB3yAAJoY/g%2bilYAp9rfYQBLwlDjdKsEXBRiGVZgCOnxHQSGMQNdwJ6lM8JI2qVMQIZJiuGA3wQHIuMwK89nvLigjsMwBBN70ZDpNuEje9pG5VLKFLHydPUAi1f4OSjQzmpplMc/nQ6nkzA9wDIBtwM500w1nDieo2jGtVZWBPwFuCfvD8i878czx7gicXKFyh6QqlGyVZHW1iNpZRcRSLrJjSynx8VUb3GYC448fMBuUQUZEHYJAmLBVQTzXyQGX0kgPJFVBRsEIThuMr0lUGgEaFod9KACophtDpmquf474N%2bIYHmhabFPhfkstmrPPWq%2b9RIQFagJAQJ4ACBpiCZHKchFr9pGHHdTOCJlCHCdSJma50yEwgD2i7TyXnxk3CERLKuA2eMgklhVLOobP1kVUolPoTcZxJNG8GCxwXWrLqDRa2Plfd2I59OyKqHzJux2eAFAqTzYIXpX03OM7KjADoB0bRxiCsD6O2E6o2G0VlI4bZ86xHzzR67958Y5QgORigfT1cksmkiioEaEAJGiZ1LvfatdkTRr2GWU0ZhcmZO5iP0BS0lO3zUAUBNk6Tadm89hHfU/fvlFDZyOCeJvoEzXc43SEwdMQR5Mf2gYZBaj2vpnmC5tcvQe7TE6CCab7A6hjb1N8aJVgnftFZvOwkF534MYJClPCGcAwBiB6Dq8ZL5GXIy1veXCRLQH08b47n7PmPcQCNphPLw7TtTku8PU7TQiYrmRSgIuRXJCGpnzjphTN/4i6fDfNPzenO8lPbS7XRVHbhhnimOJPLWeN9gFPvkHxcPO/PLwDO/EK0ozdFBqJHR5TL/5hGaZM9VnnziMpv6b7EAUJqwoDERiP/jgDZMCnuAcosM8AmCFp99HyU6I2QHcgWVZwA98OW4Z/i/llnAKjxtdzcHQLH5b7rMu%2by6IuHiJ4ROMP9ujqEoB9hB/bVAji0x4uHUM4NAoI6lDseQFDdMzy4%2bnuOYwmUfffhCJSJruPBwCKqOe72fKMXar1A7RGkel2VCB33/0MAksnAaxq6TuCs09dNTzfHqj6W1FFXpa3uGI4f1Py/ykDLW0qjRWt8iUsJgY8h0I8Vp8Sp4jziKxjj9EgbVEoAIu7SrD/bGfFaj9ZGtAaDcQ903TfVQziw5rwHUIX4LFQJZD9XSNYNCgxjFck6vBv%2bA%2bVwvObvPzbGAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"2560\" alt=\"ASP.NET Core GraphQL Boxed Preview\" data-srcset=\"/assets/static/GraphQL-Preview.82a2fbd.702b586ec4be2f1e0070d3b5c5fa8625.png 480w, /assets/static/GraphQL-Preview.cbab2cf.702b586ec4be2f1e0070d3b5c5fa8625.png 1024w, /assets/static/GraphQL-Preview.2665e34.702b586ec4be2f1e0070d3b5c5fa8625.png 1920w, /assets/static/GraphQL-Preview.42db587.702b586ec4be2f1e0070d3b5c5fa8625.png 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/GraphQL-Preview.42db587.702b586ec4be2f1e0070d3b5c5fa8625.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/GraphQL-Preview.42db587.702b586ec4be2f1e0070d3b5c5fa8625.png\" width=\"2560\" alt=\"ASP.NET Core GraphQL Boxed Preview\"></noscript></p>\n<p>This is the only GraphQL project template that I'm aware of at the time of writing and it's pretty fully featured with sample queries, mutations and subscriptions.</p>\n<h1 id=\"aspnet-core-boilerplate\"><a href=\"#aspnet-core-boilerplate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ASP.NET Core Boilerplate</h1>\n<p>.NET Boxed used to be called ASP.NET Core Boilerplate. That name was kind of forgettable and there was another great project that had a very similar name. I put off renaming for a long time because it was too much work but I finally relented and got it done.</p>\n<p>In the end I think it was for the best. The new <a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed</a> branding and logo are much better and I've opened it up to .NET project templates in general, instead of just ASP.NET Core project templates.</p>\n<p>Thanks to <a href=\"https://twitter.com/jongalloway\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jon Galloway</a> and <a href=\"https://twitter.com/jfollas\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jason Follas</a> for helping to <a href=\"https://twitter.com/jongalloway/status/991342926067154945\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">work out the branding</a>.</p>\n<h1 id=\"how-can-i-get-it\"><a href=\"#how-can-i-get-it\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>How can I get it?</h1>\n<ol>\n<li>Install the latest .NET Core SDK.</li>\n<li>Run <code class=\"language-text\">dotnet new --install &quot;Boxed.Templates::*&quot;</code> to install the project template.</li>\n<li>Run <code class=\"language-text\">dotnet new api --help</code> to see how to select the feature of the project.</li>\n<li>Run <code class=\"language-text\">dotnet new api --name &quot;MyTemplate&quot;</code> along with any other custom options to create a project from the template.</li>\n</ol>\n<h1 id=\"boxed-updates\"><a href=\"#boxed-updates\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Boxed Updates</h1>\n<p>There are new features and improvements planned on the GitHub <a href=\"https://github.com/Dotnet-Boxed/Templates/projects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">projects</a> tab. ASP.NET Core 2.1 is coming out soon, so look out for updates which you can see in the GitHub <a href=\"https://github.com/Dotnet-Boxed/Templates/releases\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">releases</a> tab when they go live.</p>\n"}},{"node":{"title":"The Dotnet Watch Tool Revisited","path":"/the-dotnet-watch-tool-revisited/","date":"30 April 2018","timeToRead":2,"description":"The dotnet watch tool is a file watcher for dotnet that restarts the application when changes in the source code are detected. You can use dotnet watch in Visual Studio by using the launchSettings.json configuration file.","content":"<p>I talked about using the <a href=\"/the-dotnet-watch-tool/\">dotnet watch tool</a> with Visual Studio some time ago. Since then, a lot changed with the Visual Studio tooling and .NET Core 2.0 which broke the use of dotnet watch in Visual Studio, hence the reason for writing this post.</p>\n<p>The <code class=\"language-text\">dotnet watch</code> tool is a file watcher for dotnet that restarts the application when changes in the source code are detected. This is super useful when you just want to hack away at code and see the changes instantly when you refresh your browser. It increases productivity and reduces the magical inner-loop which reduces the time taken to write some code and then see it's effects. I also like using this tool because it opens a console window which lets you see all of your logs flashing by.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1003 489' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-fdd2de6bab764338f478722f9f5c2494'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-fdd2de6bab764338f478722f9f5c2494)' width='1003' height='489' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAfCAIAAADY01yrAAAACXBIWXMAAAsSAAALEgHS3X78AAAEv0lEQVRYw%2b1YW3PTRhReS7bki%2b53aXW3jZMwLaW88COSpySTNNNfwRM4UwqxwcQQHvoj%2bDWdPtFhpjwAudhJiO3ETpwESODIrjOh02mHkglh6k9Hq7NnpdV%2bu3vOkY2erjZ/ffrH6tbOWqMNUmt2ao3Oems3UpqderMDTSC11u5as11vRnaormxt11u7Gzvd1UYbqqBANVK299a3u43u28bem2av/HyBzrd2D6E3UJY3W/2e16MX7bXfvEe/Pf19sVJZr9fqtdp6beXVyxfbrdZOq7m5ufH69WZtdbnR2Nis1zbgjrXV7Waz1Wwuv3yxsV7rtDudvd2V5VdrKyuddhuaV0BptbYbW%2b8jHL8/a7x79/bwYP/4OOr58PDgYL8LCiov/bL06GEfDyIslkulUrm8WK3evXv3wWIVLIDyvXvVarVSebBQKj189Khcvnf/fmVhobS0tARVKCv3K/AwqI8fP4b7f7p9Gwx3fr5z8%2batW8UinB/LwFjs6f%2bI4vz86Rqc88XijRs3njx5sn9wgKzsqKHrFrZAJFEQRTGVohmWFQQhQVGqpimyBHqGYSRJ5Dk2zTAcxxIkCQ8kaRohFCNicZJIJlNkPJFKp0mCQH3EBspZgyRJKKempnZ2dtDYtethNgjD0HadsbHLl/Kjvh84np/L5W3bzYV5w7CCMMiGWd8P87mCjR3P9TF2RkYvO9gBOqIosSwnSzLPCwyTgapp6IZpwGxomqbruqIogiiYpqWpKsfzpmnCjFg2xpaJbcxzHEEQ8U9BMpkEAnNzc9EW8gtXRnP5wPVd23ds7VJOyXqibbKmxrq2gC1GlKgwm1NlRdNT2VByHQnjjGUxhsEaWgZjzjRZw%2bAsC0bPZNJpQRB1TRNFgWVYnudFSeI4LpVKKYoKY02nMzzPwQgiVsAYFrw3mk8CcIByZmbm6OgICQVH8NiUmWRtjhbjJINoGdEKoi1E8YimEEUhmqbjJJlIoEQ8EnhjOhXZwULRiEpEChlH54YTAuDQiJD4OEsKlqzYsmhIum0qWCVZCqVjKBGDjdyTE/yl%2bneIRegrf9YG5pMuTts/l0AsxcKCOtj1HNfBeORSQeD4fx3lf3/5ma%2bAkx%2bzTF3VVM/3Pd/DGMPVhcN3ZUn04OLYhmEQBIEuDD7ygbSkU4k42XNt2OugUAA6Qq%2bMjD2vj100ArOzs1EUCsau6KpsO44syxA9VFUxLQsWQeA5OCDYmYap93BxGPTzwOTkZKPRQNlvvvccO5fLSaIIuwgIZHN5cAaBF4CS1wOE0ZFCIfQDyzJtGxqxY9vYtoMgyg%2be6xom2CGwQ1jHsfMiMD4%2b/uzZMzRy7bquiJBU4PUueLLtQKKBXGsYJviELEmQgILAz2Zz2TAEZ/j2u6uQgIhYrJ9TaIpKJBLxxCDHnEs07ROYmJh4/vw5Gr16PfQcmLrA9y3LgtwJHgwCCqQh3/MkSQIdplaBFVFkRVUgE4uC4Aehpipf0Aemp6e73S6ieSWK7fBBM4jfsQFAh%2bBzYjzdBCB6bV/eieOMeCq9fB34KA8MCQwJDAkMCQwJDAkMCQwJ/F8JRD8p44zwlRLofY0eI0rBBJUkkwyZzHwtQmW46K/FH36sb7U%2bADYWhmus1sRGAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1003\" alt=\"Dotnet Watch Run Console\" data-srcset=\"/assets/static/Dotnet-Watch-Run-Console.82a2fbd.9f55037aecf387092ec5161975f4dc85.png 480w, /assets/static/Dotnet-Watch-Run-Console.7d32108.9f55037aecf387092ec5161975f4dc85.png 1003w\" data-sizes=\"(max-width: 1003px) 100vw, 1003px\" data-src=\"/assets/static/Dotnet-Watch-Run-Console.7d32108.9f55037aecf387092ec5161975f4dc85.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Dotnet-Watch-Run-Console.7d32108.9f55037aecf387092ec5161975f4dc85.png\" width=\"1003\" alt=\"Dotnet Watch Run Console\"></noscript></p>\n<div class=\"custom-block warning\"><p class=\"custom-block-title\">Warning</p><p>In both cases you have to be careful to start the application by clicking Debug -> Start Without Debugging or hitting the CTRL+F5 keyboard shortcut.</p></div>\n<h1 id=\"net-core-20-vs-21\"><a href=\"#net-core-20-vs-21\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>.NET Core 2.0 vs 2.1</h1>\n<p>Setting up the 'dotnet watch' tool is as easy as installing the <code class=\"language-text\">Microsoft.DotNet.Watcher.Tools</code> NuGet package if you are using .NET Core 2.0. If you are using .NET Core 2.1 or above, this tool comes pre-installed in the .NET Core SDK.</p>\n<p>Now using powershell, you can navigate to your project folder and run the <code class=\"language-text\">dotnet watch run</code> command and your set. But using the command line is a bit lame if you are using Visual Studio, we can do one better.</p>\n<h1 id=\"launchsettingsjson\"><a href=\"#launchsettingsjson\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>launchSettings.json</h1>\n<p>The <code class=\"language-text\">launchSettings.json</code> file is used by Visual Studio to launch your application and controls what happens when you hit F5. It turns out you can add additional launch settings here to launch the application using the <code class=\"language-text\">dotnet watch</code> tool. You can do so by adding a new launch configuration as I've done at the bottom of this file:</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"iisSettings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"windowsAuthentication\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"anonymousAuthentication\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"iisExpress\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"applicationUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5000/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"sslPort\"</span><span class=\"token operator\">:</span> <span class=\"token number\">44300</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"profiles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"IIS Express\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"commandName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"IISExpress\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"launchBrowser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"launchUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5000/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"environmentVariables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"ASPNETCORE_ENVIRONMENT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Development\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"ASPNETCORE_HTTPS_PORT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"44300\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dotnet run\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"commandName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Project\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"launchBrowser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"launchUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5000/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"environmentVariables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"ASPNETCORE_ENVIRONMENT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Development\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"ASPNETCORE_HTTPS_PORT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"44300\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// dotnet watch run must be run without the Visual Studio debugger using CTRL+F5.</span>\n    <span class=\"token property\">\"dotnet watch run\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"commandName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Executable\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"executablePath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dotnet\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"workingDirectory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$(ProjectDir)\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"commandLineArgs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"watch run\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"launchBrowser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"launchUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5000/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"environmentVariables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"ASPNETCORE_ENVIRONMENT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Development\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"ASPNETCORE_HTTPS_PORT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"44300\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that I renamed the second launch profile (which already exists in the default template) to <code class=\"language-text\">dotnet run</code> because that's actually the command it's running and makes more sense.</p>\n<p>The <code class=\"language-text\">dotnet watch</code> launch profile is running the <code class=\"language-text\">dotnet watch run</code> command as an executable and using the current working directory of the project. Now we can see the new launch profile in the Visual Studio toolbar like so:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1316 416' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-e31b3345e3316191c5f5d7a6a0ab0bbc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-e31b3345e3316191c5f5d7a6a0ab0bbc)' width='1316' height='416' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAYAAAA9djs/AAAACXBIWXMAAAsSAAALEgHS3X78AAAKeUlEQVRYw81Xe1DU1xXmL5uZGl/Ie0EML41gkzhJjBpjNBjER4BgDIoYta01BqdpmqSJmtF2pu0kk3aSZqaNM00maW3iIwaW8H7sAruwy3Mf7LLLsiC7C%2bwuC6ioiI/z9dzfAmJ8JDr9ozvzzX387j3nnu%2bex92AluYekn%2bmRlNLF6kb20nT3EHalo7x1kaNOjs1tnaSlscNLZ08b%2bX5TmpotZOmyUJNhjPUwtA0WXmdndfY%2bJtN2q9ptpHO5CCzzQNTh5sEzLZJQODGvAc3r7vRb7P2w%2b48R3/%2b4G94IS0TW7N3YtfuXyFnx8/x4uYs/GLPa2g2dMNiHxB7MCHrxyCgqbGbTn5chYZGG1XUNFNlTQspaluops7IMJC6wUL1bKhCpZfm6pkkpejXm6hapeNvHZLxFcomUmlMvLeVVFoTKdV6ltUqkdLe6Z1U2NYhGX2L4W03CJokwv9NGotvsHT5YDszzBhCR/cgYwidPf7x%2bJ57Mt5PgLGbNAa7pEBR10YmVtZo6KFabTu12wchbr6G5y2dHmrSdzNJeulgWjasvFpPmtYuMljcqFK1UYO%2bh/TmXqpSm0hn7uPb76Wyap2EUkUre0Y36U1OUtSZmZQBqLRWKlWK%2bS4yWftYto4q1WZqNgg5Lqqs1VMryxMEWjq9ZLV7IfZJhLFXGC19kxDj%2b0EAuw21GHvYiF5q5lbf3keNDc1U39zJB%2bmgEnU7nVZaSa5id%2bZDtbQ5yGjt53VOajW5yNbtJoezlxwuN50fGSVn3xCP%2b8np6iNXn4cujV5ljNHIxWs8bya77Z/kaD9KZ8xHyW78B/V1fEp1jTVUVsfhI0JNpSCd0U5aJqWu0SKFkd7kgLKhk0rVHWAPgxh3dA3A7hiGvWccjvtDwAm5io6dVtAJeS0kFNTi2Kky/OfbauTnFeDjL77DH44W46Mvy3CyQEUnClQ4Lq8V6%2bm4XAV5qZrkhZUkL1ZyWOhQVKGlgpJqKiqrodKqOg6RNgjU1huh1KjgGqyA21NFtq4i6uopo4FBJRnO2KFqHyJjzzm02pwwdvug6xqCgV1b3zUIs/M8NdgGUdvuQ72xB0Y2WNnYidOFdcgv0SKvRHPfCFi6bi89l7aTir59i4rz36bCvLeotOBdKi98l4ry36HKwneovOBt0iqPkLryPWiVh/HEmgzMjlmLsIdTELIgBaEPp0oISngewQuel/ohC9dxPwVzYtfQ3Phkmha%2bnLZs3k9ukxF9ui5Yqg0wK/UwVLSgl2/5rMUJX9sZGmQvG%2bTEOWjqmQTPY8jcQ8NmB3x8%2b2NdXhz8zR/xgGwFQllfUHzy/SEhGQHPpP%2baUl/aSwadnKztReR2KcjtKCe3s5I8zgry9VdTv6OKLgxr6MpIA42eraNTeafps3%2bfpH8d/4ZxWmq/%2bOokfX7sJLen6LNjJ6T22Mk8OiUvxjfyYvo6r5Ba//IR%2bisqqV9ZR7ZCBXV8J1BFvYoG%2bNQ6GlC34nbgb/6%2bqhVexjDD8tdP8JW8CKfyi%2b8ZJ/N5H5/rRF4hE5CWS2szc6lcZaXaxi52TU42nU5qam2ngqJKKimvoZJSBRWXq6iiqp6KS2uoSlFNarWaqquVVK/RklarIY1GQzW1KlKpVFSjUpOW5/UGA7l6%2b%2bB0ucjpcNCAvACO4UtwXwTa%2b0fR5roAo3ME7PnwjgGeyz8O3lFuC0qFXDid9wHe53A44fF4EZC8%2bQ1av2U/DZ8bgfhdHhuTWoVCicioKMQnJCA2Lg5xcfF%2bxItxPB6KiZMQI7XxEmJi/fOinehHz48h0Q8KCsH7L6RLsj2%2by1yyvJyFPbBxKXO5RzEwTPAMXoNn6GZ4h67fhH7fFVxiEk6/eQCBLFPIZh33BHGukNBwpK7fiIAVG/dRSuY%2bOnf%2bojgbXbt2jURbVVlJs2bNpIiICAoLC7stwhnBISEUGhIs9e%2bwBjKZjGY8OB3vb9iAa4KAwSsw2X0w2rywcl03MBm9vmvwnQcG2BsGJlrhGWd5/RT0MymjLCTvt7/DdJYZKZNB6LgXyGQRYNuwdu1aBCSt3EYrN/6SS9gliYCrV69Kt1RVVYXAwEBEsRewATchMlKGeZGRkEWEY9kji7Bo8WJEhIchSszJIsfXREoQ/ajIKMxmWQefXQ3UN8NXrID1qzzYvpaj87gc9hPfwZlXhj55BXrl5ejNL5NaMR4oqYGv9AY8xUpcrKzHl9tfwcy5gYieN29S190w9fzCJmFbSkoKAlal76d1L%2bXS2XEP%2bD4BE5vZEySIfnAYMxgSjrmhYfgycwlS0jMwPUSGIHariPBwaU1oaKgEsSc6OhozZjyIjZvScf0K32T/CHSGHpjFA8bkkmDhR4ne6IROfwYdHfzQMfXC3N7HJXMMAwNX4B0Yk%2bB2X5LaN948KMkUutjTJvWFs34B0Q8ODpa%2bhY%2bfaeL8goA5c%2bb4CViTyVVgiyDgwl0JmEAYC3kqYR7WJ83H5sdiYM5Jwu%2bz1mLdYwvx7IIoRMfGYS7vS05OxrJly5CWlsb9tdi2bSte3bcfl1m8Z/gqrJz5TPzSFOh0nofO6obBxq88Do1WC7/yuG/gEDF3%2bddYe87Ce06EwHUpFP70wcdYuvRJf46KjUVSUhISuL9q1Sqpv2jRIkl/TAzH/EMP3UTCTQQ88ux2euYuIXA7ApbEReHT1AVo27EY%2bpzFaMtehG83/wwZ69YgOukRKTSOHDmC3NxcZGRkYM%2bePdi371XsfTUXl4UHDI7BxAYKGNlwPT%2blXVwG%2bnxX0cutg5Oiy3sFvQN%2biHkBLyfKfk6UF/mIfz/6BXJf24eDBw9h7969kq7t27fj9ddfx%2b7du3HgwAFp/tChQ0hNTcXcuXNvhORUAmKWvIClz%2b/EyIVRkfzwQyEgkk4Qh0BIeASKMhbClr0ATdsSsTp1PULiExEaHITExESsWbNGSjKbNm1Cdna2dEtp6Zm4zrL7uI6Jm25nWMQN8/teGO0Zvg63lP397ffRP3hVImqEC9X7H37COlZj165dWL58OXvYNuzYsUPSmZOTg6ysLKxevVoi5dFHH5VCYmoOmCQg7vEMeiplF41c%2bHEeMEHAcwujcCI9EdkpT%2bPz9Qvw9tYNCE9IhCzMH4dBQUESJmJx%2bvSf4sXMLZJs39nrMHf6uAKchc1x3h8KPHYPA8Ociga5Ig9duD1EhRCF%2bo233sMDD/wEISEh0jmFy4tcI/ritgUmvoX5K9HkJd5EQOzj6ewBuzBOAH6IAH8SDMfTibFYwbEdlPQ45keEYsPyJXh46QqEsVLZ97KvUBjGxCQmJvF/%2bN3I2roDW7JyJvHSy9sn%2b1nbXsHLjKw74GXem52zG088uUwqaUK20COMlDz0DhVgIgHe4gF3IkChUEg3KFgVG6ZiHiNi3nxEiYeOTCiNQiiXv%2bj5829ZO7mHy5U4RGDgHL6dwDsjMPDu3xlCRjiXXSFzqvyp47tB2CRsE7nhjgSUlZVh2rRpElOzZs26FTNnMmZMjmczZoq5262dAiHvf4HZs2f/oK67nUHYtnLlylsJ4Jeg1BoMBimxiIy6c%2bfO24MT0B2//R9D2CRsO3z4MP4LI7P6DSSr1JUAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1316\" alt=\"Dotnet Watch in the Visual Studio Toolbar\" data-srcset=\"/assets/static/Dotnet-Watch.82a2fbd.8c73e465ccd685aee1684f6a22cf2cc1.png 480w, /assets/static/Dotnet-Watch.4298124.8c73e465ccd685aee1684f6a22cf2cc1.png 1316w\" data-sizes=\"(max-width: 1316px) 100vw, 1316px\" data-src=\"/assets/static/Dotnet-Watch.4298124.8c73e465ccd685aee1684f6a22cf2cc1.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Dotnet-Watch.4298124.8c73e465ccd685aee1684f6a22cf2cc1.png\" width=\"1316\" alt=\"Dotnet Watch in the Visual Studio Toolbar\"></noscript></p>\n<h1 id=\"net-boxed-templates\"><a href=\"#net-boxed-templates\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>.NET Boxed Templates</h1>\n<p>I've updated the <a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed</a> family of project templates with this feature built in. Happy coding!</p>\n"}},{"node":{"title":"ASP.NET Core Lazy Command Pattern","path":"/asp-net-core-lazy-command-pattern/","date":"8 April 2017","timeToRead":5,"description":"Move your ASP.NET Core MVC action method logic into lazily loaded commands using the command pattern, to reduce Controller complexity.","content":"<div class=\"custom-block tip\"><p class=\"custom-block-title\">TLDR</p><p>Move your ASP.NET Core MVC action method logic into lazily loaded commands using the command pattern.</p></div>\n<p>When writing your Controllers in ASP.NET Core, you can end up with a very long class if you're not careful. You may have written several action methods with a few lines of code in each, you may be injecting a few services into your controller and you may have commented your action methods to support Swagger. The point is it's very easy to do, here is an example:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[controller]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RocketController</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IPlanetRepository</span> planetRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IRocketRepository</span> rocketRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">RocketController</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IPlanetRepository</span> planetRepository<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IRocketRepository</span> rocketRepository<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planetRepository <span class=\"token operator\">=</span> planetRepository<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository <span class=\"token operator\">=</span> rocketRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{rocketId}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">GetRocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rocketId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> rocket <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository<span class=\"token punctuation\">.</span><span class=\"token function\">GetRocket</span><span class=\"token punctuation\">(</span>rocketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rocket <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">NotFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>rocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{rocketId}/launch/{planetId}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">LaunchRocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rocketId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> planetId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> rocket <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository<span class=\"token punctuation\">.</span><span class=\"token function\">GetRocket</span><span class=\"token punctuation\">(</span>rocketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rocket <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">NotFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">var</span> planet <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planetRepository<span class=\"token punctuation\">.</span><span class=\"token function\">GetPlanet</span><span class=\"token punctuation\">(</span>planetId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>planet <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">NotFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository<span class=\"token punctuation\">.</span><span class=\"token function\">VisitPlanet</span><span class=\"token punctuation\">(</span>rocket<span class=\"token punctuation\">,</span> planet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>rocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"the-command-pattern\"><a href=\"#the-command-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Command Pattern</h1>\n<p>This is where the command pattern can come in handy. The command pattern moves logic from each action method and injected dependencies into their own class like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[controller]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RocketController</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> Lazy<span class=\"token operator\">&lt;</span>IGetRocketCommand<span class=\"token operator\">></span> getRocketCommand<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> Lazy<span class=\"token operator\">&lt;</span>ILaunchRocketCommand<span class=\"token operator\">></span> launchRocketCommand<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">RocketController</span><span class=\"token punctuation\">(</span>\n        Lazy<span class=\"token operator\">&lt;</span>IGetRocketCommand<span class=\"token operator\">></span> getRocketCommand<span class=\"token punctuation\">,</span>\n        Lazy<span class=\"token operator\">&lt;</span>ILaunchRocketCommand<span class=\"token operator\">></span> launchRocketCommand<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getRocketCommand <span class=\"token operator\">=</span> getRocketCommand<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>launchRocketCommand <span class=\"token operator\">=</span> launchRocketCommand<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{rocketId}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">GetRocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rocketId<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getRocketCommand<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span>rocketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{rocketId}/launch/{planetId}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">LaunchRocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rocketId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> planetId<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>launchRocketCommand<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span>rocketId<span class=\"token punctuation\">,</span> planetId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IGetRocketCommand</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IAsyncCommand</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GetRocketCommand</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IGetRocketCommand</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IRocketRepository</span> rocketRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">GetRocketCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IRocketRepository</span> rocketRepository<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository <span class=\"token operator\">=</span> rocketRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rocketId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> rocket <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository<span class=\"token punctuation\">.</span><span class=\"token function\">GetRocket</span><span class=\"token punctuation\">(</span>rocketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rocket <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NotFoundResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkObjectResult</span><span class=\"token punctuation\">(</span>rocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All the logic and dependencies in the controllers gets moved to the command which now has a single responsibility. The controller now has a different set of dependencies, it now lazily injects one command per action method.</p>\n<p>You may have noticed the <code class=\"language-text\">IAsyncCommand</code> interface. I keep four of these handy to inherit from. They all outline an <code class=\"language-text\">ExecuteAsync</code> method to execute the command and return an <code class=\"language-text\">IActionResult</code> but they have a differing number of parameters. I personally feel if you are needing more than three parameters you should be using a class to represent your parameters, so I've put the limit on three parameters.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IAsyncCommand</span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IAsyncCommand</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IAsyncCommand</span><span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T1</span> parameter1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T2</span> parameter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IAsyncCommand</span><span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">,</span> T3<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T1</span> parameter1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T2</span> parameter2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T3</span> parameter3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"why-so-lazy\"><a href=\"#why-so-lazy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Why so Lazy?</h1>\n<p>Why do we use <code class=\"language-text\">Lazy&lt;T&gt;</code>? Well the answer is that if we have multiple action methods on our controller, we don't want to instantiate the dependencies for every action method if we are only planning on using one action method. Registering our Lazy commands requires a bit of extra work in out <code class=\"language-text\">Startup.cs</code>. We can register lazy dependencies like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...Omitted</span>\n    services\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddScoped</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IGetRocketCommand</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">GetRocketCommand</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddScoped</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">Lazy</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IGetRocketCommand</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IGetRocketCommand</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"httpcontext-and-actioncontext\"><a href=\"#httpcontext-and-actioncontext\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HttpContext and ActionContext</h1>\n<p>Now you might be thinking, how do I access the <code class=\"language-text\">HttpContext</code> or <code class=\"language-text\">ActionContext</code> if I want to set a HTTP header for example? Well, you can use the <code class=\"language-text\">IHttpContextAccessor</code> or <code class=\"language-text\">IActionContextAccessor</code> interfaces for this purpose. You can register them in your <code class=\"language-text\">Startup</code> class like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...Omitted</span>\n    services\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IHttpContextAccessor</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpContextAccessor</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IActionContextAccessor</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ActionContextAccessor</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that they can be registered as singletons. You can then use them to get hold of the <code class=\"language-text\">HttpContext</code> or <code class=\"language-text\">ActionContext</code> objects for the current HTTP request. Here is a really simple example.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SetHttpHeaderCommand</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">ISetHttpHeaderCommand</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IHttpContextAccessor</span> httpContextAccessor<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">GetRocketCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IHttpContextAccessor</span> httpContextAccessor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>httpContextAccessor <span class=\"token operator\">=</span> httpContextAccessor<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>httpContextAccessor<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Rocket\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Saturn V\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"unit-testing\"><a href=\"#unit-testing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Unit Testing</h1>\n<p>Another upside to the command pattern is that testing each command becomes super simple. You don't need to setup a controller with lots of dependencies that you don't care about. You only need to write test code for that single feature.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>For a full working example, take a look at the <a href=\"https://github.com/Dotnet-Boxed/Templates/blob/master/Docs/API.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed API</a> project template which makes full use of the Lazy Command Pattern.</p>\n"}},{"node":{"title":"dotnet new Feature Selection","path":"/dotnet-new-feature-selection/","date":"26 March 2017","timeToRead":9,"description":"How to add feature selection to your dotnet new template using symbols (bool, string, choice, computed) and pre-processor directives.","content":"<ul>\n<li><a href=\"/custom-project-templates-using-dotnet-new/\">Part 1 - Custom Project Templates Using dotnet new</a></li>\n<li><a href=\"/dotnet-new-feature-selection/\">Part 2 - dotnet new Feature Selection</a></li>\n<li><a href=\"/unit-testing-dotnet-new-templates/\">Part 3 - Unit Testing dotnet new Templates</a></li>\n</ul>\n<p>In my last post I showed how to <a href=\"/custom-project-templates-using-dotnet-new/\">get started</a> with using <code class=\"language-text\">dotnet new</code> to build project templates. In this post, I'm going to build on that knowledge and show how to add feature selection to your project template so developers can choose to add or remove bits of your template. If you check out my <a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed API</a> project template, you'll see that I have 17 features for you to set. If you run the help command against my template you'll see a description of each and instructions on how you can set them (I've cleaned up the CLI output, the current help commands output is pretty awful but this is being <a href=\"https://github.com/dotnet/templating/issues/348\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">addressed</a> in the next version of <code class=\"language-text\">dotnet new</code>).</p>\n<div class=\"line-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PS C:\\Users\\rehan.saeed&gt; dotnet new api --help\nTemplate Instantiation Commands for .NET Core CLI.\n\nUsage: dotnet new [arguments] [options]\n\nArguments:\n  template  The template to instantiate.\n\nOptions:\n  -l|--list         List templates containing the specified name.\n  -lang|--language  Specifies the language of the template to create\n  -n|--name         The name for the output being created. If no name is specified, the name of the current directory is\nused.\n  -o|--output       Location to place the generated output.\n  -h|--help         Displays help for this command.\n  -all|--show-all   Shows all templates\n\n.NET Boxed API (C#)\nAuthor: Muhammad Rehan Saeed (RehanSaeed.com)\nOptions:\n  -Ti|--Title: The name of the project which determines the assembly product name. If the Swagger feature is enabled,\n    shows the title on the Swagger UI.\n    string - Optional\n    Default: Project Title\n  -D|--Description: A description of the project which determines the assembly description. If the Swagger feature is\n    enabled, shows the description on the Swagger UI.\n    string - Optional\n    Default: Project Description\n  -Au|--Author: The name of the author of the project which determines the assembly author, company and copyright\n    information.\n    string - Optional\n    Default: Project Author\n  -Sw|--Swagger: Swagger is a format for describing the endpoints in your API. Swashbuckle is used to generate a\n    Swagger document and to generate beautiful API documentation, including a UI to explore and test operations,\n    directly from your routes, controllers and models.\n    bool - Optional\n    Default: true\n  -T|--TargetFramework: Decide which version of the .NET Framework to target.\n    .NET Core         - Run cross platform (on Windows, Mac and Linux). The framework is made up of NuGet packages\n                        which can be shipped with the application so it is fully stand-alone.\n    .NET Framework    - Gives you access to the full breadth of libraries available in .NET instead of the subset\n                        available in .NET Core but requires it to be pre-installed.\n    Both              - Target both .NET Core and .NET Framework.\n    Default: Both\n  -P|--PrimaryWebServer: The primary web server you want to use to host the site.\n    Kestrel        - A web server for ASP.NET Core that is not intended to be internet facing as it has not been\n                     security tested. IIS or NGINX should be placed in front as reverse proxy web servers.\n    WebListener    - A Windows only web server. It gives you the option to take advantage of Windows specific\n                     features, like Windows authentication, port sharing, HTTPS with SNI, HTTP/2 over TLS\n                     (Windows 10), direct file transmission, and response caching WebSockets (Windows 8).\n    Default: Kestrel\n  -Re|--ReverseProxyWebServer: The internet facing reverse proxy web server you want to use in front ofthe primary\n    web server to host the site.\n    Internet Information Services (IIS) - A flexible, secure and manageable Web server for hosting anything on the\n                                          Web using Windows Server. Select this option if you are deploying your site\n                                          to Azure web apps. IIS is preconfigured to set request limits for security.\n    NGINX                               - A free, open-source, cross-platform high-performance HTTP server and\n                                          reverse proxy, as well as an IMAP/POP3 proxy server. It does have a Windows\n                                          version but its not very fast and IIS is better on that platform. If the\n                                          HTTPS Everywhere feature is enabled, NGINX is pre-configured to enable the\n                                          most secure TLS protocols and ciphers for security and to enable HTTP 2.0\n                                          and SSL stapling for performance.\n    Both                                - Support both reverse proxy web servers.\n    Default: Both\n  -C|--CloudProvider: Select which cloud provider you are using if any, to add cloud specific features.\n    Azure    - The Microsoft Azure cloud. Adds logging features that let you see logs in the Azure portal.\n    None     - No cloud provider is being used.\n    Default: None\n  -A|--Analytics: Monitor internal information about how your application is running, as well as external user\n    information.\n    Application Insights    - Monitor internal information about how your application is running, as well as\n                              external user information using the Microsoft Azure cloud.\n    None                    - Not using any analytics.\n    Default: None\n  -Ap|--ApplicationInsightsInstrumentationKey: Your Application Insights instrumentation key\n    e.g. 11111111-2222-3333-4444-555555555555.\n    string - Optional\n    Default: APPLICATION-INSIGHTS-INSTRUMENTATION-KEY\n  -H|--HttpsEverywhere: Use the HTTPS scheme and TLS security across the entire site, redirects HTTP to HTTPS and\n    adds a Strict Transport Security (HSTS) HTTP header with preloading enabled. Configures the primary and reverse\n    proxy web servers for best security and adds a development certificate file for use in your development environment.\n    bool - Optional\n    Default: true\n  -Pu|--PublicKeyPinning: Adds the Public-Key-Pins (HPKP) HTTP header to responses. It stops man-in-the-middle\n    attacks by telling browsers exactly which TLS certificate you expect. You must have two TLS certificates for this\n    to work, if you get this wrong you will have performed a denial of service attack on yourself.\n    bool - Optional\n    Default: false\n  -CO|--CORS: Browser security prevents a web page from making AJAX requests to another domain. This restriction is\n    called the same-origin policy, and prevents a malicious site from reading sensitive data from another site.\n    CORS is a W3C standard that allows a server to relax the same-origin policy. Using CORS, a server can explicitly\n    allow some cross-origin requests while rejecting others.\n    bool - Optional\n    Default: true\n  -X|--XmlFormatter: Choose whether to use the XML input/output formatter and which serializer to use.\n    DataContractSerializer - The default XML serializer you should use. Requires the use of [DataContract] and\n                             [DataMember] attributes.\n    XmlSerializer          - The alternative XML serializer which is slower but gives more control. Uses the\n                             [XmlRoot], [XmlElement] and [XmlAttribute] attributes.\n    None                   - No XML formatter.\n    Default: None\n  -S|--StatusController: An endpoint that returns the status of this API and its dependencies, giving an indication\n    of its health. This endpoint can be called by site monitoring tools which ping the site or by load balancers\n    which can remove an instance of this API if it is not functioning correctly.\n    bool - Optional\n    Default: true\n  -R|--RequestId: Require that all requests send the X-Request-ID HTTP header containing a GUID. This is useful where\n    you have access to the client and server logs and want to correlate a request and response between the two.\n    bool - Optional\n    Default: false\n  -U|--UserAgent: Require that all requests send the User-Agent HTTP header containing the application name and\n    version of the caller.\n    bool - Optional\n    Default: false\n  -Ro|--RobotsTxt: Adds a robots.txt file to tell search engines not to index this site.\n    bool - Optional\n    Default: true\n  -Hu|--HumansTxt: Adds a humans.txt file where you can tell the world who wrote the application. This file is a good\n    place to thank your developers.\n    bool - Optional\n    Default: true</code></pre></div>\n<p>As you can see from the output, there are a few different types of feature you can create. You can also choose to make a feature required or optional. An optional feature, if not specified by the user will fall-back to a default value. Here are the different types available:</p>\n<ul>\n<li><strong>bool</strong> - This feature can be turned on or off and has a default of true or false.</li>\n<li><strong>string</strong> - This can be used to do a string replacement in your template. It has a default value which you can set to any arbitrary value.</li>\n<li><strong>choice</strong> - This is a feature with two or more named choices. Each choice can have it's own description. The default value must be one of the choices.</li>\n<li><strong>computed</strong> - These are features flags that can be computed based on other symbols.</li>\n</ul>\n<h1 id=\"bool-symbols\"><a href=\"#bool-symbols\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bool Symbols</h1>\n<p>You can create a boolean feature by adding symbols section to your template.json file. If you look at the example below, I've specified an optional bool symbol, with a default value of true.</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"symbols\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Swagger\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parameter\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"datatype\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bool\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"isRequired\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"defaultValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In your code, you can then use the symbol name, in this case <code class=\"language-text\">Swagger</code> as a pre-processor directive in C# code:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> (Swagger)</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Swagger feature was selected\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">else</span></span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Swagger feature was not selected\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p>This is really cool because you can still run the application as a template author and the project will still work. If you define a <code class=\"language-text\">Swagger</code> constant in your project properties, your feature will turn on or off too. This makes debugging your project template very easy as a template author.</p>\n<p>If you want to use the symbol in files other than C# where pre-processor directives do not exist, you can use the comment syntax specific to that file extension, so in a JavaScript file would use the <code class=\"language-text\">//</code> syntax:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">//#if (Swagger)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Swagger feature was selected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//#else</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Swagger feature was not selected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//#endif</span></code></pre></div>\n<p>Most file extensions that have their own comment syntax have been catered for. For text files where there is no comment syntax or for any file extension that the templating engine doesn't know about you can use the <code class=\"language-text\">#</code> character:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> (Swagger)</span>\n<span class=\"token class-name\">Swagger</span> feature was selected\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">else</span></span>\n<span class=\"token class-name\">Swagger</span> feature was not selected\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p>You can look at <a href=\"https://github.com/dotnet/templating/blob/cb9edbfe02c038a306fbcb6bbe162462d5fb59f0/src/Microsoft.TemplateEngine.Orchestrator.RunnableProjects/Config/ConditionalConfig.cs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> code in the templating engine for a full list of supported file extensions and comment types.</p>\n<h1 id=\"string-symbols\"><a href=\"#string-symbols\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>String Symbols</h1>\n<p>String symbols can be used to do simple file replace operations.</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"symbols\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Title\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parameter\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"datatype\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"isRequired\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"defaultValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Default Project Title\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"replaces\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PROJECT-TITLE\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above symbol looks for a <code class=\"language-text\">PROJECT-TITLE</code> string and replaces it with whatever the user specifies or with the default value <code class=\"language-text\">Default Project Title</code> if the user doesn't set anything.</p>\n<h1 id=\"choice-symbols\"><a href=\"#choice-symbols\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Choice Symbols</h1>\n<p>A choice symbol is useful when you have more than two options and can't use bool.</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"symbols\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"TargetFramework\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parameter\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"datatype\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"choice\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"isRequired\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"choices\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"choice\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".NET Core\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"choice\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".NET Framework\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"choice\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Both\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"defaultValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Both\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the example above, you have the choice of selecting a target framework, with a value of <code class=\"language-text\">.NET Core</code>, <code class=\"language-text\">.NET Framework</code> or <code class=\"language-text\">Both</code>. Each choice has it's own description and the overall symbol also has it's description.</p>\n<h1 id=\"computed-symbols\"><a href=\"#computed-symbols\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Computed Symbols</h1>\n<p>In the above example, you can't use the value '.NET Core' as a C# pre-processor variable because it contains a dot and a space. This is where a computed symbol comes in handy.</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"symbols\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"NETCore\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"computed\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(TargetFramework == \\\".NET Core\\\" || TargetFramework == \\\"Both\\\")\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"NETFramework\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"computed\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(TargetFramework == \\\".NET Framework\\\" || TargetFramework == \\\"Both\\\")\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here I have set up two computed symbols which determines whether '.NET Core' or '.NET Framework' was selected individually in the previous choice symbol. I have named these symbols without a dot or space i.e. <code class=\"language-text\">NETCore</code> and <code class=\"language-text\">NETFramework</code> so I can use these as C# pre-processor symbols, the same way I showed above.</p>\n<h1 id=\"conditionally-deleting-files-or-folders\"><a href=\"#conditionally-deleting-files-or-folders\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conditionally Deleting Files or Folders</h1>\n<p>You can also use symbols to delete certain files or folders. In this example, I've extended my bool symbol example to additionally remove two files and a folder if the feature is deselected by the user.</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"symbols\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Swagger\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parameter\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"datatype\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bool\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"isRequired\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"defaultValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sources\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"modifiers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"condition\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(!Swagger)\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"Constants/HomeControllerRoute.cs\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Controllers/HomeController.cs\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"ViewModelSchemaFilters/**/*\"</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You do this by adding source modifiers. I've added one here with a condition and three file and folder exclusions. The exclusions use a globbing pattern.</p>\n<h1 id=\"whats-next\"><a href=\"#whats-next\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What's Next?</h1>\n<p>There are several other useful features of the templating engine which I'll cover in a follow up post as this is starting to get quite long. Feel free to take a look at the <a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a> for my API template to see a full example.</p>\n"}},{"node":{"title":"SEO Friendly URL's for ASP.NET Core","path":"/seo-friendly-urls-asp-net-core/","date":"17 December 2016","timeToRead":8,"description":"An SEO friendly URL is human readable and gives your site a higher page rank. Learn how to implement SEO friendly URL's using ASP.NET Core.","content":"<p>For some reason there are not a lot of Search Engine Optimization (SEO) blog posts or projects out there. Taking a few simple steps can make your site rank higher in Google or Bing search results so it's well worth doing. Here are a few other of my SEO related blog posts:</p>\n<ul>\n<li><a href=\"/canonical-urls-for-asp-net-mvc/\">Canonical URL's for ASP.NET MVC</a></li>\n<li><a href=\"/dynamically-generating-sitemap-xml-for-asp-net-mvc/\">Dynamically Generating Sitemap.xml for ASP.NET MVC</a></li>\n<li><a href=\"/dynamically-generating-robots-txt-using-asp-net-mvc/\">Dynamically Generating Robots.txt Using ASP.NET MVC</a></li>\n</ul>\n<h1 id=\"what-is-an-seo-friendly-url\"><a href=\"#what-is-an-seo-friendly-url\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What is an SEO Friendly URL?</h1>\n<p>This Mozilla blog post called '<a href=\"https://moz.com/blog/15-seo-best-practices-for-structuring-urls\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">15 best practices for structuring URL's'</a> is the best article on the subject of SEO friendly URL's I found and it's well worth a read.</p>\n<p>Essentially you want a simple short URL that tells the user what they are clicking on at a glance. It should also contain keywords pertaining to what is on the page for better Search Engine Optimization (SEO). In short, a page will appear higher up in search results if the term a user searches for appears in the URL. Your URL should look like this:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 915 96' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-15f182bc00a287e5a918aa9d1f3d4b95'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-15f182bc00a287e5a918aa9d1f3d4b95)' width='915' height='96' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAHCAIAAAA3VtxdAAAACXBIWXMAAAsSAAALEgHS3X78AAAB2ElEQVQ4y82UR2/CQBCF/f9/DhJ3JEQEODj0XkLvYIwL5UA%2b7VMsk3bOO6xmZ9%2bOZ2bf2NrtdufzOQiCMAx93z%2bdTsfj8XA4uK673%2b9ZjwYnA8/z2u12oVAolUqv/wPWaDSqVCovBsvlsl6v53I527YzmUytVsPIZrOtVms6nc5mMwidTiedTufzeS7b/wAWzabTZLZarQ4Gm82Gdbvd0vi9ATYevUOv1ysWi28GjuPwFI6BjOQ2tr/j79Mk7UdP0m/5BoGBnwDpIhicEpgMPPgxIMgfRRHak8F6uVxCgyiB8BmSq/gx5I%2bN8Bcomu6KaY3HY8%2bA7s7nc9pPZnSd4lAL6cJDQghMBYDH47FYLOBTBnw8GOv1GiZ%2bVciTEm1toPlhnGDykkwdt3hwReMuZXOqjkBQMiC29fhsFY3g1CCn1e/3FYgQqBy1EBEqSTOvkIiO1FKplGh85na7Eeh%2bv5MKhaGlyWTCwFAwZbcMGo0G1weDAR6OsJmuZrP5bgABJ%2bNH%2b4bDId8tl8tsSaZarRKNsYTc7XYhMGxohgjMIadExoNNQC5aJOR%2bQnWrMh6BMuLOxTQ1WL8sVmkm1hJbyeZ6vUbPSEqIbVJs8sTySMbRVq8k/5cvfgDQbqGFsQmLhwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"915\" alt=\"SEO Friendly URL Example\" data-srcset=\"/assets/static/SEO-Friendly-URL.82a2fbd.6db80eba7aa05674861760d6b8f4dea2.png 480w, /assets/static/SEO-Friendly-URL.d965bd8.6db80eba7aa05674861760d6b8f4dea2.png 915w\" data-sizes=\"(max-width: 915px) 100vw, 915px\" data-src=\"/assets/static/SEO-Friendly-URL.d965bd8.6db80eba7aa05674861760d6b8f4dea2.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/SEO-Friendly-URL.d965bd8.6db80eba7aa05674861760d6b8f4dea2.png\" width=\"915\" alt=\"SEO Friendly URL Example\"></noscript></p>\n<p>The URL contains an ID for a product and ends with a friendly title. The title contains alphanumeric characters with dashes instead of spaces. Note that the ID of the product is still included in the URL, to avoid having to deal with two friendly titles with the same name.</p>\n<p>If you elect to omit the ID, then you have to do a lot of footwork to make things work. Firstly, you have to use the title as a kind of primary key to get the product data from your database and secondly, you also have to figure out what to do when there are two pages with the same title. Each time you want to create a new title, you have to scan your data store to see if the title already exists and if it does either error and force the creation of a different title or add make it unique by adding a number on the end. This is a lot of work but does produce a nicer URL, the choice is yours.</p>\n<h1 id=\"how-to-build-one\"><a href=\"#how-to-build-one\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>How to Build One</h1>\n<p>Take a look at the controller action below. It is a very simple example of how to use SEO friendly URL's. In our example we have a product class which has a ID and title properties, where the title is just the name of the product.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"product/{id}/{title}\"</span><span class=\"token punctuation\">,</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"GetProduct\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">IActionResult</span> <span class=\"token function\">GetProduct</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> title<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Get the product as indicated by the ID from a database or some repository.</span>\n    <span class=\"token keyword\">var</span> product <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>productRepository<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// If a product with the specified ID was not found, return a 404 Not Found response.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>product <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">NotFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Get the actual friendly version of the title.</span>\n    <span class=\"token keyword\">string</span> friendlyTitle <span class=\"token operator\">=</span> FriendlyUrlHelper<span class=\"token punctuation\">.</span><span class=\"token function\">GetFriendlyTitle</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Compare the title with the friendly title.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>friendlyTitle<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> StringComparison<span class=\"token punctuation\">.</span>Ordinal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// If the title is null, empty or does not match the friendly title, return a 301 Permanent</span>\n        <span class=\"token comment\">// Redirect to the correct friendly URL.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">RedirectToRoutePermanent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GetProduct\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">,</span> title <span class=\"token operator\">=</span> friendlyTitle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// The URL the client has browsed to is correct, show them the view containing the product.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">View</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All the work is done by the <code class=\"language-text\">FriendlyUrlHelper</code> which turns the product title which may contain spaces, numbers or other special characters (which would not be allowed in a URL without escaping them) into a <code class=\"language-text\">lower-kebab-case</code> title.</p>\n<p>This generated friendly title is compared with the one that is passed in and if it is different (Someone may have omitted the friendly title or mis-spelled it) we perform a permanent redirect to the product with the same ID but now with the friendly title. This is important for SEO purposes, we want search engines to only find one URL for each product. Finally, if the friendly title matches the one passed in we return the product view.</p>\n<h1 id=\"the-friendlyurlhelper\"><a href=\"#the-friendlyurlhelper\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The FriendlyUrlHelper</h1>\n<p>The <code class=\"language-text\">FriendlyUrlHelper</code> was inspired by a famous StackOverflow question '<a href=\"https://stackoverflow.com/questions/25259/how-does-stack-overflow-generate-its-seo-friendly-urls/25486\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How does Stack Overflow generate its SEO-friendly URLs?</a>'. The full source code for it is shown below.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">/// &lt;summary></span>\n<span class=\"token comment\">/// Helps convert &lt;see cref=\"string\"/> title text to URL friendly &lt;see cref=\"string\"/>'s that can safely be</span>\n<span class=\"token comment\">/// displayed in a URL.</span>\n<span class=\"token comment\">/// &lt;/summary></span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FriendlyUrlHelper</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Converts the specified title so that it is more human and search engine readable e.g.</span>\n    <span class=\"token comment\">/// http://example.com/product/123/this-is-the-seo-and-human-friendly-product-title. Note that the ID of the</span>\n    <span class=\"token comment\">/// product is still included in the URL, to avoid having to deal with two titles with the same name. Search</span>\n    <span class=\"token comment\">/// Engine Optimization (SEO) friendly URL's gives your site a boost in search rankings by including keywords</span>\n    <span class=\"token comment\">/// in your URL's. They are also easier to read by users and can give them an indication of what they are</span>\n    <span class=\"token comment\">/// clicking on when they look at a URL. Refer to the code example below to see how this helper can be used.</span>\n    <span class=\"token comment\">/// Go to definition on this method to see a code example. To learn more about friendly URL's see</span>\n    <span class=\"token comment\">/// https://moz.com/blog/15-seo-best-practices-for-structuring-urls.</span>\n    <span class=\"token comment\">/// To learn more about how this was implemented see</span>\n    <span class=\"token comment\">/// http://stackoverflow.com/questions/25259/how-does-stack-overflow-generate-its-seo-friendly-urls/25486#25486</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"title\">The title of the URL.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;param name=\"remapToAscii\">if set to &lt;c>true&lt;/c>, remaps special UTF8 characters like 'è' to their ASCII</span>\n    <span class=\"token comment\">/// equivalent 'e'. All modern browsers except Internet Explorer display the 'è' correctly. Older browsers and</span>\n    <span class=\"token comment\">/// Internet Explorer percent encode these international characters so they are displayed as'%C3%A8'. What you</span>\n    <span class=\"token comment\">/// set this to depends on whether your target users are English speakers or not.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;param name=\"maxlength\">The maximum allowed length of the title.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>The SEO and human friendly title.&lt;/returns></span>\n    <span class=\"token comment\">/// &lt;code></span>\n    <span class=\"token comment\">/// [HttpGet(\"product/{id}/{title}\", Name = \"GetDetails\")]</span>\n    <span class=\"token comment\">/// public IActionResult Product(int id, string title)</span>\n    <span class=\"token comment\">/// {</span>\n    <span class=\"token comment\">///     // Get the product as indicated by the ID from a database or some repository.</span>\n    <span class=\"token comment\">///     var product = ProductRepository.Find(id);</span>\n    <span class=\"token comment\">///</span>\n    <span class=\"token comment\">///     // If a product with the specified ID was not found, return a 404 Not Found response.</span>\n    <span class=\"token comment\">///     if (product == null)</span>\n    <span class=\"token comment\">///     {</span>\n    <span class=\"token comment\">///         return this.HttpNotFound();</span>\n    <span class=\"token comment\">///     }</span>\n    <span class=\"token comment\">///</span>\n    <span class=\"token comment\">///     // Get the actual friendly version of the title.</span>\n    <span class=\"token comment\">///     var friendlyTitle = FriendlyUrlHelper.GetFriendlyTitle(product.Title);</span>\n    <span class=\"token comment\">///</span>\n    <span class=\"token comment\">///     // Compare the title with the friendly title.</span>\n    <span class=\"token comment\">///     if (!string.Equals(friendlyTitle, title, StringComparison.Ordinal))</span>\n    <span class=\"token comment\">///     {</span>\n    <span class=\"token comment\">///         // If the title is null, empty or does not match the friendly title, return a 301 Permanent</span>\n    <span class=\"token comment\">///         // Redirect to the correct friendly URL.</span>\n    <span class=\"token comment\">///         return this.RedirectToRoutePermanent(\"GetProduct\", new { id = id, title = friendlyTitle });</span>\n    <span class=\"token comment\">///     }</span>\n    <span class=\"token comment\">///</span>\n    <span class=\"token comment\">///     // The URL the client has browsed to is correct, show them the view containing the product.</span>\n    <span class=\"token comment\">///     return this.View(product);</span>\n    <span class=\"token comment\">/// }</span>\n    <span class=\"token comment\">/// &lt;/code></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">string</span> <span class=\"token function\">GetFriendlyTitle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> title<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> remapToAscii <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxlength <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>title <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> title<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> prevdash <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            c <span class=\"token operator\">=</span> title<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                prevdash <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'Z'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// tricky way to convert to lower-case</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">|</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                prevdash <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>prevdash <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    prevdash <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> previousLength <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>remapToAscii<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token function\">RemapInternationalCharToAscii</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previousLength <span class=\"token operator\">!=</span> stringBuilder<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    prevdash <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> maxlength<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevdash<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> stringBuilder<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Remaps the international character to their equivalent ASCII characters. See</span>\n    <span class=\"token comment\">/// http://meta.stackexchange.com/questions/7435/non-us-ascii-characters-dropped-from-full-profile-url/7696#7696</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"character\">The character to remap to its ASCII equivalent.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>The remapped character&lt;/returns></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">string</span> <span class=\"token function\">RemapInternationalCharToAscii</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> character<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">string</span> s <span class=\"token operator\">=</span> character<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToLowerInvariant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"àåáâäãåąā\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"èéêëę\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"ìíîïı\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"òóôõöøőð\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"ùúûüŭů\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"u\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"çćčĉ\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"żźž\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"śşšŝ\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"s\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"ñń\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"ýÿ\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"ğĝ\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> <span class=\"token string\">'ř'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> <span class=\"token string\">'ł'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"l\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> <span class=\"token string\">'đ'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> <span class=\"token string\">'ß'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"ss\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> <span class=\"token string\">'Þ'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"th\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> <span class=\"token string\">'ĥ'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"h\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> <span class=\"token string\">'ĵ'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"j\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The difference between my version and the one in the StackOverflow answer is that mine optionally handles non-ASCII characters using the boolean remapToAscii parameter. This parameter remaps special UTF8 characters like <code class=\"language-text\">è</code> to their ASCII equivalent <code class=\"language-text\">e</code>. If there is no equivalent, then those characters are dropped. All modern browsers except Internet Explorer and Edge display the <code class=\"language-text\">è</code> correctly. Older browsers like Internet Explorer percent encode these international characters so they are displayed as <code class=\"language-text\">%C3%A8</code>. What you set this to depends on whether your target users are English speakers and if you care about supporting IE and Edge. I must say that I was hoping Edge would have added support so that <code class=\"language-text\">remapToAscii</code> could be turned off by default but I'm sorely disappointed.</p>\n<p>Using the third parameter you can specify a maximum length for the title with any additional characters being dropped. Finally, the last thing to say about this method is that it has been tuned for speed.</p>\n<h1 id=\"where-can-i-get-it\"><a href=\"#where-can-i-get-it\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Where Can I Get It?</h1>\n<p>This is a great little snippet of code to make your URL's a human readable, while giving your site an SEO boost. It doesn't take much effort to use either. This helper class is available in the <a href=\"https://www.nuget.org/packages/Boxed.AspNetCore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boxed.AspNetCore</a> NuGet package or you can look at the source code in the <a href=\"https://github.com/Dotnet-Boxed/Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed Framework</a> GitHub page.</p>\n"}},{"node":{"title":"The Dotnet Watch Tool","path":"/the-dotnet-watch-tool/","date":"10 September 2016","timeToRead":3,"description":"The dotnet watch tool is a file watcher for dotnet that restarts the application when changes in the source code are detected.","content":"<p>The <code class=\"language-text\">dotnet watch</code> tool is a file watcher for dotnet that restarts the application when changes in the source code are detected. If you are using IIS Express then, it actually does this restart for you already. The <code class=\"language-text\">dotnet watch</code> tool is only really useful if you like to run your app in the console. I personally like to do this over using IIS Express because I can see all my logs flashing by in the console like the movies which is occasionally useful if you get an exception.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1003 489' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-fdd2de6bab764338f478722f9f5c2494'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-fdd2de6bab764338f478722f9f5c2494)' width='1003' height='489' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAfCAIAAADY01yrAAAACXBIWXMAAAsSAAALEgHS3X78AAAEv0lEQVRYw%2b1YW3PTRhReS7bki%2b53aXW3jZMwLaW88COSpySTNNNfwRM4UwqxwcQQHvoj%2bDWdPtFhpjwAudhJiO3ETpwESODIrjOh02mHkglh6k9Hq7NnpdV%2bu3vOkY2erjZ/ffrH6tbOWqMNUmt2ao3Oems3UpqderMDTSC11u5as11vRnaormxt11u7Gzvd1UYbqqBANVK299a3u43u28bem2av/HyBzrd2D6E3UJY3W/2e16MX7bXfvEe/Pf19sVJZr9fqtdp6beXVyxfbrdZOq7m5ufH69WZtdbnR2Nis1zbgjrXV7Waz1Wwuv3yxsV7rtDudvd2V5VdrKyuddhuaV0BptbYbW%2b8jHL8/a7x79/bwYP/4OOr58PDgYL8LCiov/bL06GEfDyIslkulUrm8WK3evXv3wWIVLIDyvXvVarVSebBQKj189Khcvnf/fmVhobS0tARVKCv3K/AwqI8fP4b7f7p9Gwx3fr5z8%2batW8UinB/LwFjs6f%2bI4vz86Rqc88XijRs3njx5sn9wgKzsqKHrFrZAJFEQRTGVohmWFQQhQVGqpimyBHqGYSRJ5Dk2zTAcxxIkCQ8kaRohFCNicZJIJlNkPJFKp0mCQH3EBspZgyRJKKempnZ2dtDYtethNgjD0HadsbHLl/Kjvh84np/L5W3bzYV5w7CCMMiGWd8P87mCjR3P9TF2RkYvO9gBOqIosSwnSzLPCwyTgapp6IZpwGxomqbruqIogiiYpqWpKsfzpmnCjFg2xpaJbcxzHEEQ8U9BMpkEAnNzc9EW8gtXRnP5wPVd23ds7VJOyXqibbKmxrq2gC1GlKgwm1NlRdNT2VByHQnjjGUxhsEaWgZjzjRZw%2bAsC0bPZNJpQRB1TRNFgWVYnudFSeI4LpVKKYoKY02nMzzPwQgiVsAYFrw3mk8CcIByZmbm6OgICQVH8NiUmWRtjhbjJINoGdEKoi1E8YimEEUhmqbjJJlIoEQ8EnhjOhXZwULRiEpEChlH54YTAuDQiJD4OEsKlqzYsmhIum0qWCVZCqVjKBGDjdyTE/yl%2bneIRegrf9YG5pMuTts/l0AsxcKCOtj1HNfBeORSQeD4fx3lf3/5ma%2bAkx%2bzTF3VVM/3Pd/DGMPVhcN3ZUn04OLYhmEQBIEuDD7ygbSkU4k42XNt2OugUAA6Qq%2bMjD2vj100ArOzs1EUCsau6KpsO44syxA9VFUxLQsWQeA5OCDYmYap93BxGPTzwOTkZKPRQNlvvvccO5fLSaIIuwgIZHN5cAaBF4CS1wOE0ZFCIfQDyzJtGxqxY9vYtoMgyg%2be6xom2CGwQ1jHsfMiMD4%2b/uzZMzRy7bquiJBU4PUueLLtQKKBXGsYJviELEmQgILAz2Zz2TAEZ/j2u6uQgIhYrJ9TaIpKJBLxxCDHnEs07ROYmJh4/vw5Gr16PfQcmLrA9y3LgtwJHgwCCqQh3/MkSQIdplaBFVFkRVUgE4uC4Aehpipf0Aemp6e73S6ieSWK7fBBM4jfsQFAh%2bBzYjzdBCB6bV/eieOMeCq9fB34KA8MCQwJDAkMCQwJDAkMCQwJ/F8JRD8p44zwlRLofY0eI0rBBJUkkwyZzHwtQmW46K/FH36sb7U%2bADYWhmus1sRGAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1003\" alt=\"Dotnet Watch Run Console\" data-srcset=\"/assets/static/Dotnet-Watch-Run-Console.82a2fbd.9f55037aecf387092ec5161975f4dc85.png 480w, /assets/static/Dotnet-Watch-Run-Console.7d32108.9f55037aecf387092ec5161975f4dc85.png 1003w\" data-sizes=\"(max-width: 1003px) 100vw, 1003px\" data-src=\"/assets/static/Dotnet-Watch-Run-Console.7d32108.9f55037aecf387092ec5161975f4dc85.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Dotnet-Watch-Run-Console.7d32108.9f55037aecf387092ec5161975f4dc85.png\" width=\"1003\" alt=\"Dotnet Watch Run Console\"></noscript></p>\n<div class=\"custom-block warning\"><p class=\"custom-block-title\">Warning</p><p>In both cases you have to be careful to start the application by clicking <code class=\"language-text\">Debug -&gt; Start Without Debugging</code> or hitting the <code class=\"language-text\">CTRL+F5</code> keyboard shortcut.</p></div>\n<h1 id=\"projectjson\"><a href=\"#projectjson\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>project.json</h1>\n<p>Setting up the <code class=\"language-text\">dotnet watch</code> tool is as easy as installing the <code class=\"language-text\">Microsoft.DotNet.Watcher.Tools</code> NuGet package into the tools section of your <code class=\"language-text\">project.json</code> file like so (You may need to manually restore packages as there is a bug in the tooling which doesn't restore packages if you only change the <code class=\"language-text\">tools</code> section):</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n\n  <span class=\"token property\">\"tools\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Microsoft.DotNet.Watcher.Tools\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0-preview2-final\"</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now using powershell, you can navigate to your project folder and run the <code class=\"language-text\">dotnet watch run</code> command and your set. But using the command line is a bit lame if you are using Visual Studio, we can do one better.</p>\n<h1 id=\"launchsettingsjson\"><a href=\"#launchsettingsjson\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>launchSettings.json</h1>\n<p>The <code class=\"language-text\">launchSettings.json</code> file is used by Visual Studio to launch your application and controls what happens when you hit <code class=\"language-text\">F5</code>. It turns out you can add additional launch settings here to launch the application using the <code class=\"language-text\">dotnet watch</code> tool. You can do so by adding a new launch configuration as I've done at the bottom of this file:</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"iisSettings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"windowsAuthentication\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"anonymousAuthentication\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"iisExpress\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"applicationUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:8080/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"sslPort\"</span><span class=\"token operator\">:</span> <span class=\"token number\">44300</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"profiles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Run the app using IIS Express. Use CTRL+F5 or Debug -> Start Without Debugging to edit code and refresh the browser </span>\n    <span class=\"token comment\">// to see your changes while the app is running.</span>\n    <span class=\"token property\">\"IIS Express\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"commandName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"IISExpress\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"launchBrowser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"launchUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://localhost:44300/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"environmentVariables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"ASPNETCORE_ENVIRONMENT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Development\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Run the app in console mode using 'dotnet run'.</span>\n    <span class=\"token property\">\"dotnet run\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"commandName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Project\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"commandLineArgs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"--server.urls http://*:8080\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"launchBrowser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"launchUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:8080/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"environmentVariables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"ASPNETCORE_ENVIRONMENT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Development\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Use CTRL+F5 or Debug -> Start Without Debugging to use this launch profile. Launches the app using 'dotnet watch', </span>\n    <span class=\"token comment\">// which allows you to edit code and refresh the browser to see your changes while the app is running.</span>\n    <span class=\"token property\">\"dotnet watch\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"executablePath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"commandLineArgs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"watch run --server.urls http://*:8080\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"launchBrowser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"launchUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:8080/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"environmentVariables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"ASPNETCORE_ENVIRONMENT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Development\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that I renamed the second launch profile (which already exists in the default template) to <code class=\"language-text\">dotnet run</code> because that's actually the command it's running and makes more sense.</p>\n<p>The <code class=\"language-text\">dotnet watch</code> launch profile is running <code class=\"language-text\">dotnet watch run</code> but it's also passing in the <code class=\"language-text\">server.urls</code> argument which lets us override the port number. Now we can see the new launch profile in the Visual Studio toolbar like so:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1316 416' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-e31b3345e3316191c5f5d7a6a0ab0bbc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-e31b3345e3316191c5f5d7a6a0ab0bbc)' width='1316' height='416' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAYAAAA9djs/AAAACXBIWXMAAAsSAAALEgHS3X78AAAKeUlEQVRYw81Xe1DU1xXmL5uZGl/Ie0EML41gkzhJjBpjNBjER4BgDIoYta01BqdpmqSJmtF2pu0kk3aSZqaNM00maW3iIwaW8H7sAruwy3Mf7LLLsiC7C%2bwuC6ioiI/z9dzfAmJ8JDr9ozvzzX387j3nnu%2bex92AluYekn%2bmRlNLF6kb20nT3EHalo7x1kaNOjs1tnaSlscNLZ08b%2bX5TmpotZOmyUJNhjPUwtA0WXmdndfY%2bJtN2q9ptpHO5CCzzQNTh5sEzLZJQODGvAc3r7vRb7P2w%2b48R3/%2b4G94IS0TW7N3YtfuXyFnx8/x4uYs/GLPa2g2dMNiHxB7MCHrxyCgqbGbTn5chYZGG1XUNFNlTQspaluops7IMJC6wUL1bKhCpZfm6pkkpejXm6hapeNvHZLxFcomUmlMvLeVVFoTKdV6ltUqkdLe6Z1U2NYhGX2L4W03CJokwv9NGotvsHT5YDszzBhCR/cgYwidPf7x%2bJ57Mt5PgLGbNAa7pEBR10YmVtZo6KFabTu12wchbr6G5y2dHmrSdzNJeulgWjasvFpPmtYuMljcqFK1UYO%2bh/TmXqpSm0hn7uPb76Wyap2EUkUre0Y36U1OUtSZmZQBqLRWKlWK%2bS4yWftYto4q1WZqNgg5Lqqs1VMryxMEWjq9ZLV7IfZJhLFXGC19kxDj%2b0EAuw21GHvYiF5q5lbf3keNDc1U39zJB%2bmgEnU7nVZaSa5id%2bZDtbQ5yGjt53VOajW5yNbtJoezlxwuN50fGSVn3xCP%2b8np6iNXn4cujV5ljNHIxWs8bya77Z/kaD9KZ8xHyW78B/V1fEp1jTVUVsfhI0JNpSCd0U5aJqWu0SKFkd7kgLKhk0rVHWAPgxh3dA3A7hiGvWccjvtDwAm5io6dVtAJeS0kFNTi2Kky/OfbauTnFeDjL77DH44W46Mvy3CyQEUnClQ4Lq8V6%2bm4XAV5qZrkhZUkL1ZyWOhQVKGlgpJqKiqrodKqOg6RNgjU1huh1KjgGqyA21NFtq4i6uopo4FBJRnO2KFqHyJjzzm02pwwdvug6xqCgV1b3zUIs/M8NdgGUdvuQ72xB0Y2WNnYidOFdcgv0SKvRHPfCFi6bi89l7aTir59i4rz36bCvLeotOBdKi98l4ry36HKwneovOBt0iqPkLryPWiVh/HEmgzMjlmLsIdTELIgBaEPp0oISngewQuel/ohC9dxPwVzYtfQ3Phkmha%2bnLZs3k9ukxF9ui5Yqg0wK/UwVLSgl2/5rMUJX9sZGmQvG%2bTEOWjqmQTPY8jcQ8NmB3x8%2b2NdXhz8zR/xgGwFQllfUHzy/SEhGQHPpP%2baUl/aSwadnKztReR2KcjtKCe3s5I8zgry9VdTv6OKLgxr6MpIA42eraNTeafps3%2bfpH8d/4ZxWmq/%2bOokfX7sJLen6LNjJ6T22Mk8OiUvxjfyYvo6r5Ba//IR%2bisqqV9ZR7ZCBXV8J1BFvYoG%2bNQ6GlC34nbgb/6%2bqhVexjDD8tdP8JW8CKfyi%2b8ZJ/N5H5/rRF4hE5CWS2szc6lcZaXaxi52TU42nU5qam2ngqJKKimvoZJSBRWXq6iiqp6KS2uoSlFNarWaqquVVK/RklarIY1GQzW1KlKpVFSjUpOW5/UGA7l6%2b%2bB0ucjpcNCAvACO4UtwXwTa%2b0fR5roAo3ME7PnwjgGeyz8O3lFuC0qFXDid9wHe53A44fF4EZC8%2bQ1av2U/DZ8bgfhdHhuTWoVCicioKMQnJCA2Lg5xcfF%2bxItxPB6KiZMQI7XxEmJi/fOinehHz48h0Q8KCsH7L6RLsj2%2by1yyvJyFPbBxKXO5RzEwTPAMXoNn6GZ4h67fhH7fFVxiEk6/eQCBLFPIZh33BHGukNBwpK7fiIAVG/dRSuY%2bOnf%2bojgbXbt2jURbVVlJs2bNpIiICAoLC7stwhnBISEUGhIs9e%2bwBjKZjGY8OB3vb9iAa4KAwSsw2X0w2rywcl03MBm9vmvwnQcG2BsGJlrhGWd5/RT0MymjLCTvt7/DdJYZKZNB6LgXyGQRYNuwdu1aBCSt3EYrN/6SS9gliYCrV69Kt1RVVYXAwEBEsRewATchMlKGeZGRkEWEY9kji7Bo8WJEhIchSszJIsfXREoQ/ajIKMxmWQefXQ3UN8NXrID1qzzYvpaj87gc9hPfwZlXhj55BXrl5ejNL5NaMR4oqYGv9AY8xUpcrKzHl9tfwcy5gYieN29S190w9fzCJmFbSkoKAlal76d1L%2bXS2XEP%2bD4BE5vZEySIfnAYMxgSjrmhYfgycwlS0jMwPUSGIHariPBwaU1oaKgEsSc6OhozZjyIjZvScf0K32T/CHSGHpjFA8bkkmDhR4ne6IROfwYdHfzQMfXC3N7HJXMMAwNX4B0Yk%2bB2X5LaN948KMkUutjTJvWFs34B0Q8ODpa%2bhY%2bfaeL8goA5c%2bb4CViTyVVgiyDgwl0JmEAYC3kqYR7WJ83H5sdiYM5Jwu%2bz1mLdYwvx7IIoRMfGYS7vS05OxrJly5CWlsb9tdi2bSte3bcfl1m8Z/gqrJz5TPzSFOh0nofO6obBxq88Do1WC7/yuG/gEDF3%2bddYe87Ce06EwHUpFP70wcdYuvRJf46KjUVSUhISuL9q1Sqpv2jRIkl/TAzH/EMP3UTCTQQ88ux2euYuIXA7ApbEReHT1AVo27EY%2bpzFaMtehG83/wwZ69YgOukRKTSOHDmC3NxcZGRkYM%2bePdi371XsfTUXl4UHDI7BxAYKGNlwPT%2blXVwG%2bnxX0cutg5Oiy3sFvQN%2biHkBLyfKfk6UF/mIfz/6BXJf24eDBw9h7969kq7t27fj9ddfx%2b7du3HgwAFp/tChQ0hNTcXcuXNvhORUAmKWvIClz%2b/EyIVRkfzwQyEgkk4Qh0BIeASKMhbClr0ATdsSsTp1PULiExEaHITExESsWbNGSjKbNm1Cdna2dEtp6Zm4zrL7uI6Jm25nWMQN8/teGO0Zvg63lP397ffRP3hVImqEC9X7H37COlZj165dWL58OXvYNuzYsUPSmZOTg6ysLKxevVoi5dFHH5VCYmoOmCQg7vEMeiplF41c%2bHEeMEHAcwujcCI9EdkpT%2bPz9Qvw9tYNCE9IhCzMH4dBQUESJmJx%2bvSf4sXMLZJs39nrMHf6uAKchc1x3h8KPHYPA8Ociga5Ig9duD1EhRCF%2bo233sMDD/wEISEh0jmFy4tcI/ritgUmvoX5K9HkJd5EQOzj6ewBuzBOAH6IAH8SDMfTibFYwbEdlPQ45keEYsPyJXh46QqEsVLZ97KvUBjGxCQmJvF/%2bN3I2roDW7JyJvHSy9sn%2b1nbXsHLjKw74GXem52zG088uUwqaUK20COMlDz0DhVgIgHe4gF3IkChUEg3KFgVG6ZiHiNi3nxEiYeOTCiNQiiXv%2bj5829ZO7mHy5U4RGDgHL6dwDsjMPDu3xlCRjiXXSFzqvyp47tB2CRsE7nhjgSUlZVh2rRpElOzZs26FTNnMmZMjmczZoq5262dAiHvf4HZs2f/oK67nUHYtnLlylsJ4Jeg1BoMBimxiIy6c%2bfO24MT0B2//R9D2CRsO3z4MP4LI7P6DSSr1JUAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1316\" alt=\"Dotnet Watch in the Visual Studio Toolbar\" data-srcset=\"/assets/static/Dotnet-Watch.82a2fbd.8c73e465ccd685aee1684f6a22cf2cc1.png 480w, /assets/static/Dotnet-Watch.4298124.8c73e465ccd685aee1684f6a22cf2cc1.png 1316w\" data-sizes=\"(max-width: 1316px) 100vw, 1316px\" data-src=\"/assets/static/Dotnet-Watch.4298124.8c73e465ccd685aee1684f6a22cf2cc1.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Dotnet-Watch.4298124.8c73e465ccd685aee1684f6a22cf2cc1.png\" width=\"1316\" alt=\"Dotnet Watch in the Visual Studio Toolbar\"></noscript></p>\n<h1 id=\"net-boxed\"><a href=\"#net-boxed\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>.NET Boxed</h1>\n<p>If you read my blog posts, you'll be seeing a trend by now. I built the above feature into the <a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed</a> project templates by default so you can create a new project with this feature built-in, right out of the box. Happy coding!</p>\n"}},{"node":{"title":"NGINX for ASP.NET Core In-Depth","path":"/nginx-asp-net-core-depth/","date":"21 August 2016","timeToRead":12,"description":"NGINX is a popular open source web server. It can act as a reverse proxy server for ASP.NET Core web apps. How to configure NGINX for ASP.NET Core.","content":"<blockquote>\n<p><strong>There are only two things a web server needs to be.....fast.....really fast.....and secure.</strong>\nMuhammad Rehan Saeed</p>\n</blockquote>\n<h1 id=\"about-nginx\"><a href=\"#about-nginx\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>About NGINX</h1>\n<p><a href=\"http://nginx.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NGINX</a> (Pronounced engine-x) is a popular open source web server. It can act as a reverse proxy server for TCP, UDP, HTTP, HTTPS, SMTP, POP3, and IMAP protocols, as well as a load balancer and a HTTP cache.</p>\n<p>NGINX in fact <a href=\"https://w3techs.com/blog/entry/nginx_just_became_the_most_used_web_server_among_the_top_1000_websites\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">overtook Apache</a> as the most popular web server among the top 1000 websites. After playing with it for a while now, I have to say that I can see why.</p>\n<p>There are two flavours of NGINX. The first is the open source version which is free, the other is called <a href=\"https://www.nginx.com/products/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NGINX Plus</a> and provides some more advanced features (all of which can be replicated with open source plugins but with a lot effort) and proper support but at the cost of a few thousand dollars.</p>\n<p>There is a Windows version of NGINX but I wouldn't recommend using it for real as it doesn't perform as well as the Linux version and it's not as well tested. You can however use it to try out NGINX.</p>\n<p>Alternatively, if you are running on Windows 10 Anniversary Update, you can install Bash for Windows and install the linux version. However the process is <a href=\"https://www.svennd.be/running-nginx-on-bash-for-windows-10/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">not that straightforward</a>. Again, the caveat is that it can only be used for testing and not in production.</p>\n<h1 id=\"iis-vs-nginx\"><a href=\"#iis-vs-nginx\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>IIS vs NGINX</h1>\n<p>NGINX has no UI, it's all command line driven but don't let that put you off, the <a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/commandline/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CLI interface</a> only has three commands you actually need:</p>\n<ol>\n<li>Check my NGINX config (<code class=\"language-text\">nginx -t</code>).</li>\n<li>Load my NGINX config (<code class=\"language-text\">nginx -s reload</code>).</li>\n<li>By default the <code class=\"language-text\">nginx.conf</code> file is located in the NGINX installation folder. You can use that file or your own using (<code class=\"language-text\">nginx -c [nginx.conf File Path]</code>).</li>\n</ol>\n<p>IIS on the other hand does have a UI and what a travesty it is. It hasn't really changed for several years and really needs a usability study to hack it to pieces and start again.</p>\n<p>The command line experience for IIS is another matter. It has very powerful IIS extensions you can install and the latest version of IIS even has an API that you can use to make simple HTTP calls to to update it.</p>\n<p>Configuration is where NGINX shines. It has a single super simple nginx.conf file which is pretty well documented. IIS is also actually pretty simple to configure if you only rely on the web.config file.</p>\n<h1 id=\"setting-up-nginx\"><a href=\"#setting-up-nginx\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Setting up NGINX</h1>\n<p>The <a href=\"https://docs.asp.net/en/latest/publishing/linuxproduction.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASP.NET Core Documentation</a> site has some very good documentation on how to get started on Ubuntu. Unfortunately, it's not as simple as just installing NGINX using <code class=\"language-text\">apt-get install nginx</code>, there are a few moving parts to the process and a lot more moving parts if you want to install any additional modules.</p>\n<p>If you're on Windows, as I mentioned earlier you have the options of installing NGINX using Bash for Windows 10 Anniversary Update but I couldn't get this working. Alternatively you can download the NGINX executable for Windows. If you do this, beware that NGINX tries to start on port 80 and there are a number of things that use that port already on Windows:</p>\n<ol>\n<li>Skype uses port 80 (Why?), turn it off in the advanced settings.</li>\n<li>Turn off IIS.</li>\n<li>Stop the SQL Server Reporting Services service.</li>\n</ol>\n<p>Once you have NGINX setup, you need to run your ASP.NET Core app using the Kestrel web server. Why does ASP.NET Core use two web servers? Well Kestrel is not security hardened enough to be exposed on the internet and it does not have all of the features that a full blown web server like IIS or NGINX has. NGINX takes the role of a <a href=\"https://en.wikipedia.org/wiki/Reverse_proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reverse proxy</a> and simply forwards requests to the Kestrel web server. One day this may change. Reliably keeping your ASP.NET Core app running in Linux is also described in the <a href=\"https://docs.asp.net/en/latest/publishing/linuxproduction.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASP.NET Core Documentation</a>.</p>\n<h1 id=\"aiming-for-the-perfect-config-file\"><a href=\"#aiming-for-the-perfect-config-file\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Aiming For The Perfect Config File</h1>\n<p>You've got NGINX running, all you need now is a nginx.conf file to forward requests from the internet to your ASP.NET Core app running using the Kestrel web server.</p>\n<p>I've taken the time to combine the recommendations from the <a href=\"https://github.com/h5bp/server-configs-nginx/blob/master/nginx.conf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTML5 Boilerplate</a> project, the <a href=\"https://docs.asp.net/en/latest/publishing/linuxproduction.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASP.NET Core NGINX Documentation</a>, the <a href=\"http://nginx.org/en/docs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NGINX Docs</a> and my own experience to build the nginx.config (and mime.types file) file below specifically for the best performance and security and to target .NET Core apps.</p>\n<p>Not only that but I've gone to extreme lengths to find out what every setting actually does and have written short comments describing each and every setting. The config file is self describing, from this point forward it needs no explanation.</p>\n<div class=\"line-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Configure the Nginx web server to run your ASP.NET Core site efficiently.\n# See https://docs.asp.net/en/latest/publishing/linuxproduction.html\n# See http://nginx.org/en/docs/ and https://www.nginx.com/resources/wiki/\n\n# Set another default user than root for security reasons.\n# user\t\t\t\t\t\txxx;\n\n# The maximum number of connections for Nginx is calculated by:\n# max_clients = worker_processes * worker_c\nworker_processes\t\t\t1;\n\n# Maximum file descriptors that can be opened per process\n# This should be &gt; worker_connections\nworker_rlimit_nofile\t\t8192;\n\n# Log errors to the following location. Feel free to change these.\nerror_log\t\t\t\t\tlogs/error.log;\n# Log NXingx process errors to the following location. Feel free to change these.\npid\t\t\t\t\t\t\tlogs/nginx.pid;\n\nevents {\n\n    # When you need &gt; 8000 * cpu_cores connections, you start optimizing\n    # your OS, and this is probably the point at where you hire people\n    # who are smarter than you, this is *a lot* of requests.\n    worker_connections\t\t8000;\n\n    # This sets up some smart queueing for accept(2)&#39;ing requests\n    # Set it to &quot;on&quot; if you have &gt; worker_processes\n    accept_mutex\t\t\toff;\n\n    # These settings are OS specific, by defualt Nginx uses select(2),\n    # however, for a large number of requests epoll(2) and kqueue(2)\n    # are generally faster than the default (select(2))\n    # use epoll; # enable for Linux 2.6+\n    # use kqueue; # enable for *BSD (FreeBSD, OS X, ..)\n\n}\n\nhttp {\n\n    # Include MIME type to file extension mappings list.\n    include                 mime.types;\n    # The default fallback MIME type.\n    default_type            application/octet-stream;\n\n    # Format for our log files.\n    log_format              main &#39;$remote_addr - $remote_user [$time_local]  $status &#39;\n                                 &#39;&quot;$request&quot; $body_bytes_sent &quot;$http_referer&quot; &#39;\n                                 &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n\n    # Log requests to the following location. Feel free to change this.\n    access_log              logs/access.log  main;\n\n    # The number of seconds to keep a connection open.\n    keepalive_timeout       29;\n    # Defines a timeout for reading client request body.\n    client_body_timeout     10;\n    # Defines a timeout for reading client request header.\n    client_header_timeout   10;\n    # Sets a timeout for transmitting a response to the client.\n    send_timeout            10;\n    # Limit requests from an IP address to five requests per second.\n    # See http://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req_zone\n    limit_req_zone          $binary_remote_addr zone=one:10m rate=5r/s;\n\n    # Disables emitting Nginx version in error messages and in the &#39;Server&#39; HTTP response header.\n    server_tokens           off;\n\n    # To serve static files using Nginx efficiently.\n    sendfile                on;\n    tcp_nopush              on;\n    tcp_nodelay             off;\n\n    # Enable GZIP compression.\n    gzip                    on;\n    # Enable GZIP maximum compression level. Ranges from 1 to 9.\n    gzip_comp_level         9;\n    # Enable GZIP over HTTP 1.0 (The default is HTTP 1.1).\n    gzip_http_version       1.0;\n    # Disable GZIP compression for IE 1 to 6.\n    gzip_disable            &quot;MSIE [1-6]\\.&quot;\n    # Enable GZIP compression for the following MIME types (text/html is included by default).\n    gzip_types              # Plain Text\n                            text/plain\n                            text/css\n                            text/mathml\n                            application/rtf\n                            # JSON\n                            application/javascript\n                            application/json\n                            application/manifest+json\n                            application/x-web-app-manifest+json\n                            text/cache-manifest\n                            # XML\n                            application/atom+xml\n                            application/rss+xml\n                            application/xslt+xml\n                            application/xml\n                            # Fonts\n                            font/opentype\n                            font/otf\n                            font/truetype\n                            application/font-woff\n                            application/vnd.ms-fontobject\n                            application/x-font-ttf\n                            # Images\n                            image/svg+xml\n                            image/x-icon;\n    # Enables inserting the &#39;Vary: Accept-Encoding&#39; response header.\n    gzip_vary               on;\n\n    # Sets configuration for a virtual server. You can have multiple virtual servers.\n    # See http://nginx.org/en/docs/http/ngx_http_core_module.html#server\n    server {\n\n        # Listen for requests on specified port including support for HTTP 2.0.\n        # See http://nginx.org/en/docs/http/ngx_http_core_module.html#listen\n        listen                      80 http2 default;\n        # Or, if using HTTPS, use this:\n        # listen                      443 http2 ssl default;\n        # Configure SSL/TLS\n        # See http://nginx.org/en/docs/http/configuring_https_servers.html\n        ssl_certificate             /etc/ssl/certs/testCert.crt;\n        ssl_certificate_key         /etc/ssl/certs/testCert.key;\n        ssl_protocols               TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers   on;\n        ssl_ciphers                 &quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&quot;;\n        ssl_ecdh_curve              secp384r1;\n        ssl_session_cache           shared:SSL:10m;\n        ssl_session_tickets         off;\n        # Ensure your cert is capable before turning on SSL Stapling.\n        ssl_stapling                on;\n        ssl_stapling_verify         on;\n\n        # The name of the virtual server where you can specify one or more domains that you own.\n        server_name\t\t\t\t\tlocalhost;\n        # server_name    example.com www.example.com *.example.com www.example.*;\n\n        # Match incoming requests with the following path and forward them to the specified location.\n        # See http://nginx.org/en/docs/http/ngx_http_core_module.html#location\n        location / {\n\n            proxy_pass              http://localhost:1025;\n\n            # The default minimum configuration required for ASP.NET Core\n            # See https://docs.asp.net/en/latest/publishing/linuxproduction.html?highlight=nginx#configure-a-reverse-proxy-server\n            proxy_cache_bypass      $http_upgrade;\n            # Turn off changing the URL&#39;s in headers like the &#39;Location&#39; HTTP header.\n            proxy_redirect          off;\n            # Forwards the Host HTTP header.\n            proxy_set_header        Host $host;\n            # The Kestrel web server we are forwarding requests to only speaks HTTP 1.1.\n            proxy_http_version      1.1;\n            proxy_set_header        Upgrade $http_upgrade;\n            # Adds the &#39;Connection: keep-alive&#39; HTTP header.\n            proxy_set_header        Connection keep-alive;\n\n            # Sets the maximum allowed size of the client request body.\n            client_max_body_size    10m;\n            # Sets buffer size for reading client request body.\n            client_body_buffer_size 128k;\n            # Defines a timeout for establishing a connection with a proxied server.\n            proxy_connect_timeout   90;\n            # Sets a timeout for transmitting a request to the proxied server.\n            proxy_send_timeout      90;\n            # Defines a timeout for reading a response from the proxied server.\n            proxy_read_timeout      90;\n            # Sets the number and size of the buffers used for reading a response from the proxied server.\n            proxy_buffers           32 4k;\n\n        }\n\n    }\n\n}\n\ntypes {\n\n    # An expanded list of MIME type to file extension mappings for Nginx.\n\n    # Data Interchange\n    application/atom+xml                  atom;\n    application/json                      json map topojson;\n    application/ld+json                   jsonld;\n    application/rss+xml                   rss;\n    application/vnd.geo+json              geojson;\n    application/xml                       rdf xml;\n\n    # JavaScript\n    application/javascript                js;\n\n    # Manifest files\n    application/manifest+json             webmanifest;\n    application/x-web-app-manifest+json   webapp;\n    text/cache-manifest                   appcache;\n\n    # Media files\n    audio/midi                            mid midi kar;\n    audio/mp4                             aac f4a f4b m4a;\n    audio/mpeg                            mp3;\n    audio/ogg                             oga ogg opus;\n    audio/x-realaudio                     ra;\n    audio/x-wav                           wav;\n    image/x-icon                          cur ico;\n    image/bmp                             bmp;\n    image/gif                             gif;\n    image/jpeg                            jpeg jpg;\n    image/png                             png;\n    image/svg+xml                         svg svgz;\n    image/tiff                            tif tiff;\n    image/vnd.wap.wbmp                    wbmp;\n    image/webp                            webp;\n    image/x-jng                           jng;\n    video/3gpp                            3gp 3gpp;\n    video/mp4                             f4p f4v m4v mp4;\n    video/mpeg                            mpeg mpg;\n    video/ogg                             ogv;\n    video/quicktime                       mov;\n    video/webm                            webm;\n    video/x-flv                           flv;\n    video/x-mng                           mng;\n    video/x-ms-asf                        asf asx;\n    video/x-ms-wmv                        wmv;\n    video/x-msvideo                       avi;\n\n    # Microsoft Office\n    application/msword                                                         doc;\n    application/vnd.ms-excel                                                   xls;\n    application/vnd.ms-powerpoint                                              ppt;\n    application/vnd.openxmlformats-officedocument.wordprocessingml.document    docx;\n    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet          xlsx;\n    application/vnd.openxmlformats-officedocument.presentationml.presentation  pptx;\n\n    # Web Fonts\n    application/font-woff                 woff;\n    application/font-woff2                woff2;\n    application/vnd.ms-fontobject         eot;\n    application/x-font-ttf                ttc ttf;\n    font/opentype                         otf;\n\n    # Other\n    application/java-archive              ear jar war;\n    application/mac-binhex40              hqx;\n    application/octet-stream              bin deb dll dmg exe img iso msi msm msp safariextz;\n    application/pdf                       pdf;\n    application/postscript                ai eps ps;\n    application/rtf                       rtf;\n    application/vnd.google-earth.kml+xml  kml;\n    application/vnd.google-earth.kmz      kmz;\n    application/vnd.wap.wmlc              wmlc;\n    application/x-7z-compressed           7z;\n    application/x-bb-appworld             bbaw;\n    application/x-bittorrent              torrent;\n    application/x-chrome-extension        crx;\n    application/x-cocoa                   cco;\n    application/x-java-archive-diff       jardiff;\n    application/x-java-jnlp-file          jnlp;\n    application/x-makeself                run;\n    application/x-opera-extension         oex;\n    application/x-perl                    pl pm;\n    application/x-pilot                   pdb prc;\n    application/x-rar-compressed          rar;\n    application/x-redhat-package-manager  rpm;\n    application/x-sea                     sea;\n    application/x-shockwave-flash         swf;\n    application/x-stuffit                 sit;\n    application/x-tcl                     tcl tk;\n    application/x-x509-ca-cert            crt der pem;\n    application/x-xpinstall               xpi;\n    application/xhtml+xml                 xhtml;\n    application/xslt+xml                  xsl;\n    application/zip                       zip;\n    text/css                              css;\n    text/html                             htm html shtml;\n    text/mathml                           mml;\n    text/plain                            txt;\n    text/vcard                            vcard vcf;\n    text/vnd.rim.location.xloc            xloc;\n    text/vnd.sun.j2me.app-descriptor      jad;\n    text/vnd.wap.wml                      wml;\n    text/vtt                              vtt;\n    text/x-component                      htc;\n\n}</code></pre></div>\n<h1 id=\"nginx-modules\"><a href=\"#nginx-modules\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NGINX Modules</h1>\n<p>Like IIS, NGINX has modules that you can add to it, to provide extra features. There are a number of them out there. I've listed two that I care about and you should too.</p>\n<p>Installing modules is best done by downloading the NGINX source, as well as the modules you need and then compiling the application. There is a feature called <a href=\"https://www.nginx.com/blog/dynamic-modules-nginx-1-9-11/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dynamic modules</a> which lets you dynamically load additional separate modules after installing NGINX but the link suggests third party modules may not be supported so I didn't try it out.</p>\n<h2 id=\"http-20\"><a href=\"#http-20\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HTTP 2.0</h2>\n<p>The <a href=\"http://nginx.org/en/docs/http/ngx_http_v2_module.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ngx_http_v2_module</a> module lets you use <a href=\"https://en.wikipedia.org/wiki/HTTP/2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTTP 2.0</a>. HTTP 2.0 gives your site a very rough ~3-5% performance boost and that's before using any of it's more advanced features which not many people are using yet.</p>\n<h2 id=\"brotli-compression\"><a href=\"#brotli-compression\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Brotli Compression</h2>\n<p>The <a href=\"http://ngx_brotli\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ngx_brotli</a> module lets NGINX use the <a href=\"https://en.wikipedia.org/wiki/Brotli\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Brotli</a> compression algorithm. If you haven't heard about Brotli, you should take note. Brotli is a compression algorithm built by Google and is perhaps set to take over from GZIP as the compression algorithm of the web. It's already <a href=\"http://caniuse.com/#search=brotli\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fully supported</a> on Firefox, Chrome and Opera with only Edge lagging behind.</p>\n<p>Depending on how much extra CPU power you are wanting to use (it can max out your CPU at the highest compression levels, which could DoS your site if someone makes too many requests, so be careful what compression level you choose), Brotli can compress files and save you around 10-20% bandwidth over what GZIP can do! Those are some significant savings.</p>\n<h1 id=\"net-boxed\"><a href=\"#net-boxed\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>.NET Boxed</h1>\n<p>I've updated the <a href=\"https://github.com/Dotnet-Boxed/Templates/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed</a> project template, so you can now choose the web server (IIS or NGINX) you want to use. If you choose to use NGINX, you can have it pre-configured just for you, right out of the box.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>The main reason, I've been taking a serious look at NGINX is hard cash. Running Linux servers in the cloud can costs around half the price of a Windows server. Also, you can nab yourself some pretty big performance wins by using the modules I've listed.</p>\n<p>There are some interesting overlaps between ASP.NET Core and NGINX. Both can be used to serve static files, HTTP headers, GZIP files etc. I think ASP.NET Core is slowly going to take on more of the role that traditionally was the preserve of the web server.</p>\n<p>The cool thing is that because ASP.NET Core is just C#, we'll have a lot of power to configure things using code. NGINX lets you do more advanced configuration using the Lua language and soon even in JavaScript but putting that logic in the app where it belongs and where you can do powerful things makes sense to me.</p>\n"}},{"node":{"title":"ASP.NET Core Fluent Interface Extensions","path":"/asp-net-core-fluent-interface-extensions/","date":"26 June 2016","timeToRead":3,"description":"Using the fluent interface style in with ASP.NET Core Fluent Interface Extension methods. Building on top of the work done by Khalid Abuhakmeh.","content":"<p>Last week <a href=\"http://khalidabuhakmeh.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Khalid Abuhakmeh</a> wrote a very interesting blog post called <a href=\"http://www.khalidabuhakmeh.com/middlewarebuilder-for-asp-net-core-1-0-rc2#disqus_thread\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Middleware Builder for ASP.NET Core</a> which I highly recommend you read. In it, he attempts to write some extension methods to help with writing the Configure method in your ASP.NET Core Startup class with a <a href=\"https://en.wikipedia.org/wiki/Fluent_interface\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fluent interface</a>. I've taken his blog post to heart and gone on a mission to 'fluent all the things' in ASP.NET Core.</p>\n<h1 id=\"iapplicationbuilder-and-iloggerfactory\"><a href=\"#iapplicationbuilder-and-iloggerfactory\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>IApplicationBuilder and ILoggerFactory</h1>\n<p>This is an example of what your current Configure method might look like in a typical ASP.NET Core <code class=\"language-text\">Startup</code> class:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IApplicationBuilder</span> application<span class=\"token punctuation\">,</span> \n    <span class=\"token class-name\">IHostingEnvironment</span> environment<span class=\"token punctuation\">,</span> \n    <span class=\"token class-name\">ILoggerFactory</span> loggerFactory<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">.</span><span class=\"token function\">IsDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Do stuff on your local machine.</span>\n        loggerFactory\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddConsole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        application<span class=\"token punctuation\">.</span><span class=\"token function\">UseDeveloperExceptionPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Do stuff on when running in your production environment.</span>\n        loggerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">AddSerilog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        application<span class=\"token punctuation\">.</span><span class=\"token function\">UseStatusCodePagesWithReExecute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/error/{0}/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">.</span><span class=\"token function\">IsStaging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Do stuff in the staging environment.</span>\n        application<span class=\"token punctuation\">.</span><span class=\"token function\">UseStagingSpecificMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    application\n        <span class=\"token punctuation\">.</span><span class=\"token function\">UseStaticFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">UseMvc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And this is the same code using the shorter, and prettier fluent interface style:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IApplicationBuilder</span> application<span class=\"token punctuation\">,</span> \n    <span class=\"token class-name\">IHostingEnvironment</span> environment<span class=\"token punctuation\">,</span> \n    <span class=\"token class-name\">ILoggerFactory</span> loggerFactory<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    loggerfactory\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddIfElse</span><span class=\"token punctuation\">(</span>\n            hostingEnvironment<span class=\"token punctuation\">.</span><span class=\"token function\">IsDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">AddConsole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">AddSerilog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    application\n        <span class=\"token punctuation\">.</span><span class=\"token function\">UseIfElse</span><span class=\"token punctuation\">(</span>\n            environment<span class=\"token punctuation\">.</span><span class=\"token function\">IsDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">UseDeveloperExceptionPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">UseStatusCodePagesWithReExecute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/error/{0}/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">UseIf</span><span class=\"token punctuation\">(</span>\n            environment<span class=\"token punctuation\">.</span><span class=\"token function\">IsStaging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">UseStagingSpecificMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">UseStaticFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">UseMvc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the above code, you can see that I've added <code class=\"language-text\">UseIf</code> and <code class=\"language-text\">UseIfElse</code> extension methods to the <code class=\"language-text\">IApplicationBuilder</code>  which lets us use the fluent interface. What you'll also notice is that <code class=\"language-text\">ILoggerFactory</code> also has <code class=\"language-text\">AddIf</code> and <code class=\"language-text\">AddIfElse</code> extension methods.</p>\n<h1 id=\"iconfigurationbuilder\"><a href=\"#iconfigurationbuilder\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>IConfigurationBuilder</h1>\n<p>I didn't just stop there, I added similar <code class=\"language-text\">AddIf</code> and <code class=\"language-text\">AddIfElse</code> extension methods for <code class=\"language-text\">IConfigurationBuilder</code>:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token function\">Startup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IHostingEnvironment</span> hostingEnvironment<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hostingEnvironment <span class=\"token operator\">=</span> hostingEnvironment<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> configurationBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConfigurationBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">SetBasePath</span><span class=\"token punctuation\">(</span>hostingEnvironment<span class=\"token punctuation\">.</span>ContentRootPath<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddJsonFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.json\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddJsonFile</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"config.{hostingEnvironment.EnvironmentName}.json\"</span><span class=\"token punctuation\">,</span> optional<span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hostingEnvironment<span class=\"token punctuation\">.</span><span class=\"token function\">IsDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            configurationBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AddUserSecrets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configuration <span class=\"token operator\">=</span> configurationBuilder\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddEnvironmentVariables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddApplicationInsightsSettings</span><span class=\"token punctuation\">(</span>developerMode<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>hostingEnvironment<span class=\"token punctuation\">.</span><span class=\"token function\">IsProduction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token function\">Startup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IHostingEnvironment</span> hostingEnvironment<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hostingEnvironment <span class=\"token operator\">=</span> hostingEnvironment<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configuration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConfigurationBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">SetBasePath</span><span class=\"token punctuation\">(</span>hostingEnvironment<span class=\"token punctuation\">.</span>ContentRootPath<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddJsonFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.json\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddJsonFile</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"config.{hostingEnvironment.EnvironmentName}.json\"</span><span class=\"token punctuation\">,</span> optional<span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddIf</span><span class=\"token punctuation\">(</span>\n            hostingEnvironment<span class=\"token punctuation\">.</span><span class=\"token function\">IsDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">AddUserSecrets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddEnvironmentVariables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddApplicationInsightsSettings</span><span class=\"token punctuation\">(</span>developerMode<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>hostingEnvironment<span class=\"token punctuation\">.</span><span class=\"token function\">IsProduction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"iservicecollection\"><a href=\"#iservicecollection\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>IServiceCollection</h1>\n<p>As if that wasn't enough I also did the same with <code class=\"language-text\">IServiceCollection</code> with the same <code class=\"language-text\">AddIf</code> and <code class=\"language-text\">AddIfElse</code> extension methods. In my experience, these would be used less often but I've added them for completeness.</p>\n<h1 id=\"fluent-me-up\"><a href=\"#fluent-me-up\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Fluent me up!</h1>\n<p>You can get these extension methods and much more by installing the <a href=\"https://www.nuget.org/packages/Boxed.AspNetCore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boxed.AspNetCore</a> NuGet package or create a project using the <a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed</a> project templates. Finally, if you are so inclined, you can also take a look at the code for these extension methods in the <a href=\"https://github.com/Dotnet-Boxed/Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed Framework</a> project.</p>\n"}},{"node":{"title":"Social TagHelpers for ASP.NET Core","path":"/social-taghelpers-for-asp-net-core/","date":"19 March 2016","timeToRead":5,"description":"Enhance the experience of sharing a page from your site through the use of social media meta tags implemented with ASP.NET Core TagHelpers.","content":"<p>Social media websites like Facebook, Twitter, Google+, Pintrest etc. provide ways to enhance the experience of sharing a page from your site through the use of meta tags. These provide metadata about what is on your page in a standardized format that these sites can use to better display your content. Here are two quick examples of the enhanced content that Twitter and Facebook display when you add these meta tags to your page:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 606 294' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-8732ab891e92d030f8a2221c657170cd'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-8732ab891e92d030f8a2221c657170cd)' width='606' height='294' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAfCAIAAADY01yrAAAACXBIWXMAAAsSAAALEgHS3X78AAAJE0lEQVRYw80YaY8cV3H/i0EK%2bRChfEECKV%2bQSFASgwwSCggRIcB8CChxghDEODZJsB1ir9feGNuJ7fgKcnytj/Wu13vOuXOfPff2HD3Tx/Q13dP3MUN19669OD4CUrL7XFNb/fq913VXPY9cmUH2f%2bIbOxcaPRP88HTww1PBQ2dCY2dDBz8Njn4aOuDisXPhzQaHz4cPnA6evZ4e2fexb9trF/74j8mTV5LjZx3u9xxdOPF5fPx8%2bP0TS59cih84FfjNzqu/2zWxqWD7OxOv/uXKrsOzI%2bMXln%2b/%2b/ob%2b27vPjL33tH5PR/N/3X07q4jc%2b8eXdh5ePa9Y4u7Ds%2b9vnfy9b23Ad7w8D6HWMUbBDv23X7t7zf3Hl8a4QWF6Sl0T6c4hWRVgpbaBI93%2bxjR61Ai4DYlkIxEMn2KlQC6nEx0RaLbw535/gYCQYs0L48Mh8OVGtooxrtdmqW7iixzHFOtlHC806ijrVYTa8HflUajXimXq9VKoYB08E6H6PIcNxgMhhs9HAHQehMtJlG0ASwyLNdsNu/OTPn8/jt3pgEHg/7p6dvBUOjmrVszd%2b9MTFwLR%2bNVtEUQxGYRwLIs0xrYg6E9HBqmzXI9Xug7uCdyPYHjhZ7QByyIEhBiX%2bL4Hk0z8ErTzY0F0N%2bIYVoQBrKiSrIqK5qqGpphqZqhaIaqm7phwTqPdvDavObMO8s2CjTd4EUFmB8xLRu022rVq5UKQRJtcPlGs1ar1mq1OoqSJGnb9nBTDlnRQb8jhmFJijawbUM3AHSYNBxsmhaYQ5LlzeDojxMAfn1Fg2fg0%2bN0sA5g2IPBJgTgrS9rjgCWZbuUFxbGOrj3aDqur%2bqqprvYWHuEeFidVNa9Uh1CU91XLjgzGkzCUfAItKb/7/FqPEADw31Jc2LAsm2wBIjkeBE4j6YBBr93np0xcOknetHqAmfxA2Zc2wsnrS51joasZ3tfWPsQzFmrYFu2aQDhvLFM28mS5ho37l7XDCADBLBjAcMwH8mX%2b3l0pRqPJxIJ%2bCUhsvP5HJAQ5ZlMbnZmJhqNFkulwJIvlc33%2b301k1XLZQ1FAdRqVcc74nJUSqWtfp%2b%2bfLX72b9VFPWOfrKbP3YNqH9VAH1NgHq9vjC/COnonto8olws3J2dCwR8Pl%2bgXColE4lAIFhAkHgiCdxHlkN5pBgNh25MTjUxTMjnuVpNxDCxhfVbTYnAiRu32ufO64LILy7hly7zecSCk01zYBjDdSYCCU2eB3XasqysrBgMO7BMg6Z1igKwZPkBke4LAF4Fz0Sn/cOtP/3BK9tf3PbzRqPhFThvPd/r4zgB9Qu6DJpmBVGkSLKNtaH76PdFge9Bb4Fh7VaziaLoSqtVazQwglhpNFs4Xm%2b2yJ4ARAtry6ZJiiLU8C7HG80mNzWlFgpqNqtks3ImI/r8%2bMFRvdGUYnFi7HD31Bm9VKZOn2HOnqOOHRf9AYf/dTl9nQCaIwD0EU9t%2beZL339h6/Mvnjl9ejg0nbzkSkBRXSi94B6CIPR6PZZlefjjluW%2b%2bwOVwTNQPEjZEyTIvpIkukNRZN5drigKiMqznORskQBgBvZSFAVbRLEPi7v1JkuS0ALAPEvgFNqAVN7B2qLgfBuWcSC5a7eHWADDsC3f2PL0009977nn/vDCd5f2/Hr26gXPYJ0O7ltcymZzsUgkEAiFQ8vLy5FcPu/3BZA8kkqmioVSNBorVyp%2bny8UjlWrVd/i4t2ZuWgsUSgU0plcrVyKx1NQHmEnkkOKxVI4HIGN8UR6ObwcCob8i37wxXAkHo3EQ76AH5owfzAcjjEsj9aqyUQa/HZ%2bYREOBMk9X1oXA7oTAzzf%2b8m2bb985WdbX37pR89%2b68ffefbkieOerO0WFgyEksk0itYz6VwqDZ9OFYrlFbReLpfSQBeKkUg0m8kB6xDf1Uo1Go3nsgiIF4vG4vFksYCkUpl6o5lKJArFAtC5PLwsNOr1bCYL%2baCE1mMgaD4fTWZqKJpIZ5ptolgpl4rlVCZTadT9kVit3kyk08VyJZHLk10aGDNNay2IXVf54O2dLz/z7V/86tU/vfnWgdExrIN7AqRSOQjfZDwBaptf8LXb2NJSIJfNxWOx2bmlUqkcj8UnJ6dKpVIuk0un0nngDikszC%2bAFpOpTDAY8iwWDofzeSSZSEWWY/lcDoRMQlprtqFA0LOzXCzKJRJMLM5GY1Qy2Zm40f78EjT3jZMnm/86jl28iF%2b9tnLko9bYUezsOXp6BvoGSK5radQVILXke/e328OxuOW0FfrAHTAPztdxLgEdqkvhBAleCG7KMkyXIjs4Cb5JMywENM/znXYHAgYGx3GQcCGyWY6DBEAQJMMyJEmwLMcyLABFwj/K3SVAgtdx3JakgSxDCgI8VFWI797i4kA31FJJzubUAqLX61IkqiCIUigYrTYIYNn/XQdkmuYRxP5CAvbKjKZp4GYQeVBZ3H7JGAzuyeiG%2b/1dX0f7dD8GoJ/zPqk2GtzcnMOxYXiV0uMJ8qngphRwVlAzpBEEQbBOR1UU0CJJEAzDOnmDpSFdETguScpqVf5S4xE16x4D67Az48H6IL5nASgWOt394nFe9gSrwqVGVmSv1zChEg0GX4%2byn2QB04IKwc/Ni%2bFlW1b46TtQYrjpaWZiQscJWEp3uytwHa5W4PIJaTEFaSiVKpaqX7Yj%2bGoGpCBgfgR0qTrNv80u%2bcmJ65rQ7yVSfCRCTVwnLl9W%2bR64F7i7066CpZyqp3tdqtdLfUUAX3oomNZ9gPbWEcCzhcMauNBgaNgD4NhegwfPMsxHHf1/grEKoA7dPRy4AvzQ/hdCyuXHXhPGXr3UP9j6reaTNbwRo46x2RKerxIAhRqZrxCZUofsCgbc2A3dMYBpwrUR3GdkozzY03Gr1YJaQZIUlBkcx%2bGezvASOMbu8dnd43Nvj868tf/2jv2T74zPvrlv8uOLIbxdzyGFYrEIhRJKIQTBBgvgljwe8ltPcBK160WOh%2bw8NP23QzP/PLG48%2bDUjr039x5f%2bPMHk8c%2bCxTzqRs3b12/dvXatYmAP7CRAjx%2bUIyItuh6m2m0mRbOAbHSonlBgruq9x8OpulcUMGF/gNbEQbQ0bgamQAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"606\" alt=\"Facebook Open Graph Share\" data-srcset=\"/assets/static/Facebook-Open-Graph-Share.cbffa61.8a2c40460d055593bd7e4108d1941e23.png 606w\" data-sizes=\"(max-width: 606px) 100vw, 606px\" data-src=\"/assets/static/Facebook-Open-Graph-Share.cbffa61.8a2c40460d055593bd7e4108d1941e23.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Facebook-Open-Graph-Share.cbffa61.8a2c40460d055593bd7e4108d1941e23.png\" width=\"606\" alt=\"Facebook Open Graph Share\"></noscript></p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 500 456' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ac6113be98c11943a5bdf017094e4148'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ac6113be98c11943a5bdf017094e4148)' width='500' height='456' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA6CAIAAACPssguAAAACXBIWXMAAA7DAAAOwwHHb6hkAAATSUlEQVRo3tVaeZwU1Z3vv2MipwjMDAzDDAziCiiIB7coikc0m9uYjdE1x2cTiW72s4mrZjXmo/GIougqCIIfJRqIIMfAcMwMw9z30d3T91ldR9fZ1VVdXdXds9%2bqmmkaxF01ZBff5zuPV69evfe7f783gyOtKOkvc3P8/bZWFEWW5VQqlU7LXzIGQDd6miK9Pr/X50skCIuNLw0DJvmCIISCAafTNexyDTid4UhE%2bfvY6oVkQE7LKTmVVtWUxAV8I14vFOAPBnyhgD8cCiWTSVszFzEDckrNKKwgutzOQMA/5Bwe8Xq8JieekNVgSKqqXlg2HBfUcNIpkXN1t/vdrgSZICmaSiY5nuN5AaTruqbrejabvUgZAImaboBaOhYTOJaiaJqiGIZmGNhOkmVZSZTQQL2maUVHv1gYgO1nNS0aDo709YD0SIwIhsIAkQAPrKkGQaQZluM4MGOyqmkXCwOyJfusbvQMDh2pO9jRPxCORiKxeCxOhqPxaIwgSZogSJN2kZdSEhaLoqhb7YLEVkfqMzfpfOBFQctqsYB//1927/vz7m6XB9T7A6FINO7zB8FAnCCtPkFb9gRDYlkOnGSsBqMyt5bPf6L8GZoD8hAlURBNiOKZwTkNhJaCs8AKPIImL4mxaDgS8idZkiCifphOJJYgafSgHo4AQyIpBuNYPAFG4gkYFo1NVDiDqmBQeigSiPVougw6C1IRn2wOTuBtsDz3uZCEVQh8JBI8uG/vsf0fffD%2buwRFROOxGJGAyKOxeCgSi8YTFJ3kBInlBPgBL0q8AIiCJOBJSIlgQExJLG%2b%2bt7flxvY36SnSdgY8Qhq%2bhPh4W5QOBIhPIInIUQTNjgHeSI8/UkmGZllZVY4d/bh%2b73t1u/%2brof5gIBIZdLmcHu%2bIH9krHIItQTGxeDgWjybICJGIkWSQSHjjRIROkrxIcAIjpUwlSCKdZBiOtTFGA5zfBmaKYK3G2RJk0TsoUGMRVAQ5Bhp9IklbKA7MMcGYA04S3KFQe29/guMlTU3ygt8iGoafYJJxig7GCH80HojGveFoOE5QLMfwLCvySVFISlJSFBkMBIEROC4lobe2NTcn2SINZ2DSVqSTZWyBAo4EPjPB4FSrpwkaYOx5e1xEjKJAWYxMQIMjvuA7e049s3nP3qMdwUi0f3i4vbuno6e3u68f467%2bwYDfqwhMik/yVHxgaNDt8zm93qJ%2b8DgSCHiDIWgGzPByiuKSBE1ZsA%2blSmCTlCwFmTThKF0RN%2blLWD1t9aQFugiCAg%2b0kNEUI68aubSuK1qGkyA/AUZCJlma4xleiFGMyLOhVOGJzuwvmzPv%2bXKZXEFKS6yUYiF7QSyChVekZEQlAFEWko4liPHjyCKKchwjwxrbbIABm9Yi0eeMIe/xnmYgL2w3dODA9icff3zTw1ue/ePu1s6hcNw54u3s6x9ye3oGBtt7%2bmiajKULN%2b3hv3NI3PCRULU9%2bUS7gjIiTBAxki5SD24tQbLobYJYUYQV4Cwb42TQJY90KQ%2bAo3T2fwCWwk6iMQSZ2FtPP/WHf3308U2PbHlxc0NnX5xnLcooUAA9BOOJrCJtGVAXvssdDGmMkv/5SWnFh7yT1eH/kQQFqY9hXAlF2KoAS%2beQW8QnOfmMDFCRRIJLpdwe94E97wWcnURwuKfpcMOpk8gGsHiX1%2bfyeEPROOy7e3A4LbLP9ahX7kr%2b1ZcZHR19tV9d/oHQRet6Jk3xImysFOMGzZJJLsFAGyyDAEUzn8bDOfhMDEQs%2b44Skd89/ODzD2z88Jmf7/zdzx7cuPzNN/5EsGxXb393/0B7dy846RsaamhpoROxprhR8zb5x%2b70E63yvB30Px7gU1qOFyFyqVTkAKKTDViUHRIxCc38rzzAGrHAcbbdnwfRRIJkk1rBiMSjzacaPP3t3v729sZj9cePYR4ax2E8ygpFEWT08EgRpU/O0N/z6Lfuk1btEe4/Jg9xuYwiUxyPuFnixGYYtc1mzI9xFZJspMDGp/MwRjMSi2Pc08/PQBRlPcfHSGb7jj8fO3bU5%2b3v6Trd2ddzoqU1HCcRDVs7u2A/CPMdPT1Dbjcio9vvQ3CEfWdVmUobHgHBytAyCs2DXDDAjfMgmDnBnBEZThi3IhaqsN2a4c2AhhiDqP0Jws4EKMd4uKTO6zGQgaplBvuPvvb8b5v3v1m39YXv33r3ytX3/PChR3zBMC67Dc2nwQNCUGtXd1t3T0tHd1Nre0dvrz8S6Xc6vT5POOxnUESjvJFly01Fq4fxYCDi0R4XPcEyJA7nYoAIi1eI8pD02WZStBrKUYxH51JPmdlNTKdPd7QePryj9dSHmx74l3tuvfeeb/30nh9sev%2bv9SlVCUSiOBUnQQMEik2eR80ZjsdDqOnMI8loAtGJhJiRtuNkAkLlJNmyEJt02TIbWKAkyGmQC2Bgw360eEiN6%2bE8UnZYOeJcWDmLFmRV1QskJ1KCEkumIgxP4TxZSabwRhHlNI4X0wouwnAAOWP2Ylq2rEIABeAQUgc4M3nx4AcMsKJt%2brxl/dK4TmxtjFk/PKrEK2weRFve4%2bKmx3vacXbGNmGvS6lawO9qbdzn6js%2b3FXfderjjuZDbU1HXf3NKCpDMaIfwTMY8gSCg%2b4RbNTd3%2bfyelDPBSPhQCTsD4cD0SgqUcoyawa1lwCb5lCBsyjFTaIFC%2bJ4%2bDdnsIBGPcebVRO4Nd2DF6DhYlwqTWE2taUasKinSYIiUxk9Egn8/uGNTz245MkHlz3xs/Xvv/XkB1uf%2bMEdS37zq/szerZnYKippbWxpaWzt6%2b5tQ1V5/GmU40trc1t7Z29/ada2/D26MmTuJBBkyjvIgSBzWFduBpbziBYZpOyVGTbDMYwFSpCxGF1gF2eRYkEilkwAN1CP2fzYDFQWh7ZbAjpdJKjdzx7/5ZH1%2bx94TvbH7/rxIfPMOEmPtZ6aPu/O11D3mC4f2i4d2gI4T8O2Zse3NXe29vVPzDocnd09%2bB6GSfp9q5u%2bDcowDLwOTzi8YUjLaavd4NDvELCgo8Jss3JGWASlgmKz5m3rDFVogEQnHQUCw8LcDgOXnVs9x/2Pnt347aftO/85cBf/i3hbWCSwahzf/3%2bHaKshHFrgYA48xpilzTF2gabBKNxFB14hEPDflhBsl5xyCd4S7KwDdNyYCGWfduxXxyHNN6nSnzd9PJx2HFpTA9mMQdblzNj0POF/OiokTfSEqWkGUWiMmlGTSU0XTFGR7OFbC6fw09KVdNaNpsv6IVRwB5o%2bUJGN6DqlJKW0mk9nzORM7I5QzP0bN6QlTSVpGUtkzGMjJGzoWR1Vc9mcoZayKvm4rxmwigiY%2bhaTjcH1lhFOWIYOB1GhcQC73K8tPnVl1/b8sqW1ze//sbrb219Y%2bu2N9/e/vY7u97ctnXbzl1bd2zfsWvXrt27333/vfc%2b%2bBD48549f/lo3559%2b4G/fnzgowOHPjpwcO/%2bjw/UHTlcf6zuaF3d0aPHTjQeO9lwsrGhoamxofnUqZbTzS2trW3tbV2drZ0dbV1dcJWWjo6Wjs6egYHOvt7Dhw8d2fNh3eFD%2bw8d%2bvgQHo4cPnLkUF3d4aNH6k%2bcqKuvP3jkyJHjJ443Np1obDre0Gj2jU29A4NhIuH4yqVfu2TCpZdMmPCVS01cMmHiVydMuGTy1OkLr5t/50%2bu/vFTk2fVXPK1r35t0qRLJ0%2baMHnSRAuTpkyeOGXqxMumTZoy9bIZMxYtv/6GdbfceMvGFbdsrL5i4cSpUy%2bbPnPa9MsvnzF92swZl82YPn1m2eUzy6fNLJteXj69rHzV%2bltvWLdu7ca7qmvmXzrt8k3zqp0P/NNTixddtXTZksVX1V511TXLly6%2bdulVS64un1WxYvXa2%2b68e9HixTW1C5Ytu3bxkmuWXLOssnL2nJrqJcuWOiqr51qorqyuAcrnzJ12%2bbS1D7983376tj/s%2b/a23iUbvjW7sqKypnp2dVVV9VwTc6vmzK2qnFs9e271jLKy5atWff%2bff/HN%2bx743gM/u/t79y1fsXpmRQVeVVbNAWZZmF1ZVTGnqnxOVdnsSpzy8OPP/OgXv3706RcWXX3tVydPeWXtutG29nfv%2bvra9Rse%2bdWm%2bx768e3f/Poj//GbX2x65Oabb37st4/9/oUXn37m2W9/996VK9f%2b6MGHfvjgT5cuumLi1CkzKsodM8vLZlaU25heNnMhuF969dIN31jx/V%2buvv/XV163ZurUyTNmzbKWlc0oL8M3080esiyrAIXz5oPnRcuuW7py1eIbbqyaXzujvGLWnKrp5RXTK8pmQt4V5eZX5RWXl5eVzZ5dObemfHbl9avWXrl0%2bfVrbqqYXTl15szrp0y9f9KU1ZMnfWXipRMmTYR6J0yGhiebCp8y5cY169Zv/Pq6u75x400brlh09ZTLLptgmsAUaLhsVoVj/oLaImrmz9tw24bv3nvvnXfefvvGm%2b%2b%2b6/a7v3HPvIX/AN2NLaidX107v2ZB7bwFtdXzqq%2b5DpazfsW69detWnP96nUYrF6/YeVN65evXFk9D8vmz6tdUGN9VbNgwdx51YuuvuaWO%2b5asf5mrFy%2bavV1q1ffuPamFWvX37jhtqolS2Zh4RW1tVi/wDzCwoLq2trZVVULFi5ct/GONbfdccOam2pqa0tpdvgDCHoRtHAkjObzmb8ODwRDmPf7AwGMQuGQ%2bSZsrYmErNF4b/7SHCvwGLQWhSxYY3ND%2b5Mx2C0SDkUiuNnhx%2b7D5jUPI5sK8wsM4rEiokQ8igEyG0WRNOrOmPloN1DnyBdGL7aGUI6LnFIwoY6OqgUTSt5EOmeOtdFRm%2bpcvuDQsnohny8U8mlN13M5FylHOQXvuCSF2JfJZOORkNvtEUUxlUIJJ0O6Asr0BIVMoChKFBKPxSVEZYpOK0pWy4iZ3EF/Niggc%2bRz%2bS/SEpIuqIZuII3kUpqh6rmMntMMIJ818pqe4xSDkrF/IasbDqyz%2bQ5z6lP14W/tdJ308nhEIt%2bxfefzz72w7dXNL//xpaf/86ntW9%2bJhoMvPv/8229t3bz5zZ07tr3w0qs7396%2becurr/zptV07t7/x%2bpuvvfaGk9Ff7tFPRAxTlp9fvYXCKJWGDkabwtktXQqZynXGsnHJ6Ce0EGcEWR0zeEulzd7I5c8wgMN%2bdyz%2bXAOh58xj8/kcimLYd5JJSjxPEIm0JCGNogKgSJK3/vDCslwKRQFD4y0vCNFQ8Gj9cXxNpvOa8QVNEwyQsslAnV/b686oet5N6e1R7XQo0xrWTngyg6R%2bfgYomnYF4CskTSawiyjy3f29qB994fBIKNDeM%2bDy%2b1E8O71e86%2bOCXLsuMKF9yFSzil6AfaNvbVcwUCpkkeBM4oe0gFS2QL9SQbMP02bf6%2bQIXg8plJi7%2bAAi6IK9yyGISmGZBjzF%2bs8HyUITpRMyk364UHWUQXzKZfL21L8WxqIZpU8p%2bZZ1eqVkn580rCs8ywGztbjmGjPoaTwKWPrsXDut4XijPVTKKrrzMrSj78A17lSBmQ5hTGkaYUOczfdMJuqKpCwnkUYyJkyHn9rn5vNavABhDJTHobO0LSlByOjZrDK1g02yVsBadRSF77DAnyIJxWBy/rWZgbnFyyyDEuTCDhpDbWnSaGiGUAmmyuVnckAIhFGAsf6PJ6hoeHW1taOtjb0ba3tg73dI/5QfV0dRVJtDSeaWlp6%2bwZ8Pm9XR3t3W8vp06d90YShpod6uhsamluaT3NCaqC7q6utpbGp8eN9e06eanG6RygihvK0taWts6sLydHndeNyk2TogNfjdQ3s3fsR8pE3LnZ6yMEw2zQUd0UEDyE0uxJdPjqQEDtGyB4fPRzh0Pf4GHdczObPmMYZBnJ6lkoQ0UjYTp%2bBgM85NIyMyHKc1%2b1GjA95PR6vd2TEE4tGA36fZ8TtdDpZUS4Yhsjz8Wh0oH9AVjWRYz1ueLs/4PeCW4pmRS7pcjo9I95IKBTwB3GfCUWjmqbhaol7smfEIwqCjxD9CRF0A35CJHjFRwjDUT6lou5XI7TkjHI%2bSiZ5Jcams7lzGDBsdy7oRl7N5gXVzBcZPW8H0wvYCoVPDVmfdlLhs/iArQGaV4bDXLubaHEl2tzEntM%2bT0KyksNYkCltYwmzkC86qz05Whgfj82MUVzc4BwXL2WpZPvi4xlXL/nqPAzkLH/Nc3I2peqQvSBrnKxBD2cFis8mkv/jdiYKQV6IDACsE/8gRNgDMxQgTOi41eo2%2bwgpmQyuz7pmvjD%2b/xmwicA13Y9aNxbtHhgimaTb58OdNRhPIKy5Pe5wgurq6RqAJwaCdDLZPzToCYV9wWDUysd/j2T8uRnQdV2S5YyWQW9J1hAlSckgVBfktJwx/4tJSpBEGclaVThBxCsFMVzNjP7tifeCmNCXtJ3FgC8UgYDtsZrRXN6ANxiBVyTZJCsIKVm2s2OUIHfvO8ywLGZwR2JYLp%2b/CEwIVrD3UH3fsNs2aEGU9h89efB4kyRJbo%2bre8D8K68dl8Ix4rHnXkEhHYpG2rs6OgeGNHuHi8GESgOzoqoIPqNmYZMzK5kSQ7fqmVFrHi1XuBh8YCxZfAl94L8B76P%2bkwRHeZgAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"500\" alt=\"Twitter Player Card\" data-srcset=\"/assets/static/Twitter-Player-Card.b269a45.7562e5d58b002cac420dbd6ffd27d5fa.png 500w\" data-sizes=\"(max-width: 500px) 100vw, 500px\" data-src=\"/assets/static/Twitter-Player-Card.b269a45.7562e5d58b002cac420dbd6ffd27d5fa.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Twitter-Player-Card.b269a45.7562e5d58b002cac420dbd6ffd27d5fa.png\" width=\"500\" alt=\"Twitter Player Card\"></noscript></p>\n<p>It turns out that most of the social media sites use only two standard sets of meta tags, namely Open Graph (Facebook) and Twitter Cards. I have built ASP.NET Core TagHelpers and ASP.NET 4.6 HTML Helpers which make it easy to add these meta tags to your site.</p>\n<h1 id=\"author-meta-tag\"><a href=\"#author-meta-tag\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Author Meta Tag</h1>\n<p>This is nothing to do with social media meta tags but worth mentioning. The author meta tag has been around for many years and is a standard but very basic way of telling search engines and others, who authored your page. It's unclear where if anywhere this tag is used but as it's a standard I like to put it in anyway as it doesn't hurt to do so.</p>\n<div class=\"line-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Muhammad Rehan Saeed<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h1 id=\"open-graph-facebook\"><a href=\"#open-graph-facebook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Open Graph (Facebook)</h1>\n<p><a href=\"http://ogp.me/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Open Graph</a> is an open standard (it's set by Facebook and doesn't seem so open to me as I'll explain),  containing several sets of meta tags which represent various things, such as:</p>\n<ul>\n<li>Website</li>\n<li>Music Album</li>\n<li>Music Song</li>\n<li>Music Playlist</li>\n<li>Video Movie</li>\n<li>Video Episode</li>\n<li>Video TV Show</li>\n<li>Video Other</li>\n<li>Article</li>\n<li>Book</li>\n<li>Profile</li>\n</ul>\n<p>Here is an example of what the meta tags for a page looks like for the <code class=\"language-text\">Website</code> set. Note the <code class=\"language-text\">type</code> tag which determines the name of the set used:</p>\n<div class=\"line-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>og:type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>website<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>og:title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>.NET Boxed<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>og:url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://example.com/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>og:image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://example.com/1200x630.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>og:image:type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>og:image:width<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1200<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>og:image:height<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>630<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>og:site_name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>.NET Boxed<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>What I find perplexing is that Facebook also have their <a href=\"https://developers.facebook.com/docs/reference/opengraph\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">own</a> custom sets of meta tags over and above the ones in Open Graph. These are:</p>\n<ul>\n<li>Article</li>\n<li>Books Author</li>\n<li>Books Book</li>\n<li>Books Genre</li>\n<li>Business</li>\n<li>Fitness Course</li>\n<li>Game Achievement</li>\n<li>Music Album</li>\n<li>Music Playlist</li>\n<li>Music Radio Station</li>\n<li>Music Song</li>\n<li>Place</li>\n<li>Product</li>\n<li>Product Group</li>\n<li>Product Item</li>\n<li>Profile</li>\n<li>Restaurant Menu</li>\n<li>Restaurant Menu Item</li>\n<li>Restaurant Menu Section</li>\n<li>Restaurant</li>\n<li>Video Episode</li>\n<li>Video Movie</li>\n<li>Video Other</li>\n<li>Video TV Show</li>\n</ul>\n<p>As you can see there is a lot more choice and detail here. What's confusing is that there is overlap between the Open Graph and Facebook meta tags. Both have sets covering music, video and books, with the Facebook sets requiring you to add far more detailed metadata. The Open Graph tags may play nicer with other social media sites that use these tags while the Facebook ones will obviously give the best experience for the user on Facebook. The above meta tags can be set using my tag helpers or HTML helpers depending on the version of ASP.NET you are using like so:</p>\n<div class=\"line-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">&lt;open-graph-website site-name=\"My Website\"\n                    title=\"Page Title\"\n                    main-image=\"@(new OpenGraphImage(\n                        Url.AbsoluteContent(\"~/img/1200x630.png\"),\n                        ContentType.Png,\n                        1200,\n                        630))\"\n                    determiner=\"OpenGraphDeterminer.Blank\"></code></pre></div>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">@Html<span class=\"token punctuation\">.</span><span class=\"token function\">OpenGraph</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OpenGraphWebsite</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"Page Title\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">OpenGraphImage</span><span class=\"token punctuation\">(</span>\n        Url<span class=\"token punctuation\">.</span><span class=\"token function\">AbsoluteContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~/1200x630.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Height <span class=\"token operator\">=</span> <span class=\"token number\">630</span><span class=\"token punctuation\">,</span> \n            Type <span class=\"token operator\">=</span> ContentType<span class=\"token punctuation\">.</span>Png<span class=\"token punctuation\">,</span> \n            Width <span class=\"token operator\">=</span> <span class=\"token number\">1200</span> \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Determiner <span class=\"token operator\">=</span> OpenGraphDeterminer<span class=\"token punctuation\">.</span>Blank<span class=\"token punctuation\">,</span>\n        SiteName <span class=\"token operator\">=</span> <span class=\"token string\">\"My Site\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Of course there are tag helpers and HTML helpers for all of the above meta tag sets.</p>\n<h1 id=\"twitter-cards\"><a href=\"#twitter-cards\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Twitter Cards</h1>\n<p><a href=\"https://dev.twitter.com/cards/getting-started\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter cards</a> require meta tags representing one of several 'cards' which can represent different things:</p>\n<ul>\n<li>App - A phone app.</li>\n<li>Gallery - A photo gallery.</li>\n<li>Photo - A single photo.</li>\n<li>Player - A video.</li>\n<li>Product - A product you want to sell.</li>\n<li>Summary - A summary of the current page. This is usually the default choice for any page.</li>\n<li>Summary Large Image - The same as summary but with a large image.</li>\n</ul>\n<p>If you have already added Open Graph meta tags, then Twitter can make use of them and you can omit some of the meta tags that Twitter requires. This makes adding a Twitter Card very easy and in fact, most of the time all you need to do is include a Twitter username and the card type. Here is an example of what Twitter card meta tags look like given that you already have Open Graph meta tags:</p>\n<div class=\"line-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>twitter:card<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>summary_large_image<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>twitter:site<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@RehanSaeedUK<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Below, is an example of how to generate the above code using my tag helpers or HTML helpers. I have used the <code class=\"language-text\">Summary Large Image</code> card (Notice the double <code class=\"language-text\">@</code> sign in the tag helper, this is because <code class=\"language-text\">@</code> is a special character in Razor and a double <code class=\"language-text\">@@</code> escapes the character):</p>\n<div class=\"line-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>twitter-card-summary-large-image</span> <span class=\"token attr-name\">username</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@@RehanSaeedUK<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">@Html<span class=\"token punctuation\">.</span><span class=\"token function\">TwitterCard</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SummaryLargeImageTwitterCard</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@RehanSaeedUK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>There are also tag helpers and HTML helpers for all of the above Twitter cards. The other cards are a little more complicated than the summary card I have shown in my example above.</p>\n<h1 id=\"google-pintrest--others\"><a href=\"#google-pintrest--others\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Google+, Pintrest &#x26; Others</h1>\n<p>Due to the proliferation of Facebook's Open Graph and Twitters card meta tags, other social media sites, search engines and other sites also use them. By implementing the above meta tags, you can cover most of the ground with very little effort.</p>\n<h1 id=\"validating-meta-tags\"><a href=\"#validating-meta-tags\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Validating Meta Tags</h1>\n<p>Due to the difficulty of getting these meta tags correct, there are several validator tools that the various social media companies provide which let you confirm that you have not made any mistakes. Now, if you've used my tag helpers or HTML helpers you should be ahead of the game and things should just work but it's worth checking out:</p>\n<ul>\n<li><a href=\"https://developers.facebook.com/tools/debug\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Facebook Debugger</a></li>\n<li><a href=\"https://dev.twitter.com/docs/cards/validation/validator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter Validation Tool</a></li>\n<li><a href=\"http://www.google.com/webmasters/tools/richsnippets\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Structured Data Testing Tool</a></li>\n<li><a href=\"http://developers.pinterest.com/rich_pins/validator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pinterest Rich Pins Validator</a></li>\n</ul>\n<h1 id=\"performance\"><a href=\"#performance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Performance</h1>\n<p>When I was looking into implementing these tag helpers and HTML helpers, I looked at a few other efforts on GitHub. However, for some strange reason all of them used reflection behind the scenes. At this point I'd like to go on a short rant against using reflection. I've seen a lot of 'clever' code use reflection over the years and I've seen a far too many developers hammer far too many nails using it. It's a very powerful tool but gets abused far too often. Now, back to resuming normal service. This made these libraries pretty slow for generating a few meta tags, not to mention that they don't support ASP.NET Core. My implementation uses a single <code class=\"language-text\">StringBuilder</code> and should be fairly fast. At some point I will even use <a href=\"https://stackoverflow.com/questions/2510975/c-sharp-object-pooling-pattern-implementation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">object pooling</a> to reuse copies of <code class=\"language-text\">StringBuilder</code>.</p>\n<h1 id=\"where-can-i-get-it\"><a href=\"#where-can-i-get-it\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Where Can I Get It?</h1>\n<p>This tag or HTML helper is available in a few ways:</p>\n<ol>\n<li>The <a href=\"https://www.nuget.org/packages/Boxed.AspNetCore.TagHelpers/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed Boxed.AspNetCore.TagHelpers</a> NuGet package.</li>\n<li>Check out source code in the <a href=\"https://github.com/Dotnet-Boxed/Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed Framework</a> GitHub repository.</li>\n</ol>\n"}},{"node":{"title":"Subresource Integrity TagHelper Using ASP.NET Core - Part 2","path":"/subresource-integrity-taghelper-using-asp-net-core-part-2/","date":"12 March 2016","timeToRead":4,"description":"Use an ASP.NET Core TagHelper to implement Subresource Integrity (SRI) to ensure that external resources have not been tampered with. With is part 2.","content":"<ul>\n<li><a href=\"/subresource-integrity-taghelper-using-asp-net-core/\">Subresource Integrity TagHelper Using ASP.NET Core - Part 1</a></li>\n<li><a href=\"/subresource-integrity-taghelper-using-asp-net-core-part-2/\">Subresource Integrity TagHelper Using ASP.NET Core - Part 2</a></li>\n</ul>\n<p>Last week I wrote part one of a blog post discussing a Subresource Integrity (SRI) tag helper I wrote for ASP.NET Core. It turns out the post was featured on the ASP.NET Community Standup and discussed at length by <a href=\"http://twitter.com/shanselman\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Scott Hanselman</a>, <a href=\"http://twitter.com/damianedwards\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Damian Edwards</a> and <a href=\"http://twitter.com/jongalloway\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jon Galloway</a>. Here is the discussion:</p>\n<div style=\"width: 100%; margin: 25px 0 25px 0;\">\n    <div style=\"position: relative; padding-bottom: 56.25%; padding-top: 25px; height: 0;\">\n        <iframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"\n            src=\"https://www.youtube-nocookie.com/embed/Mu2jol8EmVo\"\n            allow=\"autoplay; encrypted-media\" allowfullscreen>\n        </iframe>\n    </div>\n</div>\n<p>The overall impression from the standup was that the SRI tag helper I wrote was a good first step but there was more work to be done. It was however, still more secure than \"the rest of the internet\" according to Jon Galloway. The main issue raised during the standup was that the first call made to get the resource could retrieve a version of it that was compromised.</p>\n<p>My initial thinking was that you could check the files at deployment time when the tag helper first runs. Then the tag helper would have calculated the hash and cached it without any expiration time, so you are good from then on. In hindsight checking the files on every deployment is not great for the developer.</p>\n<h1 id=\"the-2nd-iteration\"><a href=\"#the-2nd-iteration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The 2nd Iteration</h1>\n<p>So for the next iteration I have added a new alternative source attribute, basically a local file from which the SRI is calculated. Now the tag helper looks like this when in use:</p>\n<div class=\"line-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js<span class=\"token punctuation\">\"</span></span> \n        <span class=\"token attr-name\">asp-subresource-integrity-src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>~/js/jquery.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>You can also customize the hashing algorithm used in your SRI. You can choose between SHA256, SHA384 and SHA512, by default the tag helper uses the most secure option SHA512 which seems to be supported by all browsers. Should you choose to use a different hashing algorithm or even use more than one algorithm, you can set the <code class=\"language-text\">asp-subresource-integrity-hash-algorithms</code> attribute which is just a flagged enumeration (Note that I am using ASP.NET Core RC2 syntax, where the name of the enumeration can be omitted):</p>\n<div class=\"line-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js<span class=\"token punctuation\">\"</span></span> \n        <span class=\"token attr-name\">asp-subresource-integrity-src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>~/js/jquery.min.js<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">asp-subresource-integrity-hash-algorithms</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>SHA256 | SHA384 | SHA512<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>What is it doing behind the scenes?</p>\n<ol>\n<li>Reads the local file specified using the asp-subresource-integrity-src  attribute.</li>\n<li>Calculates a SHA512 hash (or your custom selection) for the file.</li>\n<li>Adds the <code class=\"language-text\">integrity</code> and <code class=\"language-text\">crossorigin</code> attributes to the script tag.</li>\n<li>Adds the hash value to the distributed cache (<code class=\"language-text\">IDistributedCache</code>) built in to ASP.NET Core with no expiry date. If you are using a distributed cache like <a href=\"http://redis.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis</a> (Which you should for the pure speed of it) then the hash will be remembered.</li>\n<li>The next time the page loads, the hash is retrieved from the cache, so there is very little performance impact of this tag helper.</li>\n</ol>\n<h1 id=\"microsoft-cdn-still-broken-for-sri\"><a href=\"#microsoft-cdn-still-broken-for-sri\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Microsoft CDN Still Broken for SRI</h1>\n<p>In my last post I noted that SRI requires that the resource has a valid <code class=\"language-text\">Access-Control-Allow-Origin</code> HTTP header (usually with a <code class=\"language-text\">*</code> value). Microsoft's CDN does not supply this header for all it's resources. I did reach out to Microsoft to see if this could be fixed. I've not heard back yet. I would imagine that with a CDN of that size, fixing this issue is a non-trivial thing so it might take time but I'll do some more chasing.</p>\n<h1 id=\"browser-extensions-and-sri\"><a href=\"#browser-extensions-and-sri\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Browser Extensions and SRI</h1>\n<p>Last week, I noted that leaving out the scheme in the URL for your CDN resource e.g. <code class=\"language-text\">//example.com/jquery.js</code> caused Firefox to error and fail to load the resource completely and I recommended that you always include the <code class=\"language-text\">https://</code> scheme. It turns out that this was not Firefox causing the issue at all but a Firefox browser extension. I've yet to figure out which one yet as I have quite a few installed (most of them security related because I'm paranoid) but it's probably an extension called HTTPS Everywhere which attempts to use HTTPS if it is available. To be on the safe side and avoid this problem, always specify the <code class=\"language-text\">https://</code> scheme.</p>\n<h1 id=\"cdn-fallbacks\"><a href=\"#cdn-fallbacks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CDN Fallbacks</h1>\n<p>So what happens when a CDN script is maliciously edited or (much more likely) you messed up and your local copy of the CDN script is different from the one in the CDN? Well, this is where CDN script fallbacks come in. There is already a tag helper provided by ASP.NET Core that does this:</p>\n<div class=\"line-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">asp-subresource-integrity-src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>~/js/jquery.min.js<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">asp-fallback-src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>~/js/jquery.min.js<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">asp-fallback-test</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>window.jQuery<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>I should also mention that although the fallback tag helper is cool and very simple to use, it adds inline script which is not compatible with the <a href=\"/content-security-policy-for-asp-net-mvc/\">Content Security Policy (CSP)</a> HTTP header. If you care about security and you probably do if you are reading this, that means using the fallback tag helper is not possible. I myself prefer to move all my fallback checks to a separate JavaScript file.</p>\n<h1 id=\"sritestio\"><a href=\"#sritestio\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>sritest.io</h1>\n<p>A big shout out to <a href=\"https://blog.gaborszathmari.me\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gabor Szathmari</a> and his website <a href=\"https://sritest.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sritest.io</a>. It is able to scan your page and check that all your external resources have SRI enabled and most importantly that it has been setup correctly. You could use the console window from a browser like Chrome or Firefox but this website will also tell you if you've forgotten to add SRI to any external resources and also highlight edge cases such as the ones I highlighted in these two blog posts.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1624 859' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b2a8e1cde6e7da4b129ab5cacb60e815'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b2a8e1cde6e7da4b129ab5cacb60e815)' width='1624' height='859' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAiCAIAAABgN0jYAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAHQUlEQVRYw81ZXZAcVRXeB5/gQaXAJJiQmDUgQiJlXqRAEPFBNAYCCQkpJFU8SGkVVfriC0qyP8HADqEQk1BhcXezMSk1ChKCIkQoCq3szO72/PZsT/f8z%2bzM9Ez/zvT/z3pu925nsplZMsnO6qmv7p4553bf%2b91z7u177/bMzc1ZiqAkPlYLYbHeYBhGFMW6LEulkk6SliRBhTnbnuu%2bGJYmayLAtM05G9q0nZZtT2n5VA96sppixvcV//HKBX/gww8%2bOH/%2bvH9qivD7bYoyRXEFCFi2BSVZnjz9n76/BoZmWUrXTFVTwaiqajKZpGk6lUrVajX4CUaO4yiKAiMiAF0z1bqSndSZnNtN4GqapmFZJhoV2zCt7gPEllWZrde4Bqtoqq6bmm6ASzctWVEVTdc0zTBQRbd78FPXddB7LCRohBGTBQGTY1iJzLlCgb5aTeKmFig9C35rUXfJSiOYr4cLKwkx5KClV9HNtnOgpWx7PXTjr/zr%2byfX9f0/IECUBGe22FdKYMcwfvNAcNOhUO9v2uKr14xNDno/G8FEWeyMwMNvxFYfwHpfCH7lYGtsOBi8uW/6y/0YYG0/tqZvGkpk6cMW7Mjietf2u3bMtcwrfdOrD0yvOTC9YbBtKwvAlo3AxhcQQIHgbBsmvnMUf%2bAY/t1j8R%2b9Sdx/JP7DYeKh4zMPvQH2%2bIPH4t8%2bgj9wNH7fEVTh%2b8cJsN9/FP/e6/EdI4l7f4dv/33iqdPJvSepr78Y3jCI9cLLu01g/WDwpv1TNz4/j0dHycdPkE/%2bgbrnNXzfqSSQ2XOS2nea2j1O7TpB/vhUEpSdo%2bQPholH3iRA2TlGPvtWZu9Jcs849fBI4pGRxDNn0j/9S/prL4Zv%2bPXUqv0obl0kAIG%2b7VBo51gCxmzPOHSCfGw0sWs08ZiDR0cIpKCScHSEnchF7BpzKyR2jBB7TiR2n0CVwQivAmXr4ch9r4W3D%2bOAe14Nrx/sDgFQIHFhjBuqAd832/l2XqOYTm98H81%2biCWz%2bHSJivzxQmpNX8uJd80EIDtvGcC2%2bMKvflIamyiPTJTHAvSon4YSMD5ZPdk5xgPVM8EaZODP/xT3nYsdfg9/5nR83QC28WB3CMC6cfdvo798J3PnS5Gtr0Rvfyl018uRbx6OQgkuyGBYUjrFqgPTawecdak/CGPf3TmwfhDbPBTeNjzzDV9k6%2bHoFh/0HjEBDrceCsHS1HtV2HipvmwEth%2bPfWk/5q48HtYNBGHYIMow5G7p4pbBS6p1ARjRKYHdozh8Ajf7wncMXQKwbHk5shngC9/pC7slwpCDZsV3qTJ00bJ5kcsXcfVFbTUhRFbqnREo1LW0qGdaIVoR41WJqEkkI5OMo7AyAqM4ikKxCsFIMzUpAV4wMirFqRSrguIiXpUJBj2SYBygmjK8Jy1oLVuEnihGJ5s5oKnBthtWulYgytWy2MhzfIHni7yQZTnQ8xxXFARQirw4ywvpGpNhOKgwK0h5XpkVVUCprmVYucArOU4pClKOZaEaSdeKPJ9l%2bDTDyLCTb9Wiu3J3thvVLAs4tITV9F6zve4dKaw5e8FrGzZ40ZFx0SMu9DYtokY7JSDwfLVaqdXoy1B1pVatzUuz0gS6QmczmVw2Vy6Xa58pzkuY9oBjVmcEeF4QOF3gDYDImwBHN3lOYllWEAT2MuE4BE%2bgQ5k0SKpcrnDNjqsSOE9eOQEULEVjseTPAomnJsl9E4kn/OSTU%2bTTE8Tj%2bdqfwStJjcuvCSwU6IsLBfxdxiOpc8rthEBdKpwLrHnrwufeDazyJ/aeD97xt4nrzvy7J5p9DpI6Gg3LirLoMVZUc3SjxMq5qlRk5NmanKUboPAN7X9AoCHP/hO7/WzgC/%2bKfCtXPYUlf3JuctU7/s/juQG0D7N0w9DdOwJPvAO3A8u9HLCXSa6CQPH96VvP%2br/4PnZbKPOLT/EHgcDbE9fH8wOWMYfjUTwWC4XDmq57t048x87MEKVSuVgoZHPZVCol1utL3El1OwJAYNO5yZvem1p9NnADKH%2bfWvv2xHWxXB%2bKgKm5o7JokHQdRcZwZNkGv/MIINF1VVbzdSktypm6nBWljCilG0pG0zlN1WKxCEmRBEFkc/mLEeCFfD6XLxTSmUzzxeAiWYEIuARQbqiKghZNUeRgVRVEbyTc/NYc8XpmzgfEardme1dUKxEBw4RUkAxDNlApGaYM0PQGpImmqjPxeAzHXZKewFKfzWbz%2bUKpVIL1v1gsQiigLBQKOUdAo6hkvSEtMaLLE4ElGLte6LqysIx6gwR5ry4IeCE4siKjW01Vhaxz7Y1Gw4tPFyOwNAHoCwxkMpWCOcAwrDcH6qIIWwyapiHrKhUaNgfwDa6gfUQVPtHgAiNNgwEJRGnpTOtiBMAFWwPGEUW%2b%2bDlT3AkjCLzAQwVvu8Gjbcm8eBZ41uwkizqfA%2b3FNAy76b2e3b3mvvxfEq2XIpj0RgfSjsB/AWIwwkCxMgk9AAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1624\" alt=\"sritest.io Screenshot\" data-srcset=\"/assets/static/SRI-Test.82a2fbd.85b27df328cbf81167527c5736fdf927.png 480w, /assets/static/SRI-Test.cbab2cf.85b27df328cbf81167527c5736fdf927.png 1024w, /assets/static/SRI-Test.a28a40c.85b27df328cbf81167527c5736fdf927.png 1624w\" data-sizes=\"(max-width: 1624px) 100vw, 1624px\" data-src=\"/assets/static/SRI-Test.a28a40c.85b27df328cbf81167527c5736fdf927.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/SRI-Test.a28a40c.85b27df328cbf81167527c5736fdf927.png\" width=\"1624\" alt=\"sritest.io Screenshot\"></noscript></p>\n<h1 id=\"where-can-i-get-it\"><a href=\"#where-can-i-get-it\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Where Can I Get It?</h1>\n<p>This tag helper is available in a few ways:</p>\n<ol>\n<li>The <a href=\"https://www.nuget.org/packages/Boxed.AspNetCore.TagHelpers/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed Boxed.AspNetCore.TagHelpers</a> NuGet package.</li>\n<li>Check out source code in the <a href=\"https://github.com/Dotnet-Boxed/Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed Framework</a> GitHub repository.</li>\n</ol>\n"}},{"node":{"title":"Subresource Integrity TagHelper Using ASP.NET Core - Part 1","path":"/subresource-integrity-taghelper-using-asp-net-core/","date":"6 March 2016","timeToRead":4,"description":"Use an ASP.NET Core TagHelper to implement Subresource Integrity (SRI) to ensure that external resources have not been tampered with.","content":"<ul>\n<li><a href=\"/subresource-integrity-taghelper-using-asp-net-core/\">Subresource Integrity TagHelper Using ASP.NET Core - Part 1</a></li>\n<li><a href=\"/subresource-integrity-taghelper-using-asp-net-core-part-2/\">Subresource Integrity TagHelper Using ASP.NET Core - Part 2</a></li>\n</ul>\n<h1 id=\"what-is-subresource-integrity-sri\"><a href=\"#what-is-subresource-integrity-sri\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What is Subresource Integrity (SRI)</h1>\n<p>Can you trust your CDN provider? What if they get hacked and the copy of jQuery you are using hosted by them has some malicious script added to it? You would have no idea this was happening! This is where Subresource Integrity (SRI) comes in.</p>\n<p>It works by taking a cryptographic hash of the file hosted on the CDN and adding that to your script or link tags. So in our case if we are using jQuery, we would add an integrity and <code class=\"language-text\">crossorigin</code> attribute to our script tag like so:</p>\n<div class=\"line-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js<span class=\"token punctuation\">\"</span></span> \n        <span class=\"token attr-name\">integrity</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sha256-ivk71nXhz9nsyFDoYoGf2sbjrR9ddh+XDkCcfZxjvcM=<span class=\"token punctuation\">\"</span></span> \n        <span class=\"token attr-name\">crossorigin</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>anonymous<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The cryptographic hashing algorithm used can be SHA256, SHA384 or SHA512 at the time of writing. In fact, you can use more than one at a time and browsers will pick the most secure one to check the file against.</p>\n<p>The current official standard <a href=\"http://www.w3.org/TR/SRI/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">document</a> states that currently only script or link tags are supported for your JavaScript or CSS. However, it also states that this is likely to be expanded to pretty much any tag with a <code class=\"language-text\">src</code> or <code class=\"language-text\">href</code> attribute such as images, objects etc.</p>\n<p>Scott Helme has a great <a href=\"https://scotthelme.co.uk/subresource-integrity/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">post</a> on the subject which I highly recommend you read (It's where I learned about it).</p>\n<h1 id=\"the-aspnet-core-tag-helper\"><a href=\"#the-aspnet-core-tag-helper\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The ASP.NET Core Tag Helper</h1>\n<p>I implemented a tag helper for ASP.NET Core which is as simple to use as this:</p>\n<div class=\"line-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">asp-subresource-integrity</span>\n        <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Don't you love it when security is so easy! I'm a big believer in making security as easy as having a big red button that says 'on' and turning it on by default so people don't have to. It's the only way these things will get used! What is it doing behind the scenes?</p>\n<ol>\n<li>Downloads the file from the CDN.</li>\n<li>Calculates a SHA512 hash for the file.</li>\n<li>Adds the <code class=\"language-text\">integrity</code> and <code class=\"language-text\">crossorigin</code> attributes to the script tag.</li>\n<li>Adds the SHA512 hash value to the distributed cache (IDistributedCache) built in to ASP.NET Core with no expiry date. If you are using a distributed cache like <a href=\"http://redis.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis</a> (Which you should for the pure speed of it) then the hash will be remembered.</li>\n<li>The next time the page loads, the hash is retrieved from the cache, so there is very little performance impact of this tag helper.</li>\n</ol>\n<p>There are actually two tag helpers, one supports any tag with a <code class=\"language-text\">src</code> attribute and another supports any tag with a <code class=\"language-text\">href</code> element. This is in preparation for when subresource integrity is opened up to tags other than script and link.</p>\n<h1 id=\"gotchas\"><a href=\"#gotchas\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gotchas</h1>\n<p>In the past, I have often omitted the scheme from the CDN URL like so:</p>\n<div class=\"line-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>//ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>However, I have noticed that Firefox, does not like it when you use SRI and omit the scheme. It stops the file from loading completely. When you think about it, this makes sense. We are trying to confirm that the resource has not been changed, one of the ways to do this is to use HTTPS. It does not make sense to use SRI over HTTP.</p>\n<p>The other gotcha I found is that the resource must have the <code class=\"language-text\">Access-Control-Allow-Origin</code> HTTP header. It can be set to <code class=\"language-text\">*</code> or your individual domain name. Now, I have been using CDN resources provided by <a href=\"http://ajax.googleapis.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google</a> (for jQuery), <a href=\"http://www.asp.net/ajax/cdn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Microsoft</a> (for Bootstrap, jQuery Validation etc.) and <a href=\"https://www.maxcdn.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MaxCDN</a> (for Font Awesome) because they are free, most browsers have probably already got a copy of the files from there and because they have very fast global exit nodes.</p>\n<p>However, I have discovered that all provide the <code class=\"language-text\">Access-Control-Allow-Origin</code> HTTP header except Microsoft on some of their resources. Strangely, they return the header for Bootstrap but not for the jQuery Validation scripts. I have reached out to them through my capacity as an MVP and hope to get the issue solved. In the mean time, if you are using Microsoft's CDN you can switch to another CDN or wait for them to fix the issue.</p>\n<h1 id=\"where-can-i-get-it\"><a href=\"#where-can-i-get-it\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Where Can I Get It?</h1>\n<p>This tag helper is available in a few ways:</p>\n<ol>\n<li>The <a href=\"https://www.nuget.org/packages/Boxed.AspNetCore.TagHelpers/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed Boxed.AspNetCore.TagHelpers</a> NuGet package.</li>\n<li>Check out source code in the <a href=\"https://github.com/Dotnet-Boxed/Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed Framework</a> GitHub repository.</li>\n</ol>\n"}}]}}},"context":{}}