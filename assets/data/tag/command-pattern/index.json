{"hash":"bce9c36f63f940237effc56fd3f7a707cd5f999d","data":{"tag":{"title":"Command Pattern","belongsTo":{"edges":[{"node":{"title":"ASP.NET Core Lazy Command Pattern","path":"/asp-net-core-lazy-command-pattern/","date":"08 April 2017","timeToRead":5,"description":"Move your ASP.NET Core MVC action method logic into lazily loaded commands using the command pattern, to reduce Controller complexity.","content":"<div class=\"custom-block tip\"><p class=\"custom-block-title\">TLDR</p><p>Move your ASP.NET Core MVC action method logic into lazily loaded commands using the command pattern.</p></div>\n<p>When writing your Controllers in ASP.NET Core, you can end up with a very long class if you're not careful. You may have written several action methods with a few lines of code in each, you may be injecting a few services into your controller and you may have commented your action methods to support Swagger. The point is it's very easy to do, here is an example:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[controller]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RocketController</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IPlanetRepository</span> planetRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IRocketRepository</span> rocketRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">RocketController</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IPlanetRepository</span> planetRepository<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IRocketRepository</span> rocketRepository<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planetRepository <span class=\"token operator\">=</span> planetRepository<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository <span class=\"token operator\">=</span> rocketRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{rocketId}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">GetRocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rocketId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> rocket <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository<span class=\"token punctuation\">.</span><span class=\"token function\">GetRocket</span><span class=\"token punctuation\">(</span>rocketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rocket <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">NotFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>rocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{rocketId}/launch/{planetId}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">LaunchRocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rocketId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> planetId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> rocket <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository<span class=\"token punctuation\">.</span><span class=\"token function\">GetRocket</span><span class=\"token punctuation\">(</span>rocketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rocket <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">NotFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">var</span> planet <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planetRepository<span class=\"token punctuation\">.</span><span class=\"token function\">GetPlanet</span><span class=\"token punctuation\">(</span>planetId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>planet <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">NotFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository<span class=\"token punctuation\">.</span><span class=\"token function\">VisitPlanet</span><span class=\"token punctuation\">(</span>rocket<span class=\"token punctuation\">,</span> planet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>rocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"the-command-pattern\"><a href=\"#the-command-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Command Pattern</h1>\n<p>This is where the command pattern can come in handy. The command pattern moves logic from each action method and injected dependencies into their own class like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[controller]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RocketController</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> Lazy<span class=\"token operator\">&lt;</span>IGetRocketCommand<span class=\"token operator\">></span> getRocketCommand<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> Lazy<span class=\"token operator\">&lt;</span>ILaunchRocketCommand<span class=\"token operator\">></span> launchRocketCommand<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">RocketController</span><span class=\"token punctuation\">(</span>\n        Lazy<span class=\"token operator\">&lt;</span>IGetRocketCommand<span class=\"token operator\">></span> getRocketCommand<span class=\"token punctuation\">,</span>\n        Lazy<span class=\"token operator\">&lt;</span>ILaunchRocketCommand<span class=\"token operator\">></span> launchRocketCommand<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getRocketCommand <span class=\"token operator\">=</span> getRocketCommand<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>launchRocketCommand <span class=\"token operator\">=</span> launchRocketCommand<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{rocketId}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">GetRocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rocketId<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getRocketCommand<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span>rocketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{rocketId}/launch/{planetId}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">LaunchRocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rocketId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> planetId<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>launchRocketCommand<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span>rocketId<span class=\"token punctuation\">,</span> planetId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IGetRocketCommand</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IAsyncCommand</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GetRocketCommand</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IGetRocketCommand</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IRocketRepository</span> rocketRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">GetRocketCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IRocketRepository</span> rocketRepository<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository <span class=\"token operator\">=</span> rocketRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rocketId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> rocket <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rocketRepository<span class=\"token punctuation\">.</span><span class=\"token function\">GetRocket</span><span class=\"token punctuation\">(</span>rocketId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rocket <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NotFoundResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkObjectResult</span><span class=\"token punctuation\">(</span>rocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All the logic and dependencies in the controllers gets moved to the command which now has a single responsibility. The controller now has a different set of dependencies, it now lazily injects one command per action method.</p>\n<p>You may have noticed the <code class=\"language-text\">IAsyncCommand</code> interface. I keep four of these handy to inherit from. They all outline an <code class=\"language-text\">ExecuteAsync</code> method to execute the command and return an <code class=\"language-text\">IActionResult</code> but they have a differing number of parameters. I personally feel if you are needing more than three parameters you should be using a class to represent your parameters, so I've put the limit on three parameters.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IAsyncCommand</span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IAsyncCommand</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IAsyncCommand</span><span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T1</span> parameter1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T2</span> parameter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IAsyncCommand</span><span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">,</span> T3<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T1</span> parameter1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T2</span> parameter2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T3</span> parameter3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"why-so-lazy\"><a href=\"#why-so-lazy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Why so Lazy?</h1>\n<p>Why do we use <code class=\"language-text\">Lazy&lt;T&gt;</code>? Well the answer is that if we have multiple action methods on our controller, we don't want to instantiate the dependencies for every action method if we are only planning on using one action method. Registering our Lazy commands requires a bit of extra work in out <code class=\"language-text\">Startup.cs</code>. We can register lazy dependencies like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...Omitted</span>\n    services\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddScoped</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IGetRocketCommand</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">GetRocketCommand</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddScoped</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">Lazy</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IGetRocketCommand</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IGetRocketCommand</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"httpcontext-and-actioncontext\"><a href=\"#httpcontext-and-actioncontext\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HttpContext and ActionContext</h1>\n<p>Now you might be thinking, how do I access the <code class=\"language-text\">HttpContext</code> or <code class=\"language-text\">ActionContext</code> if I want to set a HTTP header for example? Well, you can use the <code class=\"language-text\">IHttpContextAccessor</code> or <code class=\"language-text\">IActionContextAccessor</code> interfaces for this purpose. You can register them in your <code class=\"language-text\">Startup</code> class like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...Omitted</span>\n    services\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IHttpContextAccessor</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpContextAccessor</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IActionContextAccessor</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ActionContextAccessor</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that they can be registered as singletons. You can then use them to get hold of the <code class=\"language-text\">HttpContext</code> or <code class=\"language-text\">ActionContext</code> objects for the current HTTP request. Here is a really simple example.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SetHttpHeaderCommand</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">ISetHttpHeaderCommand</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IHttpContextAccessor</span> httpContextAccessor<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">GetRocketCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IHttpContextAccessor</span> httpContextAccessor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>httpContextAccessor <span class=\"token operator\">=</span> httpContextAccessor<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>httpContextAccessor<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Rocket\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Saturn V\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"unit-testing\"><a href=\"#unit-testing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Unit Testing</h1>\n<p>Another upside to the command pattern is that testing each command becomes super simple. You don't need to setup a controller with lots of dependencies that you don't care about. You only need to write test code for that single feature.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>For a full working example, take a look at the <a href=\"https://github.com/Dotnet-Boxed/Templates/blob/master/Docs/API.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed API</a> project template which makes full use of the Lazy Command Pattern.</p>\n"}}]}}},"context":{}}