{"hash":"42f64c2ec526597502f39c31bfb0f261ff18bb23","data":{"tag":{"title":"Reactive Extensions","path":"/tag/reactive-extensions/","belongsTo":{"edges":[{"node":{"title":"Reactive Extensions (Rx) - Part 8 - Timeouts","date":"2017-01-02T00:00:00+00:00","dateModified":null,"timeToRead":1,"description":"Should you use Reactive Extensions (Rx) to do timeouts in .NET? It turns out it's better to use CancellationTokenSource in the Task Parallel Library (TPL).","path":"/reactive-extensions-rx-part-8-timeouts/","published":true}},{"node":{"title":"Reactive Extensions (Rx) - Part 7 - Sample Events","date":"2014-12-24T00:00:00+00:00","dateModified":null,"timeToRead":2,"description":"Shows how to use the Reactive Extensions (Rx) Sample method to reduce the number of subscribed events by taking a sample from them over a given time period.","path":"/reactive-extensions-part7-sample-events/","published":true}},{"node":{"title":"Model-View-ViewModel (MVVM) - Part 2 - IDisposable","date":"2014-06-13T00:00:00+00:00","dateModified":null,"timeToRead":4,"description":"Implementing IDisposable correctly is ridiculously hard. A Disposable base class can make it easier. Using IDisposable in Model-View-ViewModel (MVVM) really helps.","path":"/model-view-viewmodel-mvvm-part2-idisposable/","published":true}},{"node":{"title":"Reactive Extensions (Rx) - Part 6 - Task ToObservable","date":"2014-04-25T00:00:00+00:00","dateModified":null,"timeToRead":5,"description":"How and where to use the Reactive Extensions (Rx) ToObservable Extension method to turn a Task Parallel Library (TPL) Task into an IObservable.","path":"/reactive-extensions-part6-task-toobservable/","published":true}},{"node":{"title":"Reactive Extensions (Rx) - Part 4 - Replacing Timers","date":"2014-03-11T00:00:00+00:00","dateModified":null,"timeToRead":3,"description":"You should definitely consider using Reactive Extensions (Rx) is as a direct replacement for .NET Timers. This post will explain how.","path":"/reactive-extensions-part4-replacing-timers/","published":true}},{"node":{"title":"Reactive Extensions (Rx) - Part 3 - Naming Conventions","date":"2014-02-14T00:00:00+00:00","dateModified":null,"timeToRead":2,"description":"Reactive Extensions (Rx) Advantages of using IObservable property naming conventions and comparison between C# events.","path":"/reactive-extensions-part3-naming-conventions/","published":true}},{"node":{"title":"Reactive Extensions (Rx) - Part 2 - Wrapping C# Events","date":"2014-02-13T00:00:00+00:00","dateModified":null,"timeToRead":3,"description":"Reactive Extensions IObservable wrappers for C# events and hiding the C# events entirely from subscribers using explicit interface implementations.","path":"/reactive-extensions-part2-wrapping-events/","published":true}},{"node":{"title":"Reactive Extensions (Rx) - Part 1 - Replacing C# Events","date":"2014-02-11T00:00:00+00:00","dateModified":null,"timeToRead":4,"description":"You should definitely consider using Reactive Extensions (Rx) is as a direct replacement for C# events. This post will explain how.","path":"/reactive-extensions-part1-replacing-events/","published":true}}]}}},"context":{}}