{"hash":"2498da5f4a6dbe71176b4800892e8bb3dfcb100b","data":{"tag":{"title":"dotnet new","path":"/tag/dotnet-new/","belongsTo":{"edges":[{"node":{"title":"What dotnet new Could Be","path":"/what-dotnet-new-could-be/","date":"31 December 2019","timeToRead":5,"description":"What the 'dotnet new' CLI command could be if some effort was spent on developing it. I compare it to other templating engines and suggest ideas.","content":"<p>The '<a href=\"https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dotnet new</a>' CLI command is a great way to create projects from templates in dotnet. However, I think it could provide a much better experience than it currently does. I also suspect it isn't used much, mostly because templates authored for the <code class=\"language-text\">dotnet new</code> experience are not included in the <code class=\"language-text\">Visual Studio File -&gt; New Project</code> experience. For template authors, the experience of developing templates could do with some improvements. I tweeted about it this morning and got asked to write a short gist about what could be improved, so this is that list.</p>\n<p><a href=\"https://twitter.com/RehanSaeedUK/status/1211663043840684036?s=20\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 898 579' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-1a6871f76b7dd2366326ece418de98f6'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-1a6871f76b7dd2366326ece418de98f6)' width='898' height='579' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAApCAIAAAAK8LgbAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAL3UlEQVRYw81ZWW8b1xXWD%2b1bH1qgQB%2bLPBRo81KkSFqgTZoUkR3Hsi1ZprjvpEhxEUlx39dZyOFODvfZV/UMR5IpW1FkJ1F6Icuz3Hvucr7zne%2bM9i6vm6KqsnJzd6mqKvzSL289VPWLq9tt271%2b2/lx2p6%2bPoFnLC%2b/SgassiTAXqAxNCNKMsdxynWTZRl6whOWZSVR0l/BigVBkBVZN6e9kuRfetEwKS%2bIMLu2AVgD/JeMBZ785XeGf3xSLyYvLxmaoj/966dffr3/7bf73z3df37w4tmz5wcvXz757mD/6bPjk5Mvvvji%2b%2bcHX//nK4PR4g%2bc/ffb/RcvX%2bzvP/n3l1%2bRS%2bragb9UgzVPZ0tRlLQNbCcSUgHj13/%2bw9Hf/lQLHiv8BB4Nh0O83RkMhp023u/3e70%2bXGN4ezAcrVarDtGBCwxF%2b4PhcrVudzrtNo5hWLfblXaB%2bCgQuhR5iiI7xv3PP/vjb%2bPelyI3AucUq81qE8%2bXG0200xlO8G6vgRFop4fgvVK11R2NKg1UfNy13kLR7gYuVQ1Gf//nN5/8/jemV08phoVn09mcohlyvliuNrPlerVeT%2beLCbkgZ4vZfAmnvt7Q4hXc1d32%2bEF81Yjhot8bSAKvMc3D1qH%2bcNt9rcf6/W23j359%2bbBD2bteivLOyvQYv3PND/HsR8fxzbwPHK5tgGNop9PVQtBypQrIGI/HcHGRTEJg5vIliNf5fJ7JZHC8QzNsKpUqlkr1RhNBkFq93mzU20SvUilrMY00XW4PjIXopynKHwgiCJpOpQqlEoph6XS6WqtPSbJeb1TLZQTFweB4NEgk0xiGg/1avYGiWDyRRJBmKBwtFAr1FhhA5/PFPfvRNtDvETarJRiKWi3WbL4Itqx2l9FgsNmsTrffH/D3h2O/1%2b07DUIwOO22eOLixasju8MVi52HwyF4fnT0OpMrIq2G3%2be3mM2noXOijR8bTk5PA16PN3Ie9Xk9zw5eFcsVFGsHAoETwxsrzOE9nc/JgxevwEIwcOr2BQ0Gg8vtNZsMxyeWcCjoD0UOD1%2bVKrVdz9yxAVlW9Gyw2awhZBeLBc/zsGdpm7kgSemIEgTxxtB4MoGcpTGYKMiypF4jWIfvdYITJchqYFxW9Hf6RHqTZEm/hPyony7DMJPJZGtTlLdd4djBB/Pl6kc8IPAc0e0Nh6PlcjmdjLv94Ww2G43HxWKR5fiHxPLlh8P95%2bIrbQPNetVgtPq9rhOTxWqxmO1uq%2bnkjcnRaDQ4XrzNObf45zH4/iEsBDBYrdbQq1qtAEwBTSxDbyhK%2bRVo/aM8oC9ytd7wPAgzgaZp/R3ouQ5B6EIVcAm0M1tcEQJNbYajCTkj9VtNz8nyr7YBioLkSwM5xmIJh9P54uB5vlRFEeT18XE0FmvUqy6H48RsM1usxwajyWS02BwWkzGRyjsdDq/XG41G7TbrG5MFyGoX3A/Phj91A7KmCFRQb9VqDaIZ1NsATnc6RVAMVGu/S9RqVVgcRHYTSAFptTtdCI/ZYkkQBIoilWrVZDzJFsrrDfWQwuDODh%2b9jbdSQqczoDnl2pYsSeRs9o5ljuNvKBmCR5LV9xKwoq9mvVrSW6rVePa6PFIVjR%2b35KqyLAN5EwxuZ1U%2bDoTaBgD0ACFIhMVCKRDQsgnaJroEYbfbz%2bMXjXrN4wGcnOdLpUQ88erwsFAsVStln9/vsFkdbu/Z2ZnR6kilMov51OZwhUIhwNnZGWS34/NY1O70nsdiGK6JbcjTp4FgOHoejyegvTk%2bNlrsLrcb7s5C4VQm%2bxHFkLYBSDfwG7I9yIdiqZzNpJso1ul0EomL6ZQc9HsgH0AInMcTTqfT7fWNRuN6vZ7P50EmeH0%2bw4kxky9lMtnlfBa/SOVyuVg8kctlQ%2bFItVZNp/MujyebK0BJcRaOtFoomE1nMql0JpvN1hrNeCzWbKGRSMRqdwqi%2bJY6r3H2VuSpd8jevd2aGFLndSpVbwrf3QalzI2j9bfTyWS12twPYhBXHC/cf5CCAEXJfaXcfZkYoAy/s%2blkNHYBcILTBg1TLJbCkWgmnSpXay63bzqd1uu1QqFYLOQgXokOKLxFJBJdLGbD0bhWr4GGSyUvYokkeCaZTAIBAEhqtXo8GimUG/lcBpQcxD0AMgcyLZ9rtBCf/zSVTI3GE6AN8FixVMkVitlMplytwyTgRrxDzEkSNGUylc5lM9lCqVKpzuZzHMOBwvVd7W35XmtgNByNgQqKRKMOp0sDK6iwUMBksQOyoXQEjnp9dOj1eV%2b/MQKkAVZAnTC8UqmEw2GPzw8bsDs9FxepWDRsMFnNNls6lTSbzDjRT8Rj/tMgiJRwMAhYt9utYNZisZ6cGEGVBvw%2bu90RiV1Y7Q7Dm2OXxxeNhCFyYD1tDHW6PYYTUyJ2HorEIAJhOp/fV2%2biOmpu6gF1lwTeub3bp8oV26hbhaf%2bgFrUKUu5Nngj3fTKQmc8IGi9Ql%2btoNZb6d30/hplbUNUn7Pdbm8oehdRe7oMJEkSFD4MZjkO1DnR7a7XawjWXC5fLOSBlGbkDKQ8PIQpQPZBhUCSUwzHiuXqdDYDDTIeTxaLJcPQo9GIJGfzGdlEUEGUHkj26o4y/GAWInAUgGG2ucwmUyh09tnn/4IFxeKxw6PXR68NPo/T4nSbzZZUOou0mt893TdZbB6P%2b8XhsctuOzLa%2boOBxXj8zZPvS6VytVr1nQaAf20Ws/8sCrr4A5Pxj1V872VAnUZlkG6bzQbOFbwJZwnKB4KBpmh4wnEcnDuoPU3byzKkHqAL%2bAdOA9fNFwt4CCUERdPga5ZhtGuKgqKf4/lHEIN7H%2be4/y81uuuaOz523vbarc8Fl1dR%2bE7f3SHqe8X%2bHbWQel9P9YFaaHeA%2biE%2bUX9uH75vSv3h26sNECuRZPQK%2bMoE5OIlK09oec7peflyzigbXqFFrUZmRO1j2JSWehsobS8FWZW2KnDNK3DNScqU1qytOQVfitABjMtbptXyvaz9wFgwtWDl1kzorbX6GHqueIWRtI/kMMXW4CUrqr01cMGVRxVNUFwqO1vcfpVYiu4W7WjSQZzxtKgwwZprG2eLel3e%2bBH6sLyJddmTOmWtUWcd1lKnvAhja0LMKpbaxlbfZIbcOcEEcCaI07YGDX3Amq1BdVdivMM4WrQH0Z4fFlcBuG1SFz3W1aJf5lcejCmN2Ise11mJ1Ql/XFpn%2bpwLocMEY61TwTYTIRhTndrPLuNdFgaGcMZcp8AybPXWp0WaV6IE25oLYKUw5PwYkx1ycDCZAYfNRbgojfnUgGuQAowsjHg4MHgCJ5Hqs9Czu5KqU74CPxO%2bOhVqpFCb8J2luORkMBjrcuhcgFGRDoOvxPpU6MFypzxYbs6F0oQfUZKkXg7W0hnOVMZctMsiCwGdCR6U9mF0ecIXx1xzpq0tP%2bQKYx5Oqjnffh9RdyAkyFdxJ%2b/8YUNv0l1cCI8k5XIjKPJd0Jf1T97KB7MogEq5HkIJiqjcMZ6TdhG03QBJS7bGxo3S8R7rx%2bniiE90mUSfS/c5OCEXSodxOkJoPgHnoAuxvRQPCys4KgdCRzsMOM2HMck%2bAInNDblTnHEgVHrA%2bRDaizFwchd9LtFl7U0qPeR4SdUPT72mIPV2YKrqWwq56qBexaT%2b886h7G2jUwbEw5SnGF2fCY7GxtbcFCeCF6H9GB3usuUhF%2bmwAYx2tmhiqW3AXN0AVDJDPtxm3E3qvMuVx4K1ttH7g9MBchF4hdDaKIRO9llACIB7LSj3seoD2FO9k0Zl5ap0eAABv%2b0lyHeDBJysc8gu5JRfJlnu/ZQ/LjyQ0dUPGfIxG2A5nlws2t0BuYDqajOakFBAgRZq94bj6XwwIcfknBeE3mAwms6I/pCiaEpQgU%2bASSoTDnLInJWLIw7Ip70QpowMfDXcSEDqjyQlQGH3h%2bMm2umPpgjeQYn%2bcgXajG6gneGIbPcGpQYKfVpYZ0wuOt3%2bYrUGfsgP2BjBFrSIZ0cbqTzmghid7rPYQgTC9iJUfy09gsra28X17t811NuQf/BXqqt8%2bWjq8H%2bVrvX7VAZbDwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"898\" alt=\"Any plans to improve the dotnet new templating engine? Lots of unfixed bugs. Lots of rough edges needing smoothing. A 'dotnet new ui' command to create projects using a visual editor would be cool\" data-srcset=\"/assets/static/Twitter.82a2fbd.408541812e2f58fc5f258faf7bf56ff3.png 480w, /assets/static/Twitter.473b6d1.408541812e2f58fc5f258faf7bf56ff3.png 898w\" data-sizes=\"(max-width: 898px) 100vw, 898px\" data-src=\"/assets/static/Twitter.473b6d1.408541812e2f58fc5f258faf7bf56ff3.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Twitter.473b6d1.408541812e2f58fc5f258faf7bf56ff3.png\" width=\"898\" alt=\"Any plans to improve the dotnet new templating engine? Lots of unfixed bugs. Lots of rough edges needing smoothing. A 'dotnet new ui' command to create projects using a visual editor would be cool\"></noscript></a></p>\n<h2 id=\"why-do-i-care\"><a href=\"#why-do-i-care\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why do I Care?</h2>\n<p>I author a <a href=\"https://github.com/Dotnet-Boxed/Templates/blob/master/Docs/API.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Swagger API</a>, <a href=\"https://github.com/Dotnet-Boxed/Templates/blob/master/Docs/GraphQL.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL API</a>, <a href=\"https://github.com/Dotnet-Boxed/Templates/blob/master/Docs/Orleans.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Microsoft Orleans</a> and <a href=\"https://github.com/Dotnet-Boxed/Templates/blob/master/Docs/NuGet.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NuGet</a> project templates in my <a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dotnet Boxed</a> project. The project currently has 1,900 stars on GitHub and the <a href=\"https://www.nuget.org/packages/Boxed.Templates/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boxed.Templates</a> NuGet package has around 12,149 downloads at the time of writing. The Dotnet Boxed templates are also some of the more complex templates using <code class=\"language-text\">dotnet new</code>. They all have a dozen or more optional features.</p>\n<h2 id=\"visual-studio-integration\"><a href=\"#visual-studio-integration\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Visual Studio Integration</h2>\n<p>In the past, I also authored the <a href=\"https://marketplace.visualstudio.com/items?itemName=RehanSaeed.ASPNETMVCBoilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASP.NET Core Boilerplate</a> project templates which are published as a Visual Studio extension. This extension currently has 159,307 installs which is an order of magnitude more than the 12,149 installs of my <code class=\"language-text\">dotnet new</code> based <code class=\"language-text\">Boxed.Templates</code> NuGet package.</p>\n<p>I have read in the <a href=\"https://github.com/dotnet/templating\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dotnet/templating</a> GitHub issues that there is eventually going to be Visual Studio integration in which you'd be able to search and install <code class=\"language-text\">dotnet new</code> based templates on NuGet, and then create projects from those templates much as you would with Visual Studio today. Given the download counts of my two projects, this would be the number one feature I'd like to see implemented.</p>\n<p>You could create a Visual Studio extension that wraps your <code class=\"language-text\">dotnet new</code> templates but having messed around with them in the past, it's a lot of effort. I'm in the template making business, not in the extension making business. Also, given the above rumour, I've held off going this route.</p>\n<h2 id=\"nugetvisual-studio-marketplace-integration\"><a href=\"#nugetvisual-studio-marketplace-integration\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NuGet/Visual Studio Marketplace Integration</h2>\n<p>Currently there is no way to search for a list of all <code class=\"language-text\">dotnet new</code> based project templates on NuGet or on the Visual Studio marketplace. There is <a href=\"https://github.com/dotnet/templating/wiki/Available-templates-for-dotnet-new\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this list</a> buried in the <a href=\"https://github.com/dotnet/templating\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dotnet/templating</a> GitHub project but the only people who are going to find that are template authors. It would be great if there was some kind of marketplace or store to find templates, rate them, provide feedback etc.</p>\n<h2 id=\"dotnet-new-ui\"><a href=\"#dotnet-new-ui\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>dotnet new ui</h2>\n<p>If you've seen the <a href=\"https://cli.vuejs.org/guide/creating-a-project.html#using-the-gui\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue CLI</a>, it has a magical UI for creating projects from it's template. This is the benchmark by which I now measure all project creation experiences. Just take a look at it's majesty:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 828' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-8a56eae0357b0e98a62e2139eace194c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-8a56eae0357b0e98a62e2139eace194c)' width='1024' height='828' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA0CAYAAAA62j4JAAAACXBIWXMAAAsSAAALEgHS3X78AAAL%2b0lEQVRo3u1ba2wc1RXOi8RZ5%2bHYsZ1E4UcFQmohzYOXgxT1F1JpKxJChaqCWlTVtCpVQoUw6Q9%2bVUL8qPr4UamFKj9oSotQICSQEGKTkPi961173%2b/Z98zszOx71%2bv17J6ec2fWj8SJ7ZCEVcpYn865j7lz73fPPffcnfGKFXg9vG/fiv%2bnCwCYvO%2b%2b%2b2YznzryOxIrD7/1VtOhnj8aDv7kD4Y3f/qm4dnDPzb86AdPGb534IBh3959ht279xi6uroMu3Z9F/Xdhr1796K%2by7Bnzx4mH37kEVb%2b%2bOOPGZ5%2b%2bmnD4cPPGg4ePGg4dOjQ14ZnnnnG8OKLPze8/PLL63fs2LGGBhqNRmcHbzSaVpMcGBn5vs9q9flsFpvXbbGbXWaHx%2bN2eH0%2bRyAQcIRCIYZgMOgIh8Ooh1la0zXJcRwrJ3i9Xrzfq0ldv7Pw6H3wOFwulxUl53A43qGxHj9%2bfPUMAZi4h%2bT5wcGXskYjiMOfQCJ4Ds74zoCUFMAW58AacIPFaAKr1QrYGJjNZrDbbBDw%2b8Fut4PH7YYxkwmQKCiXy5DJZCCZTGJdJ/h8XojHY3cOsboeZ4hhemBgAPtuA4vFYsShrnn%2b%2bRfWPvjggxoBb7zxxloUq0%2bePPlbWVEgFk9UEGo8FldlWVaVbFYV5IyaEBRVkNJqUsmpCTGFUFQ%2bmVLjgszSMV5i5UqmoMoIKZVTPf6Q6vZxajAcRyR0eXsRigpqKIL9j8cZkAA1EolU0uk0OJzOQRxry5NPPrm%2bpaVFI6Cnp2cdiqYzZ06/igMGRVHUbDZboxt8OMOinIVoLAGhcARsNjuMT1jB6XRBMBTG/BgyHAdBTEKCF1CKwAsixBMJEIQk3MmrpksR%2b6JkS%2bB0eSASCoErysF40KNWK9NkoWQB2w4cONC8cePGlYyAo6%2b8QgQY/vv%2b%2b6/li0WQUylVSaVqspKChICDktMQ5mXgogI4fRx4g1FwByLAxUSIJCQIx0UIJ5KYFlBKEBVkCLE8CaQMtpfVkZkj50BaKJ1duO6iwIHHRAV4mrR4AidDgGRKwTFIanmqAuiLTDjWHV379zdv2LBBI%2bDXR44yAt45caKHLxQhkJTUQDJZCyYl4CQZ6jIkKxBJpSCsaAihtVB%2bHfPSuh7A2fChZfixI9SOHy0E22Y6lc0%2bI8nSBE7CemhFhHreckD3U3v1PtAzgqKkJifLYHS6GAGPdnU1N19LwL97EjMESLUAdfIq%2bBfIWwyDNid8abbC58MmONc/AgNWB8sbsrvg8yEjXBqbgP4JO5N9RjP0joyx%2bo5IDAehLPt51%2bk3EjAFo66vSMA1DYs0kxr8Oq6u44zGcTBRmAiGGEi3hSLgQt9hDYaZPh7gmBzz%2bpluD0fBRxZwCwav9TPJLGDUeYsJCOcUCKXQ/NOIjCYDklYWRPMLp9IQoiWDSyeCTjWSzrBZrWO2PM1AdUiymZe0NoJsSSkLgsq%2bNgI4RYYvznJgNMXANBaD0VENPnSIIdxOnWjCH57vxRkN4kxrsz/uD%2bLaTrKOY6fAjDPujMbYrDMLQUkWwtrHAY44XDBotbO2qMziD4CNC2NdjrXrifNLJUFNlqfA6HJfS8CvjhxhBLz9rxM9sVwefMgWouYjB3Y94CD86GgGroRh3BmHsQkcvCkKRnMM3Lg70OyR6Z%2b9jAEIdtiOg6JBjmPHveQUsVPuBI9r0sPWOtWhMiKB6tIzAjgwKh9GEhxRrY6FkRDUyES40NNTWzfsK8IriCpfmkRCnYyAR%2bYScPTVVxkB733wQU%2bpWgM5j4FMvlBDwEJQCgUQlRyEuDTEedxuohmMBzIYQGmgfD6Zg1SpCFmMClO4tWooMciF2bYorRRmy1iatuKZcu1epTi/zkzdwsJ9vBpSPq9OYYzg5jhGwP4nnpjdBn9/7Bgj4JMzZ3r0WEKdE1fcLReNCUP7JCNgXiD0uk7A6dOnGQG1Wk2taRcsF9VqlYHpevpm2rnVwH4wAgRBuJaAY7eIgBuGqQ1CgCiKt48AAWOAUCSOZ4QoCLRFohP0%2bIKQwzVYJ%2bGWxPyNSsDk1BQUyPHl81Aqk16CLDopyq%2boKkxNT0PlK4LauJllddsJoPU%2bpU6DJyxCQslClrx0vsiQQb2AuwHD5KQuy7N5c/MXQR7rTavqsi3h9hOAs0IEDFoD4OR4ENNZCOOp0IcnyASeJotoBfklDnIxMAIacQlU6jODf9NIiFqrMssgSWUV7AORNFmpQHmZoHtKSCKhIQmgq4CRViqTg0yugH6AgAFMOsdAeiqThyLW0e13OV6PiZiSxjBbbFwLKOoEpLN5RgJJgozLoZ5fxLV/M56crqicAg53mob0AcvZ4u7aOCCLByna8/MY2xdxCyyh0yO9QLsAxvJl3Brv6kCIfkOk4CeEpztvIARJSWF6SA%2bIUpnsggHRciysYQmgi05tcRwkn81CIqOBz%2bZm0vEMnhZTaYgiUR4kxY1HXG8swdKUvxhCGF1GUykWDDWcD2BeGjvpxrM%2b/VbgZRDnQEvT2dyDdS6ZJ%2bDCyBhcHJuYyV8MdrIsrEtbYkM6QdqvixioUNAzD2Ud%2bj5emqpgPIAxAYsLVJYuzZRdH1osUAG1EUPhZR90qH4dy7ynYX1Akn7I5CLAhaOQEOhNEb0lSqJjTEAc9fRVTnAuaUsJtRv%2bNEjboIJ%2bIJXOoMywATNdRwYdYqWin%2brIlNH8p/VTXnUJBEvoLCWMBm%2bGhDtCAG15To8f/MEwuFCSNdD2Z7E52W8EDrcPTBYby6c0F9bqT9jdkEPyrjcwVY/8/vS34/Dnf55gehXzGo4AMlPqrKpWZ34ao7CVAqB6mhxYVV/L9bQ652e0G1kAhdr1s0RDWsDVaxoWWOPz9dqy1nXD%2b4BGxjcEfEPAMgnQ74SF0MgDvd7rHDampRJAbKFnrtU9NHn1pXrrrxvUx4o6jbvPfFSmK0snQMhmVU6SaxF6ZY3BR5ROcOk0%2b0KEDjz0kEazhGqtqv9qxEO/ywRDHjMMIoY8Fk13jzECZElanAA8wqrjwVCtb9QMJq%2bffcXROzoG/VYHEqLc1GHkDqxxRkBQjMIl%2bzBYgk4Y8U7QwMHot0KfdXDpBMTTGdWd4Gv0mtod59mXG/Rqml53kxXcTguAJWDhezUCOCSgzzrArOCyYwQuOYZRjsIXtjoB8gIvR19/nRFw6tSp16gSHlGn8%2bVytTRdqeIRtlpAYPPVUqXCgA%2bsYlcYQEeNRafqTLpKk0L1EGie2lWrK7peL6cka6NWxciRtUOYq1%2bTN9sS01W9zfxksSpmZIZUMVeV82kGKZua1n2A8RoCfnOUfSa3/j8fnTp2ZcwMFjT7aDoHXFLBGU%2bDWCjCuYuXwIfWEBD074EE%2bvpLBE%2bMZ5IgYD2LxwsWH54HhAQulzT7SiuKByEC8ycoY3hICskpBk5SMC%2brfTWSlCGJoa5YLN0QfL4AcTxYUTsESifwLEF5Qr4IfK4AUqkMY04X%2bBMiLgsZLUMGvlACk8s9QQQ8/NjjzRvqBDz3wgv0pWjzX/7x9kt/f/dd8eT5C7GLJgv/2cAwf2HYyA/a7Pxf336HP3v5Cn8e884PIgaGGD5DnL0ywHSq9%2bFn5/mPevv43pEh/sLQKH8Oy74YNfEXjWOYHuF7h0f5Syaz1g7d3z/I940Y%2bU%2b/7Ed9iB92OPghbOd6GLY7%2bIEJK//lmIW1Q%2bgfn%2bCvWMb5y2YLk5RHdd479TG2OcB/ermfnhvvHTEqp/sufoxj3f7th3Y1r2tq0ghYuWoVfThM341%2b56Hdu3%2b4896dP2tra/1le/vW7q1b27o3b97cff8DD3R3dHR0t3e0zwPldXZ2Mrm5paW7c/v27s5t27rb2tq72/DerdhGa1trd2trK0uTvqV1C%2bpbGVg5lrG229u7N23a3L1p841Bz9myZQtrZwveS%2bkWTGtomcnbee%2b92MeO7o7ODnxO%2by927tz53MZNG/cTAWvWrFk39xP6VeQDyDSIBMSjiCfuMnQh9iC%2btWrVKprsNTOjRzZIrEZpwKsVTaNz3bp12%2b8uNG1bv359e1NT0yYc69qVeC30zxSrdGbo8/m1dxnu0UHLfeWKby7t%2bh%2bh3cVRELt2TAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1024\" alt=\"Vue CLI Create a New Project\" data-srcset=\"/assets/static/Vue-CLI-Create-a-New-Project-1024x828.82a2fbd.3fb21dbdb19fdff530b8cb09c90300b5.png 480w, /assets/static/Vue-CLI-Create-a-New-Project-1024x828.cbab2cf.3fb21dbdb19fdff530b8cb09c90300b5.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/Vue-CLI-Create-a-New-Project-1024x828.cbab2cf.3fb21dbdb19fdff530b8cb09c90300b5.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Vue-CLI-Create-a-New-Project-1024x828.cbab2cf.3fb21dbdb19fdff530b8cb09c90300b5.png\" width=\"1024\" alt=\"Vue CLI Create a New Project\"></noscript></p>\n<p>Imagine executing <code class=\"language-text\">dotnet new ui</code>, then seeing a nice browser dialogue popup like the one above where you could find, install and even create projects from templates. Creating a project would involve entering the name of your project, the directory where you want it to be saved and then toggling any custom options that the project template might offer.</p>\n<p>That last bit is where having a UI shines. There aren't many <code class=\"language-text\">dotnet new</code> templates that use the templating engine to it's full potential and have additional optional features. When you use the current command line experience it's unwieldy and slow to set custom options. Having a custom UI with some check boxes and drop downs would be a far quicker and more delightful experience.</p>\n<h2 id=\"missing-features\"><a href=\"#missing-features\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Missing Features</h2>\n<p>There are a bunch of cool missing or half implemented features in the <code class=\"language-text\">dotnet new</code> templating engine that could use finishing. Chief among these are called post actions. These are a set of custom actions that can be performed once your project has been created.</p>\n<p>As far as I can work out, the only post action that works is the one that restores all NuGet packages in your project. This was implemented because the basic Microsoft project templates wanted to use them but I understand that they no longer do for reasons unknown to me. Happily I still use this one and it works nicely.</p>\n<p>Other post actions that are half implemented (They exist and you can use them but they just print content to the console) are for opening files in the editor, opening files or links in the web browser or even running arbitrary scripts. The last one has the potential for being a security risk however, so it would be better to have a health list of post actions for specific tasks. I'd love to be able to open the ReadMe.md file that ships with my project template.</p>\n<p>In terms of new post actions, I'd really like to see one that removes and sorts using statements. I have a lot of optional pieces of code in my project templates, so I have to have a lot of <code class=\"language-text\">#if</code> <code class=\"language-text\">#endif</code> code to tell the templating engine which lines of code to remove. It's particularly easy to get this wrong with using statements, leaving you with a fresh project that doesn't compile because you've removed one too many using statements by accident. To avoid this, I created my own unit testing framework for <code class=\"language-text\">dotnet new</code> projects called <a href=\"https://github.com/Dotnet-Boxed/Framework#boxeddotnetnewtest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boxed.DotnetNewTest</a>.</p>\n<h2 id=\"docs-docs--docs\"><a href=\"#docs-docs--docs\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docs, Docs &#x26; Docs</h2>\n<p>There is <a href=\"https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">one page of documentation</a> on how to create project templates in the official docs page. There is a bunch more in the <a href=\"https://github.com/dotnet/templating/wiki\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dotnet/templating wiki</a> and some crucial bits of information in comments of GitHub issues. In particular, there is precious little information about how to conditionally remove code or files based on options the user selects. There is also very little about post actions. It would be great if this could be tidied up.</p>\n<p>Secondary to the docs is the <a href=\"https://github.com/dotnet/templating/issues\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub issues</a> . There are currently 168 open issues with a large number having only one comment from the original author. Given the lack of documentation, having questions answered is really important.</p>\n<h2 id=\"fixing-bugs\"><a href=\"#fixing-bugs\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fixing Bugs</h2>\n<p>The latest version of the <code class=\"language-text\">dotnet</code> CLI has fixed some bugs but there are still a few that really get in the way of a great experience:</p>\n<ul>\n<li><a href=\"https://github.com/dotnet/templating/issues/1544\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">#1544</a>/<a href=\"https://github.com/dotnet/templating/issues/348\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">#348</a> - Running <code class=\"language-text\">dotnet new foo --help</code> outputs some pretty terrible looking text if you have any custom options.</li>\n<li><a href=\"https://github.com/dotnet/templating/issues/2208\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">#2208</a> - You cannot conditionally remove text from a file if it has no file extension, so that means <code class=\"language-text\">Dockerfile</code>, <code class=\"language-text\">.gitignore</code>, <code class=\"language-text\">.editorconfig</code> files.</li>\n<li><a href=\"https://github.com/dotnet/templating/issues/2209\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">#2209</a> - Complex conditionals fail if not wrapped in parentheses. I always forget to do this. There is no warnings, your template won't work.</li>\n<li><a href=\"https://github.com/dotnet/templating/issues/1438\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">#1438</a> - Using conditional code in <code class=\"language-text\">.csproj</code> files requires some workarounds to work.</li>\n</ul>\n<h2 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusions</h2>\n<p>The Vue CLI has really shown how great a new project creation experience can be. With a bit of work, the <code class=\"language-text\">dotnet new</code> experience could be just as great.</p>\n"}},{"node":{"title":"Unit Testing dotnet new Templates","path":"/unit-testing-dotnet-new-templates/","date":"21 August 2019","timeToRead":3,"description":"It's difficult to know if your 'dotnet new' based project will work if they have lots of options, in this post I show how to unit test them.","content":"<ul>\n<li><a href=\"/custom-project-templates-using-dotnet-new/\">Part 1 - Custom Project Templates Using dotnet new</a></li>\n<li><a href=\"/dotnet-new-feature-selection/\">Part 2 - dotnet new Feature Selection</a></li>\n<li><a href=\"/unit-testing-dotnet-new-templates/\">Part 3 - Unit Testing dotnet new Templates</a></li>\n</ul>\n<p>As I talked about in my previous post some time ago about <code class=\"language-text\">dotnet new</code> project templates, it's possible to enable feature selection, so that developers can toggle certain features of a project template on or off. This is not a feature that many templates in the wild use a lot. Quite often I've seen templates have no optional features or only a few. One reason is that it gets very complicated to test that toggling your optional features doesn't break the generated project in some way by stopping it from building for example. This is why I decided to write a small unit test helper library for <code class=\"language-text\">dotnet new</code> project templates. It is unit test framework agnostic and can work with xUnit, NUnit, MSTest or any other unit test framework.</p>\n<h2 id=\"example-usage\"><a href=\"#example-usage\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example Usage</h2>\n<p>Below is an example showing how you can use it inside an xUnit test project.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApiTemplateTest</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ApiTemplateTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> DotnetNew<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Install</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ApiTemplateTest</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApiTemplate.sln\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">Theory</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">InlineData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StatusEndpointOn\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"status-endpoint=true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">InlineData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StatusEndpointOff\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"status-endpoint=false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token class-name\">Task</span> <span class=\"token function\">RestoreAndBuild_CustomArguments_IsSuccessful</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">params</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arguments<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> tempDirectory <span class=\"token operator\">=</span> TempDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">NewTempDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> dictionary <span class=\"token operator\">=</span> arguments\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">,</span> StringSplitOptions<span class=\"token punctuation\">.</span>RemoveEmptyEntries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">ToDictionary</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">Last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> project <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> tempDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetNew</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"api\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> dictionary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> project<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetRestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> project<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">Fact</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token class-name\">Task</span> <span class=\"token function\">Run_DefaultArguments_IsSuccessful</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> tempDirectory <span class=\"token operator\">=</span> TempDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">NewTempDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> project <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> tempDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetNew</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"api\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DefaultArguments\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> project<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetRestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> project<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> project<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetRun</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">@\"Source\\DefaultArguments\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>httpClient<span class=\"token punctuation\">,</span> httpsClient<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">var</span> httpResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpsClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>HttpStatusCode<span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">,</span> httpResponse<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first thing it does in the constructor is install the <code class=\"language-text\">dotnet new</code> project templates in your solution. It needs to know the name of the solution file. It then walks the sub-directory tree below your solution file and installs all project templates for you.</p>\n<p>If we then look at the first unit test, we first need a temporary directory, where we can create a project from our <code class=\"language-text\">dotnet new</code> project template. We will generate a project from the template in this directory and then delete the directory at the end of the test. We then run <code class=\"language-text\">dotnet new</code> with the name of a project template, the name we want to give to the generated project and any custom arguments that particular project template supports. Using xUnit, I've parametrised the arguments, so we can run multiple tests while tweaking the arguments for each test. Running <code class=\"language-text\">dotnet new</code> returns a project which contains some metadata about the project that we've just created and we can also use it to further <code class=\"language-text\">dotnet</code> commands against.</p>\n<p>Finally, we run <code class=\"language-text\">dotnet restore</code> and <code class=\"language-text\">dotnet build</code> against the project. So this test ensures that toggling the <code class=\"language-text\">StatusEndpointOn</code> option on our project template doesn't stop the generated project from restoring NuGet packages or building successfully.</p>\n<p>The second unit test method is where it gets really cool. If the project template is an ASP.NET Core project, we can use <code class=\"language-text\">dotnet run</code> to start the project listening on some random free ports on the machine. The unit test framework then gives you two <code class=\"language-text\">HttpClient</code>'s (One for HTTP and one for HTTPS) with which to call your newly generated project. In summary, not only can you test that the generated projects build, you can test that the features in your generated project work as they should.</p>\n<p>This API is pretty similar to the ASP.NET Core <code class=\"language-text\">TestHost</code> API that also gives you a <code class=\"language-text\">HttpClient</code> to test the API with. The difference is that this framework is actually running the app using the <code class=\"language-text\">dotnet run</code> command. I have experimented with using the <code class=\"language-text\">TestHost</code> API to run the generated project in memory, so it could be run a bit faster but the .NET Core API's for dynamically loading DLL files needs some work which .NET Core 3.0 might solve.</p>\n<h2 id=\"where-to-get-it\"><a href=\"#where-to-get-it\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Where To Get It?</h2>\n<p>You can download the <a href=\"https://www.nuget.org/packages/Boxed.DotnetNewTest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boxed.DotnetNewTest</a> NuGet package or see the <a href=\"https://github.com/Dotnet-Boxed/Framework#boxeddotnetnewtest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a> on GitHub.</p>\n"}},{"node":{"title":"dotnet new Feature Selection","path":"/dotnet-new-feature-selection/","date":"26 March 2017","timeToRead":9,"description":"How to add feature selection to your dotnet new template using symbols (bool, string, choice, computed) and pre-processor directives.","content":"<ul>\n<li><a href=\"/custom-project-templates-using-dotnet-new/\">Part 1 - Custom Project Templates Using dotnet new</a></li>\n<li><a href=\"/dotnet-new-feature-selection/\">Part 2 - dotnet new Feature Selection</a></li>\n<li><a href=\"/unit-testing-dotnet-new-templates/\">Part 3 - Unit Testing dotnet new Templates</a></li>\n</ul>\n<p>In my last post I showed how to <a href=\"/custom-project-templates-using-dotnet-new/\">get started</a> with using <code class=\"language-text\">dotnet new</code> to build project templates. In this post, I'm going to build on that knowledge and show how to add feature selection to your project template so developers can choose to add or remove bits of your template. If you check out my <a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed API</a> project template, you'll see that I have 17 features for you to set. If you run the help command against my template you'll see a description of each and instructions on how you can set them (I've cleaned up the CLI output, the current help commands output is pretty awful but this is being <a href=\"https://github.com/dotnet/templating/issues/348\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">addressed</a> in the next version of <code class=\"language-text\">dotnet new</code>).</p>\n<div class=\"line-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PS C:\\Users\\rehan.saeed&gt; dotnet new api --help\nTemplate Instantiation Commands for .NET Core CLI.\n\nUsage: dotnet new [arguments] [options]\n\nArguments:\n  template  The template to instantiate.\n\nOptions:\n  -l|--list         List templates containing the specified name.\n  -lang|--language  Specifies the language of the template to create\n  -n|--name         The name for the output being created. If no name is specified, the name of the current directory is\nused.\n  -o|--output       Location to place the generated output.\n  -h|--help         Displays help for this command.\n  -all|--show-all   Shows all templates\n\n.NET Boxed API (C#)\nAuthor: Muhammad Rehan Saeed (RehanSaeed.com)\nOptions:\n  -Ti|--Title: The name of the project which determines the assembly product name. If the Swagger feature is enabled,\n    shows the title on the Swagger UI.\n    string - Optional\n    Default: Project Title\n  -D|--Description: A description of the project which determines the assembly description. If the Swagger feature is\n    enabled, shows the description on the Swagger UI.\n    string - Optional\n    Default: Project Description\n  -Au|--Author: The name of the author of the project which determines the assembly author, company and copyright\n    information.\n    string - Optional\n    Default: Project Author\n  -Sw|--Swagger: Swagger is a format for describing the endpoints in your API. Swashbuckle is used to generate a\n    Swagger document and to generate beautiful API documentation, including a UI to explore and test operations,\n    directly from your routes, controllers and models.\n    bool - Optional\n    Default: true\n  -T|--TargetFramework: Decide which version of the .NET Framework to target.\n    .NET Core         - Run cross platform (on Windows, Mac and Linux). The framework is made up of NuGet packages\n                        which can be shipped with the application so it is fully stand-alone.\n    .NET Framework    - Gives you access to the full breadth of libraries available in .NET instead of the subset\n                        available in .NET Core but requires it to be pre-installed.\n    Both              - Target both .NET Core and .NET Framework.\n    Default: Both\n  -P|--PrimaryWebServer: The primary web server you want to use to host the site.\n    Kestrel        - A web server for ASP.NET Core that is not intended to be internet facing as it has not been\n                     security tested. IIS or NGINX should be placed in front as reverse proxy web servers.\n    WebListener    - A Windows only web server. It gives you the option to take advantage of Windows specific\n                     features, like Windows authentication, port sharing, HTTPS with SNI, HTTP/2 over TLS\n                     (Windows 10), direct file transmission, and response caching WebSockets (Windows 8).\n    Default: Kestrel\n  -Re|--ReverseProxyWebServer: The internet facing reverse proxy web server you want to use in front ofthe primary\n    web server to host the site.\n    Internet Information Services (IIS) - A flexible, secure and manageable Web server for hosting anything on the\n                                          Web using Windows Server. Select this option if you are deploying your site\n                                          to Azure web apps. IIS is preconfigured to set request limits for security.\n    NGINX                               - A free, open-source, cross-platform high-performance HTTP server and\n                                          reverse proxy, as well as an IMAP/POP3 proxy server. It does have a Windows\n                                          version but its not very fast and IIS is better on that platform. If the\n                                          HTTPS Everywhere feature is enabled, NGINX is pre-configured to enable the\n                                          most secure TLS protocols and ciphers for security and to enable HTTP 2.0\n                                          and SSL stapling for performance.\n    Both                                - Support both reverse proxy web servers.\n    Default: Both\n  -C|--CloudProvider: Select which cloud provider you are using if any, to add cloud specific features.\n    Azure    - The Microsoft Azure cloud. Adds logging features that let you see logs in the Azure portal.\n    None     - No cloud provider is being used.\n    Default: None\n  -A|--Analytics: Monitor internal information about how your application is running, as well as external user\n    information.\n    Application Insights    - Monitor internal information about how your application is running, as well as\n                              external user information using the Microsoft Azure cloud.\n    None                    - Not using any analytics.\n    Default: None\n  -Ap|--ApplicationInsightsInstrumentationKey: Your Application Insights instrumentation key\n    e.g. 11111111-2222-3333-4444-555555555555.\n    string - Optional\n    Default: APPLICATION-INSIGHTS-INSTRUMENTATION-KEY\n  -H|--HttpsEverywhere: Use the HTTPS scheme and TLS security across the entire site, redirects HTTP to HTTPS and\n    adds a Strict Transport Security (HSTS) HTTP header with preloading enabled. Configures the primary and reverse\n    proxy web servers for best security and adds a development certificate file for use in your development environment.\n    bool - Optional\n    Default: true\n  -Pu|--PublicKeyPinning: Adds the Public-Key-Pins (HPKP) HTTP header to responses. It stops man-in-the-middle\n    attacks by telling browsers exactly which TLS certificate you expect. You must have two TLS certificates for this\n    to work, if you get this wrong you will have performed a denial of service attack on yourself.\n    bool - Optional\n    Default: false\n  -CO|--CORS: Browser security prevents a web page from making AJAX requests to another domain. This restriction is\n    called the same-origin policy, and prevents a malicious site from reading sensitive data from another site.\n    CORS is a W3C standard that allows a server to relax the same-origin policy. Using CORS, a server can explicitly\n    allow some cross-origin requests while rejecting others.\n    bool - Optional\n    Default: true\n  -X|--XmlFormatter: Choose whether to use the XML input/output formatter and which serializer to use.\n    DataContractSerializer - The default XML serializer you should use. Requires the use of [DataContract] and\n                             [DataMember] attributes.\n    XmlSerializer          - The alternative XML serializer which is slower but gives more control. Uses the\n                             [XmlRoot], [XmlElement] and [XmlAttribute] attributes.\n    None                   - No XML formatter.\n    Default: None\n  -S|--StatusController: An endpoint that returns the status of this API and its dependencies, giving an indication\n    of its health. This endpoint can be called by site monitoring tools which ping the site or by load balancers\n    which can remove an instance of this API if it is not functioning correctly.\n    bool - Optional\n    Default: true\n  -R|--RequestId: Require that all requests send the X-Request-ID HTTP header containing a GUID. This is useful where\n    you have access to the client and server logs and want to correlate a request and response between the two.\n    bool - Optional\n    Default: false\n  -U|--UserAgent: Require that all requests send the User-Agent HTTP header containing the application name and\n    version of the caller.\n    bool - Optional\n    Default: false\n  -Ro|--RobotsTxt: Adds a robots.txt file to tell search engines not to index this site.\n    bool - Optional\n    Default: true\n  -Hu|--HumansTxt: Adds a humans.txt file where you can tell the world who wrote the application. This file is a good\n    place to thank your developers.\n    bool - Optional\n    Default: true</code></pre></div>\n<p>As you can see from the output, there are a few different types of feature you can create. You can also choose to make a feature required or optional. An optional feature, if not specified by the user will fall-back to a default value. Here are the different types available:</p>\n<ul>\n<li><strong>bool</strong> - This feature can be turned on or off and has a default of true or false.</li>\n<li><strong>string</strong> - This can be used to do a string replacement in your template. It has a default value which you can set to any arbitrary value.</li>\n<li><strong>choice</strong> - This is a feature with two or more named choices. Each choice can have it's own description. The default value must be one of the choices.</li>\n<li><strong>computed</strong> - These are features flags that can be computed based on other symbols.</li>\n</ul>\n<h1 id=\"bool-symbols\"><a href=\"#bool-symbols\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bool Symbols</h1>\n<p>You can create a boolean feature by adding symbols section to your <code class=\"language-text\">template.json</code> file. If you look at the example below, I've specified an optional bool symbol, with a default value of true.</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"symbols\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Swagger\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parameter\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"datatype\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bool\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"isRequired\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"defaultValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In your code, you can then use the symbol name, in this case <code class=\"language-text\">Swagger</code> as a pre-processor directive in C# code:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> (Swagger)</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Swagger feature was selected\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">else</span></span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Swagger feature was not selected\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p>This is really cool because you can still run the application as a template author and the project will still work. If you define a <code class=\"language-text\">Swagger</code> constant in your project properties, your feature will turn on or off too. This makes debugging your project template very easy as a template author.</p>\n<p>If you want to use the symbol in files other than C# where pre-processor directives do not exist, you can use the comment syntax specific to that file extension, so in a JavaScript file would use the <code class=\"language-text\">//</code> syntax:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">//#if (Swagger)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Swagger feature was selected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//#else</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Swagger feature was not selected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//#endif</span></code></pre></div>\n<p>Most file extensions that have their own comment syntax have been catered for. For text files where there is no comment syntax or for any file extension that the templating engine doesn't know about you can use the <code class=\"language-text\">#</code> character:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> (Swagger)</span>\n<span class=\"token class-name\">Swagger</span> feature was selected\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">else</span></span>\n<span class=\"token class-name\">Swagger</span> feature was not selected\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p>You can look at <a href=\"https://github.com/dotnet/templating/blob/cb9edbfe02c038a306fbcb6bbe162462d5fb59f0/src/Microsoft.TemplateEngine.Orchestrator.RunnableProjects/Config/ConditionalConfig.cs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> code in the templating engine for a full list of supported file extensions and comment types.</p>\n<h1 id=\"string-symbols\"><a href=\"#string-symbols\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String Symbols</h1>\n<p>String symbols can be used to do simple file replace operations.</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"symbols\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Title\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parameter\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"datatype\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"isRequired\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"defaultValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Default Project Title\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"replaces\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PROJECT-TITLE\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above symbol looks for a <code class=\"language-text\">PROJECT-TITLE</code> string and replaces it with whatever the user specifies or with the default value <code class=\"language-text\">Default Project Title</code> if the user doesn't set anything.</p>\n<h1 id=\"choice-symbols\"><a href=\"#choice-symbols\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Choice Symbols</h1>\n<p>A choice symbol is useful when you have more than two options and can't use bool.</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"symbols\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"TargetFramework\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parameter\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"datatype\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"choice\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"isRequired\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"choices\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"choice\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".NET Core\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"choice\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".NET Framework\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"choice\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Both\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"defaultValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Both\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the example above, you have the choice of selecting a target framework, with a value of <code class=\"language-text\">.NET Core</code>, <code class=\"language-text\">.NET Framework</code> or <code class=\"language-text\">Both</code>. Each choice has it's own description and the overall symbol also has it's description.</p>\n<h1 id=\"computed-symbols\"><a href=\"#computed-symbols\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Computed Symbols</h1>\n<p>In the above example, you can't use the value '.NET Core' as a C# pre-processor variable because it contains a dot and a space. This is where a computed symbol comes in handy.</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"symbols\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"NETCore\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"computed\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(TargetFramework == \\\".NET Core\\\" || TargetFramework == \\\"Both\\\")\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"NETFramework\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"computed\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(TargetFramework == \\\".NET Framework\\\" || TargetFramework == \\\"Both\\\")\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here I have set up two computed symbols which determines whether '.NET Core' or '.NET Framework' was selected individually in the previous choice symbol. I have named these symbols without a dot or space i.e. <code class=\"language-text\">NETCore</code> and <code class=\"language-text\">NETFramework</code> so I can use these as C# pre-processor symbols, the same way I showed above.</p>\n<h1 id=\"conditionally-deleting-files-or-folders\"><a href=\"#conditionally-deleting-files-or-folders\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conditionally Deleting Files or Folders</h1>\n<p>You can also use symbols to delete certain files or folders. In this example, I've extended my bool symbol example to additionally remove two files and a folder if the feature is deselected by the user.</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"symbols\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Swagger\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parameter\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"datatype\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bool\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"isRequired\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"defaultValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your description...\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sources\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"modifiers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"condition\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(!Swagger)\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"Constants/HomeControllerRoute.cs\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Controllers/HomeController.cs\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"ViewModelSchemaFilters/**/*\"</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You do this by adding source modifiers. I've added one here with a condition and three file and folder exclusions. The exclusions use a globbing pattern.</p>\n<h1 id=\"whats-next\"><a href=\"#whats-next\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What's Next?</h1>\n<p>There are several other useful features of the templating engine which I'll cover in a follow up post as this is starting to get quite long. Feel free to take a look at the <a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a> for my API template to see a full example.</p>\n"}},{"node":{"title":"Custom Project Templates Using dotnet new","path":"/custom-project-templates-using-dotnet-new/","date":"18 January 2017","timeToRead":4,"description":"How to create project templates using dotnet new and the template.json file. How to share project templates by creating NuGet packages.","content":"<ul>\n<li><a href=\"/custom-project-templates-using-dotnet-new/\">Part 1 - Custom Project Templates Using dotnet new</a></li>\n<li><a href=\"/dotnet-new-feature-selection/\">Part 2 - dotnet new Feature Selection</a></li>\n<li><a href=\"/unit-testing-dotnet-new-templates/\">Part 3 - Unit Testing dotnet new Templates</a></li>\n</ul>\n<h1 id=\"current-dotnet-new\"><a href=\"#current-dotnet-new\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Current dotnet new</h1>\n<p>If you run <code class=\"language-text\">dotnet new</code> today, you can create a simple console app. The command has very few options, including selecting the language you want to use (C#, VB or F#). However, this is all about to change. <a href=\"https://twitter.com/sayedihashimi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sayed I. Hashimi</a> and <a href=\"https://twitter.com/mlorbetske\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mike Lorbetske</a> who work at Microsoft in the .NET tooling team have been kind enough to show me what they've been working on with the intention of getting some feedback.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 979 293' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3870cab3c250ac6abdf641e228595435'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3870cab3c250ac6abdf641e228595435)' width='979' height='293' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAATCAIAAACvEZzQAAAACXBIWXMAAAsSAAALEgHS3X78AAADMUlEQVRIx9VW2U4UURDtbXrf93W6p3t2FgX9Co1/aow/YHzwRRNR3BACCm7sDANiRE3U0wMawcRoTGagUnO7um%2bmc0/VOVVN3HmyfOvOvdXewbvtffjrjd7yux0Ea72D/c/f9j6dFe99%2bIK1f/h16c0G1t2PX9e2%2bgubhwROf/PG9ZWXL5/MPno8Ozs/92z%2b6dzD%2bzMvFhcP3u/v9XfxO/ajuN8/8WQojmNsbqyXwW7vxdIi1t3ezsbq2/X9z0Rj4tJYt5PnRaPZLL3RqNdxbeZ5Xq1WsyxN0yzNjq28Ka2WDqw2RMuL4ijACYui8IPg2tUrM/MrhOyEAsc5tm0YhiRJmm74nsMLgqpqge97peGBY1umKEme57IVhmaYKIot0yRJkhiFURSFtdtu3rr7iIjrY/Uix1lbrVY1reW1WrvdLoq6YzuyJAOSKMJLq1QqsiyzLK4VCVuiSNM0NQpjGAYALkyMP1h4RdCSyZSASJZlkVDsURQ9iEeT3b%2bvwMXJ8YU324SfNeMoCAKf5YQkjlwXbLEU8Mdzke%2b0WsWebdsgE1D9fAU5sJEDeP56kxAM39R1UIWiGUPXFUURRIHjBVVROI63bYBRgERTVTDn59FP2SgBhHkHJzRNU9e0/3zv0MCcAOCmjSgMkiQOw9B2HFWWfv8D2IU%2bJIkSSgGooiigWZnmkZuapkPiI6sAwSqSwBumwfE8%2bmtey9BndF13Hcey7DAMcMuLMjZqeZ7EMaaE5zpBGFXjpMiLbrcTJ0kA8JbhBYH232X8ZwCUaID3YejrhoHuCQjIa6c7Pj01BQUDAMexkESjqLfanWazlSaJ7/tRFGHMYU5YlsnzPEQP7TuuB%2bRDrwCvMjQtCDwaqOu4mqpUKoyiQsMKuvwxuSkKvcg0DKGcCTKGmuv5GHzsQNYj7kKi5XODwaSUbYdDoJYYKojBBzQf6o%2b6PK3a4YvYjDJDU6Fg1/OgSKzVJNZ1AwF4kqX4HMp%2b7Z6n4tFXABQ6Sh1xfuykiCV9wHKaJKlBWqkffhyXrDhjTtF0%2bS00OTEHAKRwjiuw%2bHaLoPSI5ESSV0hePi9Oi0g6PTF9%2bfbs0nfGqubrMqWV7gAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"979\" alt=\"old dotnet new\" data-srcset=\"/assets/static/first-dotnet-new.82a2fbd.fed45560bc11eca2085417cc08555458.png 480w, /assets/static/first-dotnet-new.a6c2149.fed45560bc11eca2085417cc08555458.png 979w\" data-sizes=\"(max-width: 979px) 100vw, 979px\" data-src=\"/assets/static/first-dotnet-new.a6c2149.fed45560bc11eca2085417cc08555458.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/first-dotnet-new.a6c2149.fed45560bc11eca2085417cc08555458.png\" width=\"979\" alt=\"old dotnet new\"></noscript></p>\n<h1 id=\"dotnet-new3\"><a href=\"#dotnet-new3\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>dotnet new3</h1>\n<p>Microsoft is working on a new version of the <code class=\"language-text\">dotnet new</code> command with support for installing custom project templates from NuGet packages, zip files or folders. If you head over to the <a href=\"https://github.com/dotnet/templating\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dotnet/templating</a> GitHub repository you can follow the very simple instructions and try out a fairly complete version of this command which is temporarily called <code class=\"language-text\">dotnet new3</code>. The full <code class=\"language-text\">dotnet new</code> experience is due to be released in conjunction with Visual Studio 2017.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1103 639' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-24c05d14a9ac8f9f325d8224cd05d305'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-24c05d14a9ac8f9f325d8224cd05d305)' width='1103' height='639' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAlCAIAAAB9MnhgAAAACXBIWXMAAAsSAAALEgHS3X78AAAJ2klEQVRYw82YaY8U1xWGu3pfqnqpvWuvrl6nZ4AEKQY5DAxEiZ1PjlicweMg5x8kyt9JlD8TRcouRcqHJMYSZjNmMSMDHgRJnls103Q3hAEnYI6a5lZ1zb33Pec97zm3cn/657Xf/vGvV29tX7u9feXm9qc37ly6cZtLxrfu7dz96vEXDx59459bX%2b5kgys37964e39751%2bfbz/47Pb2x7ce5n7z%2bz//%2ble/vH3r5tXLl7BPLl68cf3q9atXLl68uLPz1b/fDHv8%2bFE2eHD/3sOdHQYPsQf3Pr/3KPfe%2b1vnzp7ZPP/BRz/96MKFC5ubm1sf/uTDra0PtrbOnj13%2bszZ8%2bc3f7y5eeb06XfefffcuffPnjl97Nj6xsbGcWEnsPX1db6zi42Nk6/ic/LUqd1BaqdOfe/IkaO/%2bPnPPvnsbk7RnVZTUTuqbVu1el2WZd0wu7bZSc20bUVuNFst27YbDdm0zHqjLklSLperlEvValXK5wvFYk6SisVCoVjIvRYrFMRCbx996w9/%2bzjnD1cno6GXGrv0PB%2bL4zCMIoZBGHRty/OD6draeDwKA1/VtH6/r%2bl6r8dDvtJsdrtOs9nUdV3V1Dx4Xr2Vy2UArH/37b/8/VIuGE6TXuy4Lr6PohgMbWGtIAhb7Va70wl9L0n6XcfRNE3ttDuqBi7TsnjSNI0sGq/ZsgicPHH82t2dXDRaG/TZ4SBJeqZp8kM%2bNbEzacHETxKUyTPgIruz9NDrBbB%2b%2bfb9XKHWdBxnMBzGUdRLkmql0lF1uNFR1dFoFEVRv58AzDAMnA%2b7iAw3iRiAdV1LAS8AyP6bv3x1AK7cuZ8brH7bdZ0wjuD6rnclibxkXCqVeHTRteng5V3%2b/43OAgBZQ4WaSJCiKKRjq9Waf7RcqUB8VIhkcF3XFtTv8mS1ViMlLMtUNd3udtMZ7FZqCBrh4kFNVUnxMAwUWd4H3rMAvyiAXFmuVWuwqNu1SdDUkBM2YVYqlYasRGEAhWzHRXYMXesPBu12ByRBEERRCGa2LpTK89LEtpMk8VwHNSPRmUpM7DgoMuR8JRHIVQBQDcKw14tgOXuF377vRXGvXqu2OtpkPGJnrudbpsmGyAFNN9h9GIbT6bQ/6KuqAE5iiB3rWjIYDAf9MIqpGyDpdNqEqNdLurZdLpcqVWGNRl1RZMSOqlIslTrtdrVaqdcbxLZcrsiNRrPZqtfrpVK5wSyyzD/%2bqtVqcskzchrSH77zfZHE%2bVqr02rhdvwd93r4coFC1RoL1xsNftI1NSMJdNINg1m63a7retygCHiuC05uAgavm6ZFaWMxogkDwQzCpqK02m1iixgQZCIDLWEj8VcFTocgw8Z2q6lpumVZwMBrtu0gIkzCtASb%2b3gEhp3%2b0Xuf3rqXk9VuEPhMMaPdQuLOCUt2NS8vWdLvsTY3u5x/7JXK6C6F5EadHgG4BLrX6wGmkNWBXE5ptgPPgU5%2bWoMNQ4djRIPLZlNJ%2bn1dN2LxJy4RgFYkkmnZKO9gOGoqjVk6Sk9ZblFql2Rtb/zsx2aFTACQqorabkMhUhP2sr95z1ENPM%2bloyApyRACShWAu0S/Xq2Kyt3tkqC9pD%2bdTkgLULEQCxQR4rlSuCypT91/qYgtqVCjUi5DSlVVZUVBZAzd0ASP3RSAPh4NCQt3SFxyFNdStsET%2bB4JWhRNXAEek3MkKJevsxILAIbf8z1XqEoUkqDso6mIZMfEo8WSLJJexqf8xP5QBWLFmNtUuv%2b2RodwWTbqQeqDNpsN4080QUXhIy0t5FkAuCN6QenlAbQtrysauA6ZTgT2LajLZEizJb9nM2bQn8JG5Iso4R2kLytYaB17RXxgJgmTtV58g8ZxnSUAYuY5vuX3LrM471Vi1aKzx0P1lAYIH0IGlYkGN2EXS1KDyqnxH%2bOK%2bH/3fim1cqmUPTE/RrmZs1FvZGlXTn%2bq1WpyKuqlYpFlxC3xfIX1M8kn/qgtFwzStXanLc0tUUlr4i6AcLgKmz2XOHTjuDcYDAg9ZRUf0V9kwfoaRouB8LuOQ48I3ln02GUUJ/QXDOgdZ/JMk7h2YC2OY1ZPehxF0HYfp%2b5PoWAwpUDQ8FB6kEvP9whx/n%2bWcKozVYomFgGg6j0BIMuclcg6WQzC3f3nC2x4MhlHKYA4jlKKuQRqfwDR%2bKCYrl5jXvKKUpe2EnQy5tMC/OIAmCYUnVKXs9GTUpdGIAXgwSW2O4uA2LHnEYEwEKYb%2bnNWXAQwWvU9NLTDjpkC6gMgFKzyYfDXjgBJ6aan03KpuAAgi4DvybJCBZztkHoi%2bgp8F/gQjGx8URWKJwfxRKspiz/2A3xmmCb7p0hRsFAScb6k%2b1FVji/P0c0lSwkZVyvVJScSgUCURRclISGzmxyk8T0uw4Ock2h1X0JGp4ePkm20wXyLWhD4dGaMISWQJpMJXqTQClIZ%2bovntC36PGdJFHcpFMX8VCyW8EqGjmozHo8o5CyH%2b2v7RX4BwPjQd3StkxZWEQLcLDpq0lrX19bWjHQMKT3BWqF9NMAloYbwq4ac1VJDiPkm52b9HIRA5nHt0rGlITfYKGtBErw2AzAaDon/eDLWNQ2FFgqemijwTx0kFgAkK4focAi3pkETLRT9TItZ%2bKY1osB12i3klaRk4ZhjQ5IQovTIwAnGGo9XbMsGJB6go6Otz9bgSEZn2F483%2b1SKERknPkEBcBwOIBaiDgtzMrKFDYxoK2EC/Rd0nMArB4%2bSgcpJnW6rifi4EEeUsERdNRNa3VlJRRtJtN1kYgsvaRnHgTnc8CywI%2bGZhikuQiE6VpLAIgADgJAkvQBk735mfWms%2b49%2b85S8cmh3jQ0%2bk2IRPWB65TCTrvDyWNluiL6FVU0m0gKQkdxyVpoL600%2bfkXEovZihyPxiOUAPBZ5Zee5EAEW5cAjMdjgI2Hw376goelCAhJGIo3bDG7QmdXJhNXvA3pW%2bnrn5mMHugn4hzAE3g3m5cYZZsr7HU4u9%2bSlL6q2L/pKgiREQ3HknAxT1HYshhkPUUxbRmYn1Exu0gbh9Lu/ULW/C5EoNYx6T2ASPpbtkX7QfqinEhnVoPITlvUozY1EtLTnVSr4pUELOM%2biUjvQhejP2ktX287LVWUVDScHlUwiihkQIGjumFCEiJOJrFzRId8Zt94CjfU6ZNhkmGAEvWhE5MV%2bZsBkK81YQ0CQoL6ou9VBLs9F8cjnWHakM2ffd8EW4xAtckF/kbaoASlHlG0LJOkg0aO62uampE3O6u/CZ9CqgobJ45fviPejSrSU5Io7X3eTJtF4PoX93Nm/5Ad9oPxwenhI8nqYX%2bwMjr01mD1W/HkUDBci8YHSrIq1Vr5evvN%2bZQUBKN47NQPfveP6/8BTLkOptMnQ0UAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1103\" alt=\"dotnet new3\" data-srcset=\"/assets/static/dotnet-new3.82a2fbd.af4d039ff67917e6d49cc0de520f1bff.png 480w, /assets/static/dotnet-new3.69d4f9f.af4d039ff67917e6d49cc0de520f1bff.png 1103w\" data-sizes=\"(max-width: 1103px) 100vw, 1103px\" data-src=\"/assets/static/dotnet-new3.69d4f9f.af4d039ff67917e6d49cc0de520f1bff.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/dotnet-new3.69d4f9f.af4d039ff67917e6d49cc0de520f1bff.png\" width=\"1103\" alt=\"dotnet new3\"></noscript></p>\n<p>If you take a look at the screenshot above, you'll notice that there are a lot more options available. You can list all installed project templates and install new ones too.</p>\n<h1 id=\"creating-new-templates\"><a href=\"#creating-new-templates\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating New Templates</h1>\n<p>Creating a new project template involves taking a folder containing your project (Mine is called Api-CSharp) and adding a .<code class=\"language-text\">template.config</code> folder to it containing two files.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 335 781' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-48d4bcf28d90557070d1240080396f77'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-48d4bcf28d90557070d1240080396f77)' width='335' height='781' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAACVCAIAAABn%2bGsVAAAACXBIWXMAAAsSAAALEgHS3X78AAAgAElEQVR42s1dB3Rc1Zn2OXt2s4RkQwjLWbDa9N5771XTZzQazYym9xlJo2bJljE2xuBgWGMwsRdIAsaFsvQsEJYSTIDNZnOSBQLGOAYDBixhQwgbmm32v%2b%2bNxoJgY2RJ1vM9T2/eu2/m/e/%2b5fv%2bW7zkmdf/74svvvj082OfHzv%2bxUm248ebB8ePHTt%2b/CRXZ57DSuOWU9TGvu6kv3s625J7Xjiyf%2bqjZfftWfnwa0c/OPTEk7/%2b9POj702%2be%2bD1g0c///zjjz8%2bcnhq6t3DRyYnP/zo4y%2bOf/bM7t2TU%2b9/9uknf/7wz58fPTo1eei9ySOHD01%2b9NdPPvvsU1y6t994bf%2bfXn3/zx/h4n4wNfXOwbf/9w9/eOvgIbj60V/ef%2bWPez/59NNjRz9/dc9Lk4ePgAzvHDhw5IMPZyPADb9%2bx7blt8prnhu6d//U3hev23T9rh133XvHHTdu2rp505Y7b9m2befOn/3kpquv2HDtxuue%2bZ/f733xxa0bN/3059vu3H7nz67buuP222%2b6bitc3br1xhu2bN33%2bpsffviXl1/43d33PnDHrbfeff%2bDd9xy21WXX/3qvgP33337T6694aH7H/z5rdt%2beu2/bd9%2bx/PPP//b3/z3fz/37G0/33bbTTeuv/Lql/YfhGc6duxbtMmSh/f8%2bdixozfsfn3jrw7ACz50aHJqEl7pEdhPTk7tff75N9%2bdnHz33UOTk4cOwdHUxx9/cuidt6cOv//Xv3z8wm9%2b%2b/bkYbg6NTl16NChd95596%2bffAJf%2bslfP4L2OTz53jvvvvPGG2/A%2bc8%2b%2b2xqCr526uDBg2%2b/c2jqELTc5Keffvb%2bkSn4wcNT78GPYbd/%2bjVad2oBfr0fNRxqaWjvY0fRzccbG/5dx7H3gevGcfR6jmEv6djRo%2bjC8cbbatwBpz/HNrg88zHgLLr3eMME8NqoWuO%2bxu7o0c8/%2b5bbkkdeeHfvy3/43fMvvPqn/W%2b//fbhI0f2vfryiy%2b9tG/PvudffOm1AwfeP3LklZf%2bCFffeH3//lf3wUvdu2fPnlf2HnzrrTcOHHjr4NvvvTf1%2buuvvbRn7/79%2bw%2b%2bdXASa43Dhw/ve3Xvy6%2b88uabb8LHqampV/e9/Nq%2bV/f/6bVX9v7pLawa2ia/tE1NvfdttyW7933w0ovPPfbko7ffves3v/s9vJ69e3//5O7HHr/3kW23/3LvG2/Bmf2v7Hn4Px559JeP3Ldr56NPPPb7p//r3nt/8fRzz/3yvof3vPBHqPDma/sefvSxx558/KGHHnrgwf947QDcdfzFF1585lfPPP3EE4c/%2bAs0yLP/9cij999z165773noiaefexb0Z062JVseePb%2be26//Y5dO3ftvO%2bBB5999rl77rlr65Ytd%2b64Y8fOf3/gFw/t3r17x/bt11%2b/%2bY4779yxbduOnTvvvuvfd%2bzYuX3nzjt33fngfff96qnd9997z5YtW3fu2rXr9ttv23brg794%2bKmndm/bdsumf71ux44dv3z0sccff2L7zm233Hzjju27tt7005/ecsuvnnzqMTj9%2bBNnWJZQDWEWjczh8oRCIYfNZjAYXC6Py%2bXyBXw6ndbS0rp0aWtraxuRSCIQiCQSBQ7aOwiwR2eIRDhuWdq6tKW1ra29o4MAhUAgQf2LL25pbYWL6Az%2bJS0tba1tHUQiEa8GZ%2bakLOE6EjIRTyKV8fl8uVyhUql4PJ5EIpFKpSAGjUan0xl0Gp1MpkAhgQgkMoVKI5PIcIzOkMh4Hdg3C7oFK1/5CEd/W%2bcMyxK2LS4RcPgCgdvt3rhx42233ZbP51ksFsjAZrPhESkUKoVK12h0Wo3G6nCatHqJWGY0m0xWu1ant9qsAh4PSQXVzkZZwrHFRTy2VCa78sor16xZ8/TTT2/evBnUSSwWs9kcTAB440xXpycYCISjUbfD4%2b50%2b4MBX3fMHwyGwiGpRALqRKXSzpoAQi5LqVKvXLmSTCavX7/%2b5ptvFmHbtACoHjQ6lUJDOkOmMJksGo2GKQ%2bjWeHstgBLJpdv2rTJbrdDIyxfvhy0H2sBpEL4qyVjteEY%2b0iZPo/UC5XGRlv4dkA2IOZzBEJRLBarVCpgAEJsE01vYNMioRAcE4fDZjKZbPjDZsNJEJLLQf%2baG5PFgktgTqIF3BoCiMQSMFzwofCIzWtgx%2bCXvF6vQqlKZQtD9ZFLL1k7OlgfHq4Hw12FYnFktF4r9w0ODC4bHRmo90%2bsnFg2Our3uKD1FAqFfEG2pgBiyfQ2Uz6DwQDPJFeq6qPLr7piw2WrLr/ysrVXXX1FpVoZWz6%2b4arL1qxcW6/UxkZHrrhy3VUbfrzhmmtSsQifL4Cvli3IdkIAeFzx9NZsAagBH6USqQptSqiiUqvhJDyfSqXWaXVKJXrTCqVSrVZB6FBp1EqlEp3BWgD2WN0vbfMoAGi2QCBASv9lAWAvFAoEQiGcgT8SqQROwhk%2bnycUoaYTipDblUplUqwB4Vgg4AvRPQLJ9Bm4RySG75TOkwASiMTBYBDs2O/3w3FTALABmVxZq42MDA30DfRXK6VIJDowBHo/tmJ8VaXY6/H6BkeGh%2bq1TDrhD4ZXTExUa7X64NCy0aG1l13qcTnS2Vz/4NDA0MDw0FAkFAD/MIft0IjEPD7fZrMVCgV4/eVy2Wg04jLAwbJlo2KJfN0VmzZv2rj2inXr169bvWbNVVdfueGajWtWXLZixeAlq9asu%2bLygYHi6ktXRiKRVavh47qN1/5k0zXrV126Am7fcNWGkeXjIxMTm/51Y7WYxTDLHAsAvpALzzo8PAwaXK1WdTod/AzoNPwSaALUg/Og0GinVBqMBrVKBR9BYUD59Xo9ru5aLaANNRxpVGqZVIbdKzAYjOhOhRJu1Gg0c%2b6dUCAT89mgQqPYBnHA5XJBO4DWAiwFrwrOHXY4MmOgPQ0LWShmofAMwI5CgatQh8HA/TAL36NbWXAjHR2jM8zm%2bTksSzj2OJ/NMJktmUwGxSksSOFmB48OeAGHnPDb4BxBBIhT0FwQrODdg1ljHlPJ53KJGDhd%2bNIwYjAsHD403WgTSsBrBnwPcRr022i2pdKJRCKbS6dr9ZFqX386nRoaGDCp1QDxzwqeO%2bGFmu4f35oC4PVASaAduDwBUn2xlA%2btBG5TKgM1A98IiAJDStSzKMCJQPa1AuCIH/QE6BW8bGBb7e0dUBBBQ8QL/iKCBvVxsrZgKPWEAJjVcsH5fEWFZtYGdYLXzmTzbBYLgG2VUslmsfUGk8PhdDsd4LswU0FQkM1iLYwMDQHEEilYcCAQsNkdDBYbi5sYoUF4mQaFSqMDEwYKVq3WlHrL2LLxkdFl5XLR5ujs7go7XN5apZzJ5ZdNrBroH6z117q7gsgqaHT89vkrjTjA5fG6QqHVay67%2bqr1PpsRuVGJhMNiUokdNBKhWehkIrmjncOgCTnccMAr4XNYVLJEKJBLRDJwSByWTqUQCwVep03CZVIIHVCfRiLCnkkhwZ5OIs78tjkp4EZ7wY0aTeYHHnxw87XXZAcn4pfdLJKrQCqSzHK%2bMnyBMniBMtQsF6rCP1IEz5P5fyjzf1/sPU8WgP33RJ5/kvj%2bSeyDg%2b9jB1DhfLyaPAD7c7GacDzzq%2bak4IGMIxCJV02sWH/Dz7479Mj5P37ln7NbpHxWq7br7x1j59iH/tE%2bPLP8g234At%2bK7zpHWyJrLvCv%2bOfAxEVdl/zAPUZIrCPFVl/UdWlL96rvu5Z9zzV2YWDFDz3jFwQuMYze0BFdfZ577Du24a982xkWTIX4HJ5QLOOzHLXLz12/z7n99XNGnhJJpG1qP/zeudb%2b71oH8HKudeA75v4LPaPlDdvOtQ1G120f3XrP4Oa7hn7yi9Eb71m146HxLXdddut/rt32QGBii2fixr6NO0dvvm9o0x1j/3ZfdfP9vWu3nmOufddab37hmZcTcUAkELAEkgtr25eu/8NFXavkPEaLLvz3zvFzHMP/6Bhplu/Yh7/Xuez7rrEfeJaz0uv5havpqSv%2bpXtd8Ipt6vpGfnGDsHwNr3Q1I/djVu7HovI1nMJVpNja1p7LnKu2xS7/%2bd%2bZ6%2bc4R2d%2b4RmWGXFAjAkhFDFkejAAOKYKlRcJDEsF%2bq%2bUi/m6i3g62F/AVv%2bIpTqfofwRQ3EhW/VDuvw8uvI8uuIHVPn5TOUP6Qoo59HkUA3qtPB1rQLDv/C0S7HbL%2bJq//abZ1G%2bEsiQ9wSvgsc0zAuBpRNPVhhkErgpoDxqmYjLYkiFAnBQbAZdIRHyWCyL0aCSS1VSMZNKQY6Lx%2bFz2WIeBz6yGTQuk0E/%2bTeffjmhQhB%2buNiGpySmE1sQLGgnKyQShcXhFat9A/WBQqFYLZdLlf7%2bgeGRkXoykagO1Lu7w3AxlcnU%2burAeJydzmKtH%2bB6vlzpr49IRUICkUyl0k/xE99YTqRVAOQA%2bXK73RBrpzNz7G%2bIpgD16AylCtiBGqC5FKUEgCurpBh/AKaskAMXFSuUqALwUJvd6XDa5UDwlEqAUhA6zzxaN1OL8sHBwf7%2bfgDVgDZPVwAKFdB2G4JFKOEMoZpAIKBPHQS0wzASFDwdDZ9QVphMRtWIxLnCSyiQ8Vg0t8cLTHLdunUrV65MpVI4pZyZWjzJ01PoDDa8ez4CQCLgBkAo9DoD2BEAVeD1QFXBqjhsYBBAWvkY3sZpEH2usDcuAN3h7ARCvHr16rGxMSCWoAbQCN8kAI1MIjE5gmIZiH42A0ioUC5U%2bwf7%2b0ZGRovlGiAll9eTzxbLpWI2mSoU8iIejzDXaeAGpYR3Fo1Gs9lsrVbr6enBuwi%2bUYVoGJySYcou4AtlCk1XJKqUyw1GEzBjmVRudTg6nU41GAlSegkQyzmHqCcYmUAgAM0BYg6O6GRwuqk5eNodNBt4Aup0aSfgXTj4HvEEArG1rQ2cGN6jg1%2baD4D9JUYGagpinIIP4E%2bPs2lgaYCueVwuqASwZyDvsAfWj3oTGAzknZRqGuYi5zVrfbqMjDKdXoe3azAYfT6fUCwPd4d8/lC5AK4rG09m04VCMpmu12rwsScaHxleFvT74M1T5pMrTwsgEuNZdQHKIAq/sQXgZdPoTADhJrPZYjLI5Qq11gjOX28wB71eiAwGvdHu6NRpNeR57n3CBUB5IQhk4HyAFuIu6BQ2AHqPp1tQRyT4e0zFIQp0YMdtbQ26jM4TSfPfQzNNaG688cbx8fHR0dE1a9bIZDKR6OvdaLMFqDQG2ACfx6PTGSywChZHJBSBj2ey2EKRmMPhLEyHTTMOOK%2b99trrr79%2b7dq1IAOE%2bq%2bNA7gNGI2mgD8glCjCXUF/MDxQLcTTmWqpViwVapVaLp2t1YfzxSJgOwzqLJAAnRs3bty8eTOIsWzZMqwFRKdoAQaDSaMxjGYzCGPQacVypdlo0un1TkcnwkBqDVzistmk%2bU9MNFTIZLbcdNNNExMTEIyhHfCk/ski8XQcoKKud6zXnkQk4Qc47EGpIXj5ZNT/txC9lCgSSyS66Q2M%2bNSBDM/pwl%2b1WsflIiHBDEDpURc8laHR6dksFoZ5aAua2BLM2E4dB0BtIA4IxPJQyO90eXLp3mg8UUhnwpFwKBgZXb6yVqv0xuBcUioWEea5D/xLgewUudGZPhRP4NGZbJPZarHaOp02lUZnM5m1eoPVarfYHJ2uTr1Oa7bZgSWhTvwFy42ejgDNOAClvR2jAWgISmMIS/s0ByASyUQASiTKgiZ3T0cAXONBmZhsHjh%2biN2g%2bMDM4BhQPlg/YDaUUcT0jUKlLi4Bmjbg9/kFEuXw0NBwX38qncyl0wPAAfKlFRPjVrMeWmDB%2bgpm0wLgXrkcLsRfQEIGrd5isdhA952dyCDsdsD%2bCzl4ZfY2ACjt4otb2qf5Lg5%2bcBSE5Quoi7cFUIcfqDmDbTIagRngHX5UdIlKpzPFYilUOAsdHN/CBkymYDDIEcpXXzKeyaR6eqKFfDaRyVdL5VKpUqz2V2FXLgHGWICOs9m0ADaqhs1ic2VSsUQqN5nMyVTK4XQ5rHaNRmO02J0OKA4gxwtgDLO0AQSHSGSA/hgnRk9JxAlxByIGBAKJgHrKyA3QsdgEoGKjFgH5SyRi9NwEEsbiCW3tBGgbqADMBnXPUmkgIQiz6GwAOLHX62XxJatXTeRzmUB3JNnbG4n2JpK9qUKxmM2FemK5ZDJXzMfjCU%2bnc14tYTZYCM/DMZgcl6vT5w%2bEovFIVxBQHUhlc7jcne5Oj9dhsfgCAbu902w0zKslzNIGsCQPuaUFDc5lMNkdOAkm4AaA9nhkQMawqFSoyQfgPDw3EDfAa3RoCy4faDJYLp6%2bnTG%2bkUpZVEbcxELBQJDB5mWzmVQyma/U0tliPp3qTWe6g125dEYk4CFIR12UkRj0h8fjw3UqjeFyeTxut1YPvMDhctitbn%2blUErEonweF6pRFzMWImJ0HbcBMp4exUAR3Af%2bFD09Bi4WqQA0BPcpDBZHp9cDGehoJ2BjPMhwFygYg85sMh6sh4q6GONAVyjURqLny5We7kge5YIS6VR6sN5fLFYyhWK0JxLrTSR6ezgs5nyTstlxYjRbAtyjWqszW%2bzdPVGbweDxgt/3d3V1mSxWl8tlNJkBEXHZrEUnQJMP4P0DABZaW9rQVA44aG3DRxNNZ0gJxPmfVzAbAfCRTwwGk0Fn8Lho9gM8PZlCRcP66CwKGWyaDKQNzkBwIKL8Lm0R2QC8XZ1O73Z72FxBMpVOJXtj0Wh3NJ7NpIvFQiZfCgW6usKRcl891RsrFstGrXpxQQl4GgBCCrkCwHKn2wNwKNIdCXfHIuGQ2%2b11AzYKhCORSCyRjHSDJFG7xXgyjj8nUp2RDeApIBQWEOYhnvjY6C8jd6CcEQljm%2bB96Ti%2bwEIErelnmyfPhg0wWDwOF5BcW2sbxC5sbCuLhIIaic3mggwiiYzNQo4I%2bFtLSwtG%2bQnYfC0SXyBEA0toNDB9OAmFvGBxQK83eD1eFleYyWZTqUQqmYr2Jgv5XLVSzherkTCQ5FitPgzBoViuRHoioVBPuVzq6U2mkulMOh0KBPLlWi6bSeYqfX198V4wlnisJ8yk02eRCpiNDQgEQjnwXTIVeLDT6QyFwqFwNBwKODvdTrfX6wt2hcPd0Vh3V9BitfkCIZ/LY7FaItFEwBdw2h1Bvy%2bVThoMeiAPXj/QoVin3eHzuFlMxkII0OQD0Bz4EFGMCiNtR%2bwSswGcGQPNBJiE9xDPTJti4ylwqkAkNCkEgTQ73DFLAQio/4LS1tYBAQvFrI4ObCpiY2gH6lqddjK4yU73Fn/ZZBsGfUZDfmcTB9RqjcPhYLC4fp8vFAz4A0GPx9vVBW7U7bA7nA5nuCusUSg6FiRD%2bq0FAGWQSqUatQY8UL5YTEAsS2d6emLlfMbldoW6wvFYDARQyGSEBcmQfmsVwmWAdkD9xNgkVvChS5e2LG1pnTk6CI%2b%2bVMoJnWmWuc06zjIO4M8BoQCb3UqD2iwmE%2b/ZxsyDymKykLefHgGCEX7cPMhMBvPsCwAhlMbkZotlj8vpC4Uz2XS1UvS4O0NdEbfH4wtF8ql4MAisIOqw2TRaPeAjjy8YAqPxB502M2nuEN4sM3MIEYll/q7uwaFBYPYmgz4Wi3cHA06Hp9A3WCiVMsl4KpWNJXpDoRBQhYGxsXQ6E/R5gP5Hu/2EuUt1zbIF8NLWToCgBg/SyJZSqKAkHJ4AAEIbggZwHkubEokcvhA72cFkcQQ8Hp56OfsCAMjpwCJXY0YLBWV8ISjwhWIehw1XqdgkXiqeLMImDcHXkRaDEcODMjn8bkDMQb831GW3WfVGk8fj9weDXT29I0MDid5op91Jx5rlK%2bmtOR4zNzsbAGzAE8r6%2byrVaj5ZrCSiEUQEgAn0RLy%2bSMjnBj5QLZUY2Az8xUgp8UYAU%2bZweWwOD5A%2b4AjQeBzqQHAA3q9Rq5F24a%2bc/KUp1fh8arzQZoAL6pePT8dTnZEN4LweG/dKZGAjEpHLJxBB10EMiG7gLel0BhFhCjo%2bdAIkBFMGIgHyg8yNMbGA%2b6azBHiSmDSNAudNANShx06msnar2Q6g2uFMZLJOm81gMndH4t09EYfd6nS6AoFgtdYnVyrDkWg0GolE491en9vrSyTSFosZiKjX5/NA%2bHACEvd6XZ0Wq9Xt8dqsVrFYYrc79VrNN66XMPs4IBDLEpk8MoO%2b/lIuHU0mexALSBQK%2bWi8F4w4GotHI%2bFcPh%2bMRIuFXE80Gk9mMrFYd3c3sIBoTw%2bqlUyHQsGeSE8ml0/0wBYJd0XgPLCKUKg76POSScRTK9LsVQixMwJRIpGKRBIBjwuKgXKONDr%2bzkBnyGQy7jFxpcfMmYqvroGPRUBqg81zxJNfiA9gSohjb8znzqsRk8l4RgggHfwony8AdSZjv93RDiZAwAAf9vTT0J/yZZeK8QR8SAVWmh%2bnu0PnUQB4dDaHb7Xa7DZ7p9sX602CktitNqVK5fH54KTN4fAGgnwUzsiLzo02sVAEeEAMHj4L5tkbj/dX%2b7PpVLlcBaIf641HYympiE9cbAOeTjQC%2bUS3AGK1JDIwNY1ay2GxIQ7g4BnTCgqmSPS/JQZnGwthdonNOW7Qcyy524ZFNBSoSBiRp0AEwIgoLia6SiSTGrSBcpYEwFSIJ5Qk4lGdVqfXg/c322zgvm1Wi1Wv1wMh8Pl9RqPBbLE5nK5Eb0yv07tcXqfTYbWYFXK5TKGyWKxsJuvMgd2sbYAoEMvLpZzT6QROnIzHkulsNJVbVq8n4rFITwLocqmST6fybqe9VCnlMrlyqVzIFyrFTKers6s7ms0XlVLxmfPmM4ISNDqDx0Pz7mnTOk2nMxl0Jj4HHw3Rx5aOoVHRxPoZKyjR0NBZJot61sEcoB20DlVHRwu2jBXWud2OR4bWFtTZAbSmOVAWj2WNg0Z6%2bKzyAQab53Z7nA6H3enudLlsNrtapYJjrV4P%2bg3GYLc7jHrtHJKvuTViIk8sL2SzRZSjLXTHE/X%2bwWg4BBCm1Nc/NFiv1/tz2UIyHqEsRgEaYuDrS6DhZ2TkLNG6X0wWW6XRaFQqJp2OQX06ZfESGjIFH/GH0wB8gQACNnaotQ1FA2yOIXWRCoBzYvChBqMRrMDR2Wmz2mQSqUqtMZvNRr3J4wsAJCbOf3p0ljYAoZQrlGV7E7WB/v5KMdDdUyyUe8KRrnAoCvCoO5ZMJe12G2ERDvo7Ec6wzg690ayUSdHwONB3emP1FFzBFmbs6xnZAL7iIBYKUBcHaD/q925txQAPMgbSIu3oxlVIIK2Wi1aLCTiAUgk7rRrBUY3FYlPIpVyeUK838rncRcoHUA%2bkTJXPJCIYtR3oq9Zqg9FkemxkpFKsJNNJXyCULxTtZkN7O2Ex8gF81Ru01hCdwWZzdAazw2aDKCAUCBlwhsPlY4Oi2Cz2fI9BPiNO3OjMw3rv0IQgzAYoZCo2H5TQhnUAL9Y4QKbQmWxgAjqDUavRABkwGIxqjRY4gUyuBiSkUCj0RpPBYKBSKIvSBjoIIoV2xcR4MplORWMDg/3FSn8hl%2b2GQBCKDw3V0%2blMsa%2ba7M1wWLR5HTI026wE8kJiAzbXExTebDJz2BwwBggCVqtdKhIysAHiuJ0sShvAPCkA/mbHXnMCaCt2Eo15agyFJc6rJ52dAOjpOXxxojeqVimxRfYEgVA4GAyYjGajVi0USZwOu0GvVykUcpXWZDLOH6ieLScmEPlixcjIYLVcTmVLg4CI6n19/bUCaH453%2bly9yYT/eVSMh5PZorBUIBMJM7TuK0zwEI0NAddIBDi64ui2a8sNovJ5vJ4cA6Mgcfjwzcwmcg2KBTKfIx2OrPEFlr4mIyvhNE%2bcw0MLOGD9Rk3hkDhoGhmyh9jDqjPGFVonCHjlfGpFae/gsDsbYAnEHu9HrhNqVBJpDKd3iDBFrO0250QGoRieU8iYdLpoT30OsQZ8AVNtTqL2%2bUUi2UGgwl%2bAyAUnFTp9DK05htaepDL5rDYPJlMfpoLl8xWABKZzRPkcvnRkZFMppjMZMvFQiqZgI%2bJeMztcueK5Up9cHx0PJ9JpZLpoeHBTD5fLRUy6UomkyoVy4VK33B9oFgtV/oGav31Yj5XrNQquUIul/b6goCtzAbt6eCo2asQ%2bHjQcg6XC1SYgS3JyOVysclBaG46h8NF89ZZHHz%2bOhutTsJloMUamVwuj81CCzuw0coCaAo7B63cy4VvgU88Hg99ZKPK89cCDTSBr17eUG409ZOMD3jCFzD/yqKI00OpKSf6lVHHMuzJeFcDmTKdMmpenVcb4PJFkUi3UacHAzCarQa9Ad6xVqvlcDgSmVyllC/eqYi4C2Jx%2bIVCIZ/O14eGcoVibyJVKJQmli8P%2bIM90Wg%2bm2Qy6Itu9PpXJiRCEOBz0cKwaGUGNkcuV9ltVhaLIxSilVqoi7kF8MxKB4558IGgRHJ7WwfOj7HpY8gqFmBG5Rm0APgTDgc8jM5oMWhUJDJViK1vAq7JaLY5Op1CvoBBn3ctmn3/gFCqHB9bNr58fHDZ8v5K3u8PpDMZsIp6rZot9ZWqtfGxMa1KjqXoFh8nxvpxGRKpHC1AjS89LRShv4BMuTwICSKxLJFMoulM87y4x7cTgIj9DxD4oCBc11F/3vR6GO3T4yamR4%2bSF5cNwINCiOULhGKJzOXxWixWjUZttdvoNLpKo7Va7E5Xp6OzU8DjQWug/xODx19EAlCxqak2G8rkSlT6FSsmlq9cWcpl6gM1q9XmD/j1elMymy1W6/X6YL1UyOaLid44mvW6qLwQPgmRSmWAqwGYCe8YQCS0AJvDk8sVAEU5HACSCiFyRFaFXA6%2bdRGpEGzYCAhkB9ioHmyyT3vDBrAR1Mj7o8k/BBJuEug/S0Erx5AXgwpRAadpdUazychgsoAEo//sgS9Uq9QAHtHKkgh%2bshkMFpfDBQ/FRv8lBJfJBNyJGD0Gy1EAAACsSURBVNn8OaJvYQPwUjVaI5DfXLlYLJUq5b6%2bcrFaA6UfHhgc6KtVe%2bNxn9%2bT6M0lenpKtb50NlUs1/r7%2bkN%2bN3ius8%2bJsXwoA1RcqVRCC9jsHp/LIVeq9QYDWi9SqdJq9Uq5VCCUmIwmrd4QCIagfZRKNRjD/OXnvp0Rw0cc5DSnPkwP9sCXyEM0ADY0XqijsWjeaQ59W9DR69PQAJ/WQP3bMShfOwpxnsr/A6ayzMp6GRTbAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"335\" alt=\"Custom project template example folder structure\" data-srcset=\"/assets/static/Custom-project-template-example-folder-structure.9c9be8f.500a213c87c1fb778802074b8c207ea7.png 335w\" data-sizes=\"(max-width: 335px) 100vw, 335px\" data-src=\"/assets/static/Custom-project-template-example-folder-structure.9c9be8f.500a213c87c1fb778802074b8c207ea7.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Custom-project-template-example-folder-structure.9c9be8f.500a213c87c1fb778802074b8c207ea7.png\" width=\"335\" alt=\"Custom project template example folder structure\"></noscript></p>\n<h2 id=\"template-metadata\"><a href=\"#template-metadata\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Template Metadata</h2>\n<p>The <code class=\"language-text\">template.json</code> file is where you specify metadata about your project template. This metadata is displayed when someone lists their installed project templates. A really basic one looks like this:</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Muhammad Rehan Saeed (RehanSaeed.com)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"classifications\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"WebAPI\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Boxed\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Tags used to search for the template.</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dotnet Boxed API\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"identity\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dotnet.Boxed.Api.CSharp\"</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// A unique ID for the project template.</span>\n  <span class=\"token property\">\"shortName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"api\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// You can create the project using this short name instead of the one above.</span>\n  <span class=\"token property\">\"tags\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"language\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C#\"</span>                        <span class=\"token comment\">// Specify that this template is in C#.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sourceName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ApiTemplate\"</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// Name of the csproj file and namespace that will be replaced.</span>\n  <span class=\"token property\">\"guids\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>                                <span class=\"token comment\">// GUID's used in the project that will be replaced by new ones.</span>\n    <span class=\"token string\">\"837bc53e-0271-4e9c-b5b5-c60ea7a7c7b5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"113f2d04-69f0-40c3-8797-ba3f356dd812\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The templating repositories <a href=\"https://github.com/dotnet/templating/wiki/%22Runnable-Project%22-Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wiki</a> page talks about what all of the properties mean in a lot more detail but I've added some basic comments for your understanding.</p>\n<h2 id=\"installing-templates\"><a href=\"#installing-templates\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing Templates</h2>\n<p>Installing the above template from a folder is as easy as using the install command. You can also install templates from zip files and NuGet packages the same way.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1103 639' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-7a743587726e4549088d44bc9b1da4f4'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-7a743587726e4549088d44bc9b1da4f4)' width='1103' height='639' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAlCAIAAAB9MnhgAAAACXBIWXMAAAsSAAALEgHS3X78AAAHMElEQVRYw%2b1YWW8TVxSeGc/iGW9jezbPvnjLOAlFlQqIxjaBlpf%2bmVb9P63U/9JKValQH/pQhCrCkoQQSKKSKAjafveObWwSQqBScaQcmcmdO3fOPct3vnsG5tc7j3689dvDJ7uPnuzien/z2b2NbYwfbO1s/3W4c/ByHn4TS2Dh4939vcO/t/YONp/u3d1%2bwfx06/YP33%2b3t7Oztbm%2b/mj9/tq9Z9tbTx5vrK2tvTg8/Gc%2b5NWrl9ngYP95ZtULyMHzrecvmeHNr7784sY1KqtErmcjXAaDQX9KhsNhf6XfHwzxCGP8yeZXVjDbx%2bJs0M9uyLuDwWiA0TC7zfRAxkuzReQp/ZF7qCF7jZ8Ta67DqtWRgeTuxuXLV7795us/N3cZXlEZhuFyuXw%2bL4piLseJkiSJAh3nMC/lJXIjigzLCoIoYcCw9MfgFaxVCgWeJw9kWcFKQeCzFzmOwxqez%2bVlmc%2bRSYHnsX40KUl0scCyHEtniPCiwAuKImNSzsu8QJRhX2ZWsBDXq1cu/fL7XcZv9gLfS5qtpeXFMIwMQw/CyPe8BhXX8xy70bCdhmUVSyXHdQ1dg4eVSrlYLFq2bVmW53umYWiaFiUJluIt0zSiOOl0OljfbCaLi8sYmJaF1WEUQScULvZ6nW7Xshp4Udf1brcTJ4lpYpUZhmG5XIYePLUbFj9yjgaFDkg0Gab/%2bdXbf6wxZtBK4ojY6jqqqjKnEPYUa6q1uut68Nk0tFarraqVbB7OO64TxbFPxCPaaIBhahAE7HGq2bFw9AeBS5hfHQ7Wdw8ZqVTnARuKGYlIXkHy8nlZkcmMKCLX%2bBEMCUKerhBp7vFsNE%2bXSdmj8Ssk%2bTxPbyWeijhWhRmJalMUZfQ6VZWJDCDK2D9P8TnaQqCSbUYGFIerw/6Dp/uAUAqQOI4LMDiOF0cxskjD4yOHGdo%2bQNRq1SMabOjhqJIs0iiYIAhd1y4UCoDKJMau63a6Hc/zAaIw8EzLhklyXjpWeWYVHHj4bJ9x4i4MrdVq9XodwMV%2bQCRHNmM/2HrigKrato2KgpV1TZs4ALv9IIC5CDNKLpsENGDv4mKPLK5rIYrSIwBDJt7tQNi94HtuuVSEXgPuN2yUoaHr1WqN%2bQ8CRUEYoApR0LmpDBSKRZCE57ngAN8fgZ5jOc8jNjebzSCAIQGqGTh5WwRnHPCaKUIFB3DVDaNSUbFrSLLfANw%2b2AFdNxBU6EQ5TM8jAzAUT1AAcZxMihZ0A6NNw/RQ%2b56HZScon3EgWliOoqhWqyL8EQoASqwGUogxYIA4lYpFRSmAT4qFwulBBSRAbUWtcBw7TV4FWgOAB2oUXDmBEEkAqQ03iRP4ffJGMw6kFy8lSaJrWhzH8B1XXdNJCQe%2bZVq93qLrOGFIHiHv4IBTOmA7bkBZ8g32pQ5EoA0YkZEJMYgX03QBW3a73TiO1Oo72HzGgd6nV7R61fWQ1oYfRvVaDQcOImTA%2brRnGCbOB7hDwSBmL2dszBEZDXDFUYsh8xoSDo4k9gix0yIOEQtAKAjDbEGOF9rtFhzo9VJwyWgXqpke6NxJDjR7F20cflFsGQaoCMcqYAMiUtVqmvagrqqqzRYhOCQh8Nx2u20YBgoxjsjxlyJFEMcGYOCnLEuTIkYsAb9J%2bTJTRQwa5XKvzYIDOLYBrU6nbTfshXQBQECpIOmtVgtbc%2byMzELok0sgO0TFNHTkHYzkun7DMpCHKAxqdb3TajmOo%2bsm6gwqM2qbYBfHCjfORXbNbELqQCkoyDfKUSFFHCCf08nJMgBDm0kMbm21mjzlj8zcd0Coe%2bEzy9A9nzgAK%2bE0zgRNq%2bPf0tISeAkl1UZ4QnL4E/VRhOKmp559rPZxBqw0TZvNVhSG0zSK9OK0QTrfcCAlUU/ShYVOu4s8OK5n00YLpI4okL6o0YCTGAQ01lMs1F1G1EG9lmnK9AwH7HjaCOCWHuJkkJdoHyBKpVIJA9xmHdXbBMQFkimXysjANIgF2kHQfnOm26lUKliJF0B75HkBWCsWigWQX7lcKRIKLJCrghkskF87UDE9yzQQ2CSO0RgiWkQ92iFZGbW%2bggAVmCRMWiTWoHkuUF6FLhhJ3ZYxZv4vmYEQKxWzZtD33YD2saRV9Fw0IzgUETAgC5UNRgexuOhPSK8no/EgTBuEOLZLRMoZexxtIY/C7Fhgs%2b8jMw5wchnabNsBq6Dwy6TpJzmp1TUYiPKt12vMnMmsA/kybvDBEcchuAgZQFxD3wMDo6ijuImPlSnaYY/G7CM7wFAInfD1wnLsXGdAcyJwJppvfPsB1eAr5CHwybFFP%2bpMbs4dkEo1sCNYBeDBFSVaUVWMMyrDt%2b/cmf%2beEJpHOaaIx5/Lx8i8O8DmS2c7A%2bcOnDtw7sC5Ax/bgfLog/Xs/HL0P3evDQcPJt8DZzQDGzv7TK7q4pOAU9Qz9BNK%2bHjiV67f/PnOxr%2b4UbxfxUK/kgAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1103\" alt=\"dotnet new3 install\" data-srcset=\"/assets/static/dotnet-new3-install.82a2fbd.0694ae4a352e4b610577013681c3fa9d.png 480w, /assets/static/dotnet-new3-install.69d4f9f.0694ae4a352e4b610577013681c3fa9d.png 1103w\" data-sizes=\"(max-width: 1103px) 100vw, 1103px\" data-src=\"/assets/static/dotnet-new3-install.69d4f9f.0694ae4a352e4b610577013681c3fa9d.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/dotnet-new3-install.69d4f9f.0694ae4a352e4b610577013681c3fa9d.png\" width=\"1103\" alt=\"dotnet new3 install\"></noscript></p>\n<h2 id=\"template-nuget-packages\"><a href=\"#template-nuget-packages\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Template NuGet Packages</h2>\n<p>So how do you create a NuGet package containing a project template that's compatible with <code class=\"language-text\">dotnet new</code>? I'm assuming you are familiar with creating NuGet packages, if not take a look at the NuGet <a href=\"https://docs.microsoft.com/en-gb/nuget/quickstart/create-and-publish-a-package\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">documentation</a>. You can create NuGet packages of your project templates by creating a <code class=\"language-text\">Templates.nuspec</code> file like the one below and placing all of your templates in a content folder beside it. The content folder is a special folder which NuGet understands to contain static files. If you look at the nuspec file below, you'll notice the packageType element. This is a new way to tell NuGet that this NuGet package contains project templates.</p>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>metadata</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>Boxed.Templates<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>My project description.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>authors</span><span class=\"token punctuation\">></span></span>Muhammad Rehan Saeed (RehanSaeed.com)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>authors</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packageTypes</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packageType</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Template<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packageTypes</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>metadata</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>package</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"there-is-more\"><a href=\"#there-is-more\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>There is More!</h2>\n<p>What I've not told you is that it's possible to add features to your project template that developers can turn on or off based on command line switches a bit like <a href=\"http://yeoman.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yeoman</a> does for Node based NPM packages. As many of you will know I already do this in my <a href=\"https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASP.NET Core Boilerplate</a> project template but I came up with my own custom method. <code class=\"language-text\">dotnet new</code> makes this all a lot easier and I'll cover how to do this in a later blog post.</p>\n<h1 id=\"why-this-is-better\"><a href=\"#why-this-is-better\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why This is Better</h1>\n<p>Traditionally, to create project templates, you could use Visual Studio to create zip files containing your project template or if you were brave you could create Visual Studio extensions (VSIX) to enable installing them directly into Visual Studio and share them on the <a href=\"https://marketplace.visualstudio.com/vs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio Marketplace</a>.</p>\n<p>This new method makes creating project templates about as easy as it's ever going to get and allows really easy sharing, versioning and personalization of project templates. At some point I envisage a website (Possible the Visual Studio Marketplace) where you could go and install these NuGet based project templates.</p>\n<h1 id=\"net-boxed-api\"><a href=\"#net-boxed-api\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>.NET Boxed API</h1>\n<p>I have been working on a brand new project template for building API's using <code class=\"language-text\">dotnet new</code> with a lot of help from the guys at Microsoft. My project templates are quite complex so it's a good test of the system. The API comes jam packed full of security, performance and best practice features and also implements Swagger right out of the box. You can try installing it with <code class=\"language-text\">dotnet new</code> from <a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NuGet</a>.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusions</h1>\n<p>Overall I'm really impressed with where the new project templating system is headed. It's very easy to do something simple but also very powerful should you need to do something complicated. There is a few blog posts worth of material here, so expect a few more posts in the coming weeks.</p>\n"}}]}}},"context":{}}