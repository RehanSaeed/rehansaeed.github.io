{"hash":"2e3b8743cc017733db3a4d1576a5fa9b4f1f79d1","data":{"tag":{"title":"Caching","path":"/tag/caching/","belongsTo":{"edges":[{"node":{"title":"ASP.NET Core Caching in Practice","path":"/asp-net-core-caching-in-practice/","date":"20 October 2017","timeToRead":6,"description":"How to use and implement Cache-Control, Cache-Control Immutable, E-Tag, Last-Modified and If-Modified-Since Caching HTTP headers in ASP.NET Core.","content":"<h1 id=\"cache-control-http-header\"><a href=\"#cache-control-http-header\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cache-Control HTTP Header</h1>\n<p>The <a href=\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cache-Control</a> HTTP header can be used to set how long your resource can be cached for. However, the problem with this HTTP header is that you need to be able to predict the future and know before hand when the cache will become invalid. For some use cases, like writing an API where someone could change the resource at any time that's just not feasible.</p>\n<p>I recommend you read the response caching middleware <a href=\"https://docs.microsoft.com/en-us/aspnet/core/performance/caching/middleware\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">documentation</a>, it's not necessary as I do a quick overview next but the knowledge below builds upon it. The simple way to set the cache control header is directly on the action method like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ResponseCache</span><span class=\"token punctuation\">(</span>Duration <span class=\"token operator\">=</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">,</span> Location <span class=\"token operator\">=</span> ResponseCacheLocation<span class=\"token punctuation\">.</span>Any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">IActionResult</span> <span class=\"token function\">GetCats</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Adding the <code class=\"language-text\">ResponseCache</code> attribute just adds the <code class=\"language-text\">Cache-Control</code> HTTP header but does not actually cache the response on the server. To do that you also need to add the response caching middleware like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IApplicationBuilder</span> application<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    application<span class=\"token punctuation\">.</span><span class=\"token function\">UseResponseCaching</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UseMvc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Instead of hard coding all of your cache settings in the <code class=\"language-text\">ResponseCache</code> attribute, it's possible to store them in the <code class=\"language-text\">appsettings.json</code> configuration file. To do so, you need to use a feature called cache profiles which look like this:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ResponseCache</span><span class=\"token punctuation\">(</span>CacheProfile<span class=\"token operator\">=</span><span class=\"token string\">\"Cache1Hour\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">IActionResult</span> <span class=\"token function\">GetCats</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Startup</span>\n<span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IConfiguration</span> configuration<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token function\">Startup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configuration <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        services\n            <span class=\"token punctuation\">.</span>Configure<span class=\"token operator\">&lt;</span>Dictionary<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> CacheProfile<span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">.</span><span class=\"token function\">GetSection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CacheProfiles\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddMvc</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Read cache profiles from appsettings.json configuration file</span>\n                <span class=\"token keyword\">var</span> cacheProfiles <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configuration<span class=\"token punctuation\">.</span>GetSection<span class=\"token operator\">&lt;</span>Dictionary<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> CacheProfile<span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> keyValuePair <span class=\"token keyword\">in</span> cacheProfiles<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    options<span class=\"token punctuation\">.</span>CacheProfiles<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>keyValuePair<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n    <span class=\"token comment\">// Omitted</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"CacheProfiles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Cache1Hour\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"Duration\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">,</span>\n     <span class=\"token property\">\"Location\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Any\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Omitted...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now all your caching can be configured from a single configuration file.</p>\n<h2 id=\"cache-control-immutable-directive\"><a href=\"#cache-control-immutable-directive\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cache-Control Immutable Directive</h2>\n<p><code class=\"language-text\">Cache-Control</code> also has a new draft directive called <code class=\"language-text\">immutable</code>. When you add this to the HTTP header value, you are basically telling the client that this resource never changes even if it has expired. You might be asking, why do we need this? Well, it turns out that when you refresh a page in a browser, it goes off to the server and checks to see if the resource has expired or not.</p>\n<div class=\"line-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token header-name keyword\">Cache-Control:</span> max-age=365000000, immutable</code></pre></div>\n<p>It turns out that you get a massive reduction in requests to your server by implementing this directive. Read more about it in these links:</p>\n<ul>\n<li><a href=\"https://tools.ietf.org/html/draft-mcmanus-immutable-00\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IETF Draft Spec</a></li>\n<li><a href=\"https://hacks.mozilla.org/2017/01/using-immutable-caching-to-speed-up-the-web/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using Immutable Caching To Speed Up The Web</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cache-Control</a></li>\n<li><a href=\"https://bitsup.blogspot.co.uk/2016/05/cache-control-immutable.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cache-Control: immutable</a></li>\n<li><a href=\"https://code.facebook.com/posts/557147474482256\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">This browser tweak saved 60% of requests to Facebook</a></li>\n</ul>\n<p>This directive has not yet been implemented in ASP.NET Core but I've raised an issue on GitHub <a href=\"https://github.com/aspnet/HttpAbstractions/issues/763\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> and there is also another issue <a href=\"https://github.com/aspnet/ResponseCaching/issues/97\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> to add the immutable directive to the static files middleware. If you really wanted to, it's really easy to add this directive today, as you just need to append the word <code class=\"language-text\">immutable</code> onto the end of your <code class=\"language-text\">Cache-Control</code> HTTP header.</p>\n<p>A word of warning! You need to make sure that your resource really never changes. You can do this in Razor by using the <code class=\"language-text\">asp-append-version</code> attribute on your script tags:</p>\n<div class=\"line-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>~/site.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">asp-append-version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>This will append a query string to the link to site.js which will contain a hash of the contents of the file. Each time the file changes, the hash is changed and thus you can safely mark the resource as immutable.</p>\n<h1 id=\"e-tags\"><a href=\"#e-tags\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>E-Tags</h1>\n<p><a href=\"https://en.wikipedia.org/wiki/HTTP_ETag\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">E-tags</a> are typically generated in three ways (Read the link to understand what they are):</p>\n<ol>\n<li>Hashing the HTTP response body - You'd want to use a very fast and collision resistant hash function like MD5 (MD5 is broken security wise and you should never use it but it's ok to use it for caching). Unfortunately, this method is slow because you have to load the entire response body into memory (which is not the default in ASP.NET Core which streams it straight to the client for better performance) to hash it. If you're still interested in implementing this E-Tags using this method <a href=\"https://madskristensen.net/post/send-etag-headers-in-aspnet-core\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mads Kristensen</a> wrote a nice blog post showing how it can be done.</li>\n<li>Last modification timestamp - The E-Tag can literally be the time the object was last modified which you can store in your database (I usually store created and modified timestamps for anything I store in a database anyway). This solves the performance problem above but now what is the difference between doing this and using the Last Modified HTTP header?</li>\n<li>Revision Number - This could be some kind of integer stored in the database which gets incremented each time the data is modified. I don't see any advantage of doing this over using the last modification timestamp above, unless you have a naturally occurring revision number in your data that you could use.</li>\n</ol>\n<p>One additional thing you need to be careful of is the <code class=\"language-text\">Accept</code>, <code class=\"language-text\">Accept-Encoding</code> and <code class=\"language-text\">Accept-Language</code> HTTP headers. Any time you send a different response based on these HTTP headers, your E-Tag needs to be different e.g. a JSON non-gzip'ed response in Mandarin needs to have a different E-Tag to an XML gzip'ed response in Urdu.</p>\n<p>For option one, this can be achieved by calculating the hash after the response body has gone through GZIP compression. For the second and third options, you would need to append the value of the Accept HTTP headers to the last modified date or revision number and then hash all of that.</p>\n<h1 id=\"last-modified--if-modified-since\"><a href=\"#last-modified--if-modified-since\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Last-Modified &#x26; If-Modified-Since</h1>\n<p>I'm assuming you already know about the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Last-Modified</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">If-Modified-Since</a> HTTP headers. If not, go ahead and read the links. Below is an example controller and action method that returns a list of cats.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[controller]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatsController</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">ControllerBase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ICatRepository</span> catRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ICatMapper</span> catMapper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CatsController</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">ICatRepository</span> catRepository<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">ICatMapper</span> catMapper<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catRepository <span class=\"token operator\">=</span> catRepository<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catMapper <span class=\"token operator\">=</span> catMapper<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IActionResult<span class=\"token operator\">></span> <span class=\"token function\">GetCats</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> cats <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catRepository<span class=\"token punctuation\">.</span><span class=\"token function\">GetAll</span><span class=\"token punctuation\">(</span>cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> lastModified <span class=\"token operator\">=</span> cats<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">?</span> \n            <span class=\"token punctuation\">(</span>DateTimeOffset<span class=\"token punctuation\">?</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> \n            cats<span class=\"token punctuation\">.</span><span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>ModifiedTimestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypedHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>LastModified <span class=\"token operator\">=</span> lastModified<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">var</span> requestHeaders <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypedHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>requestHeaders<span class=\"token punctuation\">.</span>IfModifiedSince<span class=\"token punctuation\">.</span>HasValue <span class=\"token operator\">&amp;&amp;</span>\n            requestHeaders<span class=\"token punctuation\">.</span>IfModifiedSince<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">>=</span> lastModified<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">StatusCode</span><span class=\"token punctuation\">(</span>StatusCodes<span class=\"token punctuation\">.</span>Status304NotModified<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">var</span> catViewModels <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catMapper<span class=\"token punctuation\">.</span><span class=\"token function\">MapList</span><span class=\"token punctuation\">(</span>cats<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>catViewModels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All of our cats have a ModifiedTimestamp, so we know when they were last changed. There are four scenarios that this action method handles:</p>\n<ol>\n<li>Our repository does not contain any cats, so just always return an empty list.</li>\n<li>No <code class=\"language-text\">Last-Modified</code> HTTP header exists in the request, so we just return all cats.</li>\n<li><code class=\"language-text\">Last-Modified</code> HTTP header exists and cats have been modified since that date, so return all cats.</li>\n<li><code class=\"language-text\">Last-Modified</code> HTTP header exists but no cats have been modified since that date, so return a 304 Not Modified response.</li>\n</ol>\n<p>In all cases, except when we have no cats at all, we set the Last-Modified date to the latest date than any cat has been modified.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>Which caching HTTP headers you pick, depends on your data but at a minimum, I would add E-Tags or <code class=\"language-text\">Last-Modified</code>. Add <code class=\"language-text\">Cache-Control</code> where possible, usually for static assets.</p>\n"}}]}}},"context":{}}