{"hash":"b3e90716ec157ed05d7066933c22b5c41a645119","data":{"tag":{"title":"Docker Swarm","path":"/tag/docker-swarm/","belongsTo":{"edges":[{"node":{"title":"Securing ASP.NET Core in Docker","path":"/securing-asp-net-core-in-docker/","date":"25 March 2019","timeToRead":1,"description":"How to secure your ASP.NET Core Docker image by setting the file system to be read-only. First in a series of blog posts covering Docker image security.","content":"<p>Some time ago, I blogged about how you can get some <a href=\"/docker-read-file-systems/\">extra security when running Docker containers</a> by making their file systems read-only. This ensures that should an attacker get into the container somehow, they won't be able to change any files. This only works with certain containers that support it however and unfortunately, at that time ASP.NET Core did not support running in a Docker container with a read-only file system. Happily, this is now fixed!</p>\n<p>Lets see an example. I created a brand new hello world ASP.NET Core project and added this <code class=\"language-text\">Dockerfile</code>:</p>\n<div class=\"line-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> microsoft/dotnet<span class=\"token punctuation\">:</span>2.2<span class=\"token punctuation\">-</span>sdk AS builder\n<span class=\"token keyword\">WORKDIR</span> /source\n<span class=\"token keyword\">COPY</span> *.csproj .\n<span class=\"token keyword\">RUN</span> dotnet restore\n<span class=\"token keyword\">COPY</span> . .\n<span class=\"token keyword\">RUN</span> dotnet publish <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>output /app/ <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>configuration Release\n\n<span class=\"token keyword\">FROM</span> microsoft/dotnet<span class=\"token punctuation\">:</span>2.2<span class=\"token punctuation\">-</span>aspnetcore<span class=\"token punctuation\">-</span>runtime\n<span class=\"token keyword\">WORKDIR</span> /app\n<span class=\"token keyword\">COPY</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>from=builder /app .\n<span class=\"token keyword\">ENTRYPOINT</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dotnet\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ReadOnlyTest.dll\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>I build the Docker image using this command:</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">docker build <span class=\"token operator\">-</span>t read<span class=\"token operator\">-</span>only<span class=\"token operator\">-</span>test <span class=\"token punctuation\">.</span></code></pre></div>\n<p>If I run this image with a read-only file system:</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">--</span><span class=\"token function\">rm</span> <span class=\"token operator\">--</span>read<span class=\"token operator\">-</span>only <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>p 8000:80 read<span class=\"token operator\">-</span>only<span class=\"token operator\">-</span>test</code></pre></div>\n<p>This outputs the following error as read-only file systems are not supported by default:</p>\n<blockquote>\n<p>Failed to initialize CoreCLR, HRESULT: 0x80004005</p>\n</blockquote>\n<p>If I now run the same image with the COMPlus_EnableDiagnostics environment variable turned off:</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">--</span><span class=\"token function\">rm</span> <span class=\"token operator\">--</span>read<span class=\"token operator\">-</span>only <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>p 8000:80 <span class=\"token operator\">-</span>e COMPlus_EnableDiagnostics=0 read<span class=\"token operator\">-</span>only<span class=\"token operator\">-</span>test</code></pre></div>\n<p>The app now starts! The <code class=\"language-text\">COMPlus_EnableDiagnostics</code> environment variable (which is <a href=\"https://github.com/dotnet/docs/issues/10217\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">undocumented</a>) turns off debugging and profiling support, so I would not bake this environment variable into the Dockerfile. For some reason these features need a read/write file system to work properly. If you'd like to try this yourself, you can checkout all the code in <a href=\"https://github.com/RehanSaeed/ReadOnlyDockerTest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this repo</a>.</p>\n"}},{"node":{"title":"Useful Docker Images - Part 2","path":"/useful-docker-images-part2/","date":"11 December 2017","timeToRead":5,"description":"How to run the ELK-B Stack, made up of ElasticSearch, Kibana, Filebeat, Metricbeat and Heartbeat using Docker and Docker Swarm.","content":"<ol>\n<li><a href=\"/useful-docker-images-part1/\">Useful Docker Images - Part 1 - Administering Docker</a></li>\n<li><a href=\"/useful-docker-images-part2/\">Useful Docker Images - Part 2 - The EKL-B Stack</a></li>\n</ol>\n<h1 id=\"filebeat-metricbeat--hearbeat\"><a href=\"#filebeat-metricbeat--hearbeat\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Filebeat, Metricbeat &#x26; Hearbeat</h1>\n<p>Knowing what is happening in Docker and in your applications running on Docker is critical. To collect logs from my Swarm and monitor the health of it, I use the ELK-B stack which is made up of four pieces of software called <a href=\"https://www.elastic.co/products/elasticsearch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ElasticSearch</a>, <a href=\"https://www.elastic.co/products/logstash\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LogStash</a> (I recommend that you use Beats instead of LogStash), <a href=\"https://www.elastic.co/products/kibana\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kibana</a> and various <a href=\"https://www.elastic.co/products/beats\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Beats</a>.</p>\n<p>ElasticSearch is basically a No-SQL database that is geared towards storing JSON documents and searching across them. Kibana is a visualization took that gives you a nice UI to view all of your data and produce nice visualizations and dashboards. There are several Beats which are used to ship data into ElasticSearch from various sources.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1000 560' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0ebc5c31f11e53052d650c4d1e8106f8'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0ebc5c31f11e53052d650c4d1e8106f8)' width='1000' height='560' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAkAEADASIAAhEBAxEB/8QAGwAAAQUBAQAAAAAAAAAAAAAAAAMEBQYHAQL/xAA2EAACAQMCAwQIAwkAAAAAAAABAgMABBESIQUTMQYiQVEIMmFxgZGh8AdS0RQVIyQzNEJUwf/EABgBAAMBAQAAAAAAAAAAAAAAAAADBAEC/8QAIhEAAgEDBAIDAAAAAAAAAAAAAAECAxEhBBJBURMzUpGh/9oADAMBAAIRAxEAPwDTfwIunu%2bzF/LHaQxO12AIowyLtbxY69M9T57%2bdatbcwJiVFTHQBtVZH6Pc%2brsdezKgIjvDkIoO/Ij8B7fZmr%2beKylsGO7yuT/AGz/AKU6ukqjyTaPdKhFpXLFSUzABU1FS50gr1HtqDl4m0kKAxXIC/5CB8k/KkjetJJl4bzWOhaB9/dtS1bllDjU4iyxRRshOqWSTbHfx/wClPvpVcbiMh303hA8oX/SvS8UkaBlMV13vzQPqI9m1ZZdm7Z/Flh%2b%2blGM7EbVXBxOVTsl5sP9dyB9KkuGXklzMwdJFULnvRMo6%2bZFGOwtLmLMs9HiQ2vYriBUSn%2bd1YRct/QiOwJOfn8B0rUluVWVgLedpmTPMMOx3xg4rJfRzLWnYe/cqGZeIOwC97rDHjp7%2blaibm9fKMk6y51LohOAemk%2bBG/XI8KbXT8jsT6JXoRHdoDMmho4TAp3AQjJ8xmn3LTmCTQNYGAceFQ3NngTTamdkQZCPARjzDMevw%2bte0u7pXBALRM3V4WAXPkRufkPDcUqz6KrLhkg8MUSOZGRYdy4IAHvJrsDWt1Gktu8UqLsjxkMB7iKg%2bK2/wC8OOypewPPY2VukyQFCySyMzZJHRioUYHm2fKn1qEWISW1m1ry3A0CPRqBO%2b31ruUVFLsRCcpyeML7HkvItUlmuZYo4j67PhR8TSts8MlujWro0JGVaMgqR7DVWmtV4jx7iV3xWze7hsZUt7S3eMuigorNKFOzMS2M%2bAXbxqasdKiJre1e2TXyjHy9AIxkHH340iMnLPBVUhGCSvd/mcmc%2bjlGg7H3y6cj9rRsE535ER8a1VY8TM%2bpzkeqTsPhRRVFf2Mh0npicWHCyDmSHUfFvV91Bi/gBOZJn8%2brvUUUopFVGFA3OPOu0UUAFFFFAH//2Q==' /%3e%3c/svg%3e\" width=\"1000\" alt=\"Kibana\" data-srcset=\"/assets/static/Kibana.82a2fbd.1b0079770fb42e6b2214073d91727863.jpg 480w, /assets/static/Kibana.97c148e.1b0079770fb42e6b2214073d91727863.jpg 1000w\" data-sizes=\"(max-width: 1000px) 100vw, 1000px\" data-src=\"/assets/static/Kibana.97c148e.1b0079770fb42e6b2214073d91727863.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Kibana.97c148e.1b0079770fb42e6b2214073d91727863.jpg\" width=\"1000\" alt=\"Kibana\"></noscript></p>\n<p>While you could use Docker to host ElasticSearch and Kibana, I use the <a href=\"https://www.elastic.co/cloud\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ElasticCloud</a> at work, you could also use instances hosted by AWS and Azure. Using a hosted version takes some of the pain out of maintaining ElasticSearch. I had a look at the ElasticSearch Docker container and if you really want to go down the Docker route and create an ElasticSearch cluster, it looks fairly straightforward but a bit unorthodox. There is a cost versus effort trade-off in this decision and it's up to you where you decide to go.</p>\n<p>In terms of Beats, I use three of them which I'll talk about below:</p>\n<h2 id=\"filebeat\"><a href=\"#filebeat\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Filebeat</h2>\n<p><a href=\"https://www.elastic.co/products/beats/filebeat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Filebeat</a> is a tool used to ship Docker log files to ElasticSearch. The latest version 6.0 queries Docker APIs and enriches these logs with the container name, image, labels, and so on which is a great feature, because you can then filter and search your logs by these properties. You can then view these logs in a fully customizable Kibana dashboard. Filebeat ships with a sample Kibana dashboard that looks like this:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1000 560' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-915897634da8d98f5b11d484f35ba7bd'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-915897634da8d98f5b11d484f35ba7bd)' width='1000' height='560' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAkAEADASIAAhEBAxEB/8QAGwAAAgIDAQAAAAAAAAAAAAAAAAQGBwEDBQL/xAAvEAACAQMCAwcCBwEAAAAAAAABAgMABBEFEgYhMQcTFCJBUWEIsTJCUnGBocGS/8QAGAEAAgMAAAAAAAAAAAAAAAAAAAMBAgT/xAAmEQACAQIFAgcAAAAAAAAAAAAAAQIDEQQTITNxEiIxQVFhgaHw/9oADAMBAAIRAxEAPwC2uxaZ5eCIpbmG3R3uZiVCBAB5RyX0qfKts2cx26gfqwP9qBfT8Hfs8g3uc%2bJm6Ae4qxEYtdSw73GxVbPl55z8fFNrWzGZsM3lRv6GA0ax7A9uE/TnlXpYFKgqkJXHLA%2bc0wBy96zSjSL%2bHG7d3cW4DGcVgWqg5EUOf2pmvEgIyxkKKOfp/tACzWSEACOJflRilrvSVuIwolmhIZW3wvsbkemcdD0NRpeOWvZJn0bTNQvrKIkG5UBVfHqo2nl7E4z%2b3OpNw9rFtrdh4i0kfk210cANG3scferOLV/YoqkHLpT1IF9OjM/Zxbs7Fibmfmev4hViWrrJqd0yMGHdxjI9wXBqt/p7Vh2aW6MsgJupj5W2n8QNWPZ2UNqG7sSRDAHmfOeZP3Jq1fcfIjDJulDgeopcqx5RS7j1OWrKDBIeX%2bA1LNJvrncR2s19w/qdpattnntpIoznGGZSB/ZpwoFzulYZ6ZbpWV3BFEbB8dSx61MW4tNEpkG4F4h0zTuG4bG%2bYWN1agrLC6nOc/HU%2bn8Uz2fhrnUNb1OGNorK6mHcgjG7BOT/AH9/au/e6NZX04mvNPsppR%2bd0yftTkD92gRURI18oVARj2wMVbtV7ef75%2bjPCjJNXei8CtOxIdx2f2ipnldS4JPPmAanPfO4ZXO4bc4JJ9qKKmtuMnC7MeDp2kcawoyIisyjJUYzWq2iikeZnijZhIcEqCaKKWPPGqgFYgQDlj1rRYHdIEGUVskhCR6UUUAdHw4znvJf%2bzW2iigD/9k=' /%3e%3c/svg%3e\" width=\"1000\" alt=\"Filebeat Kibana Dashboard\" data-srcset=\"/assets/static/Filebeat-Kibana-Dashboard.82a2fbd.578c653a6c6f2cc34b478714811b5189.jpg 480w, /assets/static/Filebeat-Kibana-Dashboard.97c148e.578c653a6c6f2cc34b478714811b5189.jpg 1000w\" data-sizes=\"(max-width: 1000px) 100vw, 1000px\" data-src=\"/assets/static/Filebeat-Kibana-Dashboard.97c148e.578c653a6c6f2cc34b478714811b5189.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Filebeat-Kibana-Dashboard.97c148e.578c653a6c6f2cc34b478714811b5189.jpg\" width=\"1000\" alt=\"Filebeat Kibana Dashboard\"></noscript></p>\n<p>As well as shipping Docker logs, I write the logs from my ASP.NET Core applications to disk (The best way to make sure you never lose log information) and then use Filebeat to ship these log files to ElasticSearch.</p>\n<p>The Dockerfile below is used to add Filebeat configuration files to the base Filebeat image and nothing more. The configuration files are pretty lengthy and heavily commented so I've omitted them:</p>\n<div class=\"line-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> docker.elastic.co/beats/filebeat<span class=\"token punctuation\">:</span>6.0.0\n<span class=\"token keyword\">COPY</span> filebeat.yml filebeat.template.json /usr/share/filebeat/\n<span class=\"token keyword\">USER</span> root\n<span class=\"token keyword\">RUN</span> chown filebeat /usr/share/filebeat/filebeat.yml &amp;&amp; /\n    chown filebeat /usr/share/filebeat/filebeat.template.json &amp;&amp; /\n    chmod go<span class=\"token punctuation\">-</span>w /usr/share/filebeat/filebeat.yml &amp;&amp; /\n    chmod go<span class=\"token punctuation\">-</span>w /usr/share/filebeat/filebeat.template.json\n<span class=\"token keyword\">USER</span> filebeat</code></pre></div>\n<p>In the Docker stack file below, I setup a shared volume called 'logs' in which my website container stores all of it's log files. My custom Filebeat image then picks up logs from the 'logs' volume and pushes them to ElasticSearch. Filebeat is also configured so that one instance of the container runs on every Docker node, so that it can pick up Docker logs from every node in my Swarm.</p>\n<div class=\"line-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.3'</span>\n\n  <span class=\"token key atrule\">filebeat</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">-</span>custom<span class=\"token punctuation\">-</span>filebeat<span class=\"token punctuation\">-</span>image<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> global <span class=\"token comment\"># One docker container per node</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> defaultoverlay\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> logs<span class=\"token punctuation\">:</span>/var/log/my<span class=\"token punctuation\">-</span>company<span class=\"token punctuation\">-</span>name\n      \n  <span class=\"token key atrule\">website-name</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> website<span class=\"token punctuation\">-</span>name<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"5000:80\"</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> defaultoverlay\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> logs<span class=\"token punctuation\">:</span>/var/log/my<span class=\"token punctuation\">-</span>company<span class=\"token punctuation\">-</span>name\n      \n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">defaultoverlay</span><span class=\"token punctuation\">:</span>\n  \n<span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  logs<span class=\"token punctuation\">:</span></code></pre></div>\n<h2 id=\"metricbeat\"><a href=\"#metricbeat\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Metricbeat</h2>\n<p><a href=\"https://www.elastic.co/downloads/beats/metricbeat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Metricbeat</a> can be used to monitor the CPU, memory and disk usage on your Docker nodes and then ship those logs to your ElasticSearch cluster. Once again Metricbeat ships with a sample Kibana dashboard that looks like this:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1000 560' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-6c53d1ba85513cae41addc7452e102ae'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-6c53d1ba85513cae41addc7452e102ae)' width='1000' height='560' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAkAEADASIAAhEBAxEB/8QAGwAAAQUBAQAAAAAAAAAAAAAAAAECAwQHBQb/xAAzEAACAQMCBAQFAQkBAAAAAAABAgMABBESIQUTMUEGIlFhBxRxkaEVCDJCQ1KBsdHh8P/EABgBAAMBAQAAAAAAAAAAAAAAAAACAwQB/8QAIhEAAgIBAwQDAAAAAAAAAAAAAAECEQMEEiETM3HBMUFR/9oADAMBAAIRAxEAPwDUvgnK154Na4eGONjdvtCuhRhIxsMH09fWtA%2bWhGPK/wBhv%2bK8B8AJef4AMkhVj85Io1JqJ8qdNz/70rSTyhA7vyFCbsWixpHuM1XO0pyM%2bkt4o%2bB8QWMHlpGmdzg4qUGQjIC4%2btU7aaGaYRlFVmBKiS3KFgPTPWmfqcMblBIBEraDIIG5anOMaug32rN1sdXuRoknDiXBdkiMmOZGjY6Z7U0wA/yY%2b5%2b/WnSzctsNNEnoGH/aGlxGjmaMKdskbH81QCNrXLFlQIx6lcb/AFqne8JNxEipcXFsVdX1QMoYgH907dD3roJIXV9MsbFfRTt%2baSObXIU5ikjYgRkYoAyv9ntEm8B85eeMXU0Y0bdRHk9T/T9s1potVNuEf5iTBUkvgsdLahn/AB9KyT4DcOku/AkMdwqtaJd3DvBI2Fkc8vRqHcYLHHTOK0/h3DpbX5uKBo7e3miGiKNtQhl8wJUHoMaTjpkH1ptQrySTXDZPRxitPCSfNWX4YAshYm4bzahrIIHXp96jgtI47aO3CTGJY%2bVpYDBB7n3qrY8N4nBxGKafivPtwhVoeSFy2OoPX3xVG%2bsvEEniyG5tZ4E4Ujx6o3Kkuultf8OpTkrgZOcdulJtTdj0dHifBuG8RIHEOHrc4UL51yMDOO/ufvT5OHcP/To7OWyD2qkssTgEAkn39zSTwXBvJptMM2wSJZJCFVcZJxg7lu/oBV%2bENy9OsDBON87VyLb%2bgRyrdODcCWWdI4rFJmAeRmChm3xkk9etS8MuuEz3NxLw66t5ppCrTGKQMWONKk49hj%2b1S8S4aL9Yo5nJjjlWXcAhsdqtzxatBUbq4bauJy3P8GTjVNc%2bfVezMfgIiR%2bAtIUEfNMfMM9Uj/3WnBUVsqig%2bwooq%2bbuSM2l7MfAOxCMQdwCfxSa25KHO%2bRRRUjQMl0iZRoQhjvlfpUqqqnKqoPsMUUUzOL5YkjkKCD3Ap5PmUdt9qKK4B//2Q==' /%3e%3c/svg%3e\" width=\"1000\" alt=\"Metricbeat Kibana Dashboard\" data-srcset=\"/assets/static/Metricbeat-Kibana-Dashboard.82a2fbd.c97b5ac7d13df8a5c4b3d185b083fe8d.jpg 480w, /assets/static/Metricbeat-Kibana-Dashboard.97c148e.c97b5ac7d13df8a5c4b3d185b083fe8d.jpg 1000w\" data-sizes=\"(max-width: 1000px) 100vw, 1000px\" data-src=\"/assets/static/Metricbeat-Kibana-Dashboard.97c148e.c97b5ac7d13df8a5c4b3d185b083fe8d.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Metricbeat-Kibana-Dashboard.97c148e.c97b5ac7d13df8a5c4b3d185b083fe8d.jpg\" width=\"1000\" alt=\"Metricbeat Kibana Dashboard\"></noscript></p>\n<p>Here is an example of a custom Metricbeat Dockerfile which I use to configure Metricbeat:</p>\n<div class=\"line-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> docker.elastic.co/beats/metricbeat<span class=\"token punctuation\">:</span>6.0.0\n<span class=\"token keyword\">COPY</span> metricbeat.yml metricbeat.template.json /usr/share/metricbeat/\n<span class=\"token keyword\">USER</span> root\n<span class=\"token keyword\">RUN</span> chown metricbeat /usr/share/metricbeat/metricbeat.yml &amp;&amp; /\n    chown metricbeat /usr/share/metricbeat/metricbeat.template.json &amp;&amp; /\n    chmod go<span class=\"token punctuation\">-</span>w /usr/share/metricbeat/metricbeat.yml &amp;&amp; /\n    chmod go<span class=\"token punctuation\">-</span>w /usr/share/metricbeat/metricbeat.template.json\n<span class=\"token keyword\">USER</span> metricbeat</code></pre></div>\n<p>And here is the Docker stack file below. Once again it configures one instance of Metricbeat to run on each Docker node. It also needs access to the Docker socket and a bunch of other folders on the Docker node, so that explains all of the volume mounts.</p>\n<div class=\"line-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span> \n  <span class=\"token key atrule\">metricbeat</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">-</span>custom<span class=\"token punctuation\">-</span>metricbeat<span class=\"token punctuation\">-</span>image<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> metricbeat <span class=\"token punctuation\">-</span>e <span class=\"token punctuation\">-</span>system.hostfs=/hostfs\n    <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> global <span class=\"token comment\"># One docker container per node</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> defaultoverlay\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> /proc<span class=\"token punctuation\">:</span>/hostfs/proc<span class=\"token punctuation\">:</span>ro\n      <span class=\"token punctuation\">-</span> /sys/fs/cgroup<span class=\"token punctuation\">:</span>/hostfs/sys/fs/cgroup<span class=\"token punctuation\">:</span>ro\n      <span class=\"token punctuation\">-</span> /<span class=\"token punctuation\">:</span>/hostfs<span class=\"token punctuation\">:</span>ro\n      <span class=\"token punctuation\">-</span> /var/run/docker.sock<span class=\"token punctuation\">:</span>/var/run/docker.sock\n      \n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  defaultoverlay<span class=\"token punctuation\">:</span></code></pre></div>\n<h2 id=\"heartbeat\"><a href=\"#heartbeat\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Heartbeat</h2>\n<p><a href=\"https://www.elastic.co/products/beats/heartbeat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Heartbeat</a> is a ping monitor that can be pointed at any status endpoints in your API's or websites. Failures get logged in ElasticSearch which show up in a nice graph. You can also use Kibana to set up alerts, so you can be notified of any downtime. Here is an example of what a Kibana Dashboard containing Heartbeat data looks like:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1000 560' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-465482a0009652b512ca4068e11fd02d'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-465482a0009652b512ca4068e11fd02d)' width='1000' height='560' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAkAEADASIAAhEBAxEB/8QAGwAAAgMBAQEAAAAAAAAAAAAAAAcCBAYDAQX/xAA0EAACAQMCAwQJAgcAAAAAAAABAgMABBEFIQYSEwcxQVEIFBYiVWFxktEVMiNDcpHB8PH/xAAYAQADAQEAAAAAAAAAAAAAAAAAAwQFAf/EACwRAAEDAgIIBgMAAAAAAAAAAAEAAxECBCFRBRMUFTNScaESMUFhgdGRsfD/2gAMAwEAAhEDEQA/AGN2KXfrXCd7P0IbUteqvTiHIu1vFuAfPvPz38aZVtNKZUVGdgN%2bUMDtS%2b9HGQTcHX7BUAF7j3QMZ6Mee7/vnTYwPIU64EOGFNZklmklVdPd3E3M/Nh8D3s4FeRynr3S85IUZ/cPd/FXMfKjHypKpVe1Dm0HUZuZgTnO4zXkwhtrV5Lkl0QElnwTVmvhcbg%2by2oN1BGqRMzOTsoA3JrlUgYea5USBIWB4i7SpYRMmgwQxsrACWROZSAdxjIz9a0XZ3x2vFBlsdQgjttUiTqcqEmOZM4LLncYOMg92RuaRssqlOVdwQN61XZFbzT8f2ckIJS2hlkmI7grLyqD9WI/salsrit1wtViRBPSB/D5W03oupvRxfuR4XJw6GMI/PutH6NysnBt8EZVze5POD4wRHz/AN8h3U2l6xKkvGV8cKfzSO7COra9mGuOmA6XUkiupBwejGRXVeJtZAAF/cgfJqrvHg26QVi6Ms3ri3pLVMx7gftPGikf7T618Quvvo9p9a%2bIXX31LtdOS0N13nJ3H2nhXK5YCPDR9RWPKy4zsflSU9p9a%2bIXX30e0%2btfELr76NrpyRuu85O4%2b1qtR7K9CubppbX9SsUY5MNvInTH9IYHl%2bg2rVcM6Dp3DdobXS7OSJZG5pZXYM7nHezE5P8Aist2eapqGqajeQ3t5PIgg5l5m7jzDcVvkt2VgWmkYDwJ2qql8u0zn365/KQ/r2zqnicPSZSm9HphDwheIqgqbtSQ2T/Ii86bEMMTxhjFHnJOy%2bNFFNf4hWfacGlT9Xh8I0HiCFG1chZRjGGbbu2X8UUUpUSpR2kSEbc2BgAgfipi3hGP4SbDH7R3UUUIkqSRRocoiqcYyBjapMcKSKKKEL//2Q==' /%3e%3c/svg%3e\" width=\"1000\" alt=\"Heartbeat Kibana Dashboard\" data-srcset=\"/assets/static/Heartbeat-Kibana-Dashboard.82a2fbd.469a55c8aa411028459dcc712d9f7d69.jpg 480w, /assets/static/Heartbeat-Kibana-Dashboard.97c148e.469a55c8aa411028459dcc712d9f7d69.jpg 1000w\" data-sizes=\"(max-width: 1000px) 100vw, 1000px\" data-src=\"/assets/static/Heartbeat-Kibana-Dashboard.97c148e.469a55c8aa411028459dcc712d9f7d69.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Heartbeat-Kibana-Dashboard.97c148e.469a55c8aa411028459dcc712d9f7d69.jpg\" width=\"1000\" alt=\"Heartbeat Kibana Dashboard\"></noscript></p>\n<p>The Dockerfile is similar to the other Beats:</p>\n<div class=\"line-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> docker.elastic.co/beats/heartbeat<span class=\"token punctuation\">:</span>6.0.0\n<span class=\"token keyword\">COPY</span> heartbeat.yml heartbeat.template.json /usr/share/heartbeat/\n<span class=\"token keyword\">USER</span> root\n<span class=\"token keyword\">RUN</span> chown heartbeat /usr/share/heartbeat/heartbeat.yml &amp;&amp; /\n    chown heartbeat /usr/share/heartbeat/heartbeat.template.json &amp;&amp; /\n    chmod go<span class=\"token punctuation\">-</span>w /usr/share/heartbeat/heartbeat.yml &amp;&amp; /\n    chmod go<span class=\"token punctuation\">-</span>w /usr/share/heartbeat/heartbeat.template.json\n<span class=\"token keyword\">USER</span> heartbeat</code></pre></div>\n<p>This Docker stack file is extremely simple. There is only one instance of the image required.</p>\n<div class=\"line-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span> \n  <span class=\"token key atrule\">heartbeat</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">-</span>custom<span class=\"token punctuation\">-</span>heartbeat<span class=\"token punctuation\">-</span>image<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> defaultoverlay\n      \n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  defaultoverlay<span class=\"token punctuation\">:</span></code></pre></div>\n<p>Ping monitors on the internet are super <a href=\"https://www.pingdom.com/free\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">expensive</a> for what they are, this is because they send pings from various locations on the Earth. Heartbeat will not do that, so be aware of this difference. That said, there is nothing I can do if the pipe for the internet in Australia goes down, so in my opinion, Heartbeat reduces a lot of false positives.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>I've discovered that I have enough material for a third and final part to this series of blog posts. In the next part, you can expect to learn more about Redis and Metabase Docker images.</p>\n"}},{"node":{"title":"Useful Docker Images - Part 1","path":"/useful-docker-images-part1/","date":"30 November 2017","timeToRead":4,"description":"A guide to using the Docker Visualizer, Portainer and Sonatype Nexus Docker images to help manage a Docker Swarm.","content":"<ol>\n<li><a href=\"/useful-docker-images-part1/\">Useful Docker Images - Part 1 - Administering Docker</a></li>\n<li><a href=\"/useful-docker-images-part2/\">Useful Docker Images - Part 2 - The EKL-B Stack</a></li>\n</ol>\n<p>I've been running Docker Swarm in production for a few API's and single page applications for a couple of months now. Here are some Docker images I've found generally useful. Most of these images are not specific to Docker Swarm. For each image, I'm also going to show a <code class=\"language-text\">docker-stack.yml</code> file that you can use to deploy the image and the settings I use for them. To deploy a Docker stack file, just run the following commands:</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># To enable Docker Swarm mode on your local machine if you haven't already.</span>\ndocker swarm init\n<span class=\"token comment\"># To deploy a Docker stack file to your Swarm.</span>\ndocker stack deploy <span class=\"token operator\">--</span>compose<span class=\"token operator\">-</span>file docker<span class=\"token operator\">-</span>stack<span class=\"token punctuation\">.</span>yml</code></pre></div>\n<h1 id=\"docker-swarm-visualizer\"><a href=\"#docker-swarm-visualizer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker Swarm Visualizer</h1>\n<p>The <a href=\"https://github.com/dockersamples/docker-swarm-visualizer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker Swarm Visualizer</a> image connects to the Docker socket and shows a really nice visualization showing all of the nodes in your Docker cluster (or just one on your development machine) and all of the containers running on it.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 852 767' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-60305cecd002fab69f916e0ede97146d'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-60305cecd002fab69f916e0ede97146d)' width='852' height='767' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA6CAIAAACPssguAAAACXBIWXMAAAsSAAALEgHS3X78AAAMsklEQVRo3u1aSW9b1xXOjyiSomliU6QoUiKpeaIGzjMfhzeSfANnihQpcRA1WbaiyLYUI0ORbFoUWbQoUCBddVi0i6JFu%2bkf6Kab7osW6b7tot99j6QpWZLtxAslMHBAXN73vfPud%2b6ZLvneGPVwt1CMXv6uIznipMd8/JhPwNfrkG/cztWPOJlFutB5/KlbanxnLgAm13F441aunl5PVX/2y9/%2b6vd/7px9dv7Dn64KGzrH1RxuHQGTP/XmQvjTn3zxj399%2bc8v//2f//7v8y9%2bbQtLBjf7zSBAvH89Gcg1f/env/z1b3//6POfIxgg3xgX0ji8u5a4s57AurEb2sy1QYwYv4ViDqTHVbGERDjVDcg3bmcafXH5VhCAh32z5AIBpKcFuuTI1NfTm08lRb6upYhoM2up2gXARSFXNWTqeiQB1Hs6e%2bPaTWqfIvvj/rMQFVj2UwIr/EYg1/LJTb/U8iutQFYdZ1vhwg7GfqXpU5rBfNunDnoCgNwM5No%2beRuAHjKr3dW5hPRJLfVqyytvh/IdSEAdR4o7GGMwhGwOkMFcW0OqT%2b%2boyCae5ZG3zZcI2PkNrNuTbbz1R1PsQTvf/iC//zjbfVQ6OM92HyvdhxtHT8T2%2b26xAb0eZSvIdUd%2bsbjwQ6a4%2baR4dF7YP5M6p3LnUfngvHT4JNd9iKd6pC1PdivIdqc/jOl%2bM1%2bsfyjtnhaJwoeVe08y7dPCwVlu91G01HWLW15l25dprTdKb/9hgt45KHbPSvc%2bwFWx/bCw%2bxh31Y4/ltsnLrEBMm5p60oChNnivYy31AhmO9AbLu7A6qCOT5gKNsbqNfGJLXtXcW5XQnInWu5Gil2sGLsBDMb4xGN6SCyrXrbvK2GlCz1UeVezqz/Xjha7GIBnT63UdOfrS/cy/nwT80CGAcu2MA4Xu9HSbijf9qjIqwhwhACu%2bflOvHLAbB7GN/bjlf1E9SBZO4RQxE6NAQEYzJ/q%2bNItPIauHSaq%2b%2bzmEVs/Ah56iEWHkODg41uh4g6zeQQ813jAqMhIYeeCTrCVmlhAINtWn3uQ2NjnG/fp2j3chUUPqF5LgCBy28nqodg6ye2dMZv3Cgfn9fc%2bye%2bdJav7T02lSXbLJdWFrePs7iO5c4rV5/cey533B7Yf5uCWG7HKXvHgLLV9nGmdSDun8s5prLx7WSfxzwZ2Ek4LTwMYUjo8h43cQ8ibdkCLJ%2bI5uba6fTvJ6oH3mccMI1XnaWl77bkGCcGyAlniG7grpPqYR9r2XYlUvZHo7OuH2mG73EQAULi%2b2DlF%2bMJI6eaxtENiDma%2btN1AYtHC9jEiLL/7mN96ALNhjBuRhS4xwVe6fqSFL7xC6T4CePP4I1jH9YzaaHlP2TlFMpDaJ8L2e9jYMhm/9xwX0pKXJohCqrwH0YIyVt5DDPnUFKkluAESIY5LcA8gtbsADqi75ye5mGTYHjLXJqoq%2b1qUI0kgxrQN8auJ0tdHIgb6C9hV9ZMF4C5f/6FXEEAdcKQ35xOFhWQRMpcoaDKvymw8P6dewniJKSNGNRiZST5F9u6KFwZXnWJjmSlraud7avPzfTDUzvcfh6evCbXBAuZVPUTt0GK0edjac4mA3s2uClVAdY6k3sVcIW5WG%2bCghBKIWojBRcDVd60IVTSVl8EX1RrczN31xCJdAh8MDMM6n1GLFaI5vVzINALoJoC4uW3CPePBNFqAwc03iZdfFWoTwczNYKOHA0NsLGyMc/DNOrFCa0R%2bTeA1gdcEXhN4TeA1gecSMLo58quLl4hxmEDg1hJgSrogow9zkJEw/06Yf9sT%2bx7EHbsbYAzqvC7MmiNpnPdvHYE1vjrPl3R%2bBobXe/mJtbjsSSiHZ5WjDypH53aupHPSRg%2bv97KmWNpxewn4CAGDlze5mFU34801Y5VdHCymKBl34klfgcB4IKN3sQaoJcKOEsFVfrQ3w2Ggc7xSAgTn4UwR2RqSLGHZEhRhoVGvOv8yBIwqARslTUQESzQFsQUzJj%2bn8yb0vsSoLzmuzluptDnELbEqAdcrIgA7WQLpmVhuOpadiWUHv4S9LIEVvjbLKEY/NxbgTZ7UHSXorlUrB4%2bU3RO6vj8VFY0%2bpAp%2bPMKtCJXZ%2bKsjgE1H2z2tEsARZAD9CjswS8vQb8CMU/i%2bEHSWq7nOCV%2b/x2/dn6NknZMxuDhTUCOQ/9oEvLTBxULLTCyPPZ2KKraIjH3AIWhcPZfo3LSJemkCBo8GZvVrnC2k4EhkDogjDlr9y4iEgSn0iggYgrwlmLGGxSkqC3WQaUqZjChgYo1ICImJiDgRF9dTmy9FAEtHAhjz8iiC2NLpaHY2loNdrGEJBEZfEYHaHFc0U%2bIqt7HCbcwninPJwiJTXmRK5DBKF5e5CirdklCxJeU14UUJrIAAI4%2b4aGRhk09YZitQiF2FRcg5O55Xj6nMWIB5FTEgqC7kYEYcDKwyG8vbwhKeBDLWINlxg5PRueixl3ShGVqeJSdxwh8ChTibL3Mb2ll%2bSbNRMvsqXAjVKsiOBnk4Ej5tcWkiJlnj8mRSwUAf4DA/EuTMlFqJPUMEvKzRx8NDIMZn6gAIjAczk0jKYQm2tyEvh0S4pTaDMWZsVObrEtBaiTthRhfndDHubpx/i%2bK%2b66Pe9EYh70TokThP5im1lUjXzQ7G6mAsqtiW%2bdFFamQhAhmzx7VJ6zo94WLhQnOMonczeBhygDUqYytsEWWRLsGdsAj1twbWFGR7BJCU%2bgXuStE7Gdtz0qiLM3jQSiQ4d5LZui%2b2TjLbxwuJPPzK6Ob1HpJGsQOWdVq1MWd08u%2bUAtR2N908lnceusQa6QixFW7W6mTtQm0qLtniqclEejKexoCM1cFUIgPBGJ8Wil/myvA0g5sxkRcLLor/6Rj5gBCQntdKmJ1JvysZqx2kmg%2bY%2buF8kthm0AuBwIRGAI7u4u%2bIYX%2blmWkdc1v3HZkqFkGIoRQ6yQ5MJ%2bRBJbbEeCuVmoqL0wnJEhUG8xNRQmCBKVpjAgAQCwbxFGDTSdFGpQEm81EYIjUdV9ziljnwvFZiLKLAQbVWgnRyQ63EMAFoMTszU9GcyZ%2bGbyC1G3rdeI/ALHEhUsiM66m3Kg7qoPPwkx93zz5rnHy8EFd6hSzE2fnKIltERdO7CfJtwb90KN0/%2b9He%2baethz8I57ffXUsa3Lw5xE8nXoAAZCKUQaqejCrI3IPQvGIHvDxKxDSVnaZI2Z6iFOMlAv1CRuZ93CQlz1CksABp9guErZszDxEwuHuJwRIRUYUgM/HsRCgNJQaCfDECCDhzIK2uPjcbz8ErDNcQQNdkQ5kLS8ji2o%2beWKjhKgJw37sOeopQxepzKAvIOVolvkzAi/40iT4cbRhMA%2bXYWMTVCxFAK4GvsP0yW8bNWiuBKoYiijAY8TBaLwQCJLG4GLjZEil2eTwGbJHaUT1IHLtILuoRUH/iNPlSqIyoiVohwwCaB1moT4DVem/oWWZILzOplrz5ZBHBDX8D4CYCSPbgjbYHS8eaiAtFZKggZR99RCBjCqbH1VYCiwNS26X5ZAGtAdI52TGVMxK/xZ%2be9Ah2QkBrfsgbA9qv06QaRGT4G5STlwn8GUSnRgBhbfancYSYoYgtNPPjE/tGFhYUJ2PidQRIK2GKZNaE2pJa8FGAwRtj1AfkbDtXQ4uxzFdsdBaYSRe/wlWX6PKKWlNJ4xTLI7vPxQsoXna%2bCossUFlUXBDAUhbpMrpDWB0%2bho0iXQlT0qoB6S%2b4whLJQoU5Jgu16B2JKmwCV0GpBhIzq3wVmh1SbTaZu8mFRp3sKDbRyZAeDvUyLGNNYx4BFWSUeBdjonoxoCfJih1BDFBZ2H5cbb8RD9A2QgKO7bkQI2t%2bAg80%2bzPT0RxMrjaI2VG1MI042bFAz4UwwFeAjR4BQYWtsIZlNH/YFuLADnRN7Mx1LjTHle4EaT1UBFgcji0J2YYmIi5NMjljSNCp8zjdjxECm5bV5LiDQT02OZi5kDQfkqb8mYWwAhl3spgcX6et64xdbSUQeeNhAZ9TCRnGRmVYYHNLfBEdhHZpgurVAVS08ZCAGUs0DQCQ2JMlrjCbVAgyhOIgXFEHtH9oXGJjUSgvpSqaLPAl7MmCUMbnYn8SA7uw4Za2V5jyWl/syZI9UVxRP%2b3J4mB%2bha24xC3yMkGmqslqesMulFeJkjIZpDe0%2bZXUhjNTX8/UBzMaciVVWQEyVRnMr2U2oPCqv5i0/8iUp0L%2bKoSog%2bF5iE/9j8zXF39Olf7AN3TpwgsHCnlL4IKei1efAV%2bNJG8UPEsAEQZaMMOLCPbqpZAu8TmighsAPxepCtF54WUPraDezve2rpNv1QtP/wcsuEyp87tKoAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"852\" alt=\"Docker Visualizer\" data-srcset=\"/assets/static/Docker-Visualizer.82a2fbd.ef947d7a6c5b05cbade21f2e4cdffab8.png 480w, /assets/static/Docker-Visualizer.8cbd2dc.ef947d7a6c5b05cbade21f2e4cdffab8.png 852w\" data-sizes=\"(max-width: 852px) 100vw, 852px\" data-src=\"/assets/static/Docker-Visualizer.8cbd2dc.ef947d7a6c5b05cbade21f2e4cdffab8.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Docker-Visualizer.8cbd2dc.ef947d7a6c5b05cbade21f2e4cdffab8.png\" width=\"852\" alt=\"Docker Visualizer\"></noscript></p>\n<p>A word of warning about using this image. It has full unimpeded access to your Docker socket which lets it do basically anything that Docker can do (and that's a lot). This image is useful for development and testing purposes. If you want to use it in production, don't expose it to the internet, only run it in your local network if you trust the users in your local network that is. You don't want your Docker Swarm turning into a Bitcoin mining farm. Here is a Docker stack file you can use to deploy this image:</p>\n<div class=\"line-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span> \n  <span class=\"token key atrule\">visualizer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> dockersamples/visualizer\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8080:8080\"</span>\n    <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">placement</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">constraints</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>node.role == manager<span class=\"token punctuation\">]</span>\n      <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">limits</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">cpus</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'0.1'</span>\n          <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 100M\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> visualizeroverlay\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/var/run/docker.sock:/var/run/docker.sock\"</span>\n      \n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  visualizeroverlay<span class=\"token punctuation\">:</span></code></pre></div>\n<p>The container has to run on a manager node, so I've added that constraint and also added access to the Docker socket using a volume mount. I've also limited the resources the container can consume. Finally, I've also given the service it's own dedicated overlay network, so it can't talk to my other containers.</p>\n<h1 id=\"portainer\"><a href=\"#portainer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Portainer</h1>\n<p><a href=\"https://portainer.readthedocs.io/en/latest/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Portainer</a> is a free and open source Docker image you can use to administer your Docker cluster. It has full support for standalone Docker and Docker Swarm. It lets you do everything from seeing what's running on your nodes, starting containers, viewing logs and shelling into your running Docker containers. I find the last two particularly useful.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1680 802' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-a1fbca86ccb10933ab04cc171b441015'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-a1fbca86ccb10933ab04cc171b441015)' width='1680' height='802' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAfAEADASIAAhEBAxEB/8QAGgAAAgMBAQAAAAAAAAAAAAAAAAgBAgMFBv/EACoQAAEEAQIFAwQDAAAAAAAAAAEAAgMEERJSBRMxUZEhQWEGcYGyFCIy/8QAFwEAAwEAAAAAAAAAAAAAAAAAAQMEAP/EABsRAQACAwEBAAAAAAAAAAAAAAABEQIDMQRB/9oADAMBAAIRAxEAPwDzOPpt9yB0Fjjrrhla9gkr12xl2odS12QPsMpxq4fpcAcNBOAQe59z1SNUTnjFQZOBNH%2bwTscHs2Z5LjbH8TTHZkYwVpNRDQfTX2d3Ct9WPJI1ZOliTePCMSbx4U/l/hB6HBdn5CiPZyOlZpx/Yk49Ar4k3DwuVxi3brwVn1n0S91iNjjZkLG6ScHSfd/YLqsJLRq1Z98IzjUWETc0MSbx4VJYjIAXkHScj2Wn5f4UPzj0Lh3yEBInQcDxapgjHOjwRncE7tevDUkmNWGOEySOkeWNA1OPUn5SPcNBHEKTiPQzx/uE8z/9u%2b5VvrnhGmOrc2TcUc2TcVmhRHs7leG61jbkMc7WPEjRI0ODXDoR8hbtkc0YacBUQjfxqac2TcVHNfuKohBn/9k=' /%3e%3c/svg%3e\" width=\"1680\" alt=\"Portainer\" data-srcset=\"/assets/static/Portainer.82a2fbd.2b9ea4571a94bfa354f4fe57f4fef391.jpg 480w, /assets/static/Portainer.cbab2cf.2b9ea4571a94bfa354f4fe57f4fef391.jpg 1024w, /assets/static/Portainer.58d2b6c.2b9ea4571a94bfa354f4fe57f4fef391.jpg 1680w\" data-sizes=\"(max-width: 1680px) 100vw, 1680px\" data-src=\"/assets/static/Portainer.58d2b6c.2b9ea4571a94bfa354f4fe57f4fef391.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Portainer.58d2b6c.2b9ea4571a94bfa354f4fe57f4fef391.jpg\" width=\"1680\" alt=\"Portainer\"></noscript></p>\n<p>Portainer also has a visualization similar to the Visualizer image I spoke about earlier but it's not nearly as nice and is buried in a few sub-menus which is why I prefer Visualizer. It's basically competing with Docker Enterprise Edition (EE) which is a seriously expensive piece of kit, while this is totally free!</p>\n<p>Portainer has user and team management built into it, so it's not wide open to the internet if you expose a port. Interestingly, Portainer also exposes an API. It's a possibility I've explored yet but you could use said API to deploy your Docker applications from your CI/CD process. Here is a Docker stack file you can use to deploy this image:</p>\n<div class=\"line-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span> \n  <span class=\"token key atrule\">portainer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> portainer/portainer\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>host unix<span class=\"token punctuation\">:</span>///var/run/docker.sock\n    <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">placement</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">constraints</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>node.role == manager<span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9000:9000\"</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> portaineroverlay\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> portainer<span class=\"token punctuation\">:</span>/data\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/var/run/docker.sock:/var/run/docker.sock\"</span>\n      \n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  portaineroverlay<span class=\"token punctuation\">:</span></code></pre></div>\n<p>Once again, we are binding the image to the Docker socket using a volume mount but also giving Portainer another volume to store it's data. We also set a constraint, so that the container runs on a manager node.</p>\n<h1 id=\"sonatype-nexus\"><a href=\"#sonatype-nexus\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sonatype Nexus</h1>\n<p>[https://hub.docker.com/r/sonatype/nexus3/](Sonatype Nexus) is an open source repository manager that can be used as a private Docker registry to store your images. In fact, it can also be used as a repository for NuGet, Maven, Ruby and NPM too. It's pretty powerful stuff and has user management built in too.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1108 624' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-7ea038dfc34a61d60f779e427c56d6fd'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-7ea038dfc34a61d60f779e427c56d6fd)' width='1108' height='624' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAIAAAC2bqvFAAAACXBIWXMAAAsSAAALEgHS3X78AAAKbElEQVRYw%2b1Za3BUZxlewqUYJIEEhgYSSxJCCZRqGwyX4do6tqXjqFPQH6JAdWzV1tbxD1pwtGnr4IxtR3OBhFBS7Tg43mEggZCSbHY3m%2bx9k%2bzt7Nn7LXvfs/fNxeecb7PsJiL5YbE/eHJy8p33u77v977P%2b30T3vLih75%2b6uChEw2lJaXr1q4tLSkpW11eWVn18MPrKio2rK%2boKC8v21BZVf3IIxsgraoqKy/j8XgbjjZ94S1h0WNfqa%2braWxshGT9%2bvVbt259lMOWLVvwqq/fsrmubtOmTTU1Ndu2bauuri4qKlq2bNnSQkCyaNGius2P1tZUr1hZcuDA/iWLizZW125/bFvxihXla9esKilZU75m1arSJUuWYuiKiorSVVhmycqVK9Gdt/yzy37856MvNB2srd60a9euzXWbP//447W1teVlq8vK15SVlaFncXHxQ0uXLl/%2bmRXFKxYvLsJy97xy7vvXGF7ls3sbG775jaOQVFV97uDBQ3v27Nm9e8/%2bffv27t174MCBhoYnt2/fXl9f/9TTT%2b/cuRPNoAOvEFg93s888%2bX6zbWr16x755238fn8V1946Xsnlixbum59xarS0srKDatXl7DNnn2ublNNWXlpaWkJVsX2b9jR8NyRLx06vG9Hw47Gxp1PPPHk7t07YcuNGzfCctCksrLy%2bcOH29s7mptbzp0739Fxoaur648Dun/oUx9cGbzU2dF58QNILuShM/unAOfQ%2be5Ag/bz59tm23R0dLS3t7cAmLW1tbm5ubW1FXIiaGslaIOEd%2brUz868ceb0G6dPnjxx7Nix48e/w72Pn%2bDw3RdfPHr0SOeljybdwojkt04rpVKPqVUK2bBoVD48PqoaG8fPmFAoTCbiM8D09Mw0%2b8Lv5ORkVjBb/iTA02o03Td6//r3f/Z9DPTxBwc1Gu14HkbVKovd7dHetAy8a6O1wyMS/kD/v65eu36jVyAa6u/vGxoS93T3mEwmKwubw26nTWaLxUxnJVaL2UzRdDKZnJqamvzfgYzGM5vNMvW4WCIRCUVisXhco6ULYTQaHQ7HzH0H9i3D4W4KpNNpVgGKolRaSiqX8/n8kZERvcFAFUKv19vtdjLmnbHn4ZNQIJ6IR6IRWDonIQUi8Xq9oVCIp6fMmlGZWHCLLxANCoQ6rN9IGyij3pB9dGhhsSYSiVg8jg5hPOEwwzDRaDRWCIaJACgkOMTjcXySxllJLIZPCFGVmAfSHkgkk%2bQzNwuEoRA3MdudgQRy1KLAc9lMbitlMxm1Wr10aFAqFtrMRqeVduGxcY/V6HZYGW51lEGvVCqMJlMoGMLgGC40C5SdDodarfb7A%2bzc7AQRm8UyrhnXUwayDjTTa7UqtXrC5yNt8oEpjOyGG6KsLdhKjEmqaMogVypg21G1mqZNOVVZBV7vkr5ySfHmR/zfXe75UbvgtQ7%2bz/%2bkOHNZ%2bZMPZa93yfD%2b4UVZ61WFVqsdHdNIpSNCoQgYGhoSCIQqlUqj0ZBYR0GpUICOEEhjY2OcZFwmlUIikUhJM0hHhkcG%2bQKFUsl%2bFoKMwMYhO5iGNLjDJWNjcoVidCyPXQC1mrf/LcEX3xx%2b6b2/vd/ZeaRt/GSH8ltt8m%2b3yZ76tWhvk/DA28IdvxT%2b9KJILpeJR6S3P%2b67ceNm783eW7d6u7u7oQPCZpgDCoLBQQh7enrAS5BIJCP9t29fv97d3z8gkUhIs76%2bPlAWjIC1ymVQUCpjIUdpRCIRDPKvXLmK8WGhXBexeFghlWiU4Bk%2b3gqZBJIRVi4eEol4FFjGSGkNJrXOotMb2MdAsZFAGVGFB0WbzaanjJ4Jr8vl1Om0FouFNtIIFbgE2Xp2x2Mxr3fCoNd7vX7itXBUh8MODsCmB7mWEYYBpep0eqfTCSujChxrpGm9TmeiTfB7E00LhCJYFlzCOjvD4J1JxgfU5tc%2bHP7FXxSvdg0PqMyZJMZn4LXBYJBn5ACyNNEga2PuycFgMGA%2bp8uN5SIK/T5fmOsJXwe1g8hyZId1%2b3y%2bWCxOOA4sjUWjWTAYSKZSpCX6QgJ9PRy4cfwY0%2bf3g2LcLid2UqVUIauQYZOpNAinV2k78nvBq39Q4H1DboEklc6Cx1r6vz6IKrvdGZtQpRJYdwh5w%2bV2W21WTE8YDexGeC3KRCxmSyAYyjEdlmaxWKE%2bZmJZcGoavWBsENp80sQbNADnwTaiFxQuIOnpTCwSmJmZJCw%2bw2WJVCrFM94LcCEkMibsA7sBIB44DSwHXslPCSiD%2bQIBfyweyyowPQ2vAO%2bBv3KrIdwCfYja%2bUCvCY8bMQFugBOQXJsD2mO5%2bb1IOru3AhSrgN3u9oWZGCZADNisNgi1Wo3T7Wa9JZUiSTEUDMK/aROdSMBlUpjB7XZBYjKbYXLOYGmb1QqGgfuifc4NALI4E2282dsrl8t1ej2MlcoDPgOBQO4znUqDTKOx6MIUsNuDoXAsnkiyFg0ji%2bQyFObOzAL5Jxxi8xSRwec5wmbQEothYyCd5jpGsJrMPMCoCAbwNWa0Oxz5IxPEOSvkkM5wMXBvFzIYXIhhfySWSAUCPm5DHIgExAZiH06S82C4FlgLpzdsOPFsn88LgkDAYC3kKOJxuw1cqiIH1TkxYDHR165fHxYP40CZGyTXAISXLyFUsaAdsNsdMT%2bVjIXgGzAhFspZMUVGySIziW2OhCNQKSdLxBOcx7PWJVbjknc4R0p3es/uAFzObDLDYvN3ACxXsAPp9MIVsAc9%2bigT9k54dXqdyUjhyOf3BwkPEBfGIvw%2br06nm/B6Wf9mJRmvx4PUiRWT%2bdDW7XJRBgqOxjlUQQxMTU9hZGTCIREOxZqCCOCCALrnC8h5aUEu5HQ6PAEmFk9hExGXOAa6PZ6JiYnJqcl8DkHmcrvdkGc4AsG2I0jgb8TN4BKsjf0%2bWBc7OYeFyI0HJKFQqnCGh8mwPXm1U%2bnMZISJYi9z5ESMshAFWKcPM9FUOgPnAakHA37oAE6YQ6MIzQnPBFISYT1IQKBYCnE20gxRjlQA6/7HPOCw2/j8QZlECquRQfLHn8qk8o/zxPEWtANQgDKZ/QEWyNI2cvVCLnN7cr6IQigURAYF7%2bdcyO/14VCAI0HOYbCZOFkg8%2bIcgSyJzGWxInSNFqsVa7RZLTgs4jCHNhghLxNbkYNfviT92vuDNxXIxNOwJuyCvV1oDMBjCG/CeQJc7ocykBCGJpwNevV5veBN1kE5CWIaaRucQ5rhjS7oCybwc2BjOhzCUDinwPFcTgfOcEqlkuauoJyjJ8EU/DHbyxeEpy/LftApGlBDgUmSVReqAE5v3G0kTi4r8TzkH%2bjZ2nic3Daykjjbfk4b3LNibFd2HPZzFuTeQ7YUi8u/J6RTiKLM9AxcKIMyk3eTWJACcBgm24kpwLwbyRzZ3SXMPGRryU1lTi%2b4pT8UCYQieKOcX7XQHYh%2bWvFAgQcKPFDggQL/ZwWoewFHCZz%2bmU8reLZ7AVnM5XJl7jvIGXvOxRKC3B9SxfvVAtDU1PSb%2b4uzZ8%2b%2b%2b%2b573P9Esk9rGwsUm5ubW5qbUYXPlpaWfwMn1/xGNpQ3vgAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1108\" alt=\"Sonatype Nexus\" data-srcset=\"/assets/static/Sonatype-Nexus.82a2fbd.76bfd2bac77e90ad5f1f27ea831b566c.png 480w, /assets/static/Sonatype-Nexus.4d765a7.76bfd2bac77e90ad5f1f27ea831b566c.png 1108w\" data-sizes=\"(max-width: 1108px) 100vw, 1108px\" data-src=\"/assets/static/Sonatype-Nexus.4d765a7.76bfd2bac77e90ad5f1f27ea831b566c.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Sonatype-Nexus.4d765a7.76bfd2bac77e90ad5f1f27ea831b566c.png\" width=\"1108\" alt=\"Sonatype Nexus\"></noscript></p>\n<div class=\"line-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.3'</span>\n\n  <span class=\"token key atrule\">nexus</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> sonatype/nexus3<span class=\"token punctuation\">:</span>3.6.1\n    <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">reservations</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">cpus</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'2'</span>\n          <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 4GB\n    <span class=\"token key atrule\">healthcheck</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"CMD\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"curl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--fail\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://localhost/service/metrics/healthcheck\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token key atrule\">interval</span><span class=\"token punctuation\">:</span> 60s\n      <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> 5s\n      <span class=\"token key atrule\">retries</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8081:8081\"</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8082:8082\"</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8083:8083\"</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> nexusoverlay\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> artefacts<span class=\"token punctuation\">:</span>/nexus<span class=\"token punctuation\">-</span>data\n\n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  nexusoverlay<span class=\"token punctuation\">:</span></code></pre></div>\n<p>Sonatype Nexus has some pretty hefty minimum system requirements, so I've reserved the necessary CPU and memory. I've added three ports to support HTTP, HTTPS and a third port for my Docker registry, you can configure this in the admin menu when you add a Docker registry. Thankfully it's just a matter of a few clicks to setup and here are my registry settings:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2048 2732' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ced7ba4473eaf6c4dc1fc0ce75a937f7'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ced7ba4473eaf6c4dc1fc0ce75a937f7)' width='2048' height='2732' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAABVCAIAAAB2EHWhAAAACXBIWXMAAAsSAAALEgHS3X78AAAOBUlEQVR42u1beWwc1RlfUFQiRDn%2bqJSAiaqoUtpGVYLklAqEAkrrCsjhJE6U0DYSf5T%2bgaoWIRSwAdvESUBVKWqRKqiKAg2CJG1aJTZ24tt7zuztPbz3ffhYr9fey9d6%2b9v54mHY2OtZx7EdiZ9GT9%2b8OfZ97333m5V8Z%2bOG352rfvGj5x/9fsXOHTu3bt36Aw4PPfTQ/fff/8ADD3yXw7333nv33Xdv2LDhnnvuueuuuyQSCdraurd%2buLVC8r2f/fbf4T3vyiSSDVsqNj/xxJOVlbuAn3J4/PHHQe/cufOxxx7bvn37vv37d%2bzYgcfxNnrPI488Ul1dDQLtyy%2b/DOKll146ceLExo0bKyoqMAy0mzdvRj/a48ePo%2bfhhx9%2b8MEH77vvPnRKtm3bVnXk6Weqn6zcVbl799P4vcrKSvzwli1bHuUAYtOmTU899VRDQ0Pdm2821L/9XlPD6VONTY0N7549/aemt9/522cfK4f/fN3deOa9xvq3T516p%2bnUDTQ1NfEE0Y2NjQ0C1NfXo/PMmTP1HKjn7Nmzp0%2bffoNDXV0dEXT15MmTdRxqa2vfxGAaGiSvvPJKw1sNta/X0Rtx7eDBg3v37j04j5qamqqqqg8//HAunx9JZMZn5ozxfCqfT3OHP5OPz%2bRHU9Px9Mxsfg0g0Wo1SlbT2Sttbm6%2bfv16a2urVCrV6/WaeWi1WoZh3G6XLxjpY/Q6d/Rjaejvvf7PmfAlTeSiJnKejV41xb7UDLZbR7LZbGIi6QlEvB6PzWazWq3BYNDlcpnNZovFEo/Hc7nc9PT0zMpBEgz4vV7fgN1h0Ov0Oo1Rr7NaTF6PK%2bD34RIdoAcHo2A3l5ubm8uvK0gG7C6709NvGWht72y53tUtVbZ19LZ19GgMZrvTjas4zFZ7dHB4YGAACxKJRL0%2bfzQaDYXCwSCaMKbBHwg4HM5AIBAOh3HJ7/djsleJgR%2b/Idv2umxXvey1c6r9H%2biffV/33Pu6vR/onzzN/uh12fZa%2bU/q5BV/7Gm47Aj5XAZj/9DQUCgUikQikI1wqACITcDvD3I0esAAOInFYjluvW43JK/9S//qZ7raz7UffWU8dUl/6qK28YLunQu62vPqP/yTefVT7cnzht9/oj3fbc/PzaQzmVQqNTk5CTnOzgM9PJ3BkclkuTa1KpAMBT3xweBwJKgxO/sNWj2r0DJyjUqmUUn1jMxjN8Ui/uGgZygSnJqexuz6fD60EJvkPPCW5E1IrRYkHm9ALpe1tfyPZXWsWq3R6jxen8vtcbnczvnD4XT5fH7cPTU1hemn2S0aLz9oIbEKkMAEmfr7GWWvUt0BcwkWoKwOh8MtAOwg9BLjBgM3G0HiiloIzySHKQ4gZmdnc7cAPF7ChqbTaQmG5/X6fT6Htf8CjAx4aG9v1%2bl0Xq9XyAAkBwMaHx%2bHRfd4PGCDtwOJsTHoNJQbJgh6DGKQA07Rj0nCzVPLBXgoYYKIAbfH4x2wWrra2xgOTqfT/U3QCmB28QwtgtAdjI6O0oqBZzyLm0cWwfDwMBFD4oBZwBqKYsA2YO1s%2b69azYKBIvkRMkB%2bFBBODN6SSCSwOGjHxsZATExM8Eq2oFrzMrYyKwC3bxlwdPe1qtUqlYqh4UJOFhQh9ENJMIt4ntYBPitYcGkFJwCZIUdGHo3zdyFMJG4AzYsZ%2bCGFWRIiRciDUKJLqlKzLKkBgNCF50EoQjRuoQiBAZIfSAhWABKFHmoJPB2bx7A4gGFxIuT12qzmzpYvELdhCQwcMM1FDJD/whCLXgqRIMkBMEqeJrnC6CFRdAlrCNNRVjBXOva6YYVg%2bG0Wg7Hlryyj7JNKMW4IzM0iRAzACkFOePmhFaBHSDxIeMIcSHgwkSRLYGmiTICHpVegoAUuq9f4H7lcQSsAeShiQChCRcCU436f1wsrU9DieByt8BiNxXBAkmKcJRJ/AFg0MQx43M4Bj6lTDTPEsmAAcTxEyG63F60AgFM8JnxLMpsdSaViqTSOkWRqNJ0aSSaHJ5I4jSYSsWRqdi4PTUS6kyv/KB283xAht9fncTtc/TKlUkFq0MMBqkzrIGQABGzIjRfMFpKwzLmP0lW7Mkd/mTn882zNL3CA4I496UN7Mof2zBx7dvb4c/yRE3ngqReez7kdnN3ILc6A3%2b9QKiytX7EaLaYfuRgGLXTDpUQoh8nNz355Ln/wmfyLh/InDix8/Ga/8Jj71fOijheey/16X87jXIoBr89p0Jv7erpkvUqlEgxAeIqcMe8HYHAgVzglKSI9HksW5CcxORnPZMeykxOwVNnJ0XRmfGp6fGoKdGJyii4V6OwkZXUij/zSIoTB%2bQNmm/WzS58wDCuXy8GG0AkIzSh4IKMOmvcGeEs6lUpzXjeTTsM/FU7TqUwmjVMchexg/h4Q4LuMQ4QOwAa5TQPOSwoXpl%2bpKBgickwirdAaQuCJHe5WjUOlNUplcpZzw0JBAgPIEjHFMplMoVAgVsUqoUXUBJ5htWC%2bqMWrSLSWnU8uhwFuEbwRv5%2b1BXT9Zo2alUqlfX198Fm0Dnw%2bAK9kNBoxbvRgrBT2gDc/B3QiTLjFSS2LDX4FkA3om3uuIRxSyGWYU6hsaRECjRhnZCQGLwurSlEQHzBHo5FQ0D86MhxH1BONRMLBwcFCFQM3g0PK%2bnFnkAO8NfQKnVCtJePnRRmw2/VS5gu1Rq9RqyEVFouVrA1QxMAsZ/sxXKyDj4PNZgONMeE2SB1Wxh8MW0Nx12DCFk6Y/KPWcMIbCMG34524DVODR0DjTtwPp4mfoB7wgx9CBFGmCHm8brvZp7rAMlBgFcsyECG8Fz%2bG8RUxcMN0jo05OeAGPtXkg3hEa5Oz%2bcmZuez0XHp6LjuTRw9/AwiKpTEXaNMFM3UDuITT0vHPglbIa3c5LrNdDMvKZTI4Y%2bgoNBIqi5YWgTxxoQTEAb/ND2itrRDW0eEwWyzdKiWmX82qobvQ1P7%2bftgZk8lUFEpAWCGpWAfwQApHaTtl30TzxKwAwn66VDpZEcsA4kiD0Sgr%2bC81vBisJ%2bJerwBCR4Zf5VMTKCwI0loQlMUOc51E86lw4eaREUgdOAcBlaUWN1N6vVg9Yk6kIysIkdPiM15BPqnisGBODGmBuGM0COvRQ6pWwt7n5kvBi10t8SyeQg4krH2UVmJIkc1okLGsmvJ6ODIS/aJQggpyYIBUbbHJE4nSHi0nohQuCCXs7mZdEMNXcCArJEwp%2bWAOnVAMyIMwKVvrUAJm2OVlbEHMPewP1gFSBCXmfZlQB/jCCckx6QPl8iT3oxxIN3CJ7iEdANBPeT3132JY8XVG5nTY9SaTilEzjAqODFZowaQeoBHQDgDVSflyNF5HNBlcovlTepysPl9TKSFdYhyCwJHZjCpFj4LRwpdh3LD0C4bTVFUHAR5WxAOUmHvwL5IBFxhw2kwe9pxer9VodZAfSDkVJgjkyEgHCvsa4XAhXuDCOArsoO8gaFdmNRXj6xVwOaxOQ4ue6WEZJdIaSBHCBNs8EKUIExpYITKmgLB0hTkrYU9KWM9bZoBjwhccciovqKVfycECo1JwmQ2CalgkuGRMPAkxNJXUFPYUg4Y2o6WCD4hIJELKSmoKkBfjw1UCzADpPVwbVnUlEhqbvVelLgxbLiP5oX5qhcEcRQQz86EBgQ8W%2bIBC2FPU0gqId7eiGLAO2HplfRoujBN6gKJ8QPhjRT%2bcW4stWJ4Bt9XulBlMCqUKArPg/gCllF1dXZ2dnR0dHRCqq1evtrS0tLW1IWgF21euXOnt7cWldg6wwqug0EIdKGyEFU38zVtMtCdJxXEA5ohUGZfQiRZiTXusq1MB%2bAYDJSAMJShExSmZUYyVhHAtQwkxDPCemPJaMp0AWCKDUxToF6nsOmKAIn4YTdjBJFf4p60AGEfyD2CGTCS/SVFUDF4zBngz%2brUpvMkTLRb0rwsGoKNUklh3lTmRDODua9euwUTCXDY3N5dVwFkvIkRqQIp7h60A7CZiaaiphasXoRMKeoetAE0/5p5CMawDRT609U3ErVdKbuMKUBoFTkLcV02F3chIhHYmaR8bl2A9KRdbKZQ2G2WvAF5HNVCMm9aBPi%2bggII2g4dXFCJ3KcWGEphdOCZyW3y4T6k6Fa1oZ3cFIWajuwwG8ABiVfqUBpka95lcCFcRHSGlRA/tga9fJaZPDUha6LstvILiUKIBqrtQmoZLOAW3lIjSs/TxAf8hAoki2lVigL6XwQhouFRNITbQzysfXz4hv8GDLvF1F762vjy3uJxY6M4OJSwWi9lspj2VVTb5K8MACCMHEOvhI%2bSydYA%2bFKSNGcotoX%2bU7Avjap6%2bxbLPbUkpIT92ux0tWEInknd4hjtpBWji8SQMEX3NR/U5bnc1Sl9swVHwDg6G8vZtei8nlKA9bTgsKpti3OShySyS3RTWqEuUoJfECsdCZEbJ6oPG3MP7iKlRL/vL9CXrdmUzUPiAhMa0ogNdJRG62ZGtSIV5VZN6pSvWYxuRu0bbLcMGfxwpTHp%2bG6aocrruGAhwjuwfPe6/tLs%2blfvfa3VeZPyT2QysDtW5oA/rmgGsQMGAptLjE8nERHJ8go8%2b03z0lll1FP4AURYD6TT3LRnXch%2bZrT3KY2Ad4lsGvmXgWwbudAZcIkDfxk2sBShiL3GDJCwCoVAIkX1uLcDvNy/WKbkkAhcvXrx8%2bfL1VURHR0dPT093d3cvh66uru55gKZ/BxAteXr9Yffu3VVVVceOHTt06FB1dfWRI0dqampAoD169Oi%2bffvQg0uHDx8%2bcODA/wEWD/eGzUJI4AAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"2048\" alt=\"Sonatype Nexus Administration\" data-srcset=\"/assets/static/Sonatype-Nexus-Administration.82a2fbd.5c7f6de2fe445475bad2bf7a72b7fed5.png 480w, /assets/static/Sonatype-Nexus-Administration.cbab2cf.5c7f6de2fe445475bad2bf7a72b7fed5.png 1024w, /assets/static/Sonatype-Nexus-Administration.b3618b3.5c7f6de2fe445475bad2bf7a72b7fed5.png 2048w\" data-sizes=\"(max-width: 2048px) 100vw, 2048px\" data-src=\"/assets/static/Sonatype-Nexus-Administration.b3618b3.5c7f6de2fe445475bad2bf7a72b7fed5.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Sonatype-Nexus-Administration.b3618b3.5c7f6de2fe445475bad2bf7a72b7fed5.png\" width=\"2048\" alt=\"Sonatype Nexus Administration\"></noscript></p>\n<p>I've also gone to the effort of setting up a health check. Health checks are a wonderful feature of Docker. The container will not start and join the network until the health check has succeeded. This has stopped failed production releases for me in the past for my ASP.NET Core apps. Use health checks people!</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>This blog post is getting a bit long, so I'll split it into two pieces. In the next part, expect to hear about how you can use the ELK-B stack which is made up of a few bits of software: ElasticSearch, Kibana, Filebeat, Metricbeat and Heartbeat. Also, be sure to read Andrew Lock's piece on <a href=\"https://andrewlock.net/home-home-on-the-range-installing-kubernetes-using-rancher-2-0/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rancher</a>, which is a bit like Portainer. I'd never heard of Rancher, it'll be interesting to do a comparison.</p>\n"}},{"node":{"title":"Docker Labels in Depth","path":"/docker-labels-depth/","date":"20 November 2017","timeToRead":3,"description":"How to use Docker Labels with Docker run, Docker compose and Docker Swarm. Also talk about naming conventions and the Open Containers Initiative (OCI) spec.","content":"<h1 id=\"static-docker-labels\"><a href=\"#static-docker-labels\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Static Docker Labels</h1>\n<p>Docker image names are short and usually not very descriptive. You have the ability to label your Docker images to give them some extra metadata. You can add any information you like, labels are just key value pairs. Here I've added an author label to my Dockerfile:</p>\n<div class=\"line-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> microsoft/aspnetcore<span class=\"token punctuation\">:</span>2.0\n<span class=\"token keyword\">LABEL</span> <span class=\"token string\">\"author\"</span>=<span class=\"token string\">\"Muhammad Rehan Saeed\"</span>\n<span class=\"token keyword\">LABEL</span> <span class=\"token string\">\"company\"</span>=<span class=\"token string\">\"Acme Co.\"</span>\n<span class=\"token keyword\">ARG</span> source\n<span class=\"token keyword\">WORKDIR</span> /app\n<span class=\"token keyword\">EXPOSE</span> 80\n<span class=\"token keyword\">COPY</span> $<span class=\"token punctuation\">{</span>source<span class=\"token punctuation\">:</span><span class=\"token punctuation\">-</span>obj/Docker/publish<span class=\"token punctuation\">}</span> .\n<span class=\"token keyword\">ENTRYPOINT</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dotnet\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bridge.Turtle.dll\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Note that prior to Docker <code class=\"language-text\">1.10</code>, it was recommended to combine all labels into a single <code class=\"language-text\">LABEL</code> instruction, to prevent extra layers from being created. This is no longer necessary, but combining labels is still supported.</p>\n<h1 id=\"dynamic-docker-labels\"><a href=\"#dynamic-docker-labels\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dynamic Docker Labels</h1>\n<p>This is great for static data like the author but not so great for dynamic data like an automated build number or git changeset number that you might want to use. That way you'll know exactly which build built the image and the source code it was built from. This can be valuable information when you're in a pickle with a production issue.</p>\n<p>To add dynamic labels you can pass them from the command line when you run the docker build command like so:</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">docker image build <span class=\"token operator\">--</span>tag foo:1<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>0 <span class=\"token operator\">--</span>label <span class=\"token string\">\"build\"</span>=<span class=\"token string\">\"123\"</span> <span class=\"token operator\">--</span>label <span class=\"token string\">\"changeset\"</span>=<span class=\"token string\">\"0d9c7d3b77817caab3977b16d1d76bb3eb024837\"</span> <span class=\"token punctuation\">.</span></code></pre></div>\n<h1 id=\"open-containers-annotations-spec\"><a href=\"#open-containers-annotations-spec\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Open Containers Annotations Spec</h1>\n<p>The <a href=\"https://www.opencontainers.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Open Containers Initiative (OCI)</a> is a standards body defining open standards for container formats and runtimes. They've already defined a <a href=\"https://github.com/opencontainers/image-spec/blob/master/annotations.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">standard set of labels</a> (they call them annotations) for you to use in your Docker images:</p>\n<ul>\n<li><strong>org.opencontainers.image.created</strong> - date and time on which the image was built (string, date-time as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC 3339</a>).</li>\n<li><strong>org.opencontainers.image.authors</strong> - Contact details of the people or organization responsible for the image (free-form string).</li>\n<li><strong>org.opencontainers.image.url</strong> - URL to find more information on the image (string).</li>\n<li><strong>org.opencontainers.image.documentation</strong> - URL to get documentation on the image (string).</li>\n<li><strong>org.opencontainers.image.source</strong> - URL to get source code for building the image (string).</li>\n<li>\n<p><strong>org.opencontainers.image.version</strong> - Version of the packaged software.</p>\n<ul>\n<li>The version MAY match a label or tag in the source code repository.</li>\n<li>Version MAY be <a href=\"http://semver.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Semantic versioning-compatible</a>.</li>\n</ul>\n</li>\n<li><strong>org.opencontainers.image.revision</strong> - Source control revision identifier for the packaged software.</li>\n<li><strong>org.opencontainers.image.vendor</strong> - Name of the distributing entity, organization or individual.</li>\n<li><strong>org.opencontainers.image.licenses</strong> - License(s) under which contained software is distributed as an SPDX License Expression.</li>\n<li><strong>org.opencontainers.image.ref.name</strong> - Name of the reference for a target (string).</li>\n<li><strong>org.opencontainers.image.title</strong> - Human-readable title of the image (string).</li>\n<li><strong>org.opencontainers.image.description</strong> - Human-readable description of the software packaged in the image (string).</li>\n</ul>\n<h1 id=\"naming-conventions\"><a href=\"#naming-conventions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Naming Conventions</h1>\n<p>The labels in the Open Containers Annotations specification and a few others I've seen use a kind of dot separated namespace. The official Docker documentation suggests that this is only required if your image is a \"third party tool\" which I think means if the image will ever be used as a base for another image:</p>\n<ul>\n<li>Authors of third-party tools should prefix each label key with the reverse DNS notation of a domain they own, such as <code class=\"language-text\">com.example.some-label</code>.</li>\n<li>Do not use a domain in your label key without the domain owner's permission.</li>\n<li>The <code class=\"language-text\">com.docker.*</code>, <code class=\"language-text\">io.docker.*</code>, and <code class=\"language-text\">org.dockerproject.*</code> namespaces are reserved by Docker for internal use.</li>\n<li>Label keys should begin and end with a lower-case letter and should only contain lower-case alphanumeric characters, the period character (<code class=\"language-text\">.</code>), and the hyphen character (<code class=\"language-text\">-</code>). Consecutive periods or hyphens are not allowed.</li>\n<li>The period character (<code class=\"language-text\">.</code>) separates namespace \"fields\". Label keys without namespaces are reserved for CLI use, allowing users of the CLI to interactively label Docker objects using shorter typing-friendly strings.</li>\n</ul>\n<p>For any other images, you can just use simple single word labels or at least, that's what I'm doing.</p>\n"}},{"node":{"title":"Docker Read-Only File Systems","path":"/docker-read-file-systems/","date":"13 November 2017","timeToRead":1,"description":"How to use a read-only file system in Docker to secure your Docker containers using the docker run CLI command and Docker compose or docker swarm.","content":"<p>For a little bit of added security you can make the file system of your container read-only, excluding any volumes you may have created. If anyone hacks into your container, they will be unable to change any files.</p>\n<h1 id=\"docker-run\"><a href=\"#docker-run\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker Run</h1>\n<p>When using the docker run command using the CLI, you can simply use the following command:</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">--</span>read<span class=\"token operator\">-</span>only redis</code></pre></div>\n<h1 id=\"docker-composeswarm\"><a href=\"#docker-composeswarm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker Compose/Swarm</h1>\n<p>To set a read-only file system, you simply need to set the <code class=\"language-text\">read_only</code> flag to <code class=\"language-text\">true</code>, like so:</p>\n<div class=\"line-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> redis<span class=\"token punctuation\">:</span>4.0.1<span class=\"token punctuation\">-</span>alpine\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> myoverlay\n    <span class=\"token key atrule\">read_only</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    \n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  myoverlay<span class=\"token punctuation\">:</span></code></pre></div>\n<p>So above, I have a Docker stack file for use with Docker Swarm showing how to start Redis with a read-only file system.</p>\n<h1 id=\"what-is-supported\"><a href=\"#what-is-supported\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What is Supported?</h1>\n<p>Not all images support having them started with a read-only file system. Some require access to write temp files and the like. You can usually get away with using a volume in this case because volumes are still writeable even if you enable the read-only file system. In my research, I found it hard to determine if an image supported the feature, so I simply tried it out and found that most failed.</p>\n<p>I discovered that Redis was the only image that I was running that had <a href=\"https://github.com/docker-library/redis/issues/109\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">full support</a>, several Elastic Stack containers failed to start and even my ASP.NET Core images failed to start. I since raised a GitHub issue <a href=\"https://github.com/Microsoft/aspnet-docker/issues/66\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>, trying to find out why the container fails to start and seeing if there is any workaround.</p>\n"}}]}}},"context":{}}