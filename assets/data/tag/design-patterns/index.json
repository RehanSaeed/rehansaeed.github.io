{"hash":"38b2109c4ff1a0b2d8261eb09ea8503f9db612fe","data":{"tag":{"title":"Design Patterns","path":"/tag/design-patterns/","belongsTo":{"edges":[{"node":{"title":"Model-View-ViewModel (MVVM) - Part 3 - INotifyPropertyChanged","path":"/model-view-viewmodel-mvvm-part3-inotifypropertychanged/","date":"18 June 2014","timeToRead":12,"description":"An base class implementation for the INotifyPropertyChanged interface. Used in the Model-View-ViewModel (MVVM) pattern. Targeted for best performance.","content":"<ul>\n<li><a href=\"/model-view-viewmodel-mvvm-part1-overview/\">Model-View-ViewModel (MVVM) - Part 1 - Overview</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part2-idisposable/\">Model-View-ViewModel (MVVM) - Part 2 - IDisposable</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part3-inotifypropertychanged/\">Model-View-ViewModel (MVVM) - Part 3 - INotifyPropertyChanged</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/\">Model-View-ViewModel (MVVM) - Part 4 - INotifyDataErrorInfo</a></li>\n</ul>\n<p>I know there have been lots ofÂ Model-View-ViewModel (MVVM) articles talking about <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChanged</a>. I've read <strong>lots</strong> of them and this is the aggregation of all the knowledge I've learned plus some cool new stuff (I've not seen it done anywhere else but I could be wrong) which I've also covered in my <a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) posts</a>.</p>\n<p>So what are the main aims of a base class implementing <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChanged</a>? Well, I think there are a few:</p>\n<ul>\n<li>Performance - Performance is king. It needs to be fast and I mean <strong>really</strong> fast. You can't afford for your UI to freeze up while your view works out all its bindings to the properties in your view model.</li>\n<li>Simplicity - I want to raise property changed events with one line of code and I don't want to mess around with strings if I can help it.</li>\n<li>Reactive Extensions (Rx) - Events are old school, I want an observable property changed event notification system instead of the <code class=\"language-text\">PropertyChanged</code> C# event.</li>\n<li>Human Error - I don't want to raise property change events for properties that don't exist by accident.</li>\n<li>Dependent Properties - Often, the value of one property depends on the value of another. I need to handle this somehow.</li>\n<li>Re-factoring - I don't want my code to break when I rename a property and forget to rename a string too.</li>\n<li>Has it Really Changed - I don't want to raise a property changed event if the value of a property has not really changed.</li>\n</ul>\n<p>So, without further ado, here is my implementation.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> Framework<span class=\"token punctuation\">.</span>ComponentModel\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>ComponentModel<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">.</span>Linq<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Reflection<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Notifies subscribers that a property in this instance is changing or has changed.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NotifyPropertyChanges</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Disposable</span><span class=\"token punctuation\">,</span> INotifyPropertyChanged <span class=\"token comment\">//, INotifyPropertyChanging</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Occurs when a property value changes.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">event</span> <span class=\"token class-name\">PropertyChangedEventHandler</span> INotifyPropertyChanged<span class=\"token punctuation\">.</span>PropertyChanged\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">add</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">+=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">remove</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">-=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Occurs when a property value is changing.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">// event PropertyChangingEventHandler INotifyPropertyChanging.PropertyChanging</span>\n        <span class=\"token comment\">// {</span>\n        <span class=\"token comment\">//     add { this.PropertyChanging += value; }</span>\n        <span class=\"token comment\">//     remove { this.PropertyChanging -= value; }</span>\n        <span class=\"token comment\">// }</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Occurs when a property value changes.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">PropertyChangedEventHandler</span> propertyChanged<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Occurs when a property value is changing.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">// private event PropertyChangingEventHandler PropertyChanging;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the when property changed observable event. Occurs when a property value changes.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value></span>\n        <span class=\"token comment\">/// The when property changed observable event.</span>\n        <span class=\"token comment\">/// &lt;/value></span>\n        <span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> WhenPropertyChanged\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">return</span> Observable\n                    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PropertyChangedEventHandler</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PropertyChangedEventArgs</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n                        h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                        h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">.</span>PropertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the when property changing observable event. Occurs when a property value is changing.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value></span>\n        <span class=\"token comment\">/// The when property changing observable event.</span>\n        <span class=\"token comment\">/// &lt;/value></span>\n        <span class=\"token comment\">// public IObservable&lt;EventPattern&lt;PropertyChangingEventArgs>> WhenPropertyChanging</span>\n        <span class=\"token comment\">// {</span>\n        <span class=\"token comment\">//     get</span>\n        <span class=\"token comment\">//     {</span>\n        <span class=\"token comment\">//         return Observable</span>\n        <span class=\"token comment\">//             .FromEventPattern&lt;PropertyChangingEventHandler, PropertyChangingEventArgs>(</span>\n        <span class=\"token comment\">//                 h => this.PropertyChanging += h,</span>\n        <span class=\"token comment\">//                 h => this.PropertyChanging -= h)</span>\n        <span class=\"token comment\">//             .AsObservable();</span>\n        <span class=\"token comment\">//     }</span>\n        <span class=\"token comment\">// }</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Raises the PropertyChanged event.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">CallerMemberName</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">string</span> propertyName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetRuntimeProperty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Check that the property name exists for this instance.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">PropertyChangedEventHandler</span> eventHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eventHandler <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">eventHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PropertyChangedEventArgs</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Raises the PropertyChanged event.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyNames\">The property names.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">params</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> propertyNames<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propertyNames <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> propertyName <span class=\"token keyword\">in</span> propertyNames<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Raises the PropertyChanging event.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">CallerMemberName</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">string</span> propertyName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetRuntimeProperty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Check that the property name exists for this instance.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// PropertyChangingEventHandler eventHandler = this.PropertyChanging;</span>\n\n            <span class=\"token comment\">// if (eventHandler != null)</span>\n            <span class=\"token comment\">// {</span>\n            <span class=\"token comment\">//     eventHandler(this, new PropertyChangingEventArgs(propertyName));</span>\n            <span class=\"token comment\">// }</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Raises the PropertyChanging event.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyNames\">The property names.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">params</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> propertyNames<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propertyNames <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> propertyName <span class=\"token keyword\">in</span> propertyNames<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Sets the value of the property to the specified value if it has changed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;typeparam name=\"TProp\">The type of the property.&lt;/typeparam></span>\n        <span class=\"token comment\">/// &lt;param name=\"currentValue\">The current value of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"newValue\">The new value of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if the property was changed, otherwise &lt;c>false&lt;/c>.&lt;/returns></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">bool</span> <span class=\"token generic-method\"><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TProp</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">ref</span> <span class=\"token class-name\">TProp</span> currentValue<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">TProp</span> newValue<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token class-name\">CallerMemberName</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">string</span> propertyName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                currentValue <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Sets the value of the property to the specified value if it has changed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;typeparam name=\"TProp\">The type of the property.&lt;/typeparam></span>\n        <span class=\"token comment\">/// &lt;param name=\"currentValue\">The current value of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"newValue\">The new value of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyNames\">The names of all properties changed.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if the property was changed, otherwise &lt;c>false&lt;/c>.&lt;/returns></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">bool</span> <span class=\"token generic-method\"><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TProp</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">ref</span> <span class=\"token class-name\">TProp</span> currentValue<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">TProp</span> newValue<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">params</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> propertyNames<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                currentValue <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Sets the value of the property to the specified value if it has changed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"equal\">A function which returns &lt;c>true&lt;/c> if the property value has changed, otherwise &lt;c>false&lt;/c>.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"action\">The action where the property is set.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if the property was changed, otherwise &lt;c>false&lt;/c>.&lt;/returns></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span>\n            Func<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> equal<span class=\"token punctuation\">,</span> \n            <span class=\"token class-name\">Action</span> action<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token class-name\">CallerMemberName</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">string</span> propertyName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Sets the value of the property to the specified value if it has changed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"equal\">A function which returns &lt;c>true&lt;/c> if the property value has changed, otherwise &lt;c>false&lt;/c>.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"action\">The action where the property is set.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyNames\">The property names.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if the property was changed, otherwise &lt;c>false&lt;/c>.&lt;/returns></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span>\n            Func<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> equal<span class=\"token punctuation\">,</span> \n            <span class=\"token class-name\">Action</span> action<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">params</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> propertyNames<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"simple-example\"><a href=\"#simple-example\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simple Example</h1>\n<p>An example of how you can use this base class is as follows.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatCountViewModel</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">NotifyPropertyChanges</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> numberOfCats<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> NumberOfCats\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberOfCats<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">set</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberOfCats<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"performance\"><a href=\"#performance\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance</h1>\n<p>As I said before, performance is king. A slow application is a frustrating application. However, there has always been a problem. When you want to raise a property changed event, you have to pass in a string. We can't check the validity of the string at compile time, only at runtime. So we can get errors due to typos etc. which can get overlooked.</p>\n<p>There are a lot of implementations of <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChanged</a> that use reflection or expression trees and as <a href=\"http://blog.quantumbitdesigns.com/2010/01/26/mvvm-lambda-vs-inotifypropertychanged-vs-dependencyobject\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> and <a href=\"http://blog.amusedia.com/2013/06/inotifypropertychanged-implementation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> blog show, using reflection is a terribly slow method of raising an event and to be avoided.</p>\n<p>Luckily, Microsoft introduced the <a href=\"http://msdn.microsoft.com/en-gb/library/system.runtime.compilerservices.callermembernameattribute.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CallerMemberNameAttribute</a> attribute, which means that as in the above example, we don't need to add a string for the property name, it gets added for us to the last optional parameter in the <code class=\"language-text\">SetProperty</code> method.</p>\n<p>The <code class=\"language-text\">SetProperty</code> method uses the <a href=\"http://msdn.microsoft.com/en-us/library/14akc2c7.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref keyword</a> to pass the parameter by reference (Passing parameters by reference is faster). It then checks to see if the <code class=\"language-text\">numberOfCats</code> parameter is different from the <code class=\"language-text\">value</code> parameter (There is no point raising a property changed event if they are the same). Only then, do we raise a property changed event.</p>\n<h1 id=\"handling-dependent-properties\"><a href=\"#handling-dependent-properties\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Handling Dependent Properties</h1>\n<p>But what about dependent properties. Where one property affects the value of another. Well, lets take a look at another example.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatCounter</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">NotifyPropertyChanges</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> numberOfCats<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> NumberOfCats\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberOfCats<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">set</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberOfCats<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NumberOfCats\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NumberOfCatsDescription\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> NumberOfCatsDescription <span class=\"token operator\">=></span> $<span class=\"token string\">\"{this.NumberOfCats} Cats Counted\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can see, that I've not done anything spectacular and just passed in the strings. As I'm using the <a href=\"http://msdn.microsoft.com/en-us/library/w5zay9db.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">params</a> keyword, you can pass in as many strings as you want and the <code class=\"language-text\">SetProperty</code> method will raise a property changed event for each one.</p>\n<p>If you give me a moment, I will explain why I think this is the right compromise to make. Lets make no mistake, you do need to compromise between performance and simplicity/maintainability. There are approaches which make this eventuality simpler and easier to understand but they can and will degrade performance.</p>\n<p>So does using strings cause problems? First of all, if you use a Visual Studio Add-in like Resharper, this problem is <a href=\"http://blog.jetbrains.com/dotnet/2012/07/24/inotifypropertychanged-support-in-resharper-7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">solved</a> as it checks that the strings match the property name for you. Secondly, as a backup the <code class=\"language-text\">OnPropertyChanged</code> method in the implementation above contains some <code class=\"language-text\">Debug.Assert</code> statements (These are removed in Release mode and have no effect on performance) to check that the property names exist and are correct, if they are not you get a error message. Thirdly, this is fairly rare in my experience and I can deal with the overhead of having a couple of extra strings.</p>\n<p>Again, this is a choice I've made to go with performance over maintainability.</p>\n<h1 id=\"dealing-with-wrapped-objects\"><a href=\"#dealing-with-wrapped-objects\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dealing with Wrapped Objects</h1>\n<p>What if you want to wrap an object that looks like the one below with a class that supports <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChanged</a>? This is a scenario I have not seen many people cover but occurs fairly often in my experience.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatCount</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> Count <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>An example view model for the CatCount class can be found below.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatCountModel</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">NotifyPropertyChanges</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CatCount</span> catCount<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> NumberOfCats\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catCount<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catCount<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">==</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catCount<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So here we are providing the <code class=\"language-text\">SetProperty</code> method with two delegates. We can't use the ref keyword we used earlier because this gives us the compiler error \"A property, indexer or dynamic member access may not be passed as an out or ref parameter\". So we use delegates as an alternative which is not as fast as the ref keyword but almost as fast.</p>\n<p>The first delegate determines if the cat count has actually changed. Only if it has (Remember, executing a delegate is far cheaper than updating the UI), do we call the next delegate which actually sets the value. Finally the <code class=\"language-text\">SetProperty</code> method raises a property changed event.</p>\n<h1 id=\"using-reactive-extensions-rx-to-replace-the-propertychanged-event\"><a href=\"#using-reactive-extensions-rx-to-replace-the-propertychanged-event\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Reactive Extensions (Rx) to Replace the PropertyChanged Event</h1>\n<p>C# events are old school. Reactive Extensions (Rx) provides a cleaner and far more powerful drop-in replacement for C# events. I'm not going to go over the advantages of Reactive Extensions here but you can take a look at a series of blog posts I've done in the <a href=\"/reactive-extensions-part1-replacing-events/\">past</a>.</p>\n<p>We can hide the <code class=\"language-text\">PropertyChanged</code> C# event by explicitly implementing the interface (Click <a href=\"http://stackoverflow.com/questions/143405/c-sharp-interfaces-implicit-implementation-versus-explicit-implementation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> for details on implicit versus explicit implementations of interfaces).</p>\n<p>The <code class=\"language-text\">PropertyChanged</code> C# event can still be accessed by first casting the object to <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChanged</a>. Binding in XAML languages, which uses this interface continues to work. Our new Reactive Extensions (Rx) observable event called <code class=\"language-text\">WhenPropertyChanged</code> of typeÂ <code class=\"language-text\">IObservable&lt;string&gt;</code> (The string is the property name) is now the default method of subscribing for property changed events and we've hidden away the old C# event.</p>\n<h1 id=\"implementing-inotifypropertychanging\"><a href=\"#implementing-inotifypropertychanging\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implementing INotifyPropertyChanging</h1>\n<p>Take another look at the title of this paragraph, it says <a href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanging%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChang<strong>ing</strong></a> and not <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChang<strong>ed</strong></a>.</p>\n<p>This interface has a single event called <code class=\"language-text\">PropertyChang**ing**</code> and is raised <strong>before</strong> a property is about to be changed. This interface is not actually used by any XAML framework but does complement the <code class=\"language-text\">INotifyPropertyChanged</code> interface and can be useful in your view models when you want to know that a property is about to change and do something about it.</p>\n<p>Given that we've written a base class, it is super easy to include it too. You should note that this interface only exists in the full .NET Framework and Silverlight. It does not exist on Windows Store or Windows Phone platforms.</p>\n<p>As we are writing a base class for a Portable Class Library (PCL), I've commented it out. However, if I were to create a full .NET or Silverlight class library, I would definitely put that code back in.</p>\n<p>If you find the interface useful and you too are using a Portable Class Library (PCL), you could take a copy of the <code class=\"language-text\">INotifyPropertyChanging</code> interface and include it with your base class. If Microsoft ever decide to include it into the PCL, you simply need to remove your class and use the one in the framework.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusions</h1>\n<p>I've gone through many iterations to get to this base class. As I've shown, I've had very particular goals in mind. Your mileage may vary but I believe with the tools Microsoft have given us, this is a good compromise and covers all the scenarios I can think of. I'd be very interested if anyone has any comments or thoughts on improvements. Feel free to sound-off in the comments.</p>\n"}},{"node":{"title":"Model-View-ViewModel (MVVM) - Part 2 - IDisposable","path":"/model-view-viewmodel-mvvm-part2-idisposable/","date":"13 June 2014","timeToRead":4,"description":"Implementing IDisposable correctly is ridiculously hard. A Disposable base class can make it easier. Using IDisposable in Model-View-ViewModel (MVVM) really helps.","content":"<ul>\n<li><a href=\"/model-view-viewmodel-mvvm-part1-overview/\">Model-View-ViewModel (MVVM) - Part 1 - Overview</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part2-idisposable/\">Model-View-ViewModel (MVVM) - Part 2 - IDisposable</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part3-inotifypropertychanged/\">Model-View-ViewModel (MVVM) - Part 3 - INotifyPropertyChanged</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/\">Model-View-ViewModel (MVVM) - Part 4 - INotifyDataErrorInfo</a></li>\n</ul>\n<p>View models these days interact with all kinds of precious resources like Compasses and the GPS. Implementing <code class=\"language-text\">IDisposable</code> is an important pattern you can follow to dispose of these resources cleanly. Freeing them up to be used elsewhere and saving the users battery (Particularly important on mobile devices). Using the <code class=\"language-text\">IDisposable</code> interface in the Model-View-ViewModel (MVVM) pattern is a wise decision.</p>\n<p>Implementing <code class=\"language-text\">IDisposable</code> <strong>correctly</strong> is ridiculously hard. If you don't know how hard it really is, I recommend reading the top comment on <a href=\"http://stackoverflow.com/questions/538060/proper-use-of-the-idisposable-interface\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> Stack Overflow article.</p>\n<p>Implementing <a href=\"http://msdn.microsoft.com/en-GB/library/system.idisposable.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IDisposable</a> is one of the rare times in C# where a developer has to use <a href=\"http://msdn.microsoft.com/en-us/library/66x5fx1b.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">C# Destructors</a> and also one of the few times when we have to tickle the garbage collector to stop it from trying to release the unmanaged resources twice by calling <a href=\"http://msdn.microsoft.com/en-us/library/system.gc.suppressfinalize%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SuppressFinalize</a> on <a href=\"http://msdn.microsoft.com/en-us/library/system.gc%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GC</a>.</p>\n<p>Having to write this code repeatedly is difficult and error prone, so how about a base class?</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> Framework<span class=\"token punctuation\">.</span>ComponentModel\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">.</span>Linq<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">.</span>Subjects<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Base class for members implementing &lt;see cref=\"IDisposable\"/>.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Disposable</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IDisposable</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">bool</span> isDisposed<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> Subject<span class=\"token operator\">&lt;</span>Unit<span class=\"token operator\">></span> whenDisposedSubject<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Finalizes an instance of the &lt;see cref=\"Disposable\"/> class. Releases unmanaged</span>\n        <span class=\"token comment\">/// resources and performs other cleanup operations before the &lt;see cref=\"Disposable\"/></span>\n        <span class=\"token comment\">/// is reclaimed by garbage collection. Will run only if the</span>\n        <span class=\"token comment\">/// Dispose method does not get called.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token operator\">~</span><span class=\"token function\">Disposable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the when errors changed observable event. Occurs when the validation errors have changed for a property or for the entire object.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value></span>\n        <span class=\"token comment\">/// The when errors changed observable event.</span>\n        <span class=\"token comment\">/// &lt;/value></span>\n        <span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span>Unit<span class=\"token operator\">></span> WhenDisposed\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>IsDisposed<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Return</span><span class=\"token punctuation\">(</span>Unit<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">Subject</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Unit</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject<span class=\"token punctuation\">.</span><span class=\"token function\">AsObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets a value indicating whether this &lt;see cref=\"Disposable\"/> is disposed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value>&lt;c>true&lt;/c> if disposed; otherwise, &lt;c>false&lt;/c>.&lt;/value></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> IsDisposed <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isDisposed<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Dispose all managed and unmanaged resources.</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Take this object off the finalization queue and prevent finalization code for this</span>\n            <span class=\"token comment\">// object from executing a second time.</span>\n            GC<span class=\"token punctuation\">.</span><span class=\"token function\">SuppressFinalize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Disposes the managed resources implementing &lt;see cref=\"IDisposable\"/>.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DisposeManaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Disposes the unmanaged resources implementing &lt;see cref=\"IDisposable\"/>.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DisposeUnmanaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Throws a &lt;see cref=\"ObjectDisposedException\"/> if this instance is disposed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isDisposed<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectDisposedException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Releases unmanaged and - optionally - managed resources.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"disposing\">&lt;c>true&lt;/c> to release both managed and unmanaged resources;</span>\n        <span class=\"token comment\">/// &lt;c>false&lt;/c> to release only unmanaged resources, called from the finalizer only.&lt;/param></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> disposing<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Check to see if Dispose has already been called.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isDisposed<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// If disposing managed and unmanaged resources.</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>disposing<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">DisposeManaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">DisposeUnmanaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isDisposed <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// Raise the WhenDisposed event.</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject<span class=\"token punctuation\">.</span><span class=\"token function\">OnNext</span><span class=\"token punctuation\">(</span>Unit<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject<span class=\"token punctuation\">.</span><span class=\"token function\">OnCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There are several interesting facets to this implementation.</p>\n<ol>\n<li>There is a difference between disposing of managed and unmanaged resources in the disposable pattern. To facilitate this, there are two separate protected methods which can be overridden in a derived class to dispose of each of them.</li>\n<li>The disposable pattern requires you to throw an <code class=\"language-text\">ObjectDisposedException</code> when you try to access a property or method after the object has been disposed. To achieve this, there is a <code class=\"language-text\">ThrowIfDisposed</code> helper method which can be added to the top of each property or method.</li>\n<li>There is an <code class=\"language-text\">IsDisposed</code> property which can be useful if we don't know if the object is disposed or not.</li>\n<li>Finally, there is a Reactive Extensions (Rx) observable <code class=\"language-text\">WhenDisposed</code> property. This allows us to register for the dispose event.</li>\n</ol>\n<p>Here is an example of how the base class is used to dispose of both a managed and unmanaged (COM object) resources.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DisposableExample</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Disposable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ManagedResource</span> managedResource<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UnmanagedResource</span> unmanagedResource<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Do Stuff</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DisposeManaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>managedResource<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DisposeUnmanaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Marshal<span class=\"token punctuation\">.</span><span class=\"token function\">ReleaseComObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unmanagedResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unmanagedResource <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>An example of how to dispose of an instance of the above object.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\">DisposableExample</span> disposable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DisposableExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndisposable<span class=\"token punctuation\">.</span>WhenDisposed<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Disposed Event Fired\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndisposable<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>disposable<span class=\"token punctuation\">.</span>IsDisposed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see, it looks a whole lot simpler and has some pretty cool helper functions and features. No more need to remember how to implement this complicated pattern.</p>\n"}},{"node":{"title":"Model-View-ViewModel (MVVM) - Part 1 - Overview","path":"/model-view-viewmodel-mvvm-part1-overview/","date":"14 May 2014","timeToRead":5,"description":"What really goes into using Model-View-ViewModel (MVVM) in .NET. Base classes for INotifyPropertyChanged, INotifyDataErrorInfo, IDisposable and a lot more.","content":"<ul>\n<li><a href=\"/model-view-viewmodel-mvvm-part1-overview/\">Model-View-ViewModel (MVVM) - Part 1 - Overview</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part2-idisposable/\">Model-View-ViewModel (MVVM) - Part 2 - IDisposable</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part3-inotifypropertychanged/\">Model-View-ViewModel (MVVM) - Part 3 - INotifyPropertyChanged</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/\">Model-View-ViewModel (MVVM) - Part 4 - INotifyDataErrorInfo</a></li>\n</ul>\n<p>I've been meaning for some time to do a series of posts about Model-View-ViewModel (MVVM) and its potential base classes. Then I read <a href=\"http://mtaulty.com/CommunityServer/blogs/mike_taultys_blog/archive/2014/05/09/windows-phone-8-1-and-xaml-apps-making-it-easier-for-mvvm-developers.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mike Taulty's post</a> about why MVVM 'bits' not built in to .NET.</p>\n<p>My aim in these posts will be to either, pick off the shelf components which are best of breed where there is no point reinventing the wheel or build my own components where necessary.</p>\n<p>Assuming you already know about the basic Model-View-ViewModel (MVVM) pattern described in the title image of this post, when we talk about MVVM, what do we really mean?</p>\n<h1 id=\"platforms\"><a href=\"#platforms\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Platforms</h1>\n<p>Well there are several .NET platforms that all provide some basic low level support for Model-View-ViewModel (MVVM), Windows Store, Windows Phone, Silverlight and Windows Presentation Foundation (WPF). It is all of these platforms that I'll be discussing and targeting my code towards.</p>\n<h1 id=\"mvvm-bits\"><a href=\"#mvvm-bits\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVVM 'Bits'</h1>\n<p>In Mike Taulty's post, he goes through a list of 'bits' which all come together to help with building an application that fits into the MVVM design pattern. I've added to that list below:</p>\n<ol>\n<li><code class=\"language-text\">IDisposable</code> - When you have a scarce resource like a GPS, gyroscope or compass, you inevitably need to dispose of it somewhere. Implementing <code class=\"language-text\">IDisposable</code> <strong>properly</strong> is <a href=\"http://msdn.microsoft.com/en-us/library/system.idisposable%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hard work</a>. A base class would be handy.</li>\n<li><code class=\"language-text\">INotifyPropertyChanged</code> - This is the building block of all .NET based MVVM. There needs to be a base class for this that is high performance and yet simple and easy to use.</li>\n<li><code class=\"language-text\">INotifyDataErrorInfo</code> - Validation is an often overlooked part of an application. This handy interface makes doing validation of your view models a cinch.</li>\n<li><code class=\"language-text\">IEditableObject</code> (WPF only) - This interface helps with implementing undo and redo but is used specifically in the WPF data grid.</li>\n<li><code class=\"language-text\">ObservableCollection&lt;T&gt;</code> - This collection is a good start out of the box but why does it still not have an AddRange method? Why do we not have an <code class=\"language-text\">ObservableDictionary&lt;TKey, TValue&gt;</code> or a <code class=\"language-text\">KeyedObservableCollection&lt;TKey, TValue&gt;</code>? What if you have a collection of items implementing <code class=\"language-text\">INotifyPropertyChanged</code> and you want to know if one of those items changes, why can't the collection type help you there also?</li>\n<li><code class=\"language-text\">ICommand</code> - Most implementations out there provide a base class for <code class=\"language-text\">ICommand</code> and usually call it <code class=\"language-text\">RelayCommand</code> or <code class=\"language-text\">DelegateCommand</code>. They usually have another implementation with a generic argument <code class=\"language-text\">RelayCommand&lt;T&gt;</code> or <code class=\"language-text\">DelegateCommand&lt;T&gt;</code>. These are a quick way to add a command to your view model, where the implementation of the command is usually a method in your view model passed in as a delegate. Sometimes though, this is not enough. What if you have a largish command and want to split it off into a separate class, a base class for <code class=\"language-text\">ICommand</code> would be useful. What if you have a command that does <code class=\"language-text\">async</code> and <code class=\"language-text\">await</code>? <code class=\"language-text\">ICommand</code> doesn't support that but can we provide some help here?</li>\n<li>Inversion of control (IoC) - There are a lot of IoC frameworks out there already, why reinvent the wheel. Just pick one but which one?</li>\n</ol>\n<p>I'll pause just here as I think the above listed items are all base classes that could be used across the board on all the major platforms. They are at the very heart of MVVM in .NET. The rest of the list below are more dependant on the type of application you are building.</p>\n<ol>\n<li>Navigation - This has always been a stone in my shoe. Navigation is inherently something that happens in the view but it is something that view models often need to understand. The problem is, that the view model is not supposed to know about the view at all. This problem occurs again and again in different forms on each platform.</li>\n</ol>\n<blockquote>\n<ul>\n<li>Navigating pages in Windows Store, Windows Phone, Silverlight.</li>\n<li>Navigating Windows in Windows Presentation Foundation (WPF) and Windows Store.</li>\n</ul>\n</blockquote>\n<ol>\n<li>User Interaction - I'm talking about <code class=\"language-text\">MessageBox</code>'s, <code class=\"language-text\">MessageDialog</code>'s, Toast's etc. Giving the user information or asking them questions happens on all platforms. This problem is very similar to the Navigation problem.</li>\n<li>Connecting your Views to ViewModels - This is usually some by-product of which IoC container you choose to use, whether it's MEF, Unity, Autofac or some other. There is no recommended way of doing this and I don't think I've ever found a 'correct' way of doing this.</li>\n<li>Saving View Model state - This usually needs to be done when the application closes or suspends due to some user interaction. A lot of frameworks simply serialize the whole View Model and save it away but is that the best way and what about doing that in a WPF application?</li>\n<li>Events - Passing events between view models is a fairly useful ability, allowing communication and passing of state.</li>\n<li>Composing Views - Some MVVM frameworks like PRISM provide support for composing different views together. Alternatively, this process usually has a connection with the type of IoC container you are using.</li>\n<li>Firing Commands - A lot of controls can't fire off <code class=\"language-text\">ICommand</code>'s in XAML because they don't provide a Command property or sometimes you want to fire a command based on some event or even a key press.</li>\n<li>Other Stuff - Reactive Extensions can help in some pretty interesting ways with MVVM. What about Portable Class Library's? Why does the MVVM on one platform need to be different from another?</li>\n</ol>\n<p>The last two things in the list are more abstract requirements for any MVVM framework.</p>\n<ol>\n<li>Testability - Writing a view model which is easy to test is hard work. Especially if you want to use <code class=\"language-text\">MessageBox</code>'s, GPS API's or other API's which make testing difficult. You don't want a <code class=\"language-text\">MessageBox</code> popping up in the middle of your test do you?</li>\n<li>Performance - Your application needs to run fast, especially if it's running on a phone. For example, a lot of MVVM frameworks use expression trees and reflection to raise property changed notifications . What impact does this have in the performance versus maintainability trade off?</li>\n</ol>\n<h1 id=\"existing-frameworks\"><a href=\"#existing-frameworks\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Existing Frameworks</h1>\n<p>Wow, that's a lot of stuff! All of this 'stuff' is related but covers a huge range of subjects. A lot of existing MVVM frameworks try to do all of this at once!</p>\n<p>In my humble opinion, because they do so much, they usually only cover some, say 70-80% of the full functionality. What business does an MVVM framework have including an IoC framework? There are lots of IoC frameworks out there that are far more powerful than anything we could write but a lot of MVVM frameworks include one too.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusions</h1>\n<p>So ideally what we need is something modular, that you can plug bits into but also something that covers all the bases.</p>\n<p>Whats your opinion? I've looked at a lot of frameworks MVVM Light, PRISM, etc. In my opinion, the seven top items are the most important but also the most neglected bits of MVVM. Is there some framework out there that does all this and more?</p>\n<p>I'll discuss this and a lot more in the coming posts.</p>\n"}}]}}},"context":{}}