{"hash":"6ac3167c41ff30f1b78a5b3b41d3ca86ae123a0f","data":{"tag":{"title":"Kubernetes","path":"/tag/kubernetes/","belongsTo":{"edges":[{"node":{"title":"Securing ASP.NET Core Kubernetes Pods","path":"/securing-asp-net-core-kubernetes-pods/","date":"30 April 2020","timeToRead":1,"description":"","content":"<p>If you are using Kubernetes, you have a myriad of settings you can tweak under the <a href=\"https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">securityContext</a> of your <code class=\"language-text\">Pod</code> or <code class=\"language-text\">Deployment</code>. Here is a sample <code class=\"language-text\">Pod</code>:</p>\n<div class=\"line-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">-</span>asp<span class=\"token punctuation\">-</span>app\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">securityContext</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runAsUser</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span>\n    <span class=\"token key atrule\">fsGroup</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2000</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">-</span>asp<span class=\"token punctuation\">-</span>app\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">-</span>asp<span class=\"token punctuation\">-</span>app<span class=\"token punctuation\">:</span>1.0.0\n    <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> COMPlus_EnableDiagnostics\n        <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token key atrule\">securityContext</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">allowPrivilegeEscalation</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n      <span class=\"token key atrule\">readOnlyRootFilesystem</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n      <span class=\"token key atrule\">capabilities</span><span class=\"token punctuation\">:</span> <span class=\"token key atrule\">add</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"NET_ADMIN\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SYS_TIME\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>The <code class=\"language-text\">allowPrivilegeEscalation</code> setting stops users who manage to get into your container from escalating their privileges to become a super user. I'm not sure why any container should need this enabled. Setting this to false should be the default but it isn't, you make sure to set this yourself. This is another case of an insecure default.</p>\n<p>In my last post in the series, I already discussed how to enable a read-only file system in your Docker container. I've already set <code class=\"language-text\">COMPlus_EnableDiagnostics</code> to zero using an environment variable and the <code class=\"language-text\">readOnlyRootFilesystem</code> is set to true to enable this feature.</p>\n<p>The <code class=\"language-text\">runAsUser</code> and <code class=\"language-text\">fsGroup</code> settings ensure that the user and group of the user running the app is not the root user. Some Docker images I have seen do this for you and bake these settings into the Docker image while others require you to manually specify another user as above. I raised an <a href=\"https://github.com/dotnet/dotnet-docker/issues/940\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">issue</a>...</p>\n<p>capabilities...blah blah blah</p>\n"}},{"node":{"title":"Securing ASP.NET Core in Docker","path":"/securing-asp-net-core-in-docker/","date":"25 March 2019","timeToRead":1,"description":"How to secure your ASP.NET Core Docker image by setting the file system to be read-only. First in a series of blog posts covering Docker image security.","content":"<p>Some time ago, I blogged about how you can get some <a href=\"/docker-read-file-systems/\">extra security when running Docker containers</a> by making their file systems read-only. This ensures that should an attacker get into the container somehow, they won't be able to change any files. This only works with certain containers that support it however and unfortunately, at that time ASP.NET Core did not support running in a Docker container with a read-only file system. Happily, this is now fixed!</p>\n<p>Lets see an example. I created a brand new hello world ASP.NET Core project and added this <code class=\"language-text\">Dockerfile</code>:</p>\n<div class=\"line-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> microsoft/dotnet<span class=\"token punctuation\">:</span>2.2<span class=\"token punctuation\">-</span>sdk AS builder\n<span class=\"token keyword\">WORKDIR</span> /source\n<span class=\"token keyword\">COPY</span> *.csproj .\n<span class=\"token keyword\">RUN</span> dotnet restore\n<span class=\"token keyword\">COPY</span> . .\n<span class=\"token keyword\">RUN</span> dotnet publish <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>output /app/ <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>configuration Release\n\n<span class=\"token keyword\">FROM</span> microsoft/dotnet<span class=\"token punctuation\">:</span>2.2<span class=\"token punctuation\">-</span>aspnetcore<span class=\"token punctuation\">-</span>runtime\n<span class=\"token keyword\">WORKDIR</span> /app\n<span class=\"token keyword\">COPY</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>from=builder /app .\n<span class=\"token keyword\">ENTRYPOINT</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dotnet\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ReadOnlyTest.dll\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>I build the Docker image using this command:</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">docker build <span class=\"token operator\">-</span>t read<span class=\"token operator\">-</span>only<span class=\"token operator\">-</span>test <span class=\"token punctuation\">.</span></code></pre></div>\n<p>If I run this image with a read-only file system:</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">--</span><span class=\"token function\">rm</span> <span class=\"token operator\">--</span>read<span class=\"token operator\">-</span>only <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>p 8000:80 read<span class=\"token operator\">-</span>only<span class=\"token operator\">-</span>test</code></pre></div>\n<p>This outputs the following error as read-only file systems are not supported by default:</p>\n<div class=\"line-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Failed to initialize CoreCLR, HRESULT: 0x80004005</code></pre></div>\n<p>If I now run the same image with the <code class=\"language-text\">COMPlus_EnableDiagnostics</code> environment variable turned off:</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">docker run <span class=\"token operator\">--</span><span class=\"token function\">rm</span> <span class=\"token operator\">--</span>read<span class=\"token operator\">-</span>only <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>p 8000:80 <span class=\"token operator\">-</span>e COMPlus_EnableDiagnostics=0 read<span class=\"token operator\">-</span>only<span class=\"token operator\">-</span>test</code></pre></div>\n<p>The app now starts! The <code class=\"language-text\">COMPlus_EnableDiagnostics</code> environment variable (which is <a href=\"https://github.com/dotnet/docs/issues/10217\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">undocumented</a>) turns off debugging and profiling support, so I would not bake this environment variable into the <code class=\"language-text\">Dockerfile</code>. For some reason these features need a read/write file system to work properly. If you'd like to try this yourself, you can checkout all the code in <a href=\"https://github.com/RehanSaeed/ReadOnlyDockerTest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this repo</a>.</p>\n"}}]}}},"context":{}}