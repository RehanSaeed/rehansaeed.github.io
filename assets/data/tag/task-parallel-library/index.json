{"hash":"e6b6dc0ac853bf5ef7ddeb5801ab2b68565f6f8e","data":{"tag":{"title":"Task Parallel Library","path":"/tag/task-parallel-library/","belongsTo":{"edges":[{"node":{"title":"Reactive Extensions (Rx) – Part 8 – Timeouts","path":"/reactive-extensions-rx-part-8-timeouts/","date":"2 January 2017","timeToRead":1,"description":"Should you use Reactive Extensions (Rx) to do timeouts in .NET? It turns out it's better to use CancellationTokenSource in the Task Parallel Library (TPL).","content":"<ul>\n<li><a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) - Part 1 - Replacing C# Events</a></li>\n<li><a href=\"/reactive-extensions-part2-wrapping-events/\">Reactive Extensions (Rx) - Part 2 - Wrapping C# Events</a></li>\n<li><a href=\"/reactive-extensions-part3-naming-conventions/\">Reactive Extensions (Rx) - Part 3 - Naming Conventions</a></li>\n<li><a href=\"/reactive-extensions-part4-replacing-timers/\">Reactive Extensions (Rx) - Part 4 - Replacing Timers</a></li>\n<li><a href=\"/reactive-extensions-part4-awaiting-observables/\">Reactive Extensions (Rx) - Part 5 - Awaiting Observables</a></li>\n<li><a href=\"/reactive-extensions-part6-task-toobservable/\">Reactive Extensions (Rx) - Part 6 - Task ToObservable</a></li>\n<li><a href=\"/reactive-extensions-part7-sample-events/\">Reactive Extensions (Rx) - Part 7 - Sample Events</a></li>\n<li><a href=\"/reactive-extensions-rx-part-8-timeouts/\">Reactive Extensions (Rx) - Part 8 - Timeouts</a></li>\n</ul>\n<p>In <a href=\"/reactive-extensions-part6-task-toobservable/\">part six</a> of this series of blog posts I talked about using Reactive Extensions for adding timeout logic to asynchronous tasks. Something like this:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">WaitForFirstResultWithTimeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">DownloadTheInternet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> task\n        <span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Timeout</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">FirstAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Last week I was working on a project and wanted to add a Timeout to my task but since it was an ASP.NET MVC project, I had no references to Reactive Extensions. After some thought I discovered another possible method of performing a timeout which may help in certain circumstances.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> cancellationTokenSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">DownloadTheInternet</span><span class=\"token punctuation\">(</span>cancellationTokenSource<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">OperationCanceledException</span> exception<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Timed Out\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I'm using an overload on CancellationTokenSource which takes a timeout value. Then passing the <code class=\"language-text\">CancellationToken</code> to <code class=\"language-text\">DownloadTheInternet</code>. This method should be periodically checking the <code class=\"language-text\">CancellationToken</code> to see if it has been cancelled and if so, throw an <code class=\"language-text\">OperationCanceledException</code>. In this example you'd probably use HttpClient which handles this for you if you give it the CancellationToken.</p>\n<p>The main reason why this method is better is that the task is actually being cancelled and stopped from doing any more work. In my above reactive extensions example, the task continues doing work but it's result is just ignored.</p>\n"}},{"node":{"title":"Reactive Extensions (Rx) – Part 6 – Task ToObservable","path":"/reactive-extensions-part6-task-toobservable/","date":"25 April 2014","timeToRead":5,"description":"How and where to use the Reactive Extensions (Rx) ToObservable Extension method to turn a Task Parallel Library (TPL) Task into an IObservable.","content":"<ul>\n<li><a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) - Part 1 - Replacing C# Events</a></li>\n<li><a href=\"/reactive-extensions-part2-wrapping-events/\">Reactive Extensions (Rx) - Part 2 - Wrapping C# Events</a></li>\n<li><a href=\"/reactive-extensions-part3-naming-conventions/\">Reactive Extensions (Rx) - Part 3 - Naming Conventions</a></li>\n<li><a href=\"/reactive-extensions-part4-replacing-timers/\">Reactive Extensions (Rx) - Part 4 - Replacing Timers</a></li>\n<li><a href=\"/reactive-extensions-part4-awaiting-observables/\">Reactive Extensions (Rx) - Part 5 - Awaiting Observables</a></li>\n<li><a href=\"/reactive-extensions-part6-task-toobservable/\">Reactive Extensions (Rx) - Part 6 - Task ToObservable</a></li>\n<li><a href=\"/reactive-extensions-part7-sample-events/\">Reactive Extensions (Rx) - Part 7 - Sample Events</a></li>\n<li><a href=\"/reactive-extensions-rx-part-8-timeouts/\">Reactive Extensions (Rx) - Part 8 - Timeouts</a></li>\n</ul>\n<h1 id=\"a-quick-recap\"><a href=\"#a-quick-recap\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A Quick Recap</h1>\n<p>In my previous posts on Reactive Extensions (Rx) I've outlined a few clear areas where Reactive Extensions can be used in the real world. I've uncovered areas where it provides a cleaner and improved API surface as compared to older .NET code. Namely, replacing C# events, wrapping existing C# events and replacing <code class=\"language-text\">System.Threading.Timers</code> (Or other <code class=\"language-text\">Timer</code> classes, of which there are a few in .NET).</p>\n<p>Once you have your observables, you need to do something with them. In my last post on the subject I showed how and when you can await an observable.</p>\n<p>In this post I'm going to show how you can also go the other way around. You can turn tasks into an observable. I'll also show one clear reason to use this facility.</p>\n<h1 id=\"converting-tasks-to-observables\"><a href=\"#converting-tasks-to-observables\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Converting Tasks to Observables</h1>\n<p>The <code class=\"language-text\">ToObservable</code> extension method allows you to convert a Task or <code class=\"language-text\">Task&lt;T&gt;</code> into an <code class=\"language-text\">IObservable&lt;T&gt;</code>. Calling <code class=\"language-text\">ToObservable</code> on a <code class=\"language-text\">Task</code> returns an <code class=\"language-text\">IObservable&lt;Unit&gt;</code>. A Unit is a kind of empty object that does nothing, the only reason it is there is because there is no <code class=\"language-text\">IObservable</code> (Without the <code class=\"language-text\">T</code>) interface.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">IObservable<span class=\"token operator\">&lt;</span>Unit<span class=\"token operator\">></span> observable <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Working\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nIObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> observableT <span class=\"token operator\">=</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"Working\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you subscribe to the above observables, they will only ever return one value and then complete. You might be thinking, hang on just a second Rehan, whats the point of doing this?</p>\n<h1 id=\"putting-it-all-together\"><a href=\"#putting-it-all-together\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Putting It All Together</h1>\n<p>So when should we use this feature? Well, lets walk through some examples and see what happens. Lets assume we have the following contrived code:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">GetHelloString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">GetWorldString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What happens in the case where we call both of these methods and want to get the first result back. How does this code look using the Task Parallel Library (TPL) as compared to Reactive Extensions (Rx).</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">WaitForFirstResultAndReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetHelloString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetWorldString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">WhenAny</span><span class=\"token punctuation\">(</span>task1<span class=\"token punctuation\">,</span> task2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">WaitForFirstResultAndReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> observable1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetHelloString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> observable2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetWorldString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> observable1<span class=\"token punctuation\">.</span><span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span>observable2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">FirstAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the Task Parallel Library (TPL) example, I simply use the <code class=\"language-text\">WhenAny</code> method to await the first task that completes and then return the result.</p>\n<p>In the Reactive Extensions example above, I'm converting my tasks to observables, using the Merge method to convert them to a single observable and then using the FirstAsync method to await the first result (We covered await'ing observables in the last post).</p>\n<p>Overall the two techniques look pretty similar, with the TPL having a slight edge in terms of simplicity.</p>\n<p>How about another example. Here we will try to await both of the results and put them together to get some meaningful result.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">WaitForAllResultsAndReturnCombinedResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetHelloString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetWorldString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">WhenAll</span><span class=\"token punctuation\">(</span>task1<span class=\"token punctuation\">,</span> task2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">WaitForAllResultsAndReturnCombinedResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> observable1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetHelloString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> observable2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetWorldString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> observable1<span class=\"token punctuation\">.</span><span class=\"token function\">Zip</span><span class=\"token punctuation\">(</span>observable2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the Task Parallel Library (TPL) example, I'm using the <code class=\"language-text\">WhenAll</code> method to await the results of both tasks which are returned as an array of strings. I then join these strings and return the results.</p>\n<p>In the Reactive Extensions example above, I'm converting my tasks to observables, then using the <code class=\"language-text\">Zip</code> method to combine the results returned from both observables by providing it with a delegate which joins the two strings.</p>\n<p>Again, both look pretty similar but with the pure TPL example being slightly simpler to understand.</p>\n<p>One more example, this time we'll return the first result but add a timeout to the equation.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">WaitForFirstResultAndReturnResultWithTimeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetHelloString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetWorldString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Task</span> timeoutTask <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Task</span> completedTask <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">WhenAny</span><span class=\"token punctuation\">(</span>task1<span class=\"token punctuation\">,</span> task2<span class=\"token punctuation\">,</span> timeoutTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>completedTask <span class=\"token operator\">==</span> timeoutTask<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TimeoutException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The operation has timed out\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>completedTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">WaitForFirstResultAndReturnResultWithTimeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> observable1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetHelloString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> observable2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetWorldString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> observable1<span class=\"token punctuation\">.</span><span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span>observable2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Timeout</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">FirstAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the Task Parallel Library (TPL) example, I'm awaiting a third task which represents the timeout. If the timeout task finishes first, I raise a <code class=\"language-text\">TimeoutException</code>.</p>\n<p>In the Reactive Extensions example, we merge the two observables again but this time use the <code class=\"language-text\">Timeout</code> method to achieve the same results.</p>\n<p>Here we have a clear winner, the Reactive Extensions code is more concise and easier to follow.</p>\n<p>What happens when we combine the two approaches.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">WaitForFirstResultAndReturnResultWithTimeOut2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetHelloString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetWorldString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> Task\n        <span class=\"token punctuation\">.</span><span class=\"token function\">WhenAny</span><span class=\"token punctuation\">(</span>task1<span class=\"token punctuation\">,</span> task2<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Timeout</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">FirstAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we use the <code class=\"language-text\">ToObservable</code> and <code class=\"language-text\">Timeout</code> methods right at the end. As you can see this combined approach gives us the best of both worlds and makes the code much easier to read.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>One definite reason to convert <code class=\"language-text\">Task</code>'s to Observables is to use the <code class=\"language-text\">Timeout</code> method. There may be other reasons but I'm having a hard time thinking of any right now. In fact, I'm having a hard time thinking of any other posts to make about Reactive Extensions (Rx). It's an interesting chunk of code and I've learned a lot writing this series of posts as I hope you have too.</p>\n"}},{"node":{"title":"Reactive Extensions (Rx) – Part 5 – Awaiting Observables","path":"/reactive-extensions-part5-awaiting-observables/","date":"27 March 2014","timeToRead":5,"description":"How and where to use Task Parallel Library (TPL) async and await with Reactive Extensions (Rx). Also, how to use TPL for awaiting observables.","content":"<ul>\n<li><a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) - Part 1 - Replacing C# Events</a></li>\n<li><a href=\"/reactive-extensions-part2-wrapping-events/\">Reactive Extensions (Rx) - Part 2 - Wrapping C# Events</a></li>\n<li><a href=\"/reactive-extensions-part3-naming-conventions/\">Reactive Extensions (Rx) - Part 3 - Naming Conventions</a></li>\n<li><a href=\"/reactive-extensions-part4-replacing-timers/\">Reactive Extensions (Rx) - Part 4 - Replacing Timers</a></li>\n<li><a href=\"/reactive-extensions-part4-awaiting-observables/\">Reactive Extensions (Rx) - Part 5 - Awaiting Observables</a></li>\n<li><a href=\"/reactive-extensions-part6-task-toobservable/\">Reactive Extensions (Rx) - Part 6 - Task ToObservable</a></li>\n<li><a href=\"/reactive-extensions-part7-sample-events/\">Reactive Extensions (Rx) - Part 7 - Sample Events</a></li>\n<li><a href=\"/reactive-extensions-rx-part-8-timeouts/\">Reactive Extensions (Rx) - Part 8 - Timeouts</a></li>\n</ul>\n<p>So I've just finished extolling the wonderful virtues of <code class=\"language-text\">TaskCompletionSource</code> with a colleague and thought I'd share the joy more widely. Eventually this will turn into a post about how great Reactive Extensions (Rx) is, I promise.</p>\n<h1 id=\"taskcompletionsource\"><a href=\"#taskcompletionsource\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>TaskCompletionSource</h1>\n<p><a href=\"http://msdn.microsoft.com/en-us/library/dd449174%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TaskCompletionSource</a> is a great tool to turn any asynchronous operation which does not follow the Task Parallel Library (TPL) pattern into a Task. The example below is something I've started to do in a few places.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">?</span><span class=\"token operator\">></span> <span class=\"token function\">ShowDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    TaskCompletionSource<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">?</span><span class=\"token operator\">></span> taskCompletionSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">TaskCompletionSource</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span>?<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Window</span> window <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyDialogWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">EventHandler</span> eventHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    eventHandler <span class=\"token operator\">=</span> \n        <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            window<span class=\"token punctuation\">.</span>Closed <span class=\"token operator\">-=</span> eventHandler<span class=\"token punctuation\">;</span>\n            taskCompletionSource<span class=\"token punctuation\">.</span><span class=\"token function\">SetResult</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>DialogResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span>Closed <span class=\"token operator\">+=</span> eventHandler<span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> taskCompletionSource<span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the example above we are creating a new window, registering for its <code class=\"language-text\">Closed</code> event and then showing the window. When the window is closed, we de-register from the closed event handler (To avoid a remaining reference to the window, causing a memory leak) and the <code class=\"language-text\">DialogResult</code> of the window is passed to the <code class=\"language-text\">TaskCompletionSource</code> using the <code class=\"language-text\">SetResult</code> method.</p>\n<p>The <code class=\"language-text\">TaskCompletionSource</code> gives us a nice <code class=\"language-text\">Task</code> object which we can return at the end of the method. When we return the task its status is <code class=\"language-text\">WaitingForActivation</code>. Only when the <code class=\"language-text\">SetResult</code> method is called when the window closes, does the tasks status change to <code class=\"language-text\">RanToCompletion</code>.</p>\n<p>This whole operation has been wrapped up and packaged nicely in a <code class=\"language-text\">Task&lt;bool?&gt;</code> with a nice bow on top with the help of <code class=\"language-text\">TaskCompletionSource</code>. Now we can call the method and await the results from the method call, thus allowing us to savour the power and simplicity the TPL affords us.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">bool</span><span class=\"token punctuation\">?</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">ShowDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>There are other great ways to use <code class=\"language-text\">TaskCompletionSource</code> of course. Generally speaking though I have found myself using it to turn an operation where I am waiting for an event into a task. For <a href=\"http://blogs.msdn.com/b/pfxteam/archive/2009/06/02/9685804.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">more information</a> on <code class=\"language-text\">TaskCompletionSource</code> or the TPL in general I highly recommend reading <a href=\"http://blogs.msdn.com/b/pfxteam/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stephen Toub's blog</a>.</p>\n<h1 id=\"awaiting-observables\"><a href=\"#awaiting-observables\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Awaiting Observables</h1>\n<p>Having showed my colleague the above example and feeling very content, I suddenly realised that Reactive Extensions (Rx) can make the code even simpler. With the advent of the latest version of Reactive Extensions (Rx) you can now await observables and we can turn the method above into this:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">?</span><span class=\"token operator\">></span> <span class=\"token function\">ShowDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> window <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyDialogWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> closed <span class=\"token operator\">=</span> Observable\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EventHandler</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            h <span class=\"token operator\">=></span> window<span class=\"token punctuation\">.</span>Closed <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n            h <span class=\"token operator\">=></span> window<span class=\"token punctuation\">.</span>Closed <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> closed<span class=\"token punctuation\">.</span><span class=\"token function\">FirstAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>DialogResult<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">await</code> keyword is just some syntactic sugar in the C# language that makes writing thorny asynchronous code effortless. The real meat of what drives it is the <code class=\"language-text\">GetAwaiter</code> method. The Reactive Extensions (Rx) team seeing the genius that is the Task Parallel Library (TPL) took advantage. They added this method (actually an extension method) to <code class=\"language-text\">IObservable&lt;T&gt;</code>, allowing us to await an observable as seen in the example above.</p>\n<p>However, there is a caveat which I shall explain. In the example above the Closed event could conceivably be fired any number of times (If the window was opened and closed a few times) and the observable wrapper around the Closed event never completes. So our observable returns multiple results but a task can only return a single result.</p>\n<p>The secret in our example is the <code class=\"language-text\">FirstAsync</code> method. We are actually awaiting the first result returned by our observable and don't care about any further results. By default awaiting an observable without the <code class=\"language-text\">FirstAsync</code> method above will actually await the last result <strong>before completion</strong>. If your observable does not complete, then you will be waiting <strong>forever</strong>!</p>\n<p>Handily the Reactive Extensions (Rx) team has added several methods which you can use before you use <code class=\"language-text\">await</code> to modify the result of what you are awaiting. All of these methods end with the word <code class=\"language-text\">Async</code>. I've added a short list of these methods below (There are lots of overloads so I've just highlighted the main ones):</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Returns the first element of an observable sequence.</span>\n<span class=\"token keyword\">string</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">FirstAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Returns the first element of an observable sequence, or a default value if no such element exists.</span>\n<span class=\"token keyword\">string</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefaultAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Returns the last element of an observable sequence. </span>\n<span class=\"token comment\">// This is the default action of awaiting an observable.</span>\n<span class=\"token keyword\">string</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">LastAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Returns the last element of an observable sequence, </span>\n<span class=\"token comment\">// or a default value if no such element exists.</span>\n<span class=\"token keyword\">string</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">LastOrDefaultAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Returns the only element of an observable sequence, and throws an exception if there is not exactly </span>\n<span class=\"token comment\">// one element in the observable sequence.</span>\n<span class=\"token keyword\">string</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">SingleAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Returns the only element of an observable sequence, or a default value if the observable sequence </span>\n<span class=\"token comment\">// is empty; this method reports an exception if there is more than one element in the observable sequence.</span>\n<span class=\"token keyword\">string</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">SingleOrDefaultAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Invokes an action for each element in the observable sequence and returns a Task that will get </span>\n<span class=\"token comment\">// signalled when the sequence terminates.</span>\n<span class=\"token keyword\">await</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">ForEachAsync</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>All of the above methods allow you to pick a single result from your observable. <code class=\"language-text\">ForEachAsync</code> is different though as it performs an action on each item and when your observable completes (If it does) then the task completes.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>So we've learned how to await observables in different ways and how it can be another way of doing the same thing that <code class=\"language-text\">TaskCompletionSource</code> does but in a cleaner more elegant way.</p>\n<p>We've also learned that there are some caveats that you need to be aware of when awaiting an observable i.e. that observables return multiple results and you have to pick one to return in your task.</p>\n"}},{"node":{"title":"ConfigureAwait in Task Parallel Library (TPL)","path":"/configureawait-task-parallel-library/","date":"7 February 2014","timeToRead":2,"description":"The importance of using ConfigureAwait when using the Task Parallel Library (TPL) to improve performance and reduce context switching.","content":"<p>The Task Parallel Library in conjunction with the <code class=\"language-text\">async</code> and <code class=\"language-text\">await</code> keywords are great but there are some subtleties which you should consider. One of these is the use of the ConfigureAwait method.</p>\n<p>If I wanted to get a list of the titles of the new posts from my RSS feed I could write the following code:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IEnumerable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">>></span> <span class=\"token function\">GetBlogTitles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Current Thread = UI Thread</span>\n    <span class=\"token class-name\">HttpClient</span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// GetStringAsync = ThreadPool Thread</span>\n    <span class=\"token keyword\">string</span> rss <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://rehansaeed.com/feed/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Current Thread = UI Thread</span>\n    List<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> blogTitles <span class=\"token operator\">=</span> XDocument<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>rss<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Descendants</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Elements</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Current Thread = UI Thread</span>\n    <span class=\"token keyword\">return</span> blogTitles<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token class-name\">Task</span> <span class=\"token function\">UpdateUserInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Current Thread = UI Thread</span>\n    IEnumerable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> blogTitles <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetBlogTitles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Current Thread = UI Thread</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ListBox<span class=\"token punctuation\">.</span>ItemsSource <span class=\"token operator\">=</span> blogTitles<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If I was to call this method, then the entire method would execute on the calling thread except the bit where we call <code class=\"language-text\">GetStringAsync</code> which would go off and do its work on the ThreadPool thread and then we come back onto the original thread and do all our XML manipulation.</p>\n<p>Now if this was a client WPF or WinRT application which has a UI thread, all of the XML manipulation we are doing would be done on the UI thread. This is placing extra burden on the UI thread which could mean application freeze ups if the UI thread is being heavily taxed. The solution is simple, we add <code class=\"language-text\">ConfigureAwait(false)</code> to the end of the call we are making to get the RSS XML. So now our new code looks like this:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IEnumerable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">>></span> <span class=\"token function\">GetBlogTitles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Current Thread = UI Thread</span>\n    <span class=\"token class-name\">HttpClient</span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// GetStringAsync = ThreadPool Thread</span>\n    <span class=\"token keyword\">string</span> rss <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://rehansaeed.com/feed/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Current Thread = ThreadPool Thread</span>\n    List<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> blogTitles <span class=\"token operator\">=</span> XDocument<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>rss<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Descendants</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Elements</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Current Thread = ThreadPool Thread</span>\n    <span class=\"token keyword\">return</span> blogTitles<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token class-name\">Task</span> <span class=\"token function\">UpdateUserInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Current Thread = UI Thread</span>\n    IEnumerable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> blogTitles <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetBlogTitles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Current Thread = UI Thread</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ListBox<span class=\"token punctuation\">.</span>ItemsSource <span class=\"token operator\">=</span> blogTitles<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So now all our XML manipulation is done on the <code class=\"language-text\">ThreadPool</code> thread along with the HTTP GET we are doing using the <code class=\"language-text\">HttpClient</code>. Notice however, that when we return the blog titles to the calling method we are back on the UI thread. Each time you do an <code class=\"language-text\">await</code>, the default behaviour is to continue on the thread we started with. By adding <code class=\"language-text\">ConfigureAwait(false)</code>, we are overriding this behaviour to continue on whatever thread the Task was running on.</p>\n<p>For more on the Task Parallel Library (TPL) I highly recommend reading <a href=\"http://blogs.msdn.com/b/toub/\" title=\"Stephen Toub&#x27;s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stephen Toub's</a> blog.</p>\n"}}]}}},"context":{}}