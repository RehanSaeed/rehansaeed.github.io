{"hash":"6a3421c30d6185d1bb72ec7245b15c7e09536aa9","data":{"tag":{"title":"Serilog.Exceptions","path":"/tag/serilog-exceptions/","belongsTo":{"edges":[{"node":{"title":"Logging with Serilog.Exceptions","path":"/logging-with-serilog-exceptions/","date":"31 January 2016","timeToRead":4,"description":"Log exception details and custom properties that are not output in Exception.ToString() using Serilog.Exceptions for .NET.","content":"<p>Picking a logging framework for your new .NET project? I've tried all the best known ones, including <a href=\"https://logging.apache.org/log4net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">log4net</a>, <a href=\"http://nlog-project.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NLog</a> and Microsoft's <a href=\"https://msdn.microsoft.com/en-us/library/ff647183.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Logging Application Block</a>. All of these logging frameworks basically output plain text but recently I tried <a href=\"http://serilog.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Serilog</a> and was literally blown away by what you could do with it.</p>\n<h1 id=\"logging-in-json-format\"><a href=\"#logging-in-json-format\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logging in JSON Format</h1>\n<p>Take a look at the code below which makes use of the Serilog logger to log a geo-coordinate and an integer:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">var</span> position <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Latitude <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> Longitude <span class=\"token operator\">=</span> <span class=\"token number\">134</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> elapsedMs <span class=\"token operator\">=</span> <span class=\"token number\">34</span><span class=\"token punctuation\">;</span>\n\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">Information</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Processed {@Position} in {Elapsed:000} ms.\"</span><span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> elapsedMs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you configure Serilog correctly, you can get it to output it's logs to JSON format, so the above line would log the following:</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"Timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2015-12-07T12:26:24.0557671+00:00\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Level\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Information\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"MessageTemplate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Processed {@Position} in {Elapsed:000} ms.\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"RenderedMessage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Processed { Latitude: 25, Longitude: 134 } in 034 ms.\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Position\"</span><span class=\"token operator\">:</span> \n    <span class=\"token punctuation\">{</span> \n        <span class=\"token property\">\"Latitude\"</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"Longitude\"</span><span class=\"token operator\">:</span> <span class=\"token number\">134</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n    <span class=\"token property\">\"Elapsed\"</span><span class=\"token operator\">:</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ProcessId\"</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ThreadId\"</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"User\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Domain\\\\Username\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Machine\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Machine-Name\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Source\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"My Application Name\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"why-json\"><a href=\"#why-json\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why JSON?</h1>\n<p>What can you do with JSON formatted logs that you can't do with plain text? Well, if you store all your logs in something like <a href=\"https://www.elastic.co/webinars/get-started-with-elasticsearch?elektra=home&#x26;storm=banner\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Elastic Search</a>, you can query your logs and ask it questions. So if we take the above example further we could find all log messages from a particular machine or user with an elapsed time of more than 10 milliseconds and a distance of 10 Km away from the specific location.</p>\n<p>Not only that but if you set up something like <a href=\"https://www.elastic.co/products/kibana\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kibana</a>, then you can create visualisations for your logs which could grow to be gigabytes in size over time. You can create dashboards with cool charts and maps that look something like this:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1337 753' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3f1948529a6428611389c19acbe81072'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3f1948529a6428611389c19acbe81072)' width='1337' height='753' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAIAAAC2bqvFAAAACXBIWXMAAAsSAAALEgHS3X78AAAPBElEQVRYw71Y%2bZNc1XXuPyC/O45TlYAUjGa0sUigpCoGKoVJADu4yoAxTpzYgYBlkdhiE2iM5BjH2HJSBgR2wC4hC6EFCbFoBkkItICQNJqtp/e37/va/fr1Ovnuez2t1gKGxMmdU3fuu%2b/0vefc853lvszIlut3rv/JmV/uWzvy6LuHD4%2bMjKxZs2bjxg3r1z/%2bwANrNmx44oYbbli0aNGSJUsWL168cOHCRZdfvnTp0qGhy5dfefUtt91585dvv%2bXLt//VF7%2b0aGjRsmXLhoeHFy5c8GlpwYJLh4aG0i2w%2bPLlyzHAIxbEYBg0PAyGdHJoeJj8W7IEnCuvuSaz7tfXbb7v4cqOoy9s37p3z2vPPLv51T17jxw5tmnTz7e9vP3tAwdvvPGmz33uj8G/ZNlyDC655NJly68YGhpeeNnQjX/zlVtvu/OWv73jL75w45/86SXLr7hy8ZKln/3sH31a%2bsxn/nDBgoVLly1fsnTZ0PBi0GWXfR5bYNMVK1ZcffWKa1etuvbaVStXXnPVVVddceWVV1119YoVK1esXHnd9Tdk/u0/NmZPTZYm8rPFEsPypTJVrtA0w5348BTGmHnvyLH9o2%2b/%2bdYoaHTswP7RsWS8/8DBwwffOfLOu0fRg/AKkynP/4De2j%2bW/hz01v7RfW%2b8tX3n7meff%2bGrX/vHu7953x1f/zb62%2b/61t1//89pf%2bfd93z97%2b696xv3ZH781PNeWHX8wPMCx/Vdz3dArh%2bENTcZ1KJ6PW7GCdXjRm/caGI2iuKo3iO8wiSZJzyNer3RG3xiiud3AXlhjRak4ycnvn3fw2u%2b/8S9qx9ds/aJf7r/4e/%2b6wj6%2bx947J7vPLL6eyNr1v4gc3pyenImN5XNT4Jmcul4an4MOjOV7dH0APVmZgdogG0qOzE9OzHTm5ycnsU6eCQ95pPHlNJxOnkeTecK6E9NTJ86M3VqYurk%2bCRExfj0xPRJ0s9g/OH4ZCZqNDzfNW3TtC3bsT3ftx3L9VzH82zXbTQanXar3W63Ws20tUhL%2b3TQbM1PdkhrN5sNsNu2pWlqtVaL4joWJIu7DnrLwci2k143dMd1bcdpNBvNC6jRiLFdm%2bx%2bITUtiyxTb8QZ09Jt27AcghpV0yVZMWxPM21RFARRUDUFciiKDIEIyjwXPzMtwzB1ECSzHMtxIZfpeg7LsTzHBYGn6RrHs0Q%2bz/PDMKxW%2bxSAwqRVq34QAKlgIHomDYOwVqsmlE5Vq73HHkU1/JmGKYqirmleEGR0QzMMTRJKHHW6mJ/kNWgjazovqxIn0LzISAqvaKJmSBiruqQbsqwKDFeZzU9j3nJ0y9ZkhZdkDvycwLi%2bSbPlXHFGkBnbtesxXKU%2bN9A63S5o7ne1Tneum9B5rdaMOF3wHBcHAt/LGJYBa2i57fLRf7HLuxit5sw%2b4xZeLNIsRRd0U6WYCgSFGhBL02XDUhmOgvT5YtaE6KpAMWWoh3moh0fdVBi2wol0mSrCPlEc45ixcTeRpRq3dk2U9%2beYVmuuovsnWT0r2ccqMh6tMPrl8endZ6hx3thxpvTciZP7csX1%2b4%2b8OlX%2bgBOKqvf8sexpXnWjWl7XespE9YwBcDiupjKalDUMUdJNXZ4RmXFRFhi%2bIsoc5BYVThAZlqPwCGVEmaUYKFgSZOBE7svN8oQBMIQyuinbruEFPolRiQXa3Q76I1Ju1cvrb9rzo5u2Pf3FHT%2b77tXHr9%2b5ccW2dWsPv/Lk6Z3X7Vl3yXNrV708cukvRlbtfPBLbz%2b%2bZNvq20Y3/OWr6/7s5/%2b%2b7NeP//mWH89Iei1upsdBFLC8IJvLi6qp%2bQ1NKYbF51S5wvAs5KswRcAGx0wxpezsVIUq8hKTK8xIKg/kwBqCxHICJau8Zsp4BQVSQ4EwhlkCAL5WCwYs4Db9PeKh/fIxqa5NOPn3jFMnrKlD2gkjttlQ3sK8vkc6cNQc38Ed2FzatZM/%2bFTuN3uFd/bLx09Zs9u4Nw7IJ9vtzlk4QQHNchiWEVWN4jVZmA3p3ypSyXJNnGW5kq/QxcQIFaKJBTiVCqXZ1BmAE1HmRYmjuQoQX6rkYZnUPoouSjLxCvi3pGpw0lSBVIdmp9VoNy8O/AHEg63daad2671Mft4dcAuigIxgYepu4DjS8dDOT2SLxXLBcQ3bMZKzL%2bOMcZY4UYouGRbARM/mZ6AY/FjVRTwW4bHlXIUusXwF8xiLCtEB9kFitJKkOChhQqkQ3dShU5/uTSWT3bnuoKCd3iOZR6g%2bRwHTsWF3WVX8/Gan/AonIrCoOFdB4iAu0A8RIVaCFhrz5UoBykB6WAanPjF5mhcYBXGJLZUquUIJ0nOqLlTYItTzAg8%2bEITVwVPGoXbnRe9FGjLutJOJTvfsI6gzP9khYzJAUjoXQnBahVfRqRxP4iANZ%2bUTWYETQALST2cngBxAopJAKJUegpaoPLwZP4dNpmcmiuU8zVRgKCCtCFhVcpZrIwohpM/9/tqFFnBkRTRMFUEDkQRnKYoswAPYYAy4QyU4JWRiuUqxPIvoiWBPM2VABXUArOeFTqlcKBZznm8j%2bBimgigEK8E%2baRjt%2bwDZsl3fQR%2bRq7ZU05lQthp%2b1GlwoXJMzo3rlBV7M6piRP60Qx3m8%2b/znBKZcmRRrpGzxNMqY0WhX6/18UYU0CG4bUFWWREQWwSRlWVO1UTXtxAlGURGicOhlsp5VqByhWyxlKOBHbqAGIVsAA0tx7BsFAUG2MCsGbKkcDgCRRMcz0kKu7ivgF3zdlUOyVUD0hcdjrZFtx6IkX5CK3yozEqhUbRVIwrG9cIhZup9nmEDhXLFaYWdMekzRkUO3AsUcDyZpDLD8UxeoMoM4xb%2byyq8RLECjzwgMbws64Vt/IdPFcqlQjErSgiaKo6/UMoCPI6HRMAjtnI8DYkBMzpxbmgiSixqHpQ1g2GkHsXdZg8D7Wa7Xos7iDWNdqMah27oe2Gn2apHkW8H7bjdZ2vVG8RxLmipAq5me0hbOHviAALrCEcs4bhhmzhdAIZiGZP/wBPf0y1d0RTD8TXbp5An4DAiHKYC4CFSJd5Syuamy1QBuOJEBhBCmm8gx54fKpNgMl8loA%2bqNcf3w1rVJ8VSzQ%2brXhi2CdhTRz9bgKR%2bf44COHnZtIAHKIB44geoy1xJU/QEyoCWovGippZoWkfK5sbM2Rcl01MsV9Y0uAQcGmqXqTxcPzs7DehXmAJyHAyCGdSeqIVIjZrSfDGZtn5t2YuR0CQIUMOl4rYvYBtseMSyYS0iiQypwLRVBH64AeyuagLKAWwvySwOuFAqyCiJLEvSdSb7mpLdKqgGqe9UQ9VknD0cGrEIHkJqCoVjBNZUcqEj2g6SgOUGoev7PUKlGoYXoSBIq3fcqwh5Hij9iYPC3nW9834YBGAm/J6f4SUJwRtxE9HDcU0cPOrQCsOxAnqaEUTF8gwvlAxb1jVZUwSFqEqqU8M23EBUVZHUoUjVNPIXlC8LjD59vMbk7SB0HAvFs4amI04rKMUj1MmkRD6HqmGI8liSJA8lu%2b8rqgpmXddR5mALCzxxHTw9frJAVVEUTVV9Uk5bBpI/lwC6WJpFNuUlsURzHFZwQ80JQIplV1iWV3SUGJatIMfBs2lRVUwHOVzUDVElKRkuTjMlWqiIlZIhiYqhWraFC2kzuZ7024WP6QzuRAi4qPzSRyDKZIvC1EF%2b7O1Ys%2bD4vd/GDVKHydBRgZEzgCmMpqgSwgtAD8cVZJR2DpwV2huub/vVkmqhZMMvgKUZXp1iBJL4CMAEhH3KDCjdKygmLck0XWEYSjAM2rCQyeGUcaPxyZMU0nY/ahX27N731w%2b/tvZX33v23hcevMeezqcuX21FlM7hGg4TlSkqA53hQuntMPUe4i6dTprS09bq9DI8rAc8dgkbPJLcJMHYIg7aJZQUAanLptGj3mjUBxTAnOu6uI2ZpgnA4Ah93z9fgYQ/1Ol9dz12/Nbje78z%2brXJH945uvr1px6aSyKpWa3NygopbF23UCpn4FghuchF1SgK0xtdRMZBev1LCOgjg1qNOJPv9%2bYT5v7b3nWxWgt6k%2bQtFk8V6M5XAWNjYzt37tyyZQv6rVu3Hjp0aLDAhAJxTPjp0b0jN7%2b06ab3t6x54443n1yx42cP/fSxFkMR3WotQSVq4xacKxYzqBU1Q5dVVYJT6DrulwKQYhjVT9mSW26v4S4LvwVMEUzicy2AgzcMg6IovOV5RBBpsLZJFCBpu7j7ldXLf/EPXzj64CNnLn3kV5nv/udX77i/WS6SO53fFFgbYRacEDvjJxvjXOOIVF3IgvVqBKvU68li5zVMpnRBa%2bKPvMECkes4gAcu3QhB9Yv5AHYEAC7qA6nCNZnZ/JVHV38/%2b9DT%2bi2bTv/BN9fuemRdytMI2hbvdwmKO4hamShJNM249aZ0TK95oue8q4%2bfd2/4JM1vhf3LB%2bRD8A4S/JynQJqGOukXmKR9lBOrhcl3t7/w5JoXN9z/9LaNP61zTE8BN7BpgQzihmFauBM7JNLF7WfK24%2bV%2bZ/snnieeYXjW4YbJ6jtF%2bjpbWhuMJMP3qKyhhyQrx418kEnTj/ptCFNPYHEeS0NoB8ThXrHFzvm6ePWxKm4WmvPf6Jo1es110nPApkuoxomMAsL/Ibdc5KSf/jyme3Ka3tGnTxdTb9t/M6WspRl30JlZ%2bhO0izLCgDLZhORtIYtBwg2T7MsuSqc%2bwpVEGJAOiZfgeJW3J2Dopbne17CD4DCqs1Wug4Wz4RRBJOi9NuU/%2b3I60c37Z65%2bY0f3fqDY3uzE3SgjM/6U25JNWNa86JOFFY7ThzEzbYfNaJ2HYE3ajVIKO10a1EH%2bI0iskU9acQQjYbpehcSBAJd9NUgGY6ro1JHOhzkR%2bGOkmGeJ1Ml3zzg050Zi37pg%2bmK5I0xU2Pj8qzJFXR5puJPOkVWqhZUw6jbqt5gfNlwq6zuSaGmG7HgG5qPMubi2Qp46Iv7v6GPWSRV4COwkQAorjdcz8WtxHFwwY36l7rUF/uPKWj7rp8Ofl8KfAz1FOimN/9EjsRr5/r1eqPVTL%2beRySKAjat3jeSubO1%2bUdFrP8PBeA0Z2tutH4/MEiq%2bXZSStQ8z2u1O%2bd8LO7zn0v4FXT%2bv1bgvwG/nIJooHujTgAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1337\" alt=\"Kibana Dashboard Screenshot\" data-srcset=\"/assets/static/Kibana-Screenshot.82a2fbd.e96a2ce391412a40cdad4ce9201011d6.png 480w, /assets/static/Kibana-Screenshot.cbab2cf.e96a2ce391412a40cdad4ce9201011d6.png 1024w, /assets/static/Kibana-Screenshot.067a82c.e96a2ce391412a40cdad4ce9201011d6.png 1337w\" data-sizes=\"(max-width: 1337px) 100vw, 1337px\" data-src=\"/assets/static/Kibana-Screenshot.067a82c.e96a2ce391412a40cdad4ce9201011d6.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Kibana-Screenshot.067a82c.e96a2ce391412a40cdad4ce9201011d6.png\" width=\"1337\" alt=\"Kibana Dashboard Screenshot\"></noscript></p>\n<h1 id=\"logging-exceptions\"><a href=\"#logging-exceptions\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logging Exceptions</h1>\n<p>One major problem with all exceptions is that they do not log all the properties of an exception and throw away vital information. Take the <code class=\"language-text\">DbEntityValidationException</code> from EntityFramework as an example. This exception contains vital information buried not in the message but in a custom property called <code class=\"language-text\">EntityValidationErrors</code>. The problem is that when you do an <code class=\"language-text\">exception.ToString()</code> call, this vital information is not included in the resulting string. Even worse, it's not included in the debugger either. This is a pretty major failing in the .NET framework but alas we have to work around it.</p>\n<p>There are literally dozens of questions on <a href=\"https://stackoverflow.com/questions/15820505/dbentityvalidationexception-how-can-i-easily-tell-what-caused-the-error\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">StackOverflow</a> asking how to deal with this problem and all the major logging frameworks fail in this regard. All of them call <code class=\"language-text\">exception.ToString()</code> and fail to log the <code class=\"language-text\">EntityValidationErrors</code> collection.</p>\n<p><code class=\"language-text\">DbEntityValidationException</code> is not the only culprit, half the exceptions in the .NET framework contain custom properties that are not logged. The <code class=\"language-text\">Exception</code> base class itself has a <code class=\"language-text\">Data</code> dictionary collection which is never logged either.</p>\n<h1 id=\"serilogexceptions\"><a href=\"#serilogexceptions\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Serilog.Exceptions</h1>\n<p>I wrote <a href=\"https://github.com/RehanSaeed/Serilog.Exceptions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Serilog.Exceptions</a> to solve this problem. So what happens when you log a <code class=\"language-text\">DbEntityValidationException</code> using this NuGet package added to Serilog itself? Well take a look yourself:</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"Timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2015-12-07T12:26:24.0557671+00:00\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Level\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"MessageTemplate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"RenderedMessage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Exception\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"System.Data.Entity.Validation.DbEntityValidationException: Message\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ExceptionDetail\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"EntityValidationErrors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"Entry\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"ValidationErrors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token property\">\"PropertyName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PropertyName\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token property\">\"ErrorMessage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PropertyName is Required.\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token property\">\"Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"System.Data.Entity.Validation.DbValidationError\"</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"IsValid\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"System.Data.Entity.Validation.DbEntityValidationResult\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Validation failed for one or more entities. See 'EntityValidationErrors' property for more details.\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"InnerException\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"TargetSite\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"StackTrace\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"HelpLink\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Source\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"HResult\"</span><span class=\"token operator\">:</span> <span class=\"token number\">-2146232032</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"System.Data.Entity.Validation.DbEntityValidationException\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ProcessId\"</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ThreadId\"</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"User\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Domain\\\\Username\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Machine\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Machine-Name\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Source\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"My Application Name\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It logs every single property of the exception and not only that but it drills down even further into the object hierarchy and logs that information too.</p>\n<p>You're probably thinking it uses reflection right? Well...sometimes. This library has custom code to deal with extra properties on most common exception types and only falls back to using reflection to get the extra information if the exception is not supported by Serilog.Exceptions internally.</p>\n<h1 id=\"getting-started-with-serilogexceptions\"><a href=\"#getting-started-with-serilogexceptions\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting Started with Serilog.Exceptions</h1>\n<p>Add the Serilog.Exceptions NuGet package to your project using the NuGet Package Manager or run the following command in the Package Console Window:</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">Install<span class=\"token operator\">-</span>Package Serilog<span class=\"token punctuation\">.</span>Exceptions</code></pre></div>\n<p>When setting up your logger, add the <code class=\"language-text\">WithExceptionDetails</code> line like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> Serilog<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> Serilog<span class=\"token punctuation\">.</span>Exceptions<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">ILogger</span> logger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LoggerConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>Enrich<span class=\"token punctuation\">.</span><span class=\"token function\">WithExceptionDetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>WriteTo<span class=\"token punctuation\">.</span><span class=\"token function\">Sink</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RollingFileSink</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">@\"C:\\logs\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonFormatter</span><span class=\"token punctuation\">(</span>renderMessage<span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">CreateLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>That's it, it's one line of code!</p>\n"}}]}}},"context":{}}