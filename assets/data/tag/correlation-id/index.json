{"hash":"54b5748b639b861c6671fbef97fb1f1cfe80cbef","data":{"tag":{"title":"CorrelationId","path":"/tag/correlation-id/","belongsTo":{"edges":[{"node":{"title":"Optimally Configuring ASP.NET Core HttpClientFactory","path":"/optimally-configuring-asp-net-core-httpclientfactory/","date":"20 August 2018","timeToRead":11,"description":"How to optimally configure a HttpClient using the new HttpClientFactory API in ASP.NET Core 2.1 for best performance, usability, resiliency and easy of use.","content":"<div class=\"custom-block warning\"><p class=\"custom-block-title\">Update (20-08-2018)</p><p>Steve Gordon kindly suggested a <a href=\"https://github.com/RehanSaeed/HttpClientSample/pull/1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">further optimisation</a> to use <code class=\"language-text\">ConfigureHttpClient</code>. I've updated the code below to reflect this.</p></div>\n<p>In this post, I'm going to show how to optimally configure a HttpClient using the new <a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-requests?view=aspnetcore-2.1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HttpClientFactory</a> API in ASP.NET Core 2.1. If you haven't already I recommend reading Steve Gordon's <a href=\"https://www.stevejgordon.co.uk/introduction-to-httpclientfactory-aspnetcore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">series of blog posts</a> on the subject since this post builds on that knowledge. You should also read his post about <a href=\"https://www.stevejgordon.co.uk/asp-net-core-correlation-ids\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Correlation ID's</a> as I'm making use of that library in this post. The main aims of the code in this post are to:</p>\n<ol>\n<li>Use the <code class=\"language-text\">HttpClientFactory</code> typed client, I don't know why the ASP.NET team bothered to provide three ways to register a client, the typed client is the one to use. It provides type safety and removes the need for magic strings.</li>\n<li>Enable GZIP decompression of responses for better performance. Interestingly, the <code class=\"language-text\">HttpClient</code> and ASP.NET Core does not support compression of GZIP requests, only responses. Doing some searching online some time ago suggests that this is an optimisation that is not very common at all, I thought this was pretty unbelievable at the time.</li>\n<li>The <code class=\"language-text\">HttpClient</code> should time out after the server does not respond after a set amount of time.</li>\n<li>The <code class=\"language-text\">HttpClient</code> should retry requests which fail due to transient errors.</li>\n<li>The <code class=\"language-text\">HttpClient</code> should stop performing new requests for a period of time when a consecutive number of requests fail using the circuit breaker pattern. Failing fast in this way helps to protect an API or database that may be under high load and means the client gets a failed response quickly rather than waiting for a time-out.</li>\n<li>The URL, time-out, retry and circuit breaker settings should be configurable from the <code class=\"language-text\">appsettings.json</code> file.</li>\n<li>The <code class=\"language-text\">HttpClient</code> should send a <code class=\"language-text\">User-Agent</code> HTTP header telling the server the name and version of the calling application. If the server is logging this information, this can be useful for debugging purposes.</li>\n<li>The <code class=\"language-text\">X-Correlation-ID</code> HTTP header from the response should be passed on to the request made using the <code class=\"language-text\">HttpClient</code>. This would make it easy to correlate a request across multiple applications.</li>\n</ol>\n<h1 id=\"usage-example\"><a href=\"#usage-example\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Usage Example</h1>\n<p>It doesn't really matter what the typed client <code class=\"language-text\">HttpClient</code> looks like, that's not what we're talking about but I include it for context.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IRocketClient</span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span>TakeoffStatus<span class=\"token operator\">></span> <span class=\"token function\">GetStatus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> working<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RocketClient</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IRocketClient</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">HttpClient</span> httpClient<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">RocketClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpClient</span> httpClient<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>httpClient <span class=\"token operator\">=</span> httpClient<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>TakeoffStatus<span class=\"token operator\">></span> <span class=\"token function\">GetStatus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> working<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span>working <span class=\"token punctuation\">?</span> <span class=\"token string\">\"status-working\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"status-failing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">EnsureSuccessStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ReadAsAsync</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TakeoffStatus</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here is how we register the typed client above with our dependency injection container. All of the meat lives in these three methods. <code class=\"language-text\">AddCorrelationId</code> adds a middleware written by Steve Gordon to handle <a href=\"https://www.stevejgordon.co.uk/asp-net-core-correlation-ids\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Correlation ID's</a>. <code class=\"language-text\">AddPolicies</code> registers a policy registry and the policies themselves (A policy is <a href=\"https://github.com/App-vNext/Polly\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Polly's</a> way of specifying how you want to deal with errors e.g. using retries, circuit breaker pattern etc.). Finally, we add the typed HttpClient but with configuration options, so we can configure it's settings from appsettings.json.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    services\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddCorrelationId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Add Correlation ID support to ASP.NET Core</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddPolicies</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configuration<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Setup Polly policies.</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddHttpClient</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IRocketClient</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RocketClient</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RocketClientOptions</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configuration<span class=\"token punctuation\">,</span> <span class=\"token string\">\"RocketClient\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">appsettings.json</code> file below contains the base address for the endpoint we want to connect to, a time-out value of thirty seconds is used if the server is taking too long to respond and policy settings for retries and the circuit breaker.</p>\n<p>The retry settings state that after a first failed request, another three attempts will be made (this means you can get up to four requests). There will be an exponentially longer back-off or delay between each request. The first retry request will occur after two seconds, the second after another four seconds and the third occurs after another eight seconds.</p>\n<p>The circuit breaker states that it will allow 12 consecutive failed requests before breaking the circuit and throwing <code class=\"language-text\">CircuitBrokenException</code> for every attempted request. The circuit will be broken for thirty seconds.</p>\n<p>Generally, my advice is when allowing a high number of exceptions before breaking, use a longer duration of break. When allowing a lower number of exceptions before breaking, keep the duration of break small. Another possibility I've not tried is to combine these two scenarios, so you have two circuit breakers. The circuit breaker with the lower limit would kick in first but only break the circuit for a short time, if exceptions are no longer thrown, then things go back to normal quickly. If exceptions continue to be thrown, then the other circuit breaker with a longer duration of break would kick in and the circuit would be broken for a longer period of time.</p>\n<p>You can of course play with these numbers, what you set them to will depend on your application.</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"RocketClient\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"BaseAddress\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://example.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Timeout\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00:00:30\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Policies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"HttpCircuitBreaker\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"DurationOfBreak\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00:00:30\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"ExceptionsAllowedBeforeBreaking\"</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"HttpRetry\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"BackoffPower\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Count\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"configuring-polly-policies\"><a href=\"#configuring-polly-policies\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configuring Polly Policies</h1>\n<p>Below is the implementation for <code class=\"language-text\">AddPollyPolicies</code>. It starts by setting up and reading a configuration section in our <code class=\"language-text\">appsettings.json</code> file of type <code class=\"language-text\">PolicyOptions</code>. Then adds the Polly <a href=\"https://github.com/App-vNext/Polly/wiki/PolicyRegistry\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PolicyRegistry</a> which is where Polly stores it's policies. Finally, we add a retry and circuit breaker policy and configure them using the settings we've read from the <code class=\"language-text\">PolicyOptions</code>.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceCollectionExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">string</span> PoliciesConfigurationSectionName <span class=\"token operator\">=</span> <span class=\"token string\">\"Policies\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">IServiceCollection</span> <span class=\"token function\">AddPolicies</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">this</span> <span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IConfiguration</span> configuration<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">string</span> configurationSectionName <span class=\"token operator\">=</span> PoliciesConfigurationSectionName<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> section <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">.</span><span class=\"token function\">GetSection</span><span class=\"token punctuation\">(</span>configurationSectionName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Configure</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PolicyOptions</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> policyOptions <span class=\"token operator\">=</span> section<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Get</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PolicyOptions</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">var</span> policyRegistry <span class=\"token operator\">=</span> services<span class=\"token punctuation\">.</span><span class=\"token function\">AddPolicyRegistry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        policyRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>\n            PolicyName<span class=\"token punctuation\">.</span>HttpRetry<span class=\"token punctuation\">,</span>\n            HttpPolicyExtensions\n                <span class=\"token punctuation\">.</span><span class=\"token function\">HandleTransientHttpError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">WaitAndRetryAsync</span><span class=\"token punctuation\">(</span>\n                    policyOptions<span class=\"token punctuation\">.</span>HttpRetry<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">,</span>\n                    retryAttempt <span class=\"token operator\">=></span> TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span>policyOptions<span class=\"token punctuation\">.</span>HttpRetry<span class=\"token punctuation\">.</span>BackoffPower<span class=\"token punctuation\">,</span> retryAttempt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        policyRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>\n            PolicyName<span class=\"token punctuation\">.</span>HttpCircuitBreaker<span class=\"token punctuation\">,</span>\n            HttpPolicyExtensions\n                <span class=\"token punctuation\">.</span><span class=\"token function\">HandleTransientHttpError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">CircuitBreakerAsync</span><span class=\"token punctuation\">(</span>\n                    handledEventsAllowedBeforeBreaking<span class=\"token punctuation\">:</span> policyOptions<span class=\"token punctuation\">.</span>HttpCircuitBreaker<span class=\"token punctuation\">.</span>ExceptionsAllowedBeforeBreaking<span class=\"token punctuation\">,</span>\n                    durationOfBreak<span class=\"token punctuation\">:</span> policyOptions<span class=\"token punctuation\">.</span>HttpCircuitBreaker<span class=\"token punctuation\">.</span>DurationOfBreak<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> services<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PolicyName</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">string</span> HttpCircuitBreaker <span class=\"token operator\">=</span> <span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>HttpCircuitBreaker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">string</span> HttpRetry <span class=\"token operator\">=</span> <span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>HttpRetry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PolicyOptions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CircuitBreakerPolicyOptions</span> HttpCircuitBreaker <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RetryPolicyOptions</span> HttpRetry <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CircuitBreakerPolicyOptions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TimeSpan</span> DurationOfBreak <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> ExceptionsAllowedBeforeBreaking <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RetryPolicyOptions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> Count <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> BackoffPower <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that each policy is using the <code class=\"language-text\">HandleTransientHttpError</code> method which tells Polly when to apply the retry and circuit breakers. One important question is, what is a transient HTTP error according to Polly? Well, looking at the <a href=\"https://github.com/App-vNext/Polly.Extensions.Http/blob/808665304882fb921b1c38cbbd38fcc102229f84/src/Polly.Extensions.Http.Shared/HttpPolicyExtensions.cs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a> in the <code class=\"language-text\">Polly.Extensions.Http</code> GitHub repository, it looks like they consider any of the below as transient errors:</p>\n<ol>\n<li>Any <code class=\"language-text\">HttpRequestException</code> thrown. This can happen when the server is down.</li>\n<li>A response with a status code of 408 Request Timeout.</li>\n<li>A response with a status code of 500 or above.</li>\n</ol>\n<h1 id=\"configuring-httpclient\"><a href=\"#configuring-httpclient\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configuring HttpClient</h1>\n<p>Finally, we can get down to configuring our <code class=\"language-text\">HttpClient</code> itself. The <code class=\"language-text\">AddHttpClient</code> method starts by binding the <code class=\"language-text\">TClientOptions</code> type to a configuration section in <code class=\"language-text\">appsettings.json</code>. <code class=\"language-text\">TClientOptions</code> is a derived type of <code class=\"language-text\">HttpClientOptions</code> which just contains a base address and time-out value. I'll come back to <code class=\"language-text\">CorrelationIdDelegatingHandler</code> and <code class=\"language-text\">UserAgentDelegatingHandler</code> in a moment.</p>\n<p>We set the <code class=\"language-text\">HttpClientHandler</code> to be <code class=\"language-text\">DefaultHttpClientHandler</code>. This type just enables GZIP and Deflate compression. <a href=\"https://github.com/dotnet/corefx/pull/29729\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Brotli support</a> is being added soon, so watch out for that. Finally, we add the retry and circuit breaker policies to the <code class=\"language-text\">HttpClient</code>.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceCollectionExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> IServiceCollection <span class=\"token generic-method\"><span class=\"token function\">AddHttpClient</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TClient</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TImplementation</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TClientOptions</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">this</span> <span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">IConfiguration</span> configuration<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">string</span> configurationSectionName<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">where</span> TClient <span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span>\n        <span class=\"token keyword\">where</span> TImplementation <span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TClient</span>\n        <span class=\"token keyword\">where</span> TClientOptions <span class=\"token punctuation\">:</span> HttpClientOptions<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        services\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Configure</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TClientOptions</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">.</span><span class=\"token function\">GetSection</span><span class=\"token punctuation\">(</span>configurationSectionName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransient</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CorrelationIdDelegatingHandler</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransient</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserAgentDelegatingHandler</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddHttpClient</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TClient</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TImplementation</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureHttpClient</span><span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">var</span> httpClientOptions <span class=\"token operator\">=</span> sp\n                        <span class=\"token punctuation\">.</span>GetRequiredService<span class=\"token operator\">&lt;</span>IOptions<span class=\"token operator\">&lt;</span>TClientOptions<span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n                    options<span class=\"token punctuation\">.</span>BaseAddress <span class=\"token operator\">=</span> httpClientOptions<span class=\"token punctuation\">.</span>BaseAddress<span class=\"token punctuation\">;</span>\n                    options<span class=\"token punctuation\">.</span>Timeout <span class=\"token operator\">=</span> httpClientOptions<span class=\"token punctuation\">.</span>Timeout<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ConfigurePrimaryHttpMessageHandler</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultHttpClientHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddPolicyHandlerFromRegistry</span><span class=\"token punctuation\">(</span>PolicyName<span class=\"token punctuation\">.</span>HttpRetry<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddPolicyHandlerFromRegistry</span><span class=\"token punctuation\">(</span>PolicyName<span class=\"token punctuation\">.</span>HttpCircuitBreaker<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddHttpMessageHandler</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CorrelationIdDelegatingHandler</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddHttpMessageHandler</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserAgentDelegatingHandler</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultHttpClientHandler</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">HttpClientHandler</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">DefaultHttpClientHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>AutomaticDecompression <span class=\"token operator\">=</span> DecompressionMethods<span class=\"token punctuation\">.</span>Deflate <span class=\"token operator\">|</span> DecompressionMethods<span class=\"token punctuation\">.</span>GZip<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpClientOptions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Uri</span> BaseAddress <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TimeSpan</span> Timeout <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"correlationiddelegatinghandler\"><a href=\"#correlationiddelegatinghandler\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CorrelationIdDelegatingHandler</h1>\n<p>When I'm making a HTTP request from an API i.e. it's an API to API call and I control both sides, I use the <code class=\"language-text\">X-Correlation-ID</code> HTTP header to trace requests as they move down the stack. The <code class=\"language-text\">CorrelationIdDelegatingHandler</code> is used to take the correlation ID for the current HTTP request and pass it down to the request made in the API to API call. The implementation is pretty simple, it's just setting a HTTP header.</p>\n<p>The power comes when you are using something like Application Insights, Kibana or Seq for logging. You can now take the correlation ID for a request and see the logs for it from multiple API's or services. This is really invaluable when you are dealing with a micro services architecture.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CorrelationIdDelegatingHandler</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">DelegatingHandler</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ICorrelationContextAccessor</span> correlationContextAccessor<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> IOptions<span class=\"token operator\">&lt;</span>CorrelationIdOptions<span class=\"token operator\">></span> options<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CorrelationIdDelegatingHandler</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">ICorrelationContextAccessor</span> correlationContextAccessor<span class=\"token punctuation\">,</span>\n        IOptions<span class=\"token operator\">&lt;</span>CorrelationIdOptions<span class=\"token operator\">></span> options<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>correlationContextAccessor <span class=\"token operator\">=</span> correlationContextAccessor<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> Task<span class=\"token operator\">&lt;</span>HttpResponseMessage<span class=\"token operator\">></span> <span class=\"token function\">SendAsync</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">HttpRequestMessage</span> request<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">,</span> correlationContextAccessor<span class=\"token punctuation\">.</span>CorrelationContext<span class=\"token punctuation\">.</span>CorrelationId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Else the header has already been added due to a retry.</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">SendAsync</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"useragentdelegatinghandler\"><a href=\"#useragentdelegatinghandler\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>UserAgentDelegatingHandler</h1>\n<p>It's often useful to know something about the client that is calling your API for logging and debugging purposes. You can use the <code class=\"language-text\">User-Agent</code> HTTP header for this purpose.</p>\n<p>The <code class=\"language-text\">UserAgentDelegatingHandler</code> just sets the <code class=\"language-text\">User-Agent</code> HTTP header by taking the API's assembly name and version attributes. You need to set the <code class=\"language-text\">Version</code> and <code class=\"language-text\">Product</code> attributes in your csproj file for this to work. The name and version are then placed along with the current operating system into the User-Agent string.</p>\n<p>Now the next time you get an error in your API, you'll know the client application that caused it (if it's under your control).</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserAgentDelegatingHandler</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">DelegatingHandler</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">UserAgentDelegatingHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>Assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetEntryAssembly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">UserAgentDelegatingHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Assembly</span> assembly<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetProduct</span><span class=\"token punctuation\">(</span>assembly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetVersion</span><span class=\"token punctuation\">(</span>assembly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">UserAgentDelegatingHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> applicationName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> applicationVersion<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>applicationName <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>applicationName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>applicationVersion <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>applicationVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>UserAgentValues <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProductInfoHeaderValue</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProductInfoHeaderValue</span><span class=\"token punctuation\">(</span>applicationName<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> applicationVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProductInfoHeaderValue</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"({Environment.OSVersion})\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">UserAgentDelegatingHandler</span><span class=\"token punctuation\">(</span>List<span class=\"token operator\">&lt;</span>ProductInfoHeaderValue<span class=\"token operator\">></span> userAgentValues<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>UserAgentValues <span class=\"token operator\">=</span> userAgentValues <span class=\"token operator\">??</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>userAgentValues<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> List<span class=\"token operator\">&lt;</span>ProductInfoHeaderValue<span class=\"token operator\">></span> UserAgentValues <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> Task<span class=\"token operator\">&lt;</span>HttpResponseMessage<span class=\"token operator\">></span> <span class=\"token function\">SendAsync</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">HttpRequestMessage</span> request<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>UserAgent<span class=\"token punctuation\">.</span><span class=\"token function\">Any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> userAgentValue <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>UserAgentValues<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>UserAgent<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>userAgentValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Else the header has already been added due to a retry.</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">SendAsync</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">string</span> <span class=\"token function\">GetProduct</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Assembly</span> assembly<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token generic-method\"><span class=\"token function\">GetAttributeValue</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AssemblyProductAttribute</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>assembly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">string</span> <span class=\"token function\">GetVersion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Assembly</span> assembly<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> infoVersion <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">GetAttributeValue</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AssemblyInformationalVersionAttribute</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>assembly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>infoVersion <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> infoVersion<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token generic-method\"><span class=\"token function\">GetAttributeValue</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AssemblyFileVersionAttribute</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>assembly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">string</span> <span class=\"token generic-method\"><span class=\"token function\">GetAttributeValue</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Assembly</span> assembly<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">where</span> T <span class=\"token punctuation\">:</span> Attribute\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> attribute <span class=\"token operator\">=</span> assembly\n            <span class=\"token punctuation\">.</span>CustomAttributes\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>AttributeType <span class=\"token operator\">==</span> type<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>ConstructorArguments<span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> attribute <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">?</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty <span class=\"token punctuation\">:</span> attribute<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span> <span class=\"token attr-name\">Label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Package<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Version</span><span class=\"token punctuation\">></span></span>1.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Version</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Product</span><span class=\"token punctuation\">></span></span>My Application<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Product</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- ... --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h1 id=\"sample-github-project\"><a href=\"#sample-github-project\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sample GitHub Project</h1>\n<p>I realize that was a lot of boilerplate code to write. It was difficult to write this as more than one blog post. To aid in digestion, I've created a <a href=\"https://github.com/RehanSaeed/HttpClientSample\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub sample project</a> with the full working code.</p>\n<p>The sample project contains two API's. One makes a HTTP request to the other. You can pass a query argument to decide whether the callee API will fail or not and try out the retry and circuit breaker logic. Feel free to play with the configuration in <code class=\"language-text\">appsettings.json</code> and see what options work best for your application.</p>\n"}}]}}},"context":{}}