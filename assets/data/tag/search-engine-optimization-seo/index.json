{"hash":"d57c38c55aa4494e9521dc61d0a8355f1c6bb5c7","data":{"tag":{"title":"Search Engine Optimization (SEO)","path":"/tag/search-engine-optimization-seo/","belongsTo":{"edges":[{"node":{"title":"SEO Friendly URL's for ASP.NET Core","path":"/seo-friendly-urls-asp-net-core/","date":"17 December 2016","timeToRead":8,"description":"An SEO friendly URL is human readable and gives your site a higher page rank. Learn how to implement SEO friendly URL's using ASP.NET Core.","content":"<p>For some reason there are not a lot of Search Engine Optimization (SEO) blog posts or projects out there. Taking a few simple steps can make your site rank higher in Google or Bing search results so it's well worth doing. Here are a few other of my SEO related blog posts:</p>\n<ul>\n<li><a href=\"/canonical-urls-for-asp-net-mvc/\">Canonical URL's for ASP.NET MVC</a></li>\n<li><a href=\"/dynamically-generating-sitemap-xml-for-asp-net-mvc/\">Dynamically Generating Sitemap.xml for ASP.NET MVC</a></li>\n<li><a href=\"/dynamically-generating-robots-txt-using-asp-net-mvc/\">Dynamically Generating Robots.txt Using ASP.NET MVC</a></li>\n</ul>\n<h1 id=\"what-is-an-seo-friendly-url\"><a href=\"#what-is-an-seo-friendly-url\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is an SEO Friendly URL?</h1>\n<p>This Mozilla blog post called '<a href=\"https://moz.com/blog/15-seo-best-practices-for-structuring-urls\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">15 best practices for structuring URL's'</a> is the best article on the subject of SEO friendly URL's I found and it's well worth a read.</p>\n<p>Essentially you want a simple short URL that tells the user what they are clicking on at a glance. It should also contain keywords pertaining to what is on the page for better Search Engine Optimization (SEO). In short, a page will appear higher up in search results if the term a user searches for appears in the URL. Your URL should look like this:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 915 96' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-15f182bc00a287e5a918aa9d1f3d4b95'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-15f182bc00a287e5a918aa9d1f3d4b95)' width='915' height='96' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAHCAIAAAA3VtxdAAAACXBIWXMAAAsSAAALEgHS3X78AAAB2ElEQVQ4y82UR2/CQBCF/f9/DhJ3JEQEODj0XkLvYIwL5UA%2b7VMsk3bOO6xmZ9%2bOZ2bf2NrtdufzOQiCMAx93z%2bdTsfj8XA4uK673%2b9ZjwYnA8/z2u12oVAolUqv/wPWaDSqVCovBsvlsl6v53I527YzmUytVsPIZrOtVms6nc5mMwidTiedTufzeS7b/wAWzabTZLZarQ4Gm82Gdbvd0vi9ATYevUOv1ysWi28GjuPwFI6BjOQ2tr/j79Mk7UdP0m/5BoGBnwDpIhicEpgMPPgxIMgfRRHak8F6uVxCgyiB8BmSq/gx5I%2bN8Bcomu6KaY3HY8%2bA7s7nc9pPZnSd4lAL6cJDQghMBYDH47FYLOBTBnw8GOv1GiZ%2bVciTEm1toPlhnGDykkwdt3hwReMuZXOqjkBQMiC29fhsFY3g1CCn1e/3FYgQqBy1EBEqSTOvkIiO1FKplGh85na7Eeh%2bv5MKhaGlyWTCwFAwZbcMGo0G1weDAR6OsJmuZrP5bgABJ%2bNH%2b4bDId8tl8tsSaZarRKNsYTc7XYhMGxohgjMIadExoNNQC5aJOR%2bQnWrMh6BMuLOxTQ1WL8sVmkm1hJbyeZ6vUbPSEqIbVJs8sTySMbRVq8k/5cvfgDQbqGFsQmLhwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"915\" alt=\"SEO Friendly URL Example\" data-srcset=\"/assets/static/SEO-Friendly-URL.82a2fbd.6db80eba7aa05674861760d6b8f4dea2.png 480w, /assets/static/SEO-Friendly-URL.d965bd8.6db80eba7aa05674861760d6b8f4dea2.png 915w\" data-sizes=\"(max-width: 915px) 100vw, 915px\" data-src=\"/assets/static/SEO-Friendly-URL.d965bd8.6db80eba7aa05674861760d6b8f4dea2.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/SEO-Friendly-URL.d965bd8.6db80eba7aa05674861760d6b8f4dea2.png\" width=\"915\" alt=\"SEO Friendly URL Example\"></noscript></p>\n<p>The URL contains an ID for a product and ends with a friendly title. The title contains alphanumeric characters with dashes instead of spaces. Note that the ID of the product is still included in the URL, to avoid having to deal with two friendly titles with the same name.</p>\n<p>If you elect to omit the ID, then you have to do a lot of footwork to make things work. Firstly, you have to use the title as a kind of primary key to get the product data from your database and secondly, you also have to figure out what to do when there are two pages with the same title. Each time you want to create a new title, you have to scan your data store to see if the title already exists and if it does either error and force the creation of a different title or add make it unique by adding a number on the end. This is a lot of work but does produce a nicer URL, the choice is yours.</p>\n<h1 id=\"how-to-build-one\"><a href=\"#how-to-build-one\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to Build One</h1>\n<p>Take a look at the controller action below. It is a very simple example of how to use SEO friendly URL's. In our example we have a product class which has a ID and title properties, where the title is just the name of the product.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"product/{id}/{title}\"</span><span class=\"token punctuation\">,</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"GetProduct\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">IActionResult</span> <span class=\"token function\">GetProduct</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> title<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Get the product as indicated by the ID from a database or some repository.</span>\n    <span class=\"token keyword\">var</span> product <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>productRepository<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// If a product with the specified ID was not found, return a 404 Not Found response.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>product <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">NotFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Get the actual friendly version of the title.</span>\n    <span class=\"token keyword\">string</span> friendlyTitle <span class=\"token operator\">=</span> FriendlyUrlHelper<span class=\"token punctuation\">.</span><span class=\"token function\">GetFriendlyTitle</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Compare the title with the friendly title.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>friendlyTitle<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> StringComparison<span class=\"token punctuation\">.</span>Ordinal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// If the title is null, empty or does not match the friendly title, return a 301 Permanent</span>\n        <span class=\"token comment\">// Redirect to the correct friendly URL.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">RedirectToRoutePermanent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GetProduct\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">,</span> title <span class=\"token operator\">=</span> friendlyTitle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// The URL the client has browsed to is correct, show them the view containing the product.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">View</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All the work is done by the <code class=\"language-text\">FriendlyUrlHelper</code> which turns the product title which may contain spaces, numbers or other special characters (which would not be allowed in a URL without escaping them) into a <code class=\"language-text\">lower-kebab-case</code> title.</p>\n<p>This generated friendly title is compared with the one that is passed in and if it is different (Someone may have omitted the friendly title or mis-spelled it) we perform a permanent redirect to the product with the same ID but now with the friendly title. This is important for SEO purposes, we want search engines to only find one URL for each product. Finally, if the friendly title matches the one passed in we return the product view.</p>\n<h1 id=\"the-friendlyurlhelper\"><a href=\"#the-friendlyurlhelper\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The FriendlyUrlHelper</h1>\n<p>The <code class=\"language-text\">FriendlyUrlHelper</code> was inspired by a famous Stack Overflow question '<a href=\"https://stackoverflow.com/questions/25259/how-does-stack-overflow-generate-its-seo-friendly-urls/25486\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How does Stack Overflow generate its SEO-friendly URLs?</a>'. The full source code for it is shown below.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">/// &lt;summary></span>\n<span class=\"token comment\">/// Helps convert &lt;see cref=\"string\"/> title text to URL friendly &lt;see cref=\"string\"/>'s that can safely be</span>\n<span class=\"token comment\">/// displayed in a URL.</span>\n<span class=\"token comment\">/// &lt;/summary></span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FriendlyUrlHelper</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Converts the specified title so that it is more human and search engine readable e.g.</span>\n    <span class=\"token comment\">/// http://example.com/product/123/this-is-the-seo-and-human-friendly-product-title. Note that the ID of the</span>\n    <span class=\"token comment\">/// product is still included in the URL, to avoid having to deal with two titles with the same name. Search</span>\n    <span class=\"token comment\">/// Engine Optimization (SEO) friendly URL's gives your site a boost in search rankings by including keywords</span>\n    <span class=\"token comment\">/// in your URL's. They are also easier to read by users and can give them an indication of what they are</span>\n    <span class=\"token comment\">/// clicking on when they look at a URL. Refer to the code example below to see how this helper can be used.</span>\n    <span class=\"token comment\">/// Go to definition on this method to see a code example. To learn more about friendly URL's see</span>\n    <span class=\"token comment\">/// https://moz.com/blog/15-seo-best-practices-for-structuring-urls.</span>\n    <span class=\"token comment\">/// To learn more about how this was implemented see</span>\n    <span class=\"token comment\">/// http://stackoverflow.com/questions/25259/how-does-stack-overflow-generate-its-seo-friendly-urls/25486#25486</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"title\">The title of the URL.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;param name=\"remapToAscii\">if set to &lt;c>true&lt;/c>, remaps special UTF8 characters like 'è' to their ASCII</span>\n    <span class=\"token comment\">/// equivalent 'e'. All modern browsers except Internet Explorer display the 'è' correctly. Older browsers and</span>\n    <span class=\"token comment\">/// Internet Explorer percent encode these international characters so they are displayed as'%C3%A8'. What you</span>\n    <span class=\"token comment\">/// set this to depends on whether your target users are English speakers or not.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;param name=\"maxlength\">The maximum allowed length of the title.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>The SEO and human friendly title.&lt;/returns></span>\n    <span class=\"token comment\">/// &lt;code></span>\n    <span class=\"token comment\">/// [HttpGet(\"product/{id}/{title}\", Name = \"GetDetails\")]</span>\n    <span class=\"token comment\">/// public IActionResult Product(int id, string title)</span>\n    <span class=\"token comment\">/// {</span>\n    <span class=\"token comment\">///     // Get the product as indicated by the ID from a database or some repository.</span>\n    <span class=\"token comment\">///     var product = ProductRepository.Find(id);</span>\n    <span class=\"token comment\">///</span>\n    <span class=\"token comment\">///     // If a product with the specified ID was not found, return a 404 Not Found response.</span>\n    <span class=\"token comment\">///     if (product == null)</span>\n    <span class=\"token comment\">///     {</span>\n    <span class=\"token comment\">///         return this.HttpNotFound();</span>\n    <span class=\"token comment\">///     }</span>\n    <span class=\"token comment\">///</span>\n    <span class=\"token comment\">///     // Get the actual friendly version of the title.</span>\n    <span class=\"token comment\">///     var friendlyTitle = FriendlyUrlHelper.GetFriendlyTitle(product.Title);</span>\n    <span class=\"token comment\">///</span>\n    <span class=\"token comment\">///     // Compare the title with the friendly title.</span>\n    <span class=\"token comment\">///     if (!string.Equals(friendlyTitle, title, StringComparison.Ordinal))</span>\n    <span class=\"token comment\">///     {</span>\n    <span class=\"token comment\">///         // If the title is null, empty or does not match the friendly title, return a 301 Permanent</span>\n    <span class=\"token comment\">///         // Redirect to the correct friendly URL.</span>\n    <span class=\"token comment\">///         return this.RedirectToRoutePermanent(\"GetProduct\", new { id = id, title = friendlyTitle });</span>\n    <span class=\"token comment\">///     }</span>\n    <span class=\"token comment\">///</span>\n    <span class=\"token comment\">///     // The URL the client has browsed to is correct, show them the view containing the product.</span>\n    <span class=\"token comment\">///     return this.View(product);</span>\n    <span class=\"token comment\">/// }</span>\n    <span class=\"token comment\">/// &lt;/code></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">string</span> <span class=\"token function\">GetFriendlyTitle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> title<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> remapToAscii <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxlength <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>title <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> title<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> prevdash <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            c <span class=\"token operator\">=</span> title<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                prevdash <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'Z'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// tricky way to convert to lower-case</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">|</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                prevdash <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>prevdash <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    prevdash <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> previousLength <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>remapToAscii<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token function\">RemapInternationalCharToAscii</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previousLength <span class=\"token operator\">!=</span> stringBuilder<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    prevdash <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> maxlength<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevdash<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> stringBuilder<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Remaps the international character to their equivalent ASCII characters. See</span>\n    <span class=\"token comment\">/// http://meta.stackexchange.com/questions/7435/non-us-ascii-characters-dropped-from-full-profile-url/7696#7696</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"character\">The character to remap to its ASCII equivalent.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>The remapped character&lt;/returns></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">string</span> <span class=\"token function\">RemapInternationalCharToAscii</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> character<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">string</span> s <span class=\"token operator\">=</span> character<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToLowerInvariant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"àåáâäãåąā\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"èéêëę\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"ìíîïı\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"òóôõöøőð\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"ùúûüŭů\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"u\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"çćčĉ\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"żźž\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"śşšŝ\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"s\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"ñń\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"ýÿ\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"ğĝ\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> <span class=\"token string\">'ř'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> <span class=\"token string\">'ł'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"l\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> <span class=\"token string\">'đ'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> <span class=\"token string\">'ß'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"ss\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> <span class=\"token string\">'Þ'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"th\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> <span class=\"token string\">'ĥ'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"h\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> <span class=\"token string\">'ĵ'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"j\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The difference between my version and the one in the Stack Overflow answer is that mine optionally handles non-ASCII characters using the boolean remapToAscii parameter. This parameter remaps special UTF8 characters like <code class=\"language-text\">è</code> to their ASCII equivalent <code class=\"language-text\">e</code>. If there is no equivalent, then those characters are dropped. All modern browsers except Internet Explorer and Edge display the <code class=\"language-text\">è</code> correctly. Older browsers like Internet Explorer percent encode these international characters so they are displayed as <code class=\"language-text\">%C3%A8</code>. What you set this to depends on whether your target users are English speakers and if you care about supporting IE and Edge. I must say that I was hoping Edge would have added support so that <code class=\"language-text\">remapToAscii</code> could be turned off by default but I'm sorely disappointed.</p>\n<p>Using the third parameter you can specify a maximum length for the title with any additional characters being dropped. Finally, the last thing to say about this method is that it has been tuned for speed.</p>\n<h1 id=\"where-can-i-get-it\"><a href=\"#where-can-i-get-it\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Where Can I Get It?</h1>\n<p>This is a great little snippet of code to make your URL's a human readable, while giving your site an SEO boost. It doesn't take much effort to use either. This helper class is available in the <a href=\"https://www.nuget.org/packages/Boxed.AspNetCore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boxed.AspNetCore</a> NuGet package or you can look at the source code in the <a href=\"https://github.com/Dotnet-Boxed/Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed Framework</a> GitHub page.</p>\n"}},{"node":{"title":"Dynamically Generating Sitemap.xml for ASP.NET MVC","path":"/dynamically-generating-sitemap-xml-for-asp-net-mvc/","date":"15 September 2015","timeToRead":8,"description":"How to dynamically generate a sitemap.xml file using ASP.NET MVC to improve the Search Engine Optimization (SEO) of your site and get better search rankings.","content":"<h1 id=\"what-is-a-sitemapxml-file\"><a href=\"#what-is-a-sitemapxml-file\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is a sitemap.xml File</h1>\n<p>What is a <code class=\"language-text\">sitemap.xml</code> file used for? The official <a href=\"http://www.sitemaps.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sitemaps.org</a> site really does says it best:</p>\n<blockquote>\n<p>Sitemaps are an easy way for webmasters to inform search engines about pages on their sites that are available for crawling. In its simplest form, a Sitemap is an XML file that lists URL's for a site along with additional metadata about each URL (when it was last updated, how often it usually changes, and how important it is, relative to other URL's in the site) so that search engines can more intelligently crawl the site.</p>\n<p>Web crawlers usually discover pages from links within the site and from other sites. Sitemaps supplement this data to allow crawlers that support Sitemaps to pick up all URL's in the Sitemap and learn about those URL's using the associated metadata. Using the Sitemap protocol does not guarantee that web pages are included in search engines, but provides hints for web crawlers to do a better job of crawling your site.</p>\n</blockquote>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>urlset</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.sitemaps.org/schemas/sitemap/0.9<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>loc</span><span class=\"token punctuation\">></span></span>http://www.example.com/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>loc</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>lastmod</span><span class=\"token punctuation\">></span></span>2005-01-01<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>lastmod</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>changefreq</span><span class=\"token punctuation\">></span></span>monthly<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>changefreq</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>priority</span><span class=\"token punctuation\">></span></span>0.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>priority</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token comment\">&lt;!-- ... --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>urlset</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>As you can see each URL in a sitemap contains four pieces of metadata:</p>\n<ul>\n<li><code class=\"language-text\">url</code> - The URL itself.</li>\n<li><code class=\"language-text\">lastmod</code> (Optional) - A last modified timestamp. This tells search engines whether or not they should re-index the page to reflect any changes that have been made.</li>\n<li><code class=\"language-text\">changefreq</code> (Optional) - A change frequency indicator (This can take the values: always, hourly, daily, weekly, monthly, yearly, never). This gives search engines an indication of how often they should come back and re-index the page.</li>\n<li><code class=\"language-text\">priority</code> (Optional) - A number from zero to one indicating the importance of the page compared to other pages on the site.</li>\n</ul>\n<p>The latter three values only give search engines an indication of when they can or should index or even re-index a page. It is not a guarantee that it will happen, although it makes it more likely.</p>\n<h1 id=\"is-it-worth-the-effort\"><a href=\"#is-it-worth-the-effort\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Is it Worth the Effort?</h1>\n<p>Search engines are black boxes. We only know what goes into them (Our sitemap) and what comes out the other end (The search results). I can make no promises that adding a sitemap will increase your sites search rankings but <strong>Google</strong> says:</p>\n<blockquote>\n<p>Using a sitemap doesn't guarantee that all the items in your sitemap will be crawled and indexed, as Google processes rely on complex algorithms to schedule crawling. However, <strong>in most cases, your site will benefit from having a sitemap</strong>, and you'll never be penalized for having one.</p>\n<footer><cite>[Google](https://support.google.com/webmasters/answer/156184?hl=en)</cite></footer>\n</blockquote>\n<h1 id=\"generating-a-static-sitemapxml-file\"><a href=\"#generating-a-static-sitemapxml-file\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generating a Static sitemap.xml File</h1>\n<p>There are tools online you can use to generate a static <code class=\"language-text\">sitemap.xml</code> file, which you can dump at the root of your site but you have to manually update these every time your site changes. This may be fine if your site does not change much but adding a dynamically generated <code class=\"language-text\">sitemap.xml</code> file is fairly simple process and worth the effort.</p>\n<h1 id=\"dynamically-generating-sitemapxml-for-aspnet-mvc\"><a href=\"#dynamically-generating-sitemapxml-for-aspnet-mvc\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamically Generating Sitemap.xml for ASP.NET MVC</h1>\n<p>Dynamically generating a simple <code class=\"language-text\">sitemap.xml</code> file for ASP.NET MVC is really simple but adding all the bells and whistles requires a bit more work. We start with a SitemapNode and frequency enumeration which represents a single URL in our sitemap:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SitemapNode</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> SitemapFrequency<span class=\"token punctuation\">?</span> Frequency <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> DateTime<span class=\"token punctuation\">?</span> LastModified <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">?</span> Priority <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> Url <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> SitemapFrequency\n<span class=\"token punctuation\">{</span>\n    Never<span class=\"token punctuation\">,</span>\n    Yearly<span class=\"token punctuation\">,</span>\n    Monthly<span class=\"token punctuation\">,</span>\n    Weekly<span class=\"token punctuation\">,</span>\n    Daily<span class=\"token punctuation\">,</span>\n    Hourly<span class=\"token punctuation\">,</span>\n    Always\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we need to create a collection of <code class=\"language-text\">SitemapNode</code>'s. In my example below, I add the three main pages of my site, Home, About and Contact. I then go on to add a collection of product pages. I am getting every product ID from my database and using that to generate a product URL. Note that I'm not using every property on the <code class=\"language-text\">SitemapNode</code> class since in my case I don't have an easy way to figure out a last changed date but I do specify a priority and frequency for my products.</p>\n<p>Please note that the URL's must be absolute and I am using an extension method I wrote called <code class=\"language-text\">AbsoluteRouteUrl</code> to generate absolute URL's instead of relative ones. I have included that below too.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> IReadOnlyCollection<span class=\"token operator\">&lt;</span>SitemapNode<span class=\"token operator\">></span> <span class=\"token function\">GetSitemapNodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UrlHelper</span> urlHelper<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    List<span class=\"token operator\">&lt;</span>SitemapNode<span class=\"token operator\">></span> nodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SitemapNode</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    nodes<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">SitemapNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Url <span class=\"token operator\">=</span> urlHelper<span class=\"token punctuation\">.</span><span class=\"token function\">AbsoluteRouteUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HomeGetIndex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Priority <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    nodes<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>\n       <span class=\"token keyword\">new</span> <span class=\"token class-name\">SitemapNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">{</span>\n           Url <span class=\"token operator\">=</span> urlHelper<span class=\"token punctuation\">.</span><span class=\"token function\">AbsoluteRouteUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HomeGetAbout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n           Priority <span class=\"token operator\">=</span> <span class=\"token number\">0.9</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    nodes<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>\n       <span class=\"token keyword\">new</span> <span class=\"token class-name\">SitemapNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">{</span>\n           Url <span class=\"token operator\">=</span> urlHelper<span class=\"token punctuation\">.</span><span class=\"token function\">AbsoluteRouteUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HomeGetContact\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n           Priority <span class=\"token operator\">=</span> <span class=\"token number\">0.9</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> productId <span class=\"token keyword\">in</span> productRepository<span class=\"token punctuation\">.</span><span class=\"token function\">GetProductIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        nodes<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>\n           <span class=\"token keyword\">new</span> <span class=\"token class-name\">SitemapNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">{</span>\n               Url <span class=\"token operator\">=</span> urlHelper<span class=\"token punctuation\">.</span><span class=\"token function\">AbsoluteRouteUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ProductGetProduct\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> id <span class=\"token operator\">=</span> productId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n               Frequency <span class=\"token operator\">=</span> SitemapFrequency<span class=\"token punctuation\">.</span>Weekly<span class=\"token punctuation\">,</span>\n               Priority <span class=\"token operator\">=</span> <span class=\"token number\">0.8</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> nodes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UrlHelperExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">string</span> <span class=\"token function\">AbsoluteRouteUrl</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">this</span> <span class=\"token class-name\">UrlHelper</span> urlHelper<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">string</span> routeName<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">object</span> routeValues <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">string</span> scheme <span class=\"token operator\">=</span> urlHelper<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Url<span class=\"token punctuation\">.</span>Scheme<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> urlHelper<span class=\"token punctuation\">.</span><span class=\"token function\">RouteUrl</span><span class=\"token punctuation\">(</span>routeName<span class=\"token punctuation\">,</span> routeValues<span class=\"token punctuation\">,</span> scheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now all we have to do is turn our collection of <code class=\"language-text\">SitemapNode</code>'s into XML:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> <span class=\"token function\">GetSitemapDocument</span><span class=\"token punctuation\">(</span>IEnumerable<span class=\"token operator\">&lt;</span>SitemapNode<span class=\"token operator\">></span> sitemapNodes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">XNamespace</span> xmlns <span class=\"token operator\">=</span> <span class=\"token string\">\"http://www.sitemaps.org/schemas/sitemap/0.9\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">XElement</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XElement</span><span class=\"token punctuation\">(</span>xmlns <span class=\"token operator\">+</span> <span class=\"token string\">\"urlset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SitemapNode</span> sitemapNode <span class=\"token keyword\">in</span> sitemapNodes<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">XElement</span> urlElement <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XElement</span><span class=\"token punctuation\">(</span>\n            xmlns <span class=\"token operator\">+</span> <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">XElement</span><span class=\"token punctuation\">(</span>xmlns <span class=\"token operator\">+</span> <span class=\"token string\">\"loc\"</span><span class=\"token punctuation\">,</span> Uri<span class=\"token punctuation\">.</span><span class=\"token function\">EscapeUriString</span><span class=\"token punctuation\">(</span>sitemapNode<span class=\"token punctuation\">.</span>Url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            sitemapNode<span class=\"token punctuation\">.</span>LastModified <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XElement</span><span class=\"token punctuation\">(</span>\n                xmlns <span class=\"token operator\">+</span> <span class=\"token string\">\"lastmod\"</span><span class=\"token punctuation\">,</span> \n                sitemapNode<span class=\"token punctuation\">.</span>LastModified<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ToLocalTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-ddTHH:mm:sszzz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            sitemapNode<span class=\"token punctuation\">.</span>Frequency <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XElement</span><span class=\"token punctuation\">(</span>\n                xmlns <span class=\"token operator\">+</span> <span class=\"token string\">\"changefreq\"</span><span class=\"token punctuation\">,</span> \n                sitemapNode<span class=\"token punctuation\">.</span>Frequency<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToLowerInvariant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            sitemapNode<span class=\"token punctuation\">.</span>Priority <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XElement</span><span class=\"token punctuation\">(</span>\n                xmlns <span class=\"token operator\">+</span> <span class=\"token string\">\"priority\"</span><span class=\"token punctuation\">,</span> \n                sitemapNode<span class=\"token punctuation\">.</span>Priority<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F1\"</span><span class=\"token punctuation\">,</span> CultureInfo<span class=\"token punctuation\">.</span>InvariantCulture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>urlElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">XDocument</span> document <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XDocument</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we add an action method to our <code class=\"language-text\">HomeController</code> to get to our sitemap. Note the route to get to the sitemap. It is <a href=\"http://www.sitemaps.org/faq.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">recommended</a> to place your sitemap at the root of your site at <code class=\"language-text\">sitemap.xml</code>. Also note that creating a route with a file extension at the end (<code class=\"language-text\">.xml</code>) is not allowed in MVC 5 and below (ASP.NET Core is fine), so you need to add the line below in your <code class=\"language-text\">Web.config</code> file.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">RoutePrefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HomeController</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sitemap.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ActionResult</span> <span class=\"token function\">SitemapXml</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> sitemapNodes <span class=\"token operator\">=</span> <span class=\"token function\">GetSitemapNodes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">string</span> xml <span class=\"token operator\">=</span> <span class=\"token function\">GetSitemapDocument</span><span class=\"token punctuation\">(</span>sitemapNodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Content</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">,</span> ContentType<span class=\"token punctuation\">.</span>Xml<span class=\"token punctuation\">,</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>system.webServer</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>handlers</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>SitemapXml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sitemap.xml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">verb</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>GET<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>System.Web.Handlers.TransferRequestHandler<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">preCondition</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>integratedMode,runtimeVersionv4.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>handlers</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>system.webServer</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h1 id=\"sitemap-index-files\"><a href=\"#sitemap-index-files\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sitemap Index Files</h1>\n<p>For most people the above code will be enough. You can only have a maximum of 50,000 URL's in your sitemap and it must not exceed 10MB in size. I did some testing and if your URL's are fairly long and you supply all of the metadata for each URL, you can easily hit the 10MB mark with 25,000 URL's.</p>\n<p>It's not clear what happens if search engines come across a file that breaches these limits. I would have thought that the likes of Google or Bing would have a margin of error but it's better to be well under the limits than over. Not many sites have that many pages but you'd be surprised at how easy it is to hit these limits.</p>\n<p>This is where sitemap index files come in. The idea is that you break up your sitemap into pages and list all of these in an index file. When a search engine visits your <code class=\"language-text\">sitemap.xml</code> file, they retrieve the index file and visit each page in turn. Here is an example of an index file:</p>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sitemapindex</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.sitemaps.org/schemas/sitemap/0.9<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sitemap</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>loc</span><span class=\"token punctuation\">></span></span>http://www.example.com/sitemap1.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>loc</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>lastmod</span><span class=\"token punctuation\">></span></span>2004-10-01T18:23:17+00:00<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>lastmod</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sitemap</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sitemap</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>loc</span><span class=\"token punctuation\">></span></span>http://www.example.com/sitemap2.xml.gz<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>loc</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>lastmod</span><span class=\"token punctuation\">></span></span>2005-01-01<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>lastmod</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sitemap</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sitemapindex</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>As you can see you can optionally add a last modified date to each sitemap URL to tell search engines when a sitemap file has changed. This last modified date can be calculated from it's contents, you just need to take the latest last modified date from that particular page.</p>\n<p>This blog post has started to get a little long and I haven't even covered sitemap pinging yet, so I will not go into too much detail but I will refer you to where you can get at the full source code and worked example. Luckily, all of the code above and the code to generate a sitemap index file is available here:</p>\n<ul>\n<li>ASP.NET Core Boilerplate Framework NuGet packages for <a href=\"https://www.nuget.org/packages/Boilerplate.Web.Mvc5/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MVC 5</a> and <a href=\"https://www.nuget.org/packages/Boilerplate.Web.Mvc6/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASP.NET Core</a>.</li>\n<li>You can also generate a project using the <a href=\"https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASP.NET Core Boilerplate</a> project template to see the full code in action.</li>\n</ul>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusions</h1>\n<p>Adding a sitemap is a great Search Engine Optimization (SEO) technique to improve your sites search rankings. With my NuGet package, it makes it a really simple feature to add to your site. In my next blog post, I'll talk about sitemap pinging which can be used to pro-actively notify search engines of a change in your sitemap.</p>\n"}},{"node":{"title":"Dynamically Generating Robots.txt Using ASP.NET MVC","path":"/dynamically-generating-robots-txt-using-asp-net-mvc/","date":"31 July 2015","timeToRead":4,"description":"How to dynamically generate a robots.txt file using a simple ASP.NET MVC action method and only a few lines of code.","content":"<ul>\n<li><a href=\"/asp-net-mvc-boilerplate/\">ASP.NET Core Boilerplate</a></li>\n<li>\n<p>Security</p>\n<ul>\n<li><a href=\"/securing-the-aspnet-mvc-web-config/\">Securing the ASP.NET MVC Web.config (Updated)</a></li>\n<li><a href=\"/nwebsec-asp-net-mvc-security-through-http-headers/\">NWebSec ASP.NET MVC Security Through HTTP Headers</a></li>\n<li><a href=\"/content-security-policy-for-asp-net-mvc/\">Content Security Policy (CSP) for ASP.NET MVC</a></li>\n</ul>\n</li>\n<li>\n<p>Search Engine Optimization (SEO)</p>\n<ul>\n<li><a href=\"/canonical-urls-for-asp-net-mvc/\">Canonical URL's for ASP.NET MVC</a></li>\n<li><a href=\"/dynamically-generating-robots-txt-using-asp-net-mvc\">Dynamically Generating Robots.txt Using ASP.NET MVC</a></li>\n</ul>\n</li>\n<li><a href=\"/internet-favicon-madness/\">Internet Favicon Madness (Updated)</a></li>\n<li><a href=\"/building-rssatom-feeds-for-asp-net-mvc/\">Building RSS/Atom Feeds for ASP.NET MVC</a></li>\n</ul>\n<p>A <code class=\"language-text\">robots.txt</code> file is a simple text file you can place at the root of your site at <code class=\"language-text\">http://example.com/robots.txt</code> to tell search engine robots (also known as web crawlers) how to index your site. The robots know to look for this file at the root of every site before they start indexing the site. If you do not have this file in your site, you will be getting a lot of 404 Not Found errors in your logs.</p>\n<p>The <code class=\"language-text\">robots.txt</code> uses the <a href=\"http://en.wikipedia.org/wiki/Robots_exclusion_standard\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Robots Exclusion Standard</a> which is a very simple format that can give robots instructions on what to index and what to skip. A very basic <code class=\"language-text\">robots.txt</code> file looks like this:</p>\n<div class=\"line-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Allow all robots to index this site.\nuser-agent: *\n\n# Tell all robots not to index any of the pages under the /error path.\ndisallow: /error/\n\n# Tell all robots to index the under the error/foo path.\nallow: /error/foo/\n\n# Add a link to the site-map. Unfortunately this must be an absolute URL.\nsitemap: http://example.com/sitemap.xml</code></pre></div>\n<p>In the above code, all comments start with the hash character. It tells all robots that they can index everything on the site except pages under the <code class=\"language-text\">/error</code> path because we don't want our error pages showing up in peoples search results. The only exception to that rule is to allow the resources under the <code class=\"language-text\">/error/foo</code> path to be indexed.</p>\n<p>The last line is interesting and tells robots where to find an XML file called a site-map. A site-map contains a list of URL's to all the pages in the site and is used to give search engines a list of URL's they can go through to index the entire site. It's a great SEO (Search Engine Optimization) technique to give your site a boost in it's search rankings.</p>\n<p>I will discuss creating a dynamic <code class=\"language-text\">sitemap.xml</code> file for ASP.NET Core in a future post. For now, all you need to know is that the site-map URL has to be an absolute URL according to the specification. This is a pretty terrible decision by whoever created the robots exclusion standard. It's really annoying that when you're creating a site, you have to remember to manually update this URL. If the URL was relative we would not have this problem.</p>\n<h1 id=\"dynamically-generating-a-robotstxt-file\"><a href=\"#dynamically-generating-a-robotstxt-file\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamically Generating a robots.txt File</h1>\n<p>Fortunately, it's really easy to dynamically create a <code class=\"language-text\">robots.txt</code> file, which auto-generates the site-map URL using the MVC <code class=\"language-text\">UrlHelper</code>. Take a look at the code below:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HomeController</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"robots.txt\"</span><span class=\"token punctuation\">,</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"GetRobotsText\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">OutputCache</span><span class=\"token punctuation\">(</span>Duration <span class=\"token operator\">=</span> <span class=\"token number\">86400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ContentResult</span> <span class=\"token function\">RobotsText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user-agent: *\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"disallow: /error/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"allow: /error/foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sitemap: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Url<span class=\"token punctuation\">.</span><span class=\"token function\">RouteUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GetSitemapXml\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Url<span class=\"token punctuation\">.</span>Scheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">TrimEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Content</span><span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">,</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sitemap.xml\"</span><span class=\"token punctuation\">,</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"GetSitemapXml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">OutputCache</span><span class=\"token punctuation\">(</span>Duration <span class=\"token operator\">=</span> <span class=\"token number\">86400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ContentResult</span> <span class=\"token function\">SitemapXml</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// I'll talk about this in a later blog post.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I set up a route to the <code class=\"language-text\">robots.txt</code> path at the root of the site in my main <code class=\"language-text\">HomeController</code> and cached the response for a day for better performance (You can and should probably specify a much longer period of time if you know yours won't change).</p>\n<p>I then go on to append my commands to the StringBuilder. The great thing is that I can easily use the <code class=\"language-text\">UrlHelper</code> to generate a complete absolute URL to the <code class=\"language-text\">sitemap.xml</code> path which is also dynamically generated in much the same way. Finally, I just return the string as plain text using the UTF-8 encoding.</p>\n<p>Creating a route ending with a file extension is not allowed by default in ASP.NET Core. To get around this security restriction, you need to add the following to the <code class=\"language-text\">Web.config</code> file:</p>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- ...Omitted --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>system.webServer</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- ...Omitted --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>handlers</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\">&lt;!-- ...Omitted --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>RobotsText<span class=\"token punctuation\">\"</span></span> \n           <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>robots.txt<span class=\"token punctuation\">\"</span></span> \n           <span class=\"token attr-name\">verb</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>GET<span class=\"token punctuation\">\"</span></span> \n           <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>System.Web.Handlers.TransferRequestHandler<span class=\"token punctuation\">\"</span></span> \n           <span class=\"token attr-name\">preCondition</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>integratedMode,runtimeVersionv4.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>handlers</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>system.webServer</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h1 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h1>\n<p>Dynamically generating your <code class=\"language-text\">robots.txt</code> file is pretty easy and only takes as many lines of code as you need to write your <code class=\"language-text\">robots.txt</code> file anyway. It also means that you don't need to pollute your project structure with yet another file at the root of it (This problem is fixed in MVC Core, where all static files must be added to the wwwroot folder). You can also dynamically generate your site-map URL so you don't need to remember to update it every time you change the domain.</p>\n<p>You could argue that performance is an issue when compared to a static <code class=\"language-text\">robots.txt</code> text file but its a matter of a few bytes and if you cache the response with a sufficient time limit then I think that even that problem goes away.</p>\n<p>Once again, you can find a working example of this and much more using the <a href=\"https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASP.NET Core Boilerplate</a> project template.</p>\n"}},{"node":{"title":"Canonical URL's for ASP.NET MVC","path":"/canonical-urls-for-asp-net-mvc/","date":"14 July 2015","timeToRead":13,"description":"Use canonical URL's in ASP.NET MVC for better Search Engine Optimization (SEO) using ASP.NET Core Boilerplate and the RedirectToCanonicalUrlAttribute.","content":"<ul>\n<li><a href=\"/asp-net-mvc-boilerplate/\">ASP.NET Core Boilerplate</a></li>\n<li>\n<p>Security</p>\n<ul>\n<li><a href=\"/securing-the-aspnet-mvc-web-config/\">Securing the ASP.NET MVC Web.config (Updated)</a></li>\n<li><a href=\"/nwebsec-asp-net-mvc-security-through-http-headers/\">NWebSec ASP.NET MVC Security Through HTTP Headers</a></li>\n<li><a href=\"/content-security-policy-for-asp-net-mvc/\">Content Security Policy (CSP) for ASP.NET MVC</a></li>\n</ul>\n</li>\n<li>\n<p>Search Engine Optimization (SEO)</p>\n<ul>\n<li><a href=\"/canonical-urls-for-asp-net-mvc/\">Canonical URL's for ASP.NET MVC</a></li>\n<li><a href=\"/dynamically-generating-robots-txt-using-asp-net-mvc\">Dynamically Generating Robots.txt Using ASP.NET MVC</a></li>\n</ul>\n</li>\n<li><a href=\"/internet-favicon-madness/\">Internet Favicon Madness (Updated)</a></li>\n<li><a href=\"/building-rssatom-feeds-for-asp-net-mvc/\">Building RSS/Atom Feeds for ASP.NET MVC</a></li>\n</ul>\n<p>The aim of this post is to give your site better search engine rankings using special <a href=\"https://en.wikipedia.org/wiki/Search_engine_optimization\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Search Engine Optimization (SEO)</a> techniques. Take a look at the URL's below and see if you can spot the differences between them:</p>\n<ol>\n<li><a href=\"http://example.com/one/two/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://example.com/one/two/</a></li>\n<li><a href=\"https://example.com/one/two/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://example.com/one/two/</a></li>\n<li><a href=\"http://example.com/one/two\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://example.com/one/two</a></li>\n<li><a href=\"http://example.com/One/Two\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://example.com/One/Two</a></li>\n</ol>\n<p>The second one has a HTTPS scheme, the third omits the trailing slash and the fourth has mixed case characters. All of the URL's point to the same resource but it turns out that search engines treat every one of these URL's as unique and different. Search engines give each URL a page rank, which determines where the resource will show up in the search results. Another term you will also hear quite often is 'link juice'. The link juice conceptualizes how page rank flows between pages and websites.</p>\n<p>If your site exposes the above four different URL's to the single resource, your link juice is being spread against each one and as a result, that will be having a detrimental impact on your page rank.</p>\n<h1 id=\"the-canonical-link-tag\"><a href=\"#the-canonical-link-tag\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Canonical Link Tag</h1>\n<p>One way to solve this problem is to add a canonical link tag to the head of your HTML page. This tells search engines what the canonical (actual) URL to the page is. The link tag contains a URL to your preferred URL for the page.</p>\n<link rel=\"canonical\" href=\"http://example.com/one/two/\">\n<p>One thing you must decide early on is your preferred URL for every page. You must ask yourself the following questions and use the resulting URL in your canonical link tag.</p>\n<ol>\n<li>Do I prefer this page to be HTTP or HTTPS? This is yet another reason to go with HTTPS across your entire site.</li>\n<li>Should the URL end with a trailing slash? This is often preferred over omitting it but it's a matter of preference.</li>\n<li>Should I allow a mix of upper-case and lower-case characters? Most sites choose to go with all lower-case characters.</li>\n</ol>\n<p>When search engines follow a link to your page, regardless of which URL they followed to get to your page, all of the link juice will be given to the URL specified in your canonical link tag. Google goes into a lot more depth about this tag <a href=\"http://googlewebmastercentral.blogspot.co.uk/2009/02/specify-your-canonical.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<h1 id=\"301-permanent-redirects\"><a href=\"#301-permanent-redirects\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>301 Permanent Redirects</h1>\n<p>Unfortunately, using the canonical link tag is not the recommended approach. The intention is that it should only be used to retrofit older websites, so they can become optimized for search engines.</p>\n<p>According to both <a href=\"http://googlewebmastercentral.blogspot.co.uk/2010/04/to-slash-or-not-to-slash.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google</a> and <a href=\"http://blogs.bing.com/webmaster/2012/01/26/moving-content-think-301-not-relcanonical\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bing</a>, the recommended approach if you visit a non-preferred format of your pages URL is to perform a <a href=\"https://moz.com/learn/seo/redirection\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">301 permanent redirect</a> to the preferred canonical URL. According to them, you only lose a tiny amount of link juice by doing a 301 permanent redirect.</p>\n<h1 id=\"canonical-urls-in-mvc\"><a href=\"#canonical-urls-in-mvc\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Canonical URL's in MVC</h1>\n<p>ASP.NET MVC 5 and ASP.NET Core have two settings you can use to automatically create canonical URL's every time you generate URL's.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Append a trailing slash to all URL's.</span>\nRouteTable<span class=\"token punctuation\">.</span>Routes<span class=\"token punctuation\">.</span>AppendTrailingSlash <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Ensure that all URL's are lower-case.</span>\nRouteTable<span class=\"token punctuation\">.</span>Routes<span class=\"token punctuation\">.</span>LowercaseUrls <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">services<span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureRouting</span><span class=\"token punctuation\">(</span>\n    routeOptions <span class=\"token operator\">=></span> \n    <span class=\"token punctuation\">{</span> \n        <span class=\"token comment\">// Append a trailing slash to all URL's.</span>\n        routeOptions<span class=\"token punctuation\">.</span>AppendTrailingSlash <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Ensure that all URL's are lower-case.</span>\n        routeOptions<span class=\"token punctuation\">.</span>LowercaseUrls <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Once you apply these settings and are using the <code class=\"language-text\">UrlHelper</code> to generate all your URL's, you will see that across your site all URL's are lower-case and all end with a trailing slash (This is just my personal preference you may not like trailing slashes).</p>\n<p>This means that within your site, no 301 permanent redirects to canonical URL's are required because the URL's are already canonical. However, this just solves part of the problem. What about external links to your site? What happens when people copy and paste your site and delete or add a trailing slash? What happens when someone types in a link to your site and puts in an upper-case character? The fact is you have no control over external links and when search engine crawlers follow those non-canonical links you will be losing valuable link juice.</p>\n<h1 id=\"301-permanent-redirects-in-mvc\"><a href=\"#301-permanent-redirects-in-mvc\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>301 Permanent Redirects in MVC</h1>\n<p>Enter the <code class=\"language-text\">RedirectToCanonicalUrlAttribute</code>. This is an MVC filter you can apply, which will check that the URL from each request is canonical. If it is, it does nothing and MVC returns the view in its response as normal. If the URL is not canonical, it generates the canonical URL based on the above MVC settings and returns a 301 permanent redirect response to the client. The client can then make another request to the correct canonical URL.</p>\n<p>You can take a look at the source code for the <code class=\"language-text\">RedirectToCanonicalUrlAttribute</code>, <code class=\"language-text\">NoTrailingSlashAttribute</code> and <code class=\"language-text\">NoLowercaseQueryStringAttribute</code>'s (I shall explain in a minute) for MVC 5 below or the ASP.NET Core version <a href=\"https://github.com/Dotnet-Boxed/Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">/// &lt;summary></span>\n<span class=\"token comment\">/// To improve Search Engine Optimization SEO, there should only be a single URL for each resource. Case </span>\n<span class=\"token comment\">/// differences and/or URL's with/without trailing slashes are treated as different URL's by search engines. This </span>\n<span class=\"token comment\">/// filter redirects all non-canonical URL's based on the settings specified to their canonical equivalent. </span>\n<span class=\"token comment\">/// Note: Non-canonical URL's are not generated by this site template, it is usually external sites which are </span>\n<span class=\"token comment\">/// linking to your site but have changed the URL case or added/removed trailing slashes.</span>\n<span class=\"token comment\">/// (See Google's comments at http://googlewebmastercentral.blogspot.co.uk/2010/04/to-slash-or-not-to-slash.html</span>\n<span class=\"token comment\">/// and Bing's at http://blogs.bing.com/webmaster/2012/01/26/moving-content-think-301-not-relcanonical).</span>\n<span class=\"token comment\">/// &lt;/summary></span>\n<span class=\"token punctuation\">[</span><span class=\"token class-name\">AttributeUsage</span><span class=\"token punctuation\">(</span>AttributeTargets<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">|</span> AttributeTargets<span class=\"token punctuation\">.</span>Class<span class=\"token punctuation\">,</span> Inherited <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> AllowMultiple <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedirectToCanonicalUrlAttribute</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">FilterAttribute</span><span class=\"token punctuation\">,</span> IAuthorizationFilter\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> QueryCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> SlashCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token keyword\">bool</span> appendTrailingSlash<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token keyword\">bool</span> lowercaseUrls<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Initializes a new instance of the &lt;see cref=\"RedirectToCanonicalUrlAttribute\" /> class.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"appendTrailingSlash\">If set to &lt;c>true&lt;/c> append trailing slashes, otherwise strip trailing </span>\n    <span class=\"token comment\">/// slashes.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;param name=\"lowercaseUrls\">If set to &lt;c>true&lt;/c> lower-case all URL's.&lt;/param></span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">RedirectToCanonicalUrlAttribute</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">bool</span> appendTrailingSlash<span class=\"token punctuation\">,</span> \n        <span class=\"token keyword\">bool</span> lowercaseUrls<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appendTrailingSlash <span class=\"token operator\">=</span> appendTrailingSlash<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lowercaseUrls <span class=\"token operator\">=</span> lowercaseUrls<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Gets a value indicating whether to append trailing slashes.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;value></span>\n    <span class=\"token comment\">/// &lt;c>true&lt;/c> if appending trailing slashes; otherwise, strip trailing slashes.</span>\n    <span class=\"token comment\">/// &lt;/value></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> AppendTrailingSlash\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appendTrailingSlash<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Gets a value indicating whether to lower-case all URL's.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;value></span>\n    <span class=\"token comment\">/// &lt;c>true&lt;/c> if lower-casing URL's; otherwise, &lt;c>false&lt;/c>.</span>\n    <span class=\"token comment\">/// &lt;/value></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> LowercaseUrls\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lowercaseUrls<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Determines whether the HTTP request contains a non-canonical URL using &lt;see cref=\"TryGetCanonicalUrl\"/>, </span>\n    <span class=\"token comment\">/// if it doesn't calls the &lt;see cref=\"HandleNonCanonicalRequest\"/> method.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"filterContext\">An object that encapsulates information that is required in order to use the </span>\n    <span class=\"token comment\">/// &lt;see cref=\"RedirectToCanonicalUrlAttribute\"/> attribute.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;exception cref=\"ArgumentNullException\">The &lt;paramref name=\"filterContext\"/> parameter is &lt;c>null&lt;/c>.&lt;/exception></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizationContext</span> filterContext<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filterContext <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>HttpMethod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> StringComparison<span class=\"token punctuation\">.</span>Ordinal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">string</span> canonicalUrl<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">TryGetCanonicalUrl</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> canonicalUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">HandleNonCanonicalRequest</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">,</span> canonicalUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Determines whether the specified URl is canonical and if it is not, outputs the canonical URL.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"filterContext\">An object that encapsulates information that is required in order to use the </span>\n    <span class=\"token comment\">/// &lt;see cref=\"RedirectToCanonicalUrlAttribute\" /> attribute.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;param name=\"canonicalUrl\">The canonical URL.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if the URL is canonical, otherwise &lt;c>false&lt;/c>.&lt;/returns></span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">TryGetCanonicalUrl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizationContext</span> filterContext<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token keyword\">string</span> canonicalUrl<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">bool</span> isCanonical <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Uri</span> url <span class=\"token operator\">=</span> filterContext<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Url<span class=\"token punctuation\">;</span>\n        canonicalUrl <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> queryIndex <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">.</span><span class=\"token function\">IndexOf</span><span class=\"token punctuation\">(</span>QueryCharacter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// If we are not dealing with the home page. Note, the home page is a special case and it doesn't matter</span>\n        <span class=\"token comment\">// if there is a trailing slash or not. Both will be treated as the same by search engines.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>AbsolutePath<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queryIndex <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">bool</span> hasTrailingSlash <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">[</span>canonicalUrl<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> SlashCharacter<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appendTrailingSlash<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// Append a trailing slash to the end of the URL.</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hasTrailingSlash <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasNoTrailingSlashAttribute</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        canonicalUrl <span class=\"token operator\">+=</span> SlashCharacter<span class=\"token punctuation\">;</span>\n                        isCanonical <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// Trim a trailing slash from the end of the URL.</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasTrailingSlash<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        canonicalUrl <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">.</span><span class=\"token function\">TrimEnd</span><span class=\"token punctuation\">(</span>SlashCharacter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        isCanonical <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">bool</span> hasTrailingSlash <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">[</span>queryIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> SlashCharacter<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appendTrailingSlash<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// Append a trailing slash to the end of the URL but before the query string.</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hasTrailingSlash <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasNoTrailingSlashAttribute</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        canonicalUrl <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>queryIndex<span class=\"token punctuation\">,</span> SlashCharacter<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        isCanonical <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// Trim a trailing slash to the end of the URL but before the query string.</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasTrailingSlash<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        canonicalUrl <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>queryIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        isCanonical <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lowercaseUrls<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> character <span class=\"token keyword\">in</span> canonicalUrl<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasNoLowercaseQueryStringAttribute</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> queryIndex <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> QueryCharacter<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsUpper</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasNoTrailingSlashAttribute</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        canonicalUrl <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> queryIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                            canonicalUrl<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span>queryIndex<span class=\"token punctuation\">,</span> canonicalUrl<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> queryIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        isCanonical <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsUpper</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasNoTrailingSlashAttribute</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        canonicalUrl <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        isCanonical <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> isCanonical<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Handles HTTP requests for URL's that are not canonical. Performs a 301 Permanent Redirect to the canonical URL.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"filterContext\">An object that encapsulates information that is required in order to use the </span>\n    <span class=\"token comment\">/// &lt;see cref=\"RedirectToCanonicalUrlAttribute\" /> attribute.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;param name=\"canonicalUrl\">The canonical URL.&lt;/param></span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">HandleNonCanonicalRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizationContext</span> filterContext<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> canonicalUrl<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        filterContext<span class=\"token punctuation\">.</span>Result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedirectResult</span><span class=\"token punctuation\">(</span>canonicalUrl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Determines whether the specified action or its controller has the &lt;see cref=\"NoTrailingSlashAttribute\"/> </span>\n    <span class=\"token comment\">/// attribute specified.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"filterContext\">The filter context.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if a &lt;see cref=\"NoTrailingSlashAttribute\"/> attribute is specified, otherwise </span>\n    <span class=\"token comment\">/// &lt;c>false&lt;/c>.&lt;/returns></span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">HasNoTrailingSlashAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizationContext</span> filterContext<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> filterContext<span class=\"token punctuation\">.</span>ActionDescriptor<span class=\"token punctuation\">.</span><span class=\"token function\">IsDefined</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>NoTrailingSlashAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n            filterContext<span class=\"token punctuation\">.</span>ActionDescriptor<span class=\"token punctuation\">.</span>ControllerDescriptor<span class=\"token punctuation\">.</span><span class=\"token function\">IsDefined</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>NoTrailingSlashAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Determines whether the specified action or its controller has the &lt;see cref=\"NoLowercaseQueryStringAttribute\"/> </span>\n    <span class=\"token comment\">/// attribute specified.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"filterContext\">The filter context.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if a &lt;see cref=\"NoLowercaseQueryStringAttribute\"/> attribute is specified, otherwise </span>\n    <span class=\"token comment\">/// &lt;c>false&lt;/c>.&lt;/returns></span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">HasNoLowercaseQueryStringAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizationContext</span> filterContext<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> filterContext<span class=\"token punctuation\">.</span>ActionDescriptor<span class=\"token punctuation\">.</span><span class=\"token function\">IsDefined</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>NoLowercaseQueryStringAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n            filterContext<span class=\"token punctuation\">.</span>ActionDescriptor<span class=\"token punctuation\">.</span>ControllerDescriptor<span class=\"token punctuation\">.</span><span class=\"token function\">IsDefined</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>NoLowercaseQueryStringAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// &lt;summary></span>\n<span class=\"token comment\">/// Requires that a HTTP request does not contain a trailing slash. If it does, return a 404 Not Found. This is </span>\n<span class=\"token comment\">/// useful if you are dynamically generating something which acts like it's a file on the web server. </span>\n<span class=\"token comment\">/// E.g. /Robots.txt/ should not have a trailing slash and should be /Robots.txt. Note, that we also don't care if </span>\n<span class=\"token comment\">/// it is upper-case or lower-case in this instance.</span>\n<span class=\"token comment\">/// &lt;/summary></span>\n<span class=\"token punctuation\">[</span><span class=\"token class-name\">AttributeUsage</span><span class=\"token punctuation\">(</span>AttributeTargets<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">|</span> AttributeTargets<span class=\"token punctuation\">.</span>Class<span class=\"token punctuation\">,</span> Inherited <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> AllowMultiple <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NoTrailingSlashAttribute</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">FilterAttribute</span><span class=\"token punctuation\">,</span> IAuthorizationFilter\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> QueryCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> SlashCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Determines whether a request contains a trailing slash and, if it does, calls the </span>\n    <span class=\"token comment\">/// &lt;see cref=\"HandleTrailingSlashRequest\"/> method.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"filterContext\">An object that encapsulates information that is required in order to use the </span>\n    <span class=\"token comment\">/// &lt;see cref=\"RequireHttpsAttribute\"/> attribute.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;exception cref=\"ArgumentNullException\">The &lt;paramref name=\"filterContext\"/> parameter is null.&lt;/exception></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizationContext</span> filterContext<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filterContext <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">string</span> canonicalUrl <span class=\"token operator\">=</span> filterContext<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Url<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> queryIndex <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">.</span><span class=\"token function\">IndexOf</span><span class=\"token punctuation\">(</span>QueryCharacter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queryIndex <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canonicalUrl<span class=\"token punctuation\">[</span>canonicalUrl<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> SlashCharacter<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">HandleTrailingSlashRequest</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canonicalUrl<span class=\"token punctuation\">[</span>queryIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> SlashCharacter<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">HandleTrailingSlashRequest</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Handles HTTP requests that have a trailing slash but are not meant to.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"filterContext\">An object that encapsulates information that is required in order to use the </span>\n    <span class=\"token comment\">/// &lt;see cref=\"RequireHttpsAttribute\"/> attribute.&lt;/param></span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">HandleTrailingSlashRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizationContext</span> filterContext<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        filterContext<span class=\"token punctuation\">.</span>Result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpNotFoundResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// &lt;summary></span>\n<span class=\"token comment\">/// Ensures that a HTTP request URL can contain query string parameters with both upper-case and lower-case </span>\n<span class=\"token comment\">/// characters.</span>\n<span class=\"token comment\">/// &lt;/summary></span>\n<span class=\"token punctuation\">[</span><span class=\"token class-name\">AttributeUsage</span><span class=\"token punctuation\">(</span>AttributeTargets<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">|</span> AttributeTargets<span class=\"token punctuation\">.</span>Class<span class=\"token punctuation\">,</span> Inherited <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> AllowMultiple <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NoLowercaseQueryStringAttribute</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">FilterAttribute</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Adding the <code class=\"language-text\">RedirectToCanonicalUrlAttribute</code> filter is easy. You can add it to the global filters collection so all requests will be handled by it like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">GlobalFilters<span class=\"token punctuation\">.</span>Filters<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RedirectToCanonicalUrlAttribute</span><span class=\"token punctuation\">(</span>\n    RouteTable<span class=\"token punctuation\">.</span>Routes<span class=\"token punctuation\">.</span>AppendTrailingSlash<span class=\"token punctuation\">,</span> \n    RouteTable<span class=\"token punctuation\">.</span>Routes<span class=\"token punctuation\">.</span>LowercaseUrls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>That's it! It's as simple as that! Now there are two special cases, which is where the <code class=\"language-text\">NoTrailingSlashAttribute</code> and <code class=\"language-text\">NoLowercaseQueryStringAttribute</code> filters comes in.</p>\n<h2 id=\"special-case-1\"><a href=\"#special-case-1\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Special Case 1</h2>\n<p>Say you want to have the following action method where visiting <code class=\"language-text\">http://example.com/robots.txt</code> returns a text result. We want the client to think it's just visiting a static <code class=\"language-text\">robots.txt</code> file but in reality we are dynamically generating it (One reason for doing this is that a <code class=\"language-text\">robots.txt</code> file must contain an absolute URL and you want to use the <code class=\"language-text\">UrlHelper</code> to just handle that, no matter what domain the site is running under).</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">NoTrailingSlash</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"robots.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ContentResult</span> <span class=\"token function\">RobotsText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">string</span> content <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>robotsService<span class=\"token punctuation\">.</span><span class=\"token function\">GetRobotsText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Content</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> ContentType<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">,</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Adding a trailing slash to <code class=\"language-text\">robots.txt</code> would just be weird. Also, the last thing you want to do when search engines try to visit <code class=\"language-text\">http://example.com/robots.txt</code> is 301 permanent redirect them to <code class=\"language-text\">http://example.com/robots.txt/</code>. So we add the <code class=\"language-text\">NoTrailingSlashAttribute</code> filter.</p>\n<p>The <code class=\"language-text\">RedirectToCanonicalUrlAttribute</code> knows about the <code class=\"language-text\">NoTrailingSlashAttribute</code> filter and when it sees it and we make a request to the above action, it ignores the <code class=\"language-text\">AppendTrailingSlash</code> setting and it works just like requesting a static <code class=\"language-text\">robots.txt</code> file from the file system.</p>\n<h2 id=\"special-case-2\"><a href=\"#special-case-2\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Special Case 2</h2>\n<p>Sometimes you want your query string parameters to be a mix of upper-case and lower-case. When you want to do this, simply add the <code class=\"language-text\">NoLowercaseQueryStringAttribute</code> attribute to the action method like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">NoLowercaseQueryString</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"action\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Action</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> mixedCaseParameter<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// mixedCaseParameter can contain upper and lower case characters.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you are using the ASP.NET Identity NuGet package for authentication, then take note, you need to apply the <code class=\"language-text\">NoLowercaseQueryStringAttribute</code> to the <code class=\"language-text\">AccountController</code>.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusions</h1>\n<p>Once again, you can find a working example of this and much more using the <a href=\"https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASP.NET Core Boilerplate</a> project template or view the source code directly on <a href=\"https://github.com/Dotnet-Boxed/Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a>.</p>\n"}}]}}},"context":{}}