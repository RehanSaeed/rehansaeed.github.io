{"hash":"a02b528df6289d09abc0491e86b50b309ecefe2f","data":{"tag":{"title":"INotifyPropertyChanged","belongsTo":{"edges":[{"node":{"title":"C# 6.0 - Saving Developers From Themselves","path":"/c-6-0-saving-developers-from-themselves/","date":"10 May 2015","timeToRead":5,"description":"C# 6.0 helps reduce human error and save developers from themselves using the nameof operator, string interpolation and the null-conditional operator.","content":"<h1 id=\"whats-new-in-c-60\"><a href=\"#whats-new-in-c-60\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What's New in C# 6.0</h1>\n<p>If you haven't already taken a look at what's new in C# 6.0, you should certainly read <a href=\"https://msdn.microsoft.com/en-us/magazine/dn802602.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> article. This blog post is going to cover how C# 6.0 can help reduce the number of bugs in your code by giving you the tools to avoid common developer mistakes.</p>\n<p>In my opinion, the changes introduced in C# 6.0 can be split into two separate groups. The first group of changes seems to be a declaration of war on curly braces (<code class=\"language-text\">{}</code>), you can now omit them in many cases. I personally am not too sure about this set of features, it reduces the lines of code you have to write a little and may save a few seconds but at the cost of having to learn a new set of syntax. If you cast your mind back to being a newbie developer (or if you are one), lots of syntax to remember can be difficult to deal with.</p>\n<p>This is a problem that C++ developers know well, C++ is a pretty old language now but is still undergoing rapid development with C++ 11, 14 and beyond. It's got to the stage where there are so many ways to skin a cat in C++, even experienced developers can be slowed down when looking at code using older patterns and paradigms. The C# caretakers need to be careful that each new feature is genuinely worth the effort and not just bloat.</p>\n<p>The second set of features is what I am really interested in. These are features which will genuinely save you from yourself. They will stop developers making many common mistakes.</p>\n<h1 id=\"the-nameof-operator\"><a href=\"#the-nameof-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The nameof Operator</h1>\n<p>The nameof operator simply gives you the name of any type you pass into it. You can take a look at the simple example below:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">string</span> obiwan<span class=\"token punctuation\">;</span>  \nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>obiwan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Prints obiwan</span>\n  \n<span class=\"token keyword\">int</span> kenobi <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>kenobi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Prints kenobi</span></code></pre></div>\n<h2 id=\"argument-exceptions\"><a href=\"#argument-exceptions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Argument Exceptions</h2>\n<p>So where can this help us? Well, I can think of a few examples, the first being throwing argument exceptions. Argument exceptions all take a parameter, which represents the name of the invalid parameter. In the past, we had to pass this as a string. The problem was that the parameter might get renamed and you might forget to update the string to reflect that.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">FightCrime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> hero<span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hero <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Omitted crime fighting code...  </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">FightCrime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> hero<span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hero <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>hero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Omitted crime fighting code...  </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With the second example, if you used Visual Studio to rename the hero parameter, then the hero in the <code class=\"language-text\">nameof</code> operator will also be updated.</p>\n<h2 id=\"inotifypropertychanged\"><a href=\"#inotifypropertychanged\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>INotifyPropertyChanged</h2>\n<p>This interface is notorious if you are doing any WPF/Silverlight/WinRT/XAML development, for requiring strings to be passed to it. With the <code class=\"language-text\">nameof</code> operator, this becomes a thing of the past.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ship</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">INotifyPropertyChanged</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">PropertyChangedEventHandler</span> PropertyChanged<span class=\"token punctuation\">;</span>\t\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">string</span> name<span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> Name\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">set</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\t\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> propertyName<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">PropertyChangedEventHandler</span> eventHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>PropertyChanged<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eventHandler <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">eventHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PropertyChangedEventArgs</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"aspnet-mvc\"><a href=\"#aspnet-mvc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ASP.NET MVC</h2>\n<p>ASP.NET MVC makes massive use of strings everywhere. This is a massive problem when you want to rename something. In fact, I've taken to using constants everywhere. It's more work to setup but in the long run its much easier to maintain. Here is an example of how we can use nameof to create a link and do away with strings and constants:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">@Html<span class=\"token punctuation\">.</span><span class=\"token function\">ActionLink</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Home\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Index\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Home\"</span><span class=\"token punctuation\">)</span>\n\n@Html<span class=\"token punctuation\">.</span><span class=\"token function\">ActionLink2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Home\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>HomeController<span class=\"token punctuation\">.</span>Index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>HomeController<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">MvcHtmlString</span> <span class=\"token function\">ActionLink2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">HtmlHelper</span> htmlHelper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> linkText<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> actionName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> controllerName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    htmlHelper<span class=\"token punctuation\">.</span><span class=\"token function\">ActionLink</span><span class=\"token punctuation\">(</span>linkText<span class=\"token punctuation\">,</span> actionName<span class=\"token punctuation\">,</span> controllerName<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> controllerName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above example is a little contrived. In the real world, I would never use <code class=\"language-text\">ActionLink</code> and use <code class=\"language-text\">RouteLink</code> instead. Naming your routes has better performance and is just easier to understand when you have multiple routes with the same name (for GET and POST requests).</p>\n<h1 id=\"string-interpolation\"><a href=\"#string-interpolation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>String Interpolation</h1>\n<p>I think we've all used <code class=\"language-text\">string.Format</code> and got our arguments in the wrong positions or entered the index numbers incorrectly at some point in time. Well, that bug is now a thing of the past.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Before C# 6.0 String Interpolation</span>\n<span class=\"token keyword\">string</span> nameAndAge <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name:{0}, Age:{1}\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// After C# 6.0 String Interpolation</span>\n<span class=\"token keyword\">string</span> nameAndAge <span class=\"token operator\">=</span> $<span class=\"token string\">\"Name:{name}, Age:{age}\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see, you can now use your parameters directly in the strings with full syntax highlighting and renaming support too. In fact the C# 6.0 code actually compiles down to doing a <code class=\"language-text\">string.Format</code> behind the scenes.</p>\n<h1 id=\"the-null-conditional-operator\"><a href=\"#the-null-conditional-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Null-Conditional Operator</h1>\n<p>Every C# developer has at some point stared at the text from a <code class=\"language-text\">NullReferenceException</code> and thought in their head, this is a really rubbish message and leaves out vital information. In fact there is <a href=\"https://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/2371587-better-nullpointerexception-error-message\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> post on UserVoice, asking Microsoft to improve their NullReferenceException messages. It turns out that Microsoft has thought of this, they haven't improved the message (They still should, please up-vote the UserVoice post) but they have introduced the Null-Conditional operator.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> <span class=\"token function\">Truncate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">string</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">Min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> <span class=\"token function\">Truncate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>          \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">?.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">Min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Wow, look at all this code I didn't have to write!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>As you can see there is a common theme with two of the three C# 6.0 features I've picked above. They give us tools to better deal with strings which have terrible IDE and language support. Making a typo in a string gives us no compile time errors and Visual Studio doesn't help either. Each of these features has allowed us to deal with strongly typed objects instead, which have full language and IDE support.</p>\n<p>The Null-Conditional operator is another great tool to help mitigate really common but minor bugs that catch even the most experienced developers out. These are great features, and should help stop silly mistakes that all of us developers make. We are after all, human.</p>\n"}},{"node":{"title":"Model-View-ViewModel (MVVM) – Part 4 – INotifyDataErrorInfo","path":"/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/","date":"09 September 2014","timeToRead":13,"description":"An base class implementation for the INotifyDataErrorInfo interface. Used in the Model-View-ViewModel (MVVM) pattern. Targeted for best performance.","content":"<ul>\n<li><a href=\"/model-view-viewmodel-mvvm-part1-overview/\">Model-View-ViewModel (MVVM) - Part 1 - Overview</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part2-idisposable/\">Model-View-ViewModel (MVVM) - Part 2 - IDisposable</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part3-inotifypropertychanged/\">Model-View-ViewModel (MVVM) - Part 3 - INotifyPropertyChanged</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/\">Model-View-ViewModel (MVVM) - Part 4 - INotifyDataErrorInfo</a></li>\n</ul>\n<p>In this next part, I'm going to discuss validation of your view models using the <a href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifydataerrorinfo%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyDataErrorInfo</a> interface. Validation is an often ignored part of the Model-View-ViewModel (MVVM) story. If you need to create a form for your users to fill in (which is probably most applications, I would have thought), then you probably need to validate user input in some way and the <a href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifydataerrorinfo%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyDataErrorInfo</a> interface can get you there.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 250 80' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b1f8b4ee0775bda64008d9d31b6c6f23'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b1f8b4ee0775bda64008d9d31b6c6f23)' width='250' height='80' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAIAAACyFKxoAAAACXBIWXMAAAsSAAALEgHS3X78AAACQklEQVRIx%2b1VW6sSURj1ZwQVFfRfeughCvoHCb0m%2bRCnelTR0KejRg957SW8YArHG1qohOINRAXF25m862iOHh11TsvZByHOITxGHaJZD3v23vPNN2ut79szotN/HKJdgqbT6Xg8/n4VwHtZlt1TAMdxGCeTSTabbTabjUbjmAdFUcc741LB55%2btVCrFYnFLhozfRhRFU2R5JmDN40IBo9EI1LfLv4zlclkul8nbCYHpgnn87uH9w3sn7MmmAqvVCheLxaLX65PJ5GAwgNkQ3e12MSF17HQ6iUQCMa1WCwFOpxPe9Ho9zJEdGWq1msvlQrnb7TYE9/t93EXpSqWS2%2b0mPNaXBxgvFgskQQZ/wffq0wGzYJ5%2beHLr4Lrx6/uzChABR0dHUqlUJpNJJBK5XK5SqTQajVgsjsVi8/kchDwej06ngwa1Wm02m00mk9FoVCgUWq02lUqBusPhCIVCeFapVBoMBmSwWq3YtNvtpMJ7V6BU3ggA%2bzsvbz56%2b%2bDu69u6L4fbjhCRC8yG0M88CoVCvV6HtZFIBMxgJIyv8PD5fOFwGPWJx%2bM2mw3uptPparU6m81ggd/vR3G8Xm8mkwkEAvl8PhgMRqPR3xRAWohdsc9tz268uKYOvtkk5NbcKffTIT7f4mQHGnK5HMMwNE2jnWgeRBiAhsESDYMRMQjA5nA4xATjiEd/X6BF4R0MJXzoGW1LfVyulvxp4Hb9jMI8nAEkal8FyDn8xSdE9F/8yAQBggBBgCBAECAIEAT8IfwAQ0BrByykQ34AAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"250\" alt=\"INotifyDataErrorInfo Valid TextBox\" data-srcset=\"/assets/static/Valid.0f04e74.1bbb87ab75dd7e4a412c06aac201dfc7.png 250w\" data-sizes=\"(max-width: 250px) 100vw, 250px\" data-src=\"/assets/static/Valid.0f04e74.1bbb87ab75dd7e4a412c06aac201dfc7.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Valid.0f04e74.1bbb87ab75dd7e4a412c06aac201dfc7.png\" width=\"250\" alt=\"INotifyDataErrorInfo Valid TextBox\"></noscript>\nINotifyDataErrorInfo Valid TextBox</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 250 80' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-1b55166779042cbf76cef5763aed867b'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-1b55166779042cbf76cef5763aed867b)' width='250' height='80' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAIAAACyFKxoAAAACXBIWXMAAAsSAAALEgHS3X78AAAD0ElEQVRIx9VWS3PaVhRm0W1X3fQfdNvptv%2bgneminf4Eb7twx/0HtWfiZpzEdcYTd2xDMA7GSQE/wEn84pHGjklFeMgxQrIEkrBAiKInet1eSenUTplJJwU6/uZDI6R77j3fPeeeIx%2b45vD9m0Et1WQkk5X/B9KSqRg29MF%2bDwG2a3Qhm2tpPJ8njl8SL34fKXMIkTrCtgtN6IZlmY430jFoh13nrCsCLBd9BdS7BpwLMKRFkaA2WtZJDcf3S5zrsCsA%2bxogHwNL8xx0BJim8yIYDM7Pz%2bdyOZ7nGYY5PT3lOI5hWbnbYRX7%2bQkOKLKHkwYxUlrnpHSG73kC4E%2bIAuwbQH0Paj%2b4/ht/C0gmkxMTE5OTk%2bPj41NTU9PT0zMzM2NjY0fZdNsERydVuBlwOkCOlhSpYfh%2b%2bS8Bpc/A2ReA%2bRGcfAB01ksdn%2b0mCtz1SqVy6AJFUZIkMQzLZDJSp91Q7BcIAVjKqlGgPlrSlEYQ%2b%2bWGI4APg2c%2bUPoUVL4CWR8gv3ODYPouZbzd9wwwohFLY1Sx%2bjpfrbzqQ6yAn5epYZBCKRQhEgUnAhbxLch/CNDPQeVLgHwEip94QXh3GTUtu3ShvGKVQqM/EVpMofQwmEbpvVK9THF/dPhWs67IIrAV2%2bw6JQieY%2b8M/Jcm4gWNZWgCO%2bvwzdYFy3ONgZNrsDDD63Umny/Z4O2WMAAB9Xq93W73TcLBolgs6rr%2bPp34nQJEscs1GLxKNFqCbahV7PyyHkPXTbfJGCbMR9u5Qhh6q8n3NAU/q5pXWy18rxsGNIe1v8U1Nd10J7NLpdKQBNQkWWmco4FgKJtJLS4uBFdWcyf5RGRtwR/pdNqpw9TL4%2bzSsj%2byuhaPb64EQjvJp4mNhzdu3mL5ln/h5%2b3kztydu1RTePIovHR/9UEgcD8U3t5IxB%2bt/3TzxvbuAVIowO%2bJcnk4AmiaFjpdoIvx2Eb2cPf2nbnDJ7sBvz/wy%2bJyOC7w3E4i%2bXgrfuv23LPM882HsdRBJh5ej0bj8dhWSxA2w6FYNDo7O0%2b3hK3Iij8USe%2bljrK/Ld6bvbe0vPf04Nf1B4/Tx3ChQqEwFAHwhAmC4HZ72w21cwtXsu03A/SeBrPiiqFl6T3dSSTbNk2YU6Y31rN/sy84xlw406LFfFtUnD42pBSq1WrwGPR6PUkUZVmBkCRJVVVZljVNkyVJUVTVeazIl6C6fxXXQJYld4jzwDOEM2har6epkiRDqSqsoJKEIIhhGIMXIIoibN6vB41TF94NvMIlCIL4Z6HzgWuOAQhwyt1I0LfPXPsI/AkVpvt2a4hVuAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"250\" alt=\"INotifyDataErrorInfo Invalid TextBox\" data-srcset=\"/assets/static/Invalid.0f04e74.84d40fcd0522512f58367ee0a7ab90f2.png 250w\" data-sizes=\"(max-width: 250px) 100vw, 250px\" data-src=\"/assets/static/Invalid.0f04e74.84d40fcd0522512f58367ee0a7ab90f2.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Invalid.0f04e74.84d40fcd0522512f58367ee0a7ab90f2.png\" width=\"250\" alt=\"INotifyDataErrorInfo Invalid TextBox\"></noscript>\nINotifyDataErrorInfo Invalid TextBox</p>\n<p>In the example above you can see a name text box which requires text, to be in a valid state. In the valid state there is a big green tick next to the text box and conversely in an invalid state, there is a big yellow warning sign, the text box background becomes pink and you get a nice tool-tip telling you what the error is. By the way, this example is taken from my <a href=\"https://github.com/RehanSaeed/Elysium-Extra\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Elysium Extra</a> WPF project which is freely available on GitHub.</p>\n<h1 id=\"how-does-it-work\"><a href=\"#how-does-it-work\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>How Does It Work?</h1>\n<p>You can see the interface and its corresponding event arguments below. If the name property in our view model changes and is empty then the state of our view model is invalid, we can raise the <code class=\"language-text\">ErrorsChanged</code> event, set the <code class=\"language-text\">HasErrors</code> property to return true and make any calls to <code class=\"language-text\">GetErrors</code> return a list of the errors (In our case we only have one but there could be multiple errors).</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> System<span class=\"token punctuation\">.</span>ComponentModel\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">INotifyDataErrorInfo</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">bool</span> HasErrors <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">event</span> EventHandler<span class=\"token operator\">&lt;</span>DataErrorsChangedEventArgs<span class=\"token operator\">></span> ErrorsChanged<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">IEnumerable</span> <span class=\"token function\">GetErrors</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataErrorsChangedEventArgs</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">EventArgs</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">DataErrorsChangedEventArgs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">string</span> PropertyName <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That's a fair amount of work and a base class to do all that makes life much easier. So what are the main aims of a base class implementing <code class=\"language-text\">INotifyDataErrorInfo</code>?</p>\n<ul>\n<li>Integration - I usually want to raise an error in response to a property changing. So, we probably want to also implement <code class=\"language-text\">INotifyPropertyChanged</code>. Handily, I showed how best to create a base class for that in my last article in this series. So our new base class can inherit from the <code class=\"language-text\">NotifyPropertyChanges</code> base class.</li>\n<li>Performance – Performance is king. It needs to be fast and I mean really fast. You can't afford for your UI to freeze up while your view model works out if it has an error to raise or not. Some validation frameworks use an attribute based approach but this requires reflection so we will not be using that here.</li>\n<li>Reactive Extensions (Rx) – Events are old school, I want an observable error changed event notification system instead of the <code class=\"language-text\">ErrorsChanged</code> C# event.</li>\n<li>Human Error – I don't want to raise error change events for properties that don't exist by accident.</li>\n<li>Has it Really Error'ed – I don't want to raise a error changed event twice by accident or if it has not really error'ed.</li>\n</ul>\n<p>So, without further ado, here is my implementation. Note that there are three classes:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> Framework<span class=\"token punctuation\">.</span>ComponentModel\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>ComponentModel<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Linq<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">.</span>Linq<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Reflection<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> Framework<span class=\"token punctuation\">.</span>ComponentModel<span class=\"token punctuation\">.</span>Rules<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Provides functionality to provide errors for the object if it is in an invalid state.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;typeparam name=\"T\">The type of this instance.&lt;/typeparam></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NotifyDataErrorInfo</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> NotifyPropertyChanges<span class=\"token punctuation\">,</span> <span class=\"token class-name\">INotifyDataErrorInfo</span>\n        <span class=\"token keyword\">where</span> T <span class=\"token punctuation\">:</span> NotifyDataErrorInfo<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">string</span> HasErrorsPropertyName <span class=\"token operator\">=</span> <span class=\"token string\">\"HasErrors\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> RuleCollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> rules <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">RuleCollection</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> Dictionary<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> List<span class=\"token operator\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token operator\">>></span> errors<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Occurs when the validation errors have changed for a property or for the entire object. </span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">event</span> EventHandler<span class=\"token operator\">&lt;</span>DataErrorsChangedEventArgs<span class=\"token operator\">></span> INotifyDataErrorInfo<span class=\"token punctuation\">.</span>ErrorsChanged\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">add</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errorsChanged <span class=\"token operator\">+=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">remove</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errorsChanged <span class=\"token operator\">-=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Occurs when the validation errors have changed for a property or for the entire object. </span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">event</span> EventHandler<span class=\"token operator\">&lt;</span>DataErrorsChangedEventArgs<span class=\"token operator\">></span> errorsChanged<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the when errors changed observable event. Occurs when the validation errors have changed for a property or for the entire object. </span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value></span>\n        <span class=\"token comment\">/// The when errors changed observable event.</span>\n        <span class=\"token comment\">/// &lt;/value></span>\n        <span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> WhenErrorsChanged\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> Observable\n                    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DataErrorsChangedEventArgs</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n                        h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errorsChanged <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                        h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errorsChanged <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">.</span>PropertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets a value indicating whether the object has validation errors. </span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value>&lt;c>true&lt;/c> if this instance has errors, otherwise &lt;c>false&lt;/c>.&lt;/value></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> HasErrors\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">InitializeErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the rules which provide the errors.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value>The rules this instance must satisfy.&lt;/value></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> RuleCollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Rules <span class=\"token operator\">=></span> rules<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the validation errors for the entire object.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;returns>A collection of errors.&lt;/returns></span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">IEnumerable</span> <span class=\"token function\">GetErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetErrors</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the validation errors for a specified property or for the entire object.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property to retrieve errors for. &lt;c>null&lt;/c> to </span>\n        <span class=\"token comment\">/// retrieve all errors for this instance.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns>A collection of errors.&lt;/returns></span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">IEnumerable</span> <span class=\"token function\">GetErrors</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> propertyName<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetRuntimeProperty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Check that the property name exists for this instance.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">InitializeErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">IEnumerable</span> result<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                List<span class=\"token operator\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token operator\">></span> allErrors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span>KeyValuePair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> List<span class=\"token operator\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token operator\">>></span> keyValuePair <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    allErrors<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>keyValuePair<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                result <span class=\"token operator\">=</span> allErrors<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    result <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">[</span>propertyName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Raises the PropertyChanged event.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">CallerMemberName</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">string</span> propertyName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyRules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyRules</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>HasErrorsPropertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Called when the errors have changed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnErrorsChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">CallerMemberName</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">string</span> propertyName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetRuntimeProperty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Check that the property name exists for this instance.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            EventHandler<span class=\"token operator\">&lt;</span>DataErrorsChangedEventArgs<span class=\"token operator\">></span> eventHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errorsChanged<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eventHandler <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">eventHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataErrorsChangedEventArgs</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Applies all rules to this instance.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ApplyRules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">InitializeErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> propertyName <span class=\"token keyword\">in</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>PropertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyRules</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Applies the rules to this instance for the specified property.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ApplyRules</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> propertyName<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">InitializeErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            List<span class=\"token operator\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token operator\">></span> propertyErrors <span class=\"token operator\">=</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propertyErrors<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">[</span>propertyName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">[</span>propertyName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">[</span>propertyName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>propertyErrors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnErrorsChanged</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnErrorsChanged</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Initializes the errors and applies the rules if not initialized.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">InitializeErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dictionary</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> List<span class=\"token operator\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyRules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">namespace</span> Framework<span class=\"token punctuation\">.</span>ComponentModel<span class=\"token punctuation\">.</span>Rules\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// A named rule containing an error to be used if the rule fails.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;typeparam name=\"T\">The type of the object the rule applies to.&lt;/typeparam></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rule</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">string</span> propertyName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">object</span> error<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Initializes a new instance of the &lt;see cref=\"Rule&lt;T>\"/> class.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">The name of the property this instance applies to.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"error\">The error message if the rules fails.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token function\">Rule</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> propertyName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span> error<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propertyName <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyName <span class=\"token operator\">=</span> propertyName<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>error <span class=\"token operator\">=</span> error<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the name of the property this instance applies to.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value>The name of the property this instance applies to.&lt;/value></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> PropertyName <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyName<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the error message if the rules fails.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value>The error message if the rules fails.&lt;/value></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">object</span> Error <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Applies the rule to the specified object.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"obj\">The object to apply the rule to.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns></span>\n        <span class=\"token comment\">/// &lt;c>true&lt;/c> if the object satisfies the rule, otherwise &lt;c>false&lt;/c>.</span>\n        <span class=\"token comment\">/// &lt;/returns></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">namespace</span> Framework<span class=\"token punctuation\">.</span>ComponentModel<span class=\"token punctuation\">.</span>Rules\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Determines whether or not an object of type &lt;typeparamref name=\"T\"/> satisfies a rule and</span>\n    <span class=\"token comment\">/// provides an error if it does not.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;typeparam name=\"T\">The type of the object the rule can be applied to.&lt;/typeparam></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DelegateRule</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> Rule<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> Func<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">></span> rule<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Initializes a new instance of the &lt;see cref=\"DelegateRule&lt;T>\"/> class.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">>The name of the property the rules applies to.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"error\">The error if the rules fails.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"rule\">The rule to execute.&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">DelegateRule</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> propertyName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span> error<span class=\"token punctuation\">,</span> Func<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">></span> rule<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rule <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rule <span class=\"token operator\">=</span> rule<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Applies the rule to the specified object.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"obj\">The object to apply the rule to.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns></span>\n        <span class=\"token comment\">/// &lt;c>true&lt;/c> if the object satisfies the rule, otherwise &lt;c>false&lt;/c>.</span>\n        <span class=\"token comment\">/// &lt;/returns></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">rule</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">namespace</span> Framework<span class=\"token punctuation\">.</span>ComponentModel<span class=\"token punctuation\">.</span>Rules\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>ObjectModel<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// A collection of rules.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;typeparam name=\"T\">The type of the object the rules can be applied to.&lt;/typeparam></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RuleCollection</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> Collection<span class=\"token operator\">&lt;</span>Rule<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Adds a new &lt;see cref=\"Rule{T}\"/> to this instance.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">The name of the property the rules applies to.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"error\">The error if the object does not satisfy the rule.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"rule\">The rule to execute.&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> propertyName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span> error<span class=\"token punctuation\">,</span> Func<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token operator\">></span> rule<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">DelegateRule</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> rule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Applies the &lt;see cref=\"Rule{T}\"/>'s contained in this instance to &lt;paramref name=\"obj\"/>.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"obj\">The object to apply the rules to.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property we want to apply rules for. &lt;c>null&lt;/c></span>\n        <span class=\"token comment\">/// to apply all rules.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns>A collection of errors.&lt;/returns></span>\n        <span class=\"token keyword\">public</span> IEnumerable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token operator\">></span> <span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> propertyName<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            List<span class=\"token operator\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token operator\">></span> errors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span>Rule<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> rule <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> rule<span class=\"token punctuation\">.</span>PropertyName<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rule<span class=\"token punctuation\">.</span><span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        errors<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"simple-example\"><a href=\"#simple-example\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Simple Example</h1>\n<p>An example of how you can use this base class is as follows.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZombieViewModel</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">NotifyDataErrorInfo</span><span class=\"token operator\">&lt;</span>ZombieViewModel<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">string</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> limbsRemaining<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token function\">ZombieViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Rules<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">DelegateRule</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ZombieViewModel</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Name cannot be empty.\"</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Rules<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">DelegateRule</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ZombieViewModel</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"LimbsRemaining\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"A zombie can't have less than zero limbs.\"</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>LimbsRemaining <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Rules<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">DelegateRule</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ZombieViewModel</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"LimbsRemaining\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"A zombie can only have up to four limbs.\"</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>LimbsRemaining <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> Name\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">set</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> LimbsRemaining\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limbsRemaining<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">set</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limbsRemaining<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see, our view model has two properties and as shown in the last post in the series we are using the <code class=\"language-text\">SetProperty</code> method to raise <code class=\"language-text\">PropertyChanged</code> events. The only bit I've added for validation is in the static constructor containing the three validation rules.</p>\n<p>The <code class=\"language-text\">Name</code> property has a single rule applied to it. When the name is empty a validation error is raised. The <code class=\"language-text\">LimbsRemaining</code> property has two rules and when it is less than zero or more than four, validation errors are raised auto-magically.</p>\n<p>Under the covers, each time the <code class=\"language-text\">PropertyChanged</code> event is raised, we apply the corresponding rule relating to the property and if the rule fails, we raise the <code class=\"language-text\">ErrorsChanged</code> event, raise a <code class=\"language-text\">PropertyChanged</code> event for the <code class=\"language-text\">HasErrors</code> property (Which is now true) and finally ensure that any calls to <code class=\"language-text\">GetErrors</code> now returns the error shown in the rule.</p>\n<h1 id=\"extensibility\"><a href=\"#extensibility\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Extensibility</h1>\n<p>The <code class=\"language-text\">DelegateRule&lt;T&gt;</code> class shown above is a really easy way to provide nice, simple rules. If you need something more complex you can create your own rule by inheriting from the <code class=\"language-text\">Rule&lt;T&gt;</code> base class. An example of this could be a custom rule to validate an email address or telephone number.</p>\n<h1 id=\"using-reactive-extensions-rx-to-replace-the-errorschanged-event\"><a href=\"#using-reactive-extensions-rx-to-replace-the-errorschanged-event\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Using Reactive Extensions (Rx) to Replace the ErrorsChanged Event</h1>\n<p>C# events are old school. Reactive Extensions (Rx) provides a cleaner and far more powerful drop-in replacement for C# events. I'm not going to go over the advantages of Reactive Extensions here but you can take a look at a series of blog posts I've done in the <a href=\"/reactive-extensions-part1-replacing-events/\">past</a>.</p>\n<p>We can hide the <code class=\"language-text\">ErrorsChanged</code> C# event by explicitly implementing the interface (Click <a href=\"http://stackoverflow.com/questions/143405/c-sharp-interfaces-implicit-implementation-versus-explicit-implementation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> for details on implicit versus explicit implementations of interfaces).</p>\n<p>The <code class=\"language-text\">ErrorsChanged</code> C# event can still be accessed by first casting the object to <code class=\"language-text\">INotifyDataErrorInfo</code>. Validation in XAML languages, which uses this interface continues to work. Our new Reactive Extensions (Rx) observable event called <code class=\"language-text\">WhenErrorsChanged</code> of type? <code class=\"language-text\">IObservable&lt;string&gt;</code> (The string is the property name) is now the default method of subscribing for error changed events and we've hidden away the old C# event.</p>\n<h1 id=\"inotifydataerrorinfo-support\"><a href=\"#inotifydataerrorinfo-support\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>INotifyDataErrorInfo Support</h1>\n<p>The <code class=\"language-text\">INotifyDataErrorInfo</code> interface is supported by most XAML frameworks including WPF, Silverlight and Windows Phone. Currently WinRT does not support the interface at the time of writing but you can bet that they will in future and in the mean time you can use the <a href=\"https://winrtxamlvalidation.codeplex.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WinRT XAML Validation library</a> in conjunction with the code below to plug this gap.</p>\n<h1 id=\"quick-nod-to-idataerrorinfo\"><a href=\"#quick-nod-to-idataerrorinfo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Quick nod to IDataErrorInfo</h1>\n<p>This interface used to be used for validation but was replaced by <code class=\"language-text\">INotifyDataErrorInfo</code>. The new interface provides a much nicer API which is easier to code against and better performance. If you are still using the old interface, its time to make the change.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>I've been tweaking this base class for the last few years and feel I've got a fairly good balance. I've not seen too many implementations of this interface, most blogs seem to cover <code class=\"language-text\">INotifyPropertyChanged</code> pretty well though. I'd be very interested if anyone has any comments or thoughts on improvements. Feel free to sound-off in the comments.</p>\n"}},{"node":{"title":"Model-View-ViewModel (MVVM) - Part 3 - INotifyPropertyChanged","path":"/model-view-viewmodel-mvvm-part3-inotifypropertychanged/","date":"18 June 2014","timeToRead":12,"description":"An base class implementation for the INotifyPropertyChanged interface. Used in the Model-View-ViewModel (MVVM) pattern. Targeted for best performance.","content":"<ul>\n<li><a href=\"/model-view-viewmodel-mvvm-part1-overview/\">Model-View-ViewModel (MVVM) - Part 1 - Overview</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part2-idisposable/\">Model-View-ViewModel (MVVM) - Part 2 - IDisposable</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part3-inotifypropertychanged/\">Model-View-ViewModel (MVVM) - Part 3 - INotifyPropertyChanged</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/\">Model-View-ViewModel (MVVM) - Part 4 - INotifyDataErrorInfo</a></li>\n</ul>\n<p>I know there have been lots of Model-View-ViewModel (MVVM) articles talking about <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChanged</a>. I've read <strong>lots</strong> of them and this is the aggregation of all the knowledge I've learned plus some cool new stuff (I've not seen it done anywhere else but I could be wrong) which I've also covered in my <a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) posts</a>.</p>\n<p>So what are the main aims of a base class implementing <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChanged</a>? Well, I think there are a few:</p>\n<ul>\n<li>Performance - Performance is king. It needs to be fast and I mean <strong>really</strong> fast. You can't afford for your UI to freeze up while your view works out all its bindings to the properties in your view model.</li>\n<li>Simplicity - I want to raise property changed events with one line of code and I don't want to mess around with strings if I can help it.</li>\n<li>Reactive Extensions (Rx) - Events are old school, I want an observable property changed event notification system instead of the 'PropertyChanged' C# event.</li>\n<li>Human Error - I don't want to raise property change events for properties that don't exist by accident.</li>\n<li>Dependent Properties - Often, the value of one property depends on the value of another. I need to handle this somehow.</li>\n<li>Re-factoring - I don't want my code to break when I rename a property and forget to rename a string too.</li>\n<li>Has it Really Changed - I don't want to raise a property changed event if the value of a property has not really changed.</li>\n</ul>\n<p>So, without further ado, here is my implementation.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> Framework<span class=\"token punctuation\">.</span>ComponentModel\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>ComponentModel<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">.</span>Linq<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Reflection<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Notifies subscribers that a property in this instance is changing or has changed.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NotifyPropertyChanges</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Disposable</span><span class=\"token punctuation\">,</span> INotifyPropertyChanged <span class=\"token comment\">//, INotifyPropertyChanging</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Occurs when a property value changes.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">event</span> <span class=\"token class-name\">PropertyChangedEventHandler</span> INotifyPropertyChanged<span class=\"token punctuation\">.</span>PropertyChanged\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">add</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">+=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">remove</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">-=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Occurs when a property value is changing.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">// event PropertyChangingEventHandler INotifyPropertyChanging.PropertyChanging</span>\n        <span class=\"token comment\">// {</span>\n        <span class=\"token comment\">//     add { this.PropertyChanging += value; }</span>\n        <span class=\"token comment\">//     remove { this.PropertyChanging -= value; }</span>\n        <span class=\"token comment\">// }</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Occurs when a property value changes.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">PropertyChangedEventHandler</span> propertyChanged<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Occurs when a property value is changing.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">// private event PropertyChangingEventHandler PropertyChanging;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the when property changed observable event. Occurs when a property value changes.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value></span>\n        <span class=\"token comment\">/// The when property changed observable event.</span>\n        <span class=\"token comment\">/// &lt;/value></span>\n        <span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> WhenPropertyChanged\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">return</span> Observable\n                    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PropertyChangedEventHandler</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PropertyChangedEventArgs</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n                        h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                        h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">.</span>PropertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the when property changing observable event. Occurs when a property value is changing.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value></span>\n        <span class=\"token comment\">/// The when property changing observable event.</span>\n        <span class=\"token comment\">/// &lt;/value></span>\n        <span class=\"token comment\">// public IObservable&lt;EventPattern&lt;PropertyChangingEventArgs>> WhenPropertyChanging</span>\n        <span class=\"token comment\">// {</span>\n        <span class=\"token comment\">//     get</span>\n        <span class=\"token comment\">//     {</span>\n        <span class=\"token comment\">//         return Observable</span>\n        <span class=\"token comment\">//             .FromEventPattern&lt;PropertyChangingEventHandler, PropertyChangingEventArgs>(</span>\n        <span class=\"token comment\">//                 h => this.PropertyChanging += h,</span>\n        <span class=\"token comment\">//                 h => this.PropertyChanging -= h)</span>\n        <span class=\"token comment\">//             .AsObservable();</span>\n        <span class=\"token comment\">//     }</span>\n        <span class=\"token comment\">// }</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Raises the PropertyChanged event.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">CallerMemberName</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">string</span> propertyName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetRuntimeProperty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Check that the property name exists for this instance.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">PropertyChangedEventHandler</span> eventHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eventHandler <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">eventHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PropertyChangedEventArgs</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Raises the PropertyChanged event.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyNames\">The property names.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">params</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> propertyNames<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propertyNames <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> propertyName <span class=\"token keyword\">in</span> propertyNames<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Raises the PropertyChanging event.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">CallerMemberName</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">string</span> propertyName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetRuntimeProperty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Check that the property name exists for this instance.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// PropertyChangingEventHandler eventHandler = this.PropertyChanging;</span>\n\n            <span class=\"token comment\">// if (eventHandler != null)</span>\n            <span class=\"token comment\">// {</span>\n            <span class=\"token comment\">//     eventHandler(this, new PropertyChangingEventArgs(propertyName));</span>\n            <span class=\"token comment\">// }</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Raises the PropertyChanging event.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyNames\">The property names.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">params</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> propertyNames<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propertyNames <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> propertyName <span class=\"token keyword\">in</span> propertyNames<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Sets the value of the property to the specified value if it has changed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;typeparam name=\"TProp\">The type of the property.&lt;/typeparam></span>\n        <span class=\"token comment\">/// &lt;param name=\"currentValue\">The current value of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"newValue\">The new value of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if the property was changed, otherwise &lt;c>false&lt;/c>.&lt;/returns></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">bool</span> <span class=\"token generic-method\"><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TProp</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">ref</span> <span class=\"token class-name\">TProp</span> currentValue<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">TProp</span> newValue<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token class-name\">CallerMemberName</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">string</span> propertyName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                currentValue <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Sets the value of the property to the specified value if it has changed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;typeparam name=\"TProp\">The type of the property.&lt;/typeparam></span>\n        <span class=\"token comment\">/// &lt;param name=\"currentValue\">The current value of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"newValue\">The new value of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyNames\">The names of all properties changed.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if the property was changed, otherwise &lt;c>false&lt;/c>.&lt;/returns></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">bool</span> <span class=\"token generic-method\"><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TProp</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">ref</span> <span class=\"token class-name\">TProp</span> currentValue<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">TProp</span> newValue<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">params</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> propertyNames<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                currentValue <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Sets the value of the property to the specified value if it has changed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"equal\">A function which returns &lt;c>true&lt;/c> if the property value has changed, otherwise &lt;c>false&lt;/c>.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"action\">The action where the property is set.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if the property was changed, otherwise &lt;c>false&lt;/c>.&lt;/returns></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span>\n            Func<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> equal<span class=\"token punctuation\">,</span> \n            <span class=\"token class-name\">Action</span> action<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token class-name\">CallerMemberName</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">string</span> propertyName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Sets the value of the property to the specified value if it has changed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"equal\">A function which returns &lt;c>true&lt;/c> if the property value has changed, otherwise &lt;c>false&lt;/c>.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"action\">The action where the property is set.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyNames\">The property names.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if the property was changed, otherwise &lt;c>false&lt;/c>.&lt;/returns></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span>\n            Func<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> equal<span class=\"token punctuation\">,</span> \n            <span class=\"token class-name\">Action</span> action<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">params</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> propertyNames<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanging</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>propertyNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"simple-example\"><a href=\"#simple-example\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Simple Example</h1>\n<p>An example of how you can use this base class is as follows.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatCountViewModel</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">NotifyPropertyChanges</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> numberOfCats<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> NumberOfCats\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberOfCats<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">set</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberOfCats<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"performance\"><a href=\"#performance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Performance</h1>\n<p>As I said before, performance is king. A slow application is a frustrating application. However, there has always been a problem. When you want to raise a property changed event, you have to pass in a string. We can't check the validity of the string at compile time, only at runtime. So we can get errors due to typos etc. which can get overlooked.</p>\n<p>There are a lot of implementations of <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChanged</a> that use reflection or expression trees and as <a href=\"http://blog.quantumbitdesigns.com/2010/01/26/mvvm-lambda-vs-inotifypropertychanged-vs-dependencyobject\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> and <a href=\"http://blog.amusedia.com/2013/06/inotifypropertychanged-implementation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> blog show, using reflection is a terribly slow method of raising an event and to be avoided.</p>\n<p>Luckily, Microsoft introduced the <a href=\"http://msdn.microsoft.com/en-gb/library/system.runtime.compilerservices.callermembernameattribute.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CallerMemberNameAttribute</a> attribute, which means that as in the above example, we don't need to add a string for the property name, it gets added for us to the last optional parameter in the <code class=\"language-text\">SetProperty</code> method.</p>\n<p>The <code class=\"language-text\">SetProperty</code> method uses the <a href=\"http://msdn.microsoft.com/en-us/library/14akc2c7.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref keyword</a> to pass the parameter by reference (Passing parameters by reference is faster). It then checks to see if the <code class=\"language-text\">numberOfCats</code> parameter is different from the <code class=\"language-text\">value</code> parameter (There is no point raising a property changed event if they are the same). Only then, do we raise a property changed event.</p>\n<h1 id=\"handling-dependent-properties\"><a href=\"#handling-dependent-properties\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Handling Dependent Properties</h1>\n<p>But what about dependent properties. Where one property affects the value of another. Well, lets take a look at another example.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatCounter</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">NotifyPropertyChanges</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> numberOfCats<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> NumberOfCats\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberOfCats<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">set</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberOfCats<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NumberOfCats\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NumberOfCatsDescription\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> NumberOfCatsDescription <span class=\"token operator\">=></span> $<span class=\"token string\">\"{this.NumberOfCats} Cats Counted\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can see, that I've not done anything spectacular and just passed in the strings. As I'm using the <a href=\"http://msdn.microsoft.com/en-us/library/w5zay9db.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">params</a> keyword, you can pass in as many strings as you want and the <code class=\"language-text\">SetProperty</code> method will raise a property changed event for each one.</p>\n<p>If you give me a moment, I will explain why I think this is the right compromise to make. Lets make no mistake, you do need to compromise between performance and simplicity/maintainability. There are approaches which make this eventuality simpler and easier to understand but they can and will degrade performance.</p>\n<p>So does using strings cause problems? First of all, if you use a Visual Studio Add-in like Resharper, this problem is <a href=\"http://blog.jetbrains.com/dotnet/2012/07/24/inotifypropertychanged-support-in-resharper-7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">solved</a> as it checks that the strings match the property name for you. Secondly, as a backup the <code class=\"language-text\">OnPropertyChanged</code> method in the implementation above contains some <code class=\"language-text\">Debug.Assert</code> statements (These are removed in Release mode and have no effect on performance) to check that the property names exist and are correct, if they are not you get a error message. Thirdly, this is fairly rare in my experience and I can deal with the overhead of having a couple of extra strings.</p>\n<p>Again, this is a choice I've made to go with performance over maintainability.</p>\n<h1 id=\"dealing-with-wrapped-objects\"><a href=\"#dealing-with-wrapped-objects\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dealing with Wrapped Objects</h1>\n<p>What if you want to wrap an object that looks like the one below with a class that supports <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChanged</a>? This is a scenario I have not seen many people cover but occurs fairly often in my experience.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatCount</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> Count <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>An example view model for the CatCount class can be found below.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatCountModel</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">NotifyPropertyChanges</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CatCount</span> catCount<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> NumberOfCats\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catCount<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catCount<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">==</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catCount<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So here we are providing the <code class=\"language-text\">SetProperty</code> method with two delegates. We can't use the ref keyword we used earlier because this gives us the compiler error \"A property, indexer or dynamic member access may not be passed as an out or ref parameter\". So we use delegates as an alternative which is not as fast as the ref keyword but almost as fast.</p>\n<p>The first delegate determines if the cat count has actually changed. Only if it has (Remember, executing a delegate is far cheaper than updating the UI), do we call the next delegate which actually sets the value. Finally the <code class=\"language-text\">SetProperty</code> method raises a property changed event.</p>\n<h1 id=\"using-reactive-extensions-rx-to-replace-the-propertychanged-event\"><a href=\"#using-reactive-extensions-rx-to-replace-the-propertychanged-event\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Using Reactive Extensions (Rx) to Replace the PropertyChanged Event</h1>\n<p>C# events are old school. Reactive Extensions (Rx) provides a cleaner and far more powerful drop-in replacement for C# events. I'm not going to go over the advantages of Reactive Extensions here but you can take a look at a series of blog posts I've done in the <a href=\"/reactive-extensions-part1-replacing-events/\">past</a>.</p>\n<p>We can hide the <code class=\"language-text\">PropertyChanged</code> C# event by explicitly implementing the interface (Click <a href=\"http://stackoverflow.com/questions/143405/c-sharp-interfaces-implicit-implementation-versus-explicit-implementation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> for details on implicit versus explicit implementations of interfaces).</p>\n<p>The <code class=\"language-text\">PropertyChanged</code> C# event can still be accessed by first casting the object to <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChanged</a>. Binding in XAML languages, which uses this interface continues to work. Our new Reactive Extensions (Rx) observable event called <code class=\"language-text\">WhenPropertyChanged</code> of type <code class=\"language-text\">IObservable&lt;string&gt;</code> (The string is the property name) is now the default method of subscribing for property changed events and we've hidden away the old C# event.</p>\n<h1 id=\"implementing-inotifypropertychanging\"><a href=\"#implementing-inotifypropertychanging\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Implementing INotifyPropertyChanging</h1>\n<p>Take another look at the title of this paragraph, it says <a href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanging%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChang<strong>ing</strong></a> and not <a href=\"http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyPropertyChang<strong>ed</strong></a>.</p>\n<p>This interface has a single event called <code class=\"language-text\">PropertyChang**ing**</code> and is raised <strong>before</strong> a property is about to be changed. This interface is not actually used by any XAML framework but does complement the <code class=\"language-text\">INotifyPropertyChanged</code> interface and can be useful in your view models when you want to know that a property is about to change and do something about it.</p>\n<p>Given that we've written a base class, it is super easy to include it too. You should note that this interface only exists in the full .NET Framework and Silverlight. It does not exist on Windows Store or Windows Phone platforms.</p>\n<p>As we are writing a base class for a Portable Class Library (PCL), I've commented it out. However, if I were to create a full .NET or Silverlight class library, I would definitely put that code back in.</p>\n<p>If you find the interface useful and you too are using a Portable Class Library (PCL), you could take a copy of the <code class=\"language-text\">INotifyPropertyChanging</code> interface and include it with your base class. If Microsoft ever decide to include it into the PCL, you simply need to remove your class and use the one in the framework.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>I've gone through many iterations to get to this base class. As I've shown, I've had very particular goals in mind. Your mileage may vary but I believe with the tools Microsoft have given us, this is a good compromise and covers all the scenarios I can think of. I'd be very interested if anyone has any comments or thoughts on improvements. Feel free to sound-off in the comments.</p>\n"}},{"node":{"title":"Model-View-ViewModel (MVVM) - Part 1 - Overview","path":"/model-view-viewmodel-mvvm-part1-overview/","date":"14 May 2014","timeToRead":5,"description":"What really goes into using Model-View-ViewModel (MVVM) in .NET. Base classes for INotifyPropertyChanged, INotifyDataErrorInfo, IDisposable and a lot more.","content":"<ul>\n<li><a href=\"/model-view-viewmodel-mvvm-part1-overview/\">Model-View-ViewModel (MVVM) - Part 1 - Overview</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part2-idisposable/\">Model-View-ViewModel (MVVM) - Part 2 - IDisposable</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part3-inotifypropertychanged/\">Model-View-ViewModel (MVVM) - Part 3 - INotifyPropertyChanged</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/\">Model-View-ViewModel (MVVM) - Part 4 - INotifyDataErrorInfo</a></li>\n</ul>\n<p>I've been meaning for some time to do a series of posts about Model-View-ViewModel (MVVM) and its potential base classes. Then I read <a href=\"http://mtaulty.com/CommunityServer/blogs/mike_taultys_blog/archive/2014/05/09/windows-phone-8-1-and-xaml-apps-making-it-easier-for-mvvm-developers.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mike Taulty's post</a> about why MVVM 'bits' not built in to .NET.</p>\n<p>My aim in these posts will be to either, pick off the shelf components which are best of breed where there is no point reinventing the wheel or build my own components where necessary.</p>\n<p>Assuming you already know about the basic Model-View-ViewModel (MVVM) pattern described in the title image of this post, when we talk about MVVM, what do we really mean?</p>\n<h1 id=\"platforms\"><a href=\"#platforms\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Platforms</h1>\n<p>Well there are several .NET platforms that all provide some basic low level support for Model-View-ViewModel (MVVM), Windows Store, Windows Phone, Silverlight and Windows Presentation Foundation (WPF). It is all of these platforms that I'll be discussing and targeting my code towards.</p>\n<h1 id=\"mvvm-bits\"><a href=\"#mvvm-bits\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MVVM 'Bits'</h1>\n<p>In Mike Taulty's post, he goes through a list of 'bits' which all come together to help with building an application that fits into the MVVM design pattern. I've added to that list below:</p>\n<ol>\n<li><code class=\"language-text\">IDisposable</code> - When you have a scarce resource like a GPS, gyroscope or compass, you inevitably need to dispose of it somewhere. Implementing <code class=\"language-text\">IDisposable</code> <strong>properly</strong> is <a href=\"http://msdn.microsoft.com/en-us/library/system.idisposable%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hard work</a>. A base class would be handy.</li>\n<li><code class=\"language-text\">INotifyPropertyChanged</code> - This is the building block of all .NET based MVVM. There needs to be a base class for this that is high performance and yet simple and easy to use.</li>\n<li><code class=\"language-text\">INotifyDataErrorInfo</code> - Validation is an often overlooked part of an application. This handy interface makes doing validation of your view models a cinch.</li>\n<li><code class=\"language-text\">IEditableObject</code> (WPF only) - This interface helps with implementing undo and redo but is used specifically in the WPF data grid.</li>\n<li><code class=\"language-text\">ObservableCollection&lt;T&gt;</code> - This collection is a good start out of the box but why does it still not have an AddRange method? Why do we not have an <code class=\"language-text\">ObservableDictionary&lt;TKey, TValue&gt;</code> or a <code class=\"language-text\">KeyedObservableCollection&lt;TKey, TValue&gt;</code>? What if you have a collection of items implementing <code class=\"language-text\">INotifyPropertyChanged</code> and you want to know if one of those items changes, why can't the collection type help you there also?</li>\n<li><code class=\"language-text\">ICommand</code> - Most implementations out there provide a base class for <code class=\"language-text\">ICommand</code> and usually call it <code class=\"language-text\">RelayCommand</code> or <code class=\"language-text\">DelegateCommand</code>. They usually have another implementation with a generic argument <code class=\"language-text\">RelayCommand&lt;T&gt;</code> or <code class=\"language-text\">DelegateCommand&lt;T&gt;</code>. These are a quick way to add a command to your view model, where the implementation of the command is usually a method in your view model passed in as a delegate. Sometimes though, this is not enough. What if you have a largish command and want to split it off into a separate class, a base class for <code class=\"language-text\">ICommand</code> would be useful. What if you have a command that does <code class=\"language-text\">async</code> and <code class=\"language-text\">await</code>? <code class=\"language-text\">ICommand</code> doesn't support that but can we provide some help here?</li>\n<li>Inversion of control (IoC) - There are a lot of IoC frameworks out there already, why reinvent the wheel. Just pick one but which one?</li>\n</ol>\n<p>I'll pause just here as I think the above listed items are all base classes that could be used across the board on all the major platforms. They are at the very heart of MVVM in .NET. The rest of the list below are more dependant on the type of application you are building.</p>\n<ol>\n<li>Navigation - This has always been a stone in my shoe. Navigation is inherently something that happens in the view but it is something that view models often need to understand. The problem is, that the view model is not supposed to know about the view at all. This problem occurs again and again in different forms on each platform.</li>\n</ol>\n<blockquote>\n<ul>\n<li>Navigating pages in Windows Store, Windows Phone, Silverlight.</li>\n<li>Navigating Windows in Windows Presentation Foundation (WPF) and Windows Store.</li>\n</ul>\n</blockquote>\n<ol>\n<li>User Interaction - I'm talking about <code class=\"language-text\">MessageBox</code>'s, <code class=\"language-text\">MessageDialog</code>'s, Toast's etc. Giving the user information or asking them questions happens on all platforms. This problem is very similar to the Navigation problem.</li>\n<li>Connecting your Views to ViewModels - This is usually some by-product of which IoC container you choose to use, whether it's MEF, Unity, Autofac or some other. There is no recommended way of doing this and I don't think I've ever found a 'correct' way of doing this.</li>\n<li>Saving View Model state - This usually needs to be done when the application closes or suspends due to some user interaction. A lot of frameworks simply serialize the whole View Model and save it away but is that the best way and what about doing that in a WPF application?</li>\n<li>Events - Passing events between view models is a fairly useful ability, allowing communication and passing of state.</li>\n<li>Composing Views - Some MVVM frameworks like PRISM provide support for composing different views together. Alternatively, this process usually has a connection with the type of IoC container you are using.</li>\n<li>Firing Commands - A lot of controls can't fire off <code class=\"language-text\">ICommand</code>'s in XAML because they don't provide a Command property or sometimes you want to fire a command based on some event or even a key press.</li>\n<li>Other Stuff - Reactive Extensions can help in some pretty interesting ways with MVVM. What about Portable Class Library's? Why does the MVVM on one platform need to be different from another?</li>\n</ol>\n<p>The last two things in the list are more abstract requirements for any MVVM framework.</p>\n<ol>\n<li>Testability - Writing a view model which is easy to test is hard work. Especially if you want to use <code class=\"language-text\">MessageBox</code>'s, GPS API's or other API's which make testing difficult. You don't want a <code class=\"language-text\">MessageBox</code> popping up in the middle of your test do you?</li>\n<li>Performance - Your application needs to run fast, especially if it's running on a phone. For example, a lot of MVVM frameworks use expression trees and reflection to raise property changed notifications . What impact does this have in the performance versus maintainability trade off?</li>\n</ol>\n<h1 id=\"existing-frameworks\"><a href=\"#existing-frameworks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Existing Frameworks</h1>\n<p>Wow, that's a lot of stuff! All of this 'stuff' is related but covers a huge range of subjects. A lot of existing MVVM frameworks try to do all of this at once!</p>\n<p>In my humble opinion, because they do so much, they usually only cover some, say 70-80% of the full functionality. What business does an MVVM framework have including an IoC framework? There are lots of IoC frameworks out there that are far more powerful than anything we could write but a lot of MVVM frameworks include one too.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>So ideally what we need is something modular, that you can plug bits into but also something that covers all the bases.</p>\n<p>Whats your opinion? I've looked at a lot of frameworks MVVM Light, PRISM, etc. In my opinion, the seven top items are the most important but also the most neglected bits of MVVM. Is there some framework out there that does all this and more?</p>\n<p>I'll discuss this and a lot more in the coming posts.</p>\n"}},{"node":{"title":"Reactive Extensions (Rx) – Part 2 – Wrapping C# Events","path":"/reactive-extensions-part2-wrapping-events/","date":"13 February 2014","timeToRead":3,"description":"Reactive Extensions IObservable wrappers for C# events and hiding the C# events entirely from subscribers using explicit interface implementations.","content":"<ul>\n<li><a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) - Part 1 - Replacing C# Events</a></li>\n<li><a href=\"/reactive-extensions-part2-wrapping-events/\">Reactive Extensions (Rx) - Part 2 - Wrapping C# Events</a></li>\n<li><a href=\"/reactive-extensions-part3-naming-conventions/\">Reactive Extensions (Rx) - Part 3 - Naming Conventions</a></li>\n<li><a href=\"/reactive-extensions-part4-replacing-timers/\">Reactive Extensions (Rx) - Part 4 - Replacing Timers</a></li>\n<li><a href=\"/reactive-extensions-part4-awaiting-observables/\">Reactive Extensions (Rx) - Part 5 - Awaiting Observables</a></li>\n<li><a href=\"/reactive-extensions-part6-task-toobservable/\">Reactive Extensions (Rx) - Part 6 - Task ToObservable</a></li>\n<li><a href=\"/reactive-extensions-part7-sample-events/\">Reactive Extensions (Rx) - Part 7 - Sample Events</a></li>\n<li><a href=\"/reactive-extensions-rx-part-8-timeouts/\">Reactive Extensions (Rx) - Part 8 - Timeouts</a></li>\n</ul>\n<p>Sometimes it is not possible to replace a C# event with a Reactive Extensions (Rx) event entirely. This is usually because we are implementing an interface which has a C# event and we don't own the interface.</p>\n<p>However, as I'll show in this post, its possible to create <code class=\"language-text\">IObservable&lt;T&gt;</code> wrappers for C# events and even to hide the C# events entirely from consumers of the class.</p>\n<p>The method of wrapping C# events depends on the type of event handler used. Below are the three type of event handler and the method of wrapping them with an observable event.</p>\n<h1 id=\"wrapping-an-eventhandler-c-event\"><a href=\"#wrapping-an-eventhandler-c-event\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Wrapping an EventHandler C# Event</h1>\n<p>The <code class=\"language-text\">FromEventPattern</code> method is used to wrap the event. Notice we have to specify delegates for subscribing (<code class=\"language-text\">+=</code>) and unsubscribing (<code class=\"language-text\">-=</code>) to the event.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">EventHandler</span> BunnyRabbitsAttack<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token operator\">></span> WhenBunnyRabbitsAttack\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Observable\n            <span class=\"token punctuation\">.</span><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">(</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"wrapping-an-eventhandlert-c-event\"><a href=\"#wrapping-an-eventhandlert-c-event\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Wrapping an EventHandler<T> C# Event</h1>\n<p>This example is much the same as the last, except we have to deal with the event arguments. The <code class=\"language-text\">FromEventPattern</code> method returns an <code class=\"language-text\">EventPattern&lt;T&gt;</code> object, which contains the sender and the event arguments. We're only interested in the contents of the event arguments, so we use a Select to return just the <code class=\"language-text\">BunnyRabbits</code> property.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> EventHandler<span class=\"token operator\">&lt;</span>BunnyRabbitsEventArgs<span class=\"token operator\">></span> BunnyRabbitsAttack<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span>BunnyRabbits<span class=\"token operator\">></span> WhenBunnyRabbitsAttack\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Observable\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BunnyRabbitsEventArgs</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">.</span>BunnyRabbits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"wrapping-a-custom-event-handler-c-event\"><a href=\"#wrapping-a-custom-event-handler-c-event\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Wrapping a Custom Event Handler C# Event</h1>\n<p>Some C# events use a custom event handler. In this case we have to specify the type of the event handler as a generic argument in the <code class=\"language-text\">FromEventPattern</code> method.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">BunnyRabbitsEventHandler</span> BunnyRabbitsAttack<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span>BunnyRabbits<span class=\"token operator\">></span> WhenBunnyRabbitsAttack\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Observable\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BunnyRabbitsEventHandler</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BunnyRabbitsEventArgs</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">.</span>BunnyRabbits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"hiding-existing-events-using-explicit-interface-implementation\"><a href=\"#hiding-existing-events-using-explicit-interface-implementation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hiding Existing Events Using Explicit Interface Implementation</h1>\n<p>The disadvantage of the above approach is that we now have two ways to access our event. One with the old style C# event and the other with our new Reactive Extensions event. With a bit of trickery we can hide the C# event in some cases.</p>\n<p>The <code class=\"language-text\">INotifyPropertyChanged</code> interface is very commonly used by XAML developers. It has a single event called <code class=\"language-text\">PropertyChanged</code>. To hide the <code class=\"language-text\">PropertyChanged</code> C# event we can explicitly implement the interface (Click <a href=\"http://stackoverflow.com/questions/143405/c-sharp-interfaces-implicit-implementation-versus-explicit-implementation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> for details on implicit versus explicit implementations of interfaces). Secondly, we wrap the event as we did before.</p>\n<p>Now the <code class=\"language-text\">PropertyChanged</code> C# event can only be accessed by first casting the object to <code class=\"language-text\">INotifyPropertyChanged</code> (Binding in XAML languages, which uses this interface continues to work). Our new Reactive Extensions observable event is now the default method of subscribing for property changed events.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NotifyPropertyChanges</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">INotifyPropertyChanged</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">event</span> <span class=\"token class-name\">PropertyChangedEventHandler</span> INotifyPropertyChanged<span class=\"token punctuation\">.</span>PropertyChanged\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">add</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">+=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">remove</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">-=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">PropertyChangedEventHandler</span> propertyChanged<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> WhenPropertyChanged\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Observable\n                <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PropertyChangedEventHandler</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PropertyChangedEventArgs</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n                    h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                    h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">.</span>PropertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged<span class=\"token punctuation\">?.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PropertyChangedEventArgs</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"summing-up\"><a href=\"#summing-up\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Summing Up</h1>\n<p>So it may not always be possible to get rid of, dare I say it legacy C# events but we can certainly wrap them with Reactive Extension observables and even hide them altogether.</p>\n"}}]}}},"context":{}}