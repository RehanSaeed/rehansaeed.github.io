{"hash":"30ae38a0ef8d31dfb3f3ae4d3c60abfe669b49de","data":{"tag":{"title":"NuGet","belongsTo":{"edges":[{"node":{"title":"What dotnet new Could Be","path":"/what-dotnet-new-could-be/","date":"31 December 2019","timeToRead":5,"description":"What the 'dotnet new' CLI command could be if some effort was spent on developing it. I compare it to other templating engines and suggest ideas.","content":"<p>The '<a href=\"https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dotnet new</a>' CLI command is a great way to create projects from templates in dotnet. However, I think it could provide a much better experience than it currently does. I also suspect it isn't used much, mostly because templates authored for the <code class=\"language-text\">dotnet new</code> experience are not included in the Visual Studio File -> New Project experience. For template authors, the experience of developing templates could do with some improvements. I tweeted about it this morning and got asked to write a short gist about what could be improved, so this is that list.</p>\n<div>\n    <blockquote class=\"twitter-tweet\" data-dnt=\"true\" data-theme=\"light\"><p lang=\"en\" dir=\"ltr\">Any plans to improve the dotnet new templating engine?<br>- Lots of unfixed bugs<br>- Lots of rough edges needing smoothing<br>- A &#39;dotnet new ui&#39; command to create projects using a visual editor would be cool<a href=\"https://twitter.com/sayedihashimi?ref_src=twsrc%5Etfw\">@sayedihashimi</a> <a href=\"https://twitter.com/coolcsh?ref_src=twsrc%5Etfw\">@coolcsh</a> <a href=\"https://twitter.com/danroth27?ref_src=twsrc%5Etfw\">@danroth27</a> <a href=\"https://twitter.com/jongalloway?ref_src=twsrc%5Etfw\">@jongalloway</a> <a href=\"https://twitter.com/shanselman?ref_src=twsrc%5Etfw\">@shanselman</a> <a href=\"https://twitter.com/DamianEdwards?ref_src=twsrc%5Etfw\">@DamianEdwards</a></p>&mdash; Muhammad Rehan Saeed (@RehanSaeedUK) <a href=\"https://twitter.com/RehanSaeedUK/status/1211663043840684036?ref_src=twsrc%5Etfw\">December 30, 2019</a></blockquote>\n\n</div>\n<h2 id=\"why-do-i-care\"><a href=\"#why-do-i-care\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Why do I Care?</h2>\n<p>I author a <a href=\"https://github.com/Dotnet-Boxed/Templates/blob/master/Docs/API.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Swagger API</a>, <a href=\"https://github.com/Dotnet-Boxed/Templates/blob/master/Docs/GraphQL.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL API</a>, <a href=\"https://github.com/Dotnet-Boxed/Templates/blob/master/Docs/Orleans.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Microsoft Orleans</a> and <a href=\"https://github.com/Dotnet-Boxed/Templates/blob/master/Docs/NuGet.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NuGet</a> project templates in my <a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dotnet Boxed</a> project. The project currently has 1,900 stars on GitHub and the <a href=\"https://www.nuget.org/packages/Boxed.Templates/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boxed.Templates</a> NuGet package has around 12,149 downloads at the time of writing. The Dotnet Boxed templates are also some of the more complex templates using <code class=\"language-text\">dotnet new</code>. They all have a dozen or more optional features.</p>\n<h2 id=\"visual-studio-integration\"><a href=\"#visual-studio-integration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Visual Studio Integration</h2>\n<p>In the past, I also authored the <a href=\"https://marketplace.visualstudio.com/items?itemName=RehanSaeed.ASPNETMVCBoilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASP.NET Core Boilerplate</a> project templates which are published as a Visual Studio extension. This extension currently has 159,307 installs which is an order of magnitude more than the 12,149 installs of my <code class=\"language-text\">dotnet new</code> based Boxed.Templates NuGet package.</p>\n<p>I've read in the dotnet/templating GitHub issues that there is eventually going to be Visual Studio integration in which you'd be able to search and install <code class=\"language-text\">dotnet new</code> based templates on NuGet, and then create projects from those templates much as you would with Visual Studio today. Given the download counts of my two projects, this would be the number one feature I'd like to see implemented.</p>\n<p>You could create a Visual Studio extension that wraps your <code class=\"language-text\">dotnet new</code> templates but having messed around with them in the past, it's a lot of effort. I'm in the template making business, not in the extension making business. Also, given the above rumour, I've held off going this route.</p>\n<h2 id=\"nugetvisual-studio-marketplace-integration\"><a href=\"#nugetvisual-studio-marketplace-integration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NuGet/Visual Studio Marketplace Integration</h2>\n<p>Currently there is no way to search for a list of all <code class=\"language-text\">dotnet new</code> based project templates on NuGet or on the Visual Studio marketplace. There is <a href=\"https://github.com/dotnet/templating/wiki/Available-templates-for-dotnet-new\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this list</a> buried in the <a href=\"https://github.com/dotnet/templating\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dotnet/templating</a> GitHub project but the only people who are going to find that are template authors. It would be great if there was some kind of marketplace or store to find templates, rate them, provide feedback etc.</p>\n<h2 id=\"dotnet-new-ui\"><a href=\"#dotnet-new-ui\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>dotnet new ui</h2>\n<p>If you've seen the <a href=\"https://cli.vuejs.org/guide/creating-a-project.html#using-the-gui\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue CLI</a>, it has a magical UI for creating projects from it's template. This is the benchmark by which I now measure all project creation experiences. Just take a look at it's majesty:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 828' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-8a56eae0357b0e98a62e2139eace194c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-8a56eae0357b0e98a62e2139eace194c)' width='1024' height='828' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA0CAYAAAA62j4JAAAACXBIWXMAAAsSAAALEgHS3X78AAAL%2b0lEQVRo3u1ba2wc1RXOi8RZ5%2bHYsZ1E4UcFQmohzYOXgxT1F1JpKxJChaqCWlTVtCpVQoUw6Q9%2bVUL8qPr4UamFKj9oSotQICSQEGKTkPi961173%2b/Z98zszOx71%2bv17J6ec2fWj8SJ7ZCEVcpYn865j7lz73fPPffcnfGKFXg9vG/fiv%2bnCwCYvO%2b%2b%2b2YznzryOxIrD7/1VtOhnj8aDv7kD4Y3f/qm4dnDPzb86AdPGb534IBh3959ht279xi6uroMu3Z9F/Xdhr1796K%2by7Bnzx4mH37kEVb%2b%2bOOPGZ5%2b%2bmnD4cPPGg4ePGg4dOjQ14ZnnnnG8OKLPze8/PLL63fs2LGGBhqNRmcHbzSaVpMcGBn5vs9q9flsFpvXbbGbXWaHx%2bN2eH0%2bRyAQcIRCIYZgMOgIh8Ooh1la0zXJcRwrJ3i9Xrzfq0ldv7Pw6H3wOFwulxUl53A43qGxHj9%2bfPUMAZi4h%2bT5wcGXskYjiMOfQCJ4Ds74zoCUFMAW58AacIPFaAKr1QrYGJjNZrDbbBDw%2b8Fut4PH7YYxkwmQKCiXy5DJZCCZTGJdJ/h8XojHY3cOsboeZ4hhemBgAPtuA4vFYsShrnn%2b%2bRfWPvjggxoBb7zxxloUq0%2bePPlbWVEgFk9UEGo8FldlWVaVbFYV5IyaEBRVkNJqUsmpCTGFUFQ%2bmVLjgszSMV5i5UqmoMoIKZVTPf6Q6vZxajAcRyR0eXsRigpqKIL9j8cZkAA1EolU0uk0OJzOQRxry5NPPrm%2bpaVFI6Cnp2cdiqYzZ06/igMGRVHUbDZboxt8OMOinIVoLAGhcARsNjuMT1jB6XRBMBTG/BgyHAdBTEKCF1CKwAsixBMJEIQk3MmrpksR%2b6JkS%2bB0eSASCoErysF40KNWK9NkoWQB2w4cONC8cePGlYyAo6%2b8QgQY/vv%2b%2b6/li0WQUylVSaVqspKChICDktMQ5mXgogI4fRx4g1FwByLAxUSIJCQIx0UIJ5KYFlBKEBVkCLE8CaQMtpfVkZkj50BaKJ1duO6iwIHHRAV4mrR4AidDgGRKwTFIanmqAuiLTDjWHV379zdv2LBBI%2bDXR44yAt45caKHLxQhkJTUQDJZCyYl4CQZ6jIkKxBJpSCsaAihtVB%2bHfPSuh7A2fChZfixI9SOHy0E22Y6lc0%2bI8nSBE7CemhFhHreckD3U3v1PtAzgqKkJifLYHS6GAGPdnU1N19LwL97EjMESLUAdfIq%2bBfIWwyDNid8abbC58MmONc/AgNWB8sbsrvg8yEjXBqbgP4JO5N9RjP0joyx%2bo5IDAehLPt51%2bk3EjAFo66vSMA1DYs0kxr8Oq6u44zGcTBRmAiGGEi3hSLgQt9hDYaZPh7gmBzz%2bpluD0fBRxZwCwav9TPJLGDUeYsJCOcUCKXQ/NOIjCYDklYWRPMLp9IQoiWDSyeCTjWSzrBZrWO2PM1AdUiymZe0NoJsSSkLgsq%2bNgI4RYYvznJgNMXANBaD0VENPnSIIdxOnWjCH57vxRkN4kxrsz/uD%2bLaTrKOY6fAjDPujMbYrDMLQUkWwtrHAY44XDBotbO2qMziD4CNC2NdjrXrifNLJUFNlqfA6HJfS8CvjhxhBLz9rxM9sVwefMgWouYjB3Y94CD86GgGroRh3BmHsQkcvCkKRnMM3Lg70OyR6Z%2b9jAEIdtiOg6JBjmPHveQUsVPuBI9r0sPWOtWhMiKB6tIzAjgwKh9GEhxRrY6FkRDUyES40NNTWzfsK8IriCpfmkRCnYyAR%2bYScPTVVxkB733wQU%2bpWgM5j4FMvlBDwEJQCgUQlRyEuDTEedxuohmMBzIYQGmgfD6Zg1SpCFmMClO4tWooMciF2bYorRRmy1iatuKZcu1epTi/zkzdwsJ9vBpSPq9OYYzg5jhGwP4nnpjdBn9/7Bgj4JMzZ3r0WEKdE1fcLReNCUP7JCNgXiD0uk7A6dOnGQG1Wk2taRcsF9VqlYHpevpm2rnVwH4wAgRBuJaAY7eIgBuGqQ1CgCiKt48AAWOAUCSOZ4QoCLRFohP0%2bIKQwzVYJ%2bGWxPyNSsDk1BQUyPHl81Aqk16CLDopyq%2boKkxNT0PlK4LauJllddsJoPU%2bpU6DJyxCQslClrx0vsiQQb2AuwHD5KQuy7N5c/MXQR7rTavqsi3h9hOAs0IEDFoD4OR4ENNZCOOp0IcnyASeJotoBfklDnIxMAIacQlU6jODf9NIiFqrMssgSWUV7AORNFmpQHmZoHtKSCKhIQmgq4CRViqTg0yugH6AgAFMOsdAeiqThyLW0e13OV6PiZiSxjBbbFwLKOoEpLN5RgJJgozLoZ5fxLV/M56crqicAg53mob0AcvZ4u7aOCCLByna8/MY2xdxCyyh0yO9QLsAxvJl3Brv6kCIfkOk4CeEpztvIARJSWF6SA%2bIUpnsggHRciysYQmgi05tcRwkn81CIqOBz%2bZm0vEMnhZTaYgiUR4kxY1HXG8swdKUvxhCGF1GUykWDDWcD2BeGjvpxrM%2b/VbgZRDnQEvT2dyDdS6ZJ%2bDCyBhcHJuYyV8MdrIsrEtbYkM6QdqvixioUNAzD2Ud%2bj5emqpgPIAxAYsLVJYuzZRdH1osUAG1EUPhZR90qH4dy7ynYX1Akn7I5CLAhaOQEOhNEb0lSqJjTEAc9fRVTnAuaUsJtRv%2bNEjboIJ%2bIJXOoMywATNdRwYdYqWin%2brIlNH8p/VTXnUJBEvoLCWMBm%2bGhDtCAG15To8f/MEwuFCSNdD2Z7E52W8EDrcPTBYby6c0F9bqT9jdkEPyrjcwVY/8/vS34/Dnf55gehXzGo4AMlPqrKpWZ34ao7CVAqB6mhxYVV/L9bQ652e0G1kAhdr1s0RDWsDVaxoWWOPz9dqy1nXD%2b4BGxjcEfEPAMgnQ74SF0MgDvd7rHDampRJAbKFnrtU9NHn1pXrrrxvUx4o6jbvPfFSmK0snQMhmVU6SaxF6ZY3BR5ROcOk0%2b0KEDjz0kEazhGqtqv9qxEO/ywRDHjMMIoY8Fk13jzECZElanAA8wqrjwVCtb9QMJq%2bffcXROzoG/VYHEqLc1GHkDqxxRkBQjMIl%2bzBYgk4Y8U7QwMHot0KfdXDpBMTTGdWd4Gv0mtod59mXG/Rqml53kxXcTguAJWDhezUCOCSgzzrArOCyYwQuOYZRjsIXtjoB8gIvR19/nRFw6tSp16gSHlGn8%2bVytTRdqeIRtlpAYPPVUqXCgA%2bsYlcYQEeNRafqTLpKk0L1EGie2lWrK7peL6cka6NWxciRtUOYq1%2bTN9sS01W9zfxksSpmZIZUMVeV82kGKZua1n2A8RoCfnOUfSa3/j8fnTp2ZcwMFjT7aDoHXFLBGU%2bDWCjCuYuXwIfWEBD074EE%2bvpLBE%2bMZ5IgYD2LxwsWH54HhAQulzT7SiuKByEC8ycoY3hICskpBk5SMC%2brfTWSlCGJoa5YLN0QfL4AcTxYUTsESifwLEF5Qr4IfK4AUqkMY04X%2bBMiLgsZLUMGvlACk8s9QQQ8/NjjzRvqBDz3wgv0pWjzX/7x9kt/f/dd8eT5C7GLJgv/2cAwf2HYyA/a7Pxf336HP3v5Cn8e884PIgaGGD5DnL0ywHSq9%2bFn5/mPevv43pEh/sLQKH8Oy74YNfEXjWOYHuF7h0f5Syaz1g7d3z/I940Y%2bU%2b/7Ed9iB92OPghbOd6GLY7%2bIEJK//lmIW1Q%2bgfn%2bCvWMb5y2YLk5RHdd479TG2OcB/ermfnhvvHTEqp/sufoxj3f7th3Y1r2tq0ghYuWoVfThM341%2b56Hdu3%2b4896dP2tra/1le/vW7q1b27o3b97cff8DD3R3dHR0t3e0zwPldXZ2Mrm5paW7c/v27s5t27rb2tq72/DerdhGa1trd2trK0uTvqV1C%2bpbGVg5lrG229u7N23a3L1p841Bz9myZQtrZwveS%2bkWTGtomcnbee%2b92MeO7o7ODnxO%2by927tz53MZNG/cTAWvWrFk39xP6VeQDyDSIBMSjiCfuMnQh9iC%2btWrVKprsNTOjRzZIrEZpwKsVTaNz3bp12%2b8uNG1bv359e1NT0yYc69qVeC30zxSrdGbo8/m1dxnu0UHLfeWKby7t%2bh%2bh3cVRELt2TAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1024\" alt=\"Vue CLI Create a New Project\" data-srcset=\"/assets/static/Vue-CLI-Create-a-New-Project-1024x828.82a2fbd.3fb21dbdb19fdff530b8cb09c90300b5.png 480w, /assets/static/Vue-CLI-Create-a-New-Project-1024x828.cbab2cf.3fb21dbdb19fdff530b8cb09c90300b5.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/Vue-CLI-Create-a-New-Project-1024x828.cbab2cf.3fb21dbdb19fdff530b8cb09c90300b5.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Vue-CLI-Create-a-New-Project-1024x828.cbab2cf.3fb21dbdb19fdff530b8cb09c90300b5.png\" width=\"1024\" alt=\"Vue CLI Create a New Project\"></noscript></p>\n<p>Imagine executing <code class=\"language-text\">dotnet new ui</code>, then seeing a nice browser dialogue popup like the one above where you could find, install and even create projects from templates. Creating a project would involve entering the name of your project, the directory where you want it to be saved and then toggling any custom options that the project template might offer.</p>\n<p>That last bit is where having a UI shines. There aren't many <code class=\"language-text\">dotnet new</code> templates that use the templating engine to it's full potential and have additional optional features. When you use the current command line experience it's unwieldy and slow to set custom options. Having a custom UI with some check boxes and drop downs would be a far quicker and more delightful experience.</p>\n<h2 id=\"missing-features\"><a href=\"#missing-features\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Missing Features</h2>\n<p>There are a bunch of cool missing or half implemented features in the <code class=\"language-text\">dotnet new</code> templating engine that could use finishing. Chief among these are called post actions. These are a set of custom actions that can be performed once your project has been created.</p>\n<p>As far as I can work out, the only post action that works is the one that restores all NuGet packages in your project. This was implemented because the basic Microsoft project templates wanted to use them but I understand that they no longer do for reasons unknown to me. Happily I still use this one and it works nicely.</p>\n<p>Other post actions that are half implemented (They exist and you can use them but they just print content to the console) are for opening files in the editor, opening files or links in the web browser or even running arbitrary scripts. The last one has the potential for being a security risk however, so it would be better to have a health list of post actions for specific tasks. I'd love to be able to open the ReadMe.md file that ships with my project template.</p>\n<p>In terms of new post actions, I'd really like to see one that removes and sorts using statements. I have a lot of optional pieces of code in my project templates, so I have to have a lot of #if #endif code to tell the templating engine which lines of code to remove. It's particularly easy to get this wrong with using statements, leaving you with a fresh project that doesn't compile because you've removed one too many using statements by accident. To avoid this, I created my own unit testing framework for dotnet new projects called <a href=\"https://github.com/Dotnet-Boxed/Framework#boxeddotnetnewtest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boxed.DotnetNewTest</a>.</p>\n<h2 id=\"docs-docs--docs\"><a href=\"#docs-docs--docs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docs, Docs &#x26; Docs</h2>\n<p>There is <a href=\"https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">one page of documentation</a> on how to create project templates in the official docs page. There is a bunch more in the <a href=\"https://github.com/dotnet/templating/wiki\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dotnet/templating wiki</a> and some crucial bits of information in comments of GitHub issues. In particular, there is precious little information about how to conditionally remove code or files based on options the user selects. There is also very little about post actions. It would be great if this could be tidied up.</p>\n<p>Secondary to the docs is the <a href=\"https://github.com/dotnet/templating/issues\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub issues</a> . There are currently 168 open issues with a large number having only one comment from the original author. Given the lack of documentation, having questions answered is really important.</p>\n<h2 id=\"fixing-bugs\"><a href=\"#fixing-bugs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Fixing Bugs</h2>\n<p>The latest version of the dotnet CLI has fixed some bugs but there are still a few that really get in the way of a great experience:</p>\n<ul>\n<li><a href=\"https://github.com/dotnet/templating/issues/1544\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">#1544</a>/<a href=\"https://github.com/dotnet/templating/issues/348\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">#348</a> - Running dotnet new foo --help outputs some pretty terrible looking text if you have any custom options.</li>\n<li><a href=\"https://github.com/dotnet/templating/issues/2208\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">#2208</a> - You cannot conditionally remove text from a file if it has no file extension, so that means Dockerfile, .gitignore, .editorconfig files.</li>\n<li><a href=\"https://github.com/dotnet/templating/issues/2209\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">#2209</a> - Complex conditionals fail if not wrapped in parentheses. I always forget to do this. There is no warnings, your template won't work.</li>\n<li><a href=\"https://github.com/dotnet/templating/issues/1438\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">#1438</a> - Using conditional code in csproj files requires some workarounds to work.</li>\n</ul>\n<h2 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h2>\n<p>The Vue CLI has really shown how great a new project creation experience can be. With a bit of work, the <code class=\"language-text\">dotnet new</code> experience could be just as great.</p>\n"}},{"node":{"title":"Unit Testing dotnet new Templates","path":"/unit-testing-dotnet-new-templates/","date":"21 August 2019","timeToRead":3,"description":"It's difficult to know if your 'dotnet new' based project will work if they have lots of options, in this post I show how to unit test them.","content":"<ul>\n<li><a href=\"/custom-project-templates-using-dotnet-new/\">Part 1 - Custom Project Templates Using dotnet new</a></li>\n<li><a href=\"/dotnet-new-feature-selection/\">Part 2 - dotnet new Feature Selection</a></li>\n<li><a href=\"/unit-testing-dotnet-new-templates/\">Part 3 - Unit Testing dotnet new Templates</a></li>\n</ul>\n<p>As I talked about in my previous post some time ago about dotnet new project templates, it's possible to enable feature selection, so that developers can toggle certain features of a project template on or off. This is not a feature that many templates in the wild use a lot. Quite often I've seen templates have no optional features or only a few. One reason is that it gets very complicated to test that toggling your optional features doesn't break the generated project in some way by stopping it from building for example. This is why I decided to write a small unit test helper library for dotnet new project templates. It is unit test framework agnostic and can work with xUnit, NUnit, MSTest or any other unit test framework.</p>\n<h2 id=\"example-usage\"><a href=\"#example-usage\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Example Usage</h2>\n<p>Below is an example showing how you can use it inside an xUnit test project.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApiTemplateTest</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ApiTemplateTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> DotnetNew<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Install</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ApiTemplateTest</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApiTemplate.sln\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">Theory</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">InlineData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StatusEndpointOn\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"status-endpoint=true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">InlineData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StatusEndpointOff\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"status-endpoint=false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token class-name\">Task</span> <span class=\"token function\">RestoreAndBuild_CustomArguments_IsSuccessful</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">params</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arguments<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> tempDirectory <span class=\"token operator\">=</span> TempDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">NewTempDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> dictionary <span class=\"token operator\">=</span> arguments\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">,</span> StringSplitOptions<span class=\"token punctuation\">.</span>RemoveEmptyEntries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">ToDictionary</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">Last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> project <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> tempDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetNew</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"api\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> dictionary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> project<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetRestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> project<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">Fact</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token class-name\">Task</span> <span class=\"token function\">Run_DefaultArguments_IsSuccessful</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> tempDirectory <span class=\"token operator\">=</span> TempDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">NewTempDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> project <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> tempDirectory<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetNew</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"api\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DefaultArguments\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> project<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetRestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> project<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> project<span class=\"token punctuation\">.</span><span class=\"token function\">DotnetRun</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">@\"Source\\DefaultArguments\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>httpClient<span class=\"token punctuation\">,</span> httpsClient<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">var</span> httpResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpsClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>HttpStatusCode<span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">,</span> httpResponse<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first thing it does in the constructor is install the dotnet new project templates in your solution. It needs to know the name of the solution file. It then walks the sub-directory tree below your solution file and installs all project templates for you.</p>\n<p>If we then look at the first unit test, we first need a temporary directory, where we can create a project from our dotnet new project template. We will generate a project from the template in this directory and then delete the directory at the end of the test. We then run dotnet new with the name of a project template, the name we want to give to the generated project and any custom arguments that particular project template supports. Using xUnit, I've parametrised the arguments, so we can run multiple tests while tweaking the arguments for each test. Running DotnetNew returns a project which contains some metadata about the project that we've just created and we can also use it to further dotnet commands against.</p>\n<p>Finally, we run dotnet restore and dotnet build against the project. So this test ensures that toggling the StatusEndpointOn option on our project template doesn't stop the generated project from restoring NuGet packages or building successfully.</p>\n<p>The second unit test method is where it gets really cool. If the project template is an ASP.NET Core project, we can use dotnet run to start the project listening on some random free ports on the machine. The unit test framework then gives you two HttpClient's (One for HTTP and one for HTTPS) with which to call your newly generated project. In summary, not only can you test that the generated projects build, you can test that the features in your generated project work as they should.</p>\n<p>This API is pretty similar to the ASP.NET Core TestHost API that also gives you a HttpClient to test the API with. The difference is that this framework is actually running the app using the dotnet run command. I have experimented with using the TestHost API to run the generated project in memory, so it could be run a bit faster but the .NET Core API's for dynamically loading DLL files needs some work which .NET Core 3.0 might solve.</p>\n<h2 id=\"where-to-get-it\"><a href=\"#where-to-get-it\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Where To Get It?</h2>\n<p>You can download the <a href=\"https://www.nuget.org/packages/Boxed.DotnetNewTest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boxed.DotnetNewTest</a> NuGet package or see the <a href=\"https://github.com/Dotnet-Boxed/Framework#boxeddotnetnewtest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a> on GitHub.</p>\n"}},{"node":{"title":"Cross-Platform DevOps for .NET Core","path":"/cross-platform-devops-net-core/","date":"28 January 2017","timeToRead":9,"description":"Learn how to use Cake, AppVeyor and Travis CI continuous integration build systems to perform cross-platform DevOps for .NET Core based projects.","content":"<p>If you're a library author or writing a cross-platform application then .NET Core is great but it throws up the question, how do you test that your code works on all operating systems? Well the answer is simple, you build and test your code on each platform.</p>\n<p>This post builds on <a href=\"http://andrewlock.net\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Andrew Lock's</a> work where he shows in two blog posts how to build, test and deploy your .NET Core NuGet packages using <a href=\"http://andrewlock.net/publishing-your-first-nuget-package-with-appveyor-and-myget/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AppVeyor</a> (Windows) and <a href=\"http://andrewlock.net/adding-travis-ci-to-a-net-core-app/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Travis CI</a> (Mac and Linux) continuous integration build systems.</p>\n<p>In Andrew's blog posts, he writes PowerShell (Windows) or Bash (Mac and Linux) scripts to build, test and deploy his code. There were two problems here.</p>\n<ol>\n<li>Code is duplicated because you have to write your shell scripts twice.</li>\n<li>I've already grudgingly learned how to write PowerShell and done a little Bash but found both languages pretty ugly and difficult to use for more complex scenarios.</li>\n</ol>\n<p>I only want to write my shell script once, I don't want to have to learn Bash in-depth and I don't want to write PowerShell if I can help it. Around the same time I was reading Andrew's blog posts, I read about <a href=\"http://cakebuild.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cake</a> build.</p>\n<h1 id=\"cake\"><a href=\"#cake\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cake</h1>\n<p>Cake lets you write your build, test and deployment script in C# and it provides lots of helper methods to get stuff done making your script very terse. You can get syntax highlighting and intellisense for your Cake scripts by installing the <a href=\"https://marketplace.visualstudio.com/items?itemName=vs-publisher-1392591.CakeforVisualStudio\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio</a> or <a href=\"https://marketplace.visualstudio.com/items?itemName=cake-build.cake-vscode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio Code</a> extensions.</p>\n<p>Building and testing your .NET Core code using Cake is dead dimple. Grab the <code class=\"language-text\">build.cake</code>, <code class=\"language-text\">build.ps1</code> and <code class=\"language-text\">build.sh</code> files from the Cake <a href=\"http://cakebuild.net/docs/tutorials/getting-started\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Getting Started</a> guide and drop them at the root of your project. Here is an example of my project and the files we'll be dealing with in this post:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 325 437' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-f5aafa2e0343572c5ddb79fa0dcf80c4'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-f5aafa2e0343572c5ddb79fa0dcf80c4)' width='325' height='437' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAABWCAIAAADwhAcPAAAACXBIWXMAAAsSAAALEgHS3X78AAARLklEQVR42tVb55PjRnafv9Jf7E%2b2y2XfN9lVKttXrpN83rN0K2lXG2Z3dnaHQ05kznGYc845ghEEwBxBRDdIzixXGjlUWUuq6w2m0WyC/dDv9wLewxH7s8asG/sbaUfbRRMjGu%2bw9HKXh3WjQWPY9T%2bKOkDGAAPcmui%2bFc9%2bwUyCoD%2bZjCbTyYaNDTdg6Ye8A2sGBqZ5/G%2bongn0S9WiVHalFl/bPf47o16jM1lcTo1SJhaJzWYHTq%2bZOjgGMM0s8/sNA61Oy3CnzYf97kDw8kJwI1JcScRXFxcul0Oj1o6X5KExsG7U/JFVrUVoORtFovEVxRwmuI9%2b6YMNgDeH9S1nDkt0fiJC1MCzqnzDzNOcONHkbDajfyOadMsAM7AsEn9LDRwcBmpZneGu2WrGool%2br1fK51LJTLFYSibiHbT/UTsdFohRxTT2dzSqBH18PtYrFRK52qBUKSUK4eWlwexw2Rxv3x5nKy1u8gEywCyq1LTIEAPQX8wmdajRw1AU/MEwgmD4ctZud7pwZ4GvfjMgftBC7GGC96cgnuZJRM2u2pyEkASO4xTNPKKUDtgSW/H07%2biRF/SHvY5Gr%2b0PR%2bPxpI91C5XafLFkDnwHOEsc%2bastiAlcq5HwTt/y%2bFcS4RXv4koiVXMOBEMfMANDP95W0rMcJ04UCdXKxUKuUq3mspl8IZ9MZ%2bhDRcLRf/8xc8j43WVgOBxiGIIg3Y2R4mKAtR%2bx8aZ3goSH4yExAJZb5lolGo2OhiMwQuDLFb4aDQYohs3nc3y5pLhGLpY4QZAUSa0I8rAYyOfz8UQimUwNhkMwkggFNTa7TqNQqkRut8fkdGk1cp1C6XB7rUat0WS%2buREPZstDcCuO1qil8oVCuVJJptLD0Wg1n2rlivdCUTjki4bcDpvt9PLaZrcGrWaTzRFw2cKRsFiqWJL0IeB6i4HxZNofDPuDPklystFpQsVyHXRWBIUvp/FEilgbMWAQiPW68RVxICg4mqzYNMZWxmxtzOaHbLbPZjC2OGYrEyaF0BmMASPQks1idBoFfSaDUkmEAp1cn8329k9HQ5z1tdnB2tR2R8tghwnBTLjLxHpsvMemhmwMo30NHJxGEDreZ5JDNjViIzDha1LhLhuC90wcA5EuCw2Ii1DnxNMsDthkj%2bFr7TxDTOlO840RfaxybYnIXDlrEdOGC3yd51ztudA7NcleEnAFM9Euu0c6GizZKMIWMPwPutLXhgqQJT80ey3UfyfQvzy9/PKHs/88Vb0Rq755fXltjv3xWPj8QvZBqP%2bGJ1UmeokeG4YZwP8eiduBQIdtTNghzpT6ZBJj/Q3cXhh560tXaeiqTn2Nqb%2bxdFUm2lBN6i1EukywufJA80Cb2u/Stwz0FqyryTqbrKXO2Jusu8V626wPZn0dZnP0tGkw4ofBOOntUKDvARM6rLfFuAE1OfIAarF7oe0OIHNOo7fGJEBwBGFjKBvH2MQax4CiCB0Dp30gLfR6kAGDMZSJIkwSYGbAzd%2bnCAU7bH9BV3tzax4DSjPQxM0Z1JxB7lLwXbpjTCGe%2bsKShnXxTqAxNSQ6pnTXkum5KiN3ZaD0l3ThusKXcUBkHAWQ%2bOwMABDHEDbRWfylIPkPolx9zt4l6l98/eob3u3Lc/GTU8n3Z/JvTm7/9c8nT3nKb9/dPrsy/XBy%2bV4blVij//5O8t0J/4VA%2bSee1A7R%2b2FgswPdGdMc4qH6BNgyew4514Vfi7Vii/%2bVyKAKNXSRmtKXF9liZ2qfNlSVOtPu6kSgcV9Y084sbMvAqjAUaDOxfalRDrVtNoKyyT7XCXTZ%2bAAAgwmjTKBDhzE2gjHRHutrEb4OFQGqE2PDKOtp4MEumMOGEDCBA5J/H7RlINih7bmuMdP1NMlglw3CjL/NEegDTkJdMJUOwEwQZrlBmPG1mcC677sn/74Y2FjiJLry1tuvzQ5LvOytza05BOxGDGEsyYarNrVkMQ80i3bJMEwHWwt7HktgnEbarw3eihBw5mwN4ok7%2b2/OxInZbvaF1eHqf7x8d3JrvzAEXgjEr4SWP7yTSBxJgT7AU7l//%2bzDH388e/KK//TyLn4IlniMs64W%2bSHaeO5Oy6w2YyBlyyGvruRnMvuPfLVA7%2bHrAj9KzFf6gEDnPZHYn/IUx9eaZ%2bdyoauYwA7DFwL4AxowAuxucxVYu3gBmI72mDDCRNYIDnSoEMIEOwAeTBRjgU8aQWmAB6C%2b9k5H/SXradJxmIjBhLuOAx8BKCLgJnialKdFr10G4EpwMAXTNgTcijVw2UMgDsRg6eQKZ6klVKv7m6swuN/tFYgEwLYE6vMwTARbq2CbAMBN9hkgNs7iAHgcwPxFD4COBjgbh0l0PBNB4688FWd9pY9UXlwpVL6qIVr/IDVcmBPf3xj18YrYkRAYwjJX6c2VwlRcAk4%2bv919zBtdsimEStaaTz25fxLZnRCuj1a//3D97FT53XvZqxv1yxvTt9emK53t2zPpDx%2bkb6QusTl0V1wAbw%2bgBQRl%2b6WjEbADMB0pd2O5ejRbD7aIcIc0p2F/Y2bNYMCx8zcW5gzmynWE9pSrtnCVx8EmDrRn9EBEqDNjTRBrh1lbd00tEBiw9jZrbTDgaGuCDncKxp0wd8qNAKpz0w6Bjtoz1lFb6oNFQKZI2VEcrn0bzhEKdYE3QW9cnY3bwxEClBfnUxwIHcEL1l4YlIqFYDjc7TTDZdSQbF/fhdy1uac2kTmi6ljrwhI3ZRBrpn2ucVpKixi6fwP8EcSAAWu%2b3%2b20Q4l0Ml%2bKQwOpL/fVs9ffvhL/cCZ/%2bv76KU/1L6%2bvbyzRP73kPTk%2beyEJAQ9i/eiFPQTiRMgF4cFKL1wbePNdf33hqoxFjqQ2Ur%2b1pMBu6BNtoSuniTalrqwp3TFnhwey9C0D8IwL0gMI6wOeM8oFA8CFDoN7DJyIPhtCOQLBQBDhBgNdBnQ2ttnP2Wx63QfHrVMNTnd93c/gZh8xDEvSDEHRJMVQFEmA4042hmZYiqapnWQHvS06YKn7zmacord5A5Lm5qy/yH0KTn9VOnrIpi5JutmbrJMDi3gsBtUq0Wgsl8tVy6V2q%2b50O%2bOJSCiWqkGVUMBTKhVms1mhkHW6XaVyLhJLdrA%2bVMolM1ySaj6dLBZLilxW69DqVy41OtqkTqHB8q%2bvM1/IC6CfikeSmWrQ4y4US3z%2b2SX/nc5mtzptEunVG75EopIJzt8Kby9zxZLVYTNazQaD9PTi%2bv3llVKpCQWTzXpOIpeKpVqb2ShSKICrwu3k/Ub9v9P28fp0ubIVe%2bokvE6zIoFgqFDIBQLBZK5QSIc9wVC9WS9VitFEyhP0e9y2eCLpdrkrtRrUgNLpaKletzqc0WjE4/BkM/FssZaMpH1eh8sfxKnPkh/4ScPxJRB9LgnAfJKD2fRXBEANQ5LEQ%2bJ7AwcaQIhYbWSSWedNyF%2b/Vo1jgCCITDpTLJTqjeZkMt4slKvxAyviGgHWsf5HrjNlFFf/R5LrPCC9PWdocJGH7B%2bzUzb4ORiAIOjLf/7yjH/25MmTYCjE0mQNgv7HX16tVvi69oMgicVy8bEo6vOnmNqtTiULVUMtIPTlcrVRr5gMSqB/vD6/y%2bez6JVub8DlcuhNlljYHwlH/KFIIhrS6bU2m6OPwDaH2%2bEwOKwOnKT2wwAK9d7%2b7vLsH4XhUKRYLHXglt9pSqdj57zrs1thyGpwOF2vTz5YLaYz3vnN1Y3BYNQrZDanXcDjx8OBy1uJxWE0ypS9yeKTEpfPl6UkqRE6aebg8XhMratb10dqPp%2bvgGTTnI1aLpc4kJnFHIzPppON8Mxns9FotFytOLiS5F4KoR60EENSBHWvNAAud8sNmJ0k/Ud0AqAfQML%2biF6v1Wq1Hh8ff/3V18lkcpP6/qXSiYOrldisVSQSDQcjlUo1HI4YclXMZzPZRBlqVCHI7bZi/UGrUc/lk93eqFzMIQhardXaTahcq7OfX%2bp/LkK9Xu/58%2bdOh1Muk4PTRrWslAqFsluV5k6vNYikAoNSf/r2pUilzlWqRuXF9ZX4zmJV3l4otJbxBN8vCxwDAKxqtVoul0ciEXA6GSBXF/xio91q1qFGq1zOQ9VaJpuBka7P543H481GAyirfg9B%2b/3Vas9VH0ePlfrRQMk8elNJYrVjXA%2biEnnLALj3Op1Oq9HWarV7V4LzIB/qhjZFfyyneD7VRYfAwHA45PP5Ar7g7IwHDC3Q67lMEuuPCOAkrB0y4AYRBDXE2v3x4BArthaLxe3tLVBBp6enqVS6Uikcv33jtppfvjnR6w3FYlktFysV4vO3xye8y417fEDl9xsxAHagUCg0m03AzHA0jEaCNos1nUlrNZpsoeK4M2Ty6aDHY7Y6Zjixb835sx24l/ifNmKFdxF0t2BuW053YLXTXJvN5sAaDAZbEd9i9dPK3cOtWgTBSrvdAWF4Op2ZTqbAgZtORrP5vAnV6612h2vwfDGHuzCKYc1Wa7bADwcGWwZgmIuGERQFRi1fKWfTAZlU5I/lQpGAxmAQ3/L1OuWtQhvwOgRCMTqcH86ebBmAoDrwluvNJtiBegNyO00mszEYScZTSbfPn82lVHKhIxiz6pWqO/tkjh8WA6D1%2b/0ugnTgDggUQQAANgRYgAGGAd8OQ9HligC2oN/rzWeLQb83my8OS4Q2lZebCH0Xtg%2bqZxvibO46wymie63FbGp8N239IIDa9Cmaun8PcPvhw9nDNR8qgx8mbEc2F9v2mYfPHlWAR5uHKMCJEInEMqkcAHbr89AUQPOGN2r9lJDZPkzaXmI6GeMr4n9/q%2bj7BxbgMB6PcIK6V8rbEIrcPtzEKWo7OJ3NlvhqV9GDhfUHA%2bbnlthoMJ6%2bey%2bXKXr9Qb2at5oNLrsplMxUSgUIqlWr5XgiUYHq4/6k027G4zGoUlSoZQ5vpFYu1aBGu92uQRBQUMlEpFKtQbVSNJECuquQz%2bcL%2bWarXcxEPZFEqVRuNBp6m00qEgTDqeVimoyHssVKuVTJpjMel1VrNIVBYB4NawymTCrmdLlC0Xgqk%2b606uFYqFYuery%2bYqX%2b0x0AobDH4z3n8c13ZhgGWGjxT57fioUylUitUd0K%2bNo7%2ba1IIxSLZReKy9sbnehKrVWdCAQymfzFMzBTZtTdqRUqoUyuEV6o1CqhUiwW6S7PP7w8fiOXy254vFvh7fHJu%2bM376Ri2alQeH31XiORa5Qgprh6ffLuknssqbgQnL9%2b/dZ6p1QZ9edXQr1MZrFYLq8lwNMXytRSIe/Vjy/ESj1w4nsoOhiMNnK%2bfbDlcDi9Xp/VYgVoBpuFwu3ReNjrY9P5FEWQ8WQ0GS/Ho1GtUoURDJ9NR9NRfzhGkS6MoADWAPRgE/rD0XIyHs/Gw/FkMl4MQcSAYUCtjfo9oNk6YOagD65WbbSmswmKwOViuQd%2bo4eBHwWX6mHgQ3Q0Hg1GQwTtTYb9WrU%2bGAwz6XimWAG/iWLAmcTANrabrW6395GBx0KCx17/YT6JAnZQ%2bH9WSL/0lUdfV1jhi91XAB7XQvfwJz%2bZsaOINpe/h9zDhbZvBtE7uoJhPgYNuwpkt23eKFqDldnRUsxWWd1/cfeazM4g/YB9dic/MF6SuTZXe48iHavFGE/EwM61IRDZt0OhQDiSAEdgKHw%2bt8sPYgZyDLazNyBXq1Q2C4zg/p5KrFdf6y/%2bgpf8e2GWyw9k4scvvpOrlN5YRnJ9zuOdBTN5j8P948vvJFfnb3jvFWbvYDQSCd4pZXKF2sgTi/vr1yaYPT7YIig6DU%2bdZe5VSWzQrxSzkUjIH4pUQHSTS9kczmyhWikXE7Fovlzwh2KVSq2UTbfbdX84avf5cYLYsyV%2btD0Y5q1UPyTOHsLkX44lPlv7L0enOdh5YeilAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"325\" alt=\"Cake Files\" data-srcset=\"/assets/static/CakeFiles.5cb2611.7864d7a669527e8e63c068f3b1bead00.png 325w\" data-sizes=\"(max-width: 325px) 100vw, 325px\" data-src=\"/assets/static/CakeFiles.5cb2611.7864d7a669527e8e63c068f3b1bead00.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/CakeFiles.5cb2611.7864d7a669527e8e63c068f3b1bead00.png\" width=\"325\" alt=\"Cake Files\"></noscript></p>\n<p>The <code class=\"language-text\">build.ps1</code> and <code class=\"language-text\">build.sh</code> files are shell scripts that download the Cake executable and execute the build.cake C# script. They also take any parameters that are passed to them and pass them onto your cake script. Now paste the following into your <code class=\"language-text\">build.cake</code> file:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Target - The task you want to start. Runs the Default task if not specified.</span>\n<span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> <span class=\"token function\">Argument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Target\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Default\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Configuration - The build configuration (Debug/Release) to use.</span>\n<span class=\"token comment\">// 1. If command line parameter parameter passed, use that.</span>\n<span class=\"token comment\">// 2. Otherwise if an Environment variable exists, use that.</span>\n<span class=\"token keyword\">var</span> configuration <span class=\"token operator\">=</span> \n    <span class=\"token function\">HasArgument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Configuration\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token function\">Argument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Configuration\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token function\">EnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Configuration\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">?</span> <span class=\"token function\">EnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Configuration\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"Release\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// The build number to use in the version number of the built NuGet packages.</span>\n<span class=\"token comment\">// There are multiple ways this value can be passed, this is a common pattern.</span>\n<span class=\"token comment\">// 1. If command line parameter parameter passed, use that.</span>\n<span class=\"token comment\">// 2. Otherwise if running on AppVeyor, get it's build number.</span>\n<span class=\"token comment\">// 3. Otherwise if running on Travis CI, get it's build number.</span>\n<span class=\"token comment\">// 4. Otherwise if an Environment variable exists, use that.</span>\n<span class=\"token comment\">// 5. Otherwise default the build number to 0.</span>\n<span class=\"token keyword\">var</span> buildNumber <span class=\"token operator\">=</span>\n    <span class=\"token function\">HasArgument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BuildNumber\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token generic-method\"><span class=\"token function\">Argument</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BuildNumber\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n    AppVeyor<span class=\"token punctuation\">.</span>IsRunningOnAppVeyor <span class=\"token punctuation\">?</span> AppVeyor<span class=\"token punctuation\">.</span>Environment<span class=\"token punctuation\">.</span>Build<span class=\"token punctuation\">.</span>Number <span class=\"token punctuation\">:</span>\n    TravisCI<span class=\"token punctuation\">.</span>IsRunningOnTravisCI <span class=\"token punctuation\">?</span> TravisCI<span class=\"token punctuation\">.</span>Environment<span class=\"token punctuation\">.</span>Build<span class=\"token punctuation\">.</span>BuildNumber <span class=\"token punctuation\">:</span>\n    <span class=\"token function\">EnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BuildNumber\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">?</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token function\">EnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BuildNumber\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// A directory path to an Artefacts directory.</span>\n<span class=\"token keyword\">var</span> artefactsDirectory <span class=\"token operator\">=</span> <span class=\"token function\">Directory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./Artefacts\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Deletes the contents of the Artefacts folder if it should contain anything from a previous build.</span>\n<span class=\"token function\">Task</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Clean\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Does</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">CleanDirectory</span><span class=\"token punctuation\">(</span>artefactsDirectory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Run dotnet restore to restore all package references.</span>\n<span class=\"token function\">Task</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Restore\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">IsDependentOn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Clean\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Does</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">DotNetCoreRestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Find all csproj projects and build them using the build configuration specified as an argument.</span>\n <span class=\"token function\">Task</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Build\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">IsDependentOn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Restore\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Does</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> projects <span class=\"token operator\">=</span> <span class=\"token function\">GetFiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./**/*.csproj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> project <span class=\"token keyword\">in</span> projects<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">DotNetCoreBuild</span><span class=\"token punctuation\">(</span>\n                project<span class=\"token punctuation\">.</span><span class=\"token function\">GetDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullPath<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">DotNetCoreBuildSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    Configuration <span class=\"token operator\">=</span> configuration\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Look under a 'Tests' folder and run dotnet test against all of those projects.</span>\n<span class=\"token comment\">// Then drop the XML test results file in the Artefacts folder at the root.</span>\n<span class=\"token function\">Task</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">IsDependentOn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Build\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Does</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> projects <span class=\"token operator\">=</span> <span class=\"token function\">GetFiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./Tests/**/*.csproj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> project <span class=\"token keyword\">in</span> projects<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">DotNetCoreTest</span><span class=\"token punctuation\">(</span>\n                project<span class=\"token punctuation\">.</span><span class=\"token function\">GetDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullPath<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">DotNetCoreTestSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    ArgumentCustomization <span class=\"token operator\">=</span> args <span class=\"token operator\">=></span> args\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-xml\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>artefactsDirectory<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">.</span><span class=\"token function\">CombineWithFilePath</span><span class=\"token punctuation\">(</span>project<span class=\"token punctuation\">.</span><span class=\"token function\">GetFilenameWithoutExtension</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullPath <span class=\"token operator\">+</span> <span class=\"token string\">\".xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    Configuration <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">,</span>\n                    NoBuild <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Run dotnet pack to produce NuGet packages from our projects. Versions the package</span>\n<span class=\"token comment\">// using the build number argument on the script which is used as the revision number </span>\n<span class=\"token comment\">// (Last number in 1.0.0.0). The packages are dropped in the Artefacts directory.</span>\n<span class=\"token function\">Task</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pack\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">IsDependentOn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Does</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> revision <span class=\"token operator\">=</span> buildNumber<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> project <span class=\"token keyword\">in</span> <span class=\"token function\">GetFiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./Source/**/*.csproj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">DotNetCorePack</span><span class=\"token punctuation\">(</span>\n                project<span class=\"token punctuation\">.</span><span class=\"token function\">GetDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullPath<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">DotNetCorePackSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    Configuration <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">,</span>\n                    OutputDirectory <span class=\"token operator\">=</span> artefactsDirectory<span class=\"token punctuation\">,</span>\n                    VersionSuffix <span class=\"token operator\">=</span> revision\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The default task to run if none is explicitly specified. In this case, we want</span>\n<span class=\"token comment\">// to run everything starting from Clean, all the way up to Pack.</span>\n<span class=\"token function\">Task</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Default\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">IsDependentOn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Executes the task specified in the target argument.</span>\n<span class=\"token function\">RunTarget</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>At the top of the script some arguments are defined. Values for these arguments can be set by passing values to the shell scripts via command line, they can come from environment variables or they can come from continuous integration build systems that Cake knows about (It knows all the common ones including TFS, TeamCity, Jenkins and Bamboo). In the above script I show how to get a build number from AppVeyor or Travis CI if the script is currently being run using those systems. This makes the code very short, terse and to the point.</p>\n<p>The rest of the script is made up of a series of chained tasks which execute one after the other, starting with the task with no dependencies. Alternatively you can pass in a Target argument which specifies which task you'd like the script to start executing from. A key thing to note is that the script does not need to know about any file names or file paths, everything is done by convention.</p>\n<p>One very important effect of using Cake is that your build script is easily testable. I've used many continuous integration systems that have their own proprietary tasks and when a slower build fails, debugging it was a nightmare, since it could only be done on the build machine. Since Cake is just a script, you can run it on your local machine and test it to your hearts content which gives you a quicker tighter development loop.</p>\n<h1 id=\"appveyor\"><a href=\"#appveyor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AppVeyor</h1>\n<p><a href=\"https://www.appveyor.com/docs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AppVeyor</a> is my favourite CI system but only works if you are hosting your code with Git based repositories and it only runs builds on Windows. All you need to do is sign-up, enable AppVeyor for your git repository and add an appveyor.yml file which is in <a href=\"https://en.wikipedia.org/wiki/YAML\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">YAML</a> format. Here is one of my commented appveyor.yml files:</p>\n<div class=\"line-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'{build}'</span>\n\n<span class=\"token key atrule\">pull_requests</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># Do not increment build number for pull requests</span>\n  <span class=\"token key atrule\">do_not_increment_build_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">nuget</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># Do not publish NuGet packages for pull requests</span>\n  <span class=\"token key atrule\">disable_publish_on_pr</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># Set the DOTNET_SKIP_FIRST_TIME_EXPERIENCE environment variable to stop wasting time caching packages</span>\n  <span class=\"token key atrule\">DOTNET_SKIP_FIRST_TIME_EXPERIENCE</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token comment\"># Disable sending usage data to Microsoft</span>\n  <span class=\"token key atrule\">DOTNET_CLI_TELEMETRY_OPTOUT</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">build_script</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">ps</span><span class=\"token punctuation\">:</span> .\\build.ps1\n\n<span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span> off\n\n<span class=\"token key atrule\">artifacts</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># Store NuGet packages</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> .\\Artefacts\\**\\*.nupkg\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> NuGet\n<span class=\"token comment\"># Store xUnit Test Results</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> .\\Artefacts\\**\\*.xml\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> xUnit Test Results\n\n<span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token comment\"># Publish NuGet packages</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span> NuGet\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> production\n  <span class=\"token key atrule\">api_key</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">secure</span><span class=\"token punctuation\">:</span> 73eFUWSfho6pxCy1VRP1H0AYh/SFiyEREV+/ATcoj0I+sSH9dec/WXs6H2Jy5vlS\n  <span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Only publish from the master branch</span>\n    <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master\n    <span class=\"token comment\"># Only publish if the trigger was a Git tag</span>\n    <span class=\"token comment\"># git tag v0.1.0-beta</span>\n    <span class=\"token comment\"># git push origin --tags</span>\n    <span class=\"token key atrule\">appveyor_repo_tag</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>It basically executes the <code class=\"language-text\">build.ps1</code> file at the root of my project and collects all the NuGet package and XML unit test result files in my artefacts folder. I also set some environment variables to turn off some lesser known .NET Core features for a faster build.</p>\n<p>AppVeyor, knows about NuGet and I use AppVeyor as my primary build system to publish my NuGet packages (You don't want AppVeyor and Travis CI both publishing your NuGet packages). Now I could have created a task in my cake file to publish NuGet packages and only execute that task if I was running on AppVeyor but AppVeyor has a pretty easy to use configuration file that I've chosen to do this step instead.</p>\n<p>To publish packages to NuGet, you sign-up and receive an API key. Of course, you don't want to share that with the whole world by checking it into GitHub or Bitbucket, so AppVeyor lets you <a href=\"https://ci.appveyor.com/tools/encrypt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">encrypt</a> it and paste the encrypted value into the appveyor.yml file.</p>\n<h1 id=\"travis-ci\"><a href=\"#travis-ci\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Travis CI</h1>\n<p><a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Travis CI</a> is very similar to AppVeyor but it targets both Mac and Linux. All you have to do is sign-up, turn on Travis for your repository and stick a .travis.yml file in the root of your project. Here is mine:</p>\n<div class=\"line-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> csharp\n<span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> linux\n  <span class=\"token punctuation\">-</span> osx\n\n<span class=\"token comment\"># .NET CLI require Ubuntu 14.04</span>\n<span class=\"token key atrule\">sudo</span><span class=\"token punctuation\">:</span> required\n<span class=\"token key atrule\">dist</span><span class=\"token punctuation\">:</span> trusty\n<span class=\"token key atrule\">addons</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">apt</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">packages</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> gettext\n    <span class=\"token punctuation\">-</span> libcurl4<span class=\"token punctuation\">-</span>openssl<span class=\"token punctuation\">-</span>dev\n    <span class=\"token punctuation\">-</span> libicu<span class=\"token punctuation\">-</span>dev\n    <span class=\"token punctuation\">-</span> libssl<span class=\"token punctuation\">-</span>dev\n    <span class=\"token punctuation\">-</span> libunwind8\n    <span class=\"token punctuation\">-</span> zlib1g\n\n<span class=\"token comment\"># .NET CLI requires OSX 10.11</span>\n<span class=\"token key atrule\">osx_image</span><span class=\"token punctuation\">:</span> xcode7.2\n\n<span class=\"token comment\"># Ensure that .NET Core is installed</span>\n<span class=\"token key atrule\">dotnet</span><span class=\"token punctuation\">:</span> 1.0.0<span class=\"token punctuation\">-</span>preview2<span class=\"token punctuation\">-</span>1<span class=\"token punctuation\">-</span><span class=\"token number\">003177</span>\n<span class=\"token comment\"># Ensure Mono is installed</span>\n<span class=\"token key atrule\">mono</span><span class=\"token punctuation\">:</span> latest\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Set the DOTNET_SKIP_FIRST_TIME_EXPERIENCE environment variable to stop wasting time caching packages</span>\n  <span class=\"token punctuation\">-</span> DOTNET_SKIP_FIRST_TIME_EXPERIENCE=true\n    <span class=\"token comment\"># Disable sending usage data to Microsoft</span>\n  <span class=\"token punctuation\">-</span> DOTNET_CLI_TELEMETRY_OPTOUT=true\n\n<span class=\"token comment\"># You must run this command to give Travis permissions to execute the build.sh shell script:</span>\n<span class=\"token comment\"># git update-index --chmod=+x build.sh</span>\n<span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> ./build.sh</code></pre></div>\n<p>You'll notice that we are specifying that we want to build our code on both Mac and Linux. Travis CI will actually run one build for each operating system. We then specify some details about the version of operating system we want to use and what we would like to install on them.</p>\n<p>Once again, I set the .NET environment variables to make the build a bit quicker and finally we run the <code class=\"language-text\">build.sh</code> Bash script to kick things off. Note that you need to run the following command to give Travis permission to execute the build.sh file (This is Linux after all):</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">git update<span class=\"token operator\">-</span>index <span class=\"token operator\">--</span>chmod=<span class=\"token operator\">+</span>x build<span class=\"token punctuation\">.</span>sh</code></pre></div>\n<p>Another thing to note is that if you are still using the older xproj project system and your unit tests are using xUnit, then your tests will not run due to this <a href=\"https://github.com/dotnet/cli/issues/3073\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bug</a>. There is a very nasty workaround in the link.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>If you want to learn how to add AppVeyor and Travis CI build status badges to your Git repository ReadMe or learn how to deploy to MyGet/NuGet using tags, I recommend going back to read Andrew's blog post which is still useful. If you're looking for more examples of Cake build scripts, you can take a look at the following Cake repositories:</p>\n<ul>\n<li><a href=\"https://github.com/cake-build/cake\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cake</a> - Cake builds itself with Cake! They have a very complicated build setup. This repository is great for learning about Cake helper methods that you can use in your scripts.</li>\n<li><a href=\"https://github.com/RehanSaeed/Serilog.Exceptions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Serilog.Exceptions</a> - Builds, tests and deploys .NET Core NuGet packages.</li>\n<li><a href=\"https://github.com/Dotnet-Boxed/Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed Framework</a> - Builds, tests and deploys .NET Core NuGet packages.</li>\n<li><a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET Boxed Templates</a> - Builds, tests and deploys a <code class=\"language-text\">dotnet new</code> NuGet package.</li>\n</ul>\n"}},{"node":{"title":"Custom Project Templates Using dotnet new","path":"/custom-project-templates-using-dotnet-new/","date":"18 January 2017","timeToRead":4,"description":"How to create project templates using dotnet new and the template.json file. How to share project templates by creating NuGet packages.","content":"<ul>\n<li><a href=\"/custom-project-templates-using-dotnet-new/\">Part 1 - Custom Project Templates Using dotnet new</a></li>\n<li><a href=\"/dotnet-new-feature-selection/\">Part 2 - dotnet new Feature Selection</a></li>\n<li><a href=\"/unit-testing-dotnet-new-templates/\">Part 3 - Unit Testing dotnet new Templates</a></li>\n</ul>\n<h1 id=\"current-dotnet-new\"><a href=\"#current-dotnet-new\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Current dotnet new</h1>\n<p>If you run dotnet new today, you can create a simple console app. The command has very few options, including selecting the language you want to use (C#, VB or F#). However, this is all about to change. <a href=\"https://twitter.com/sayedihashimi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sayed I. Hashimi</a> and <a href=\"https://twitter.com/mlorbetske\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mike Lorbetske</a> who work at Microsoft in the .NET tooling team have been kind enough to show me what they've been working on with the intention of getting some feedback.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 979 293' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3870cab3c250ac6abdf641e228595435'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3870cab3c250ac6abdf641e228595435)' width='979' height='293' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAATCAIAAACvEZzQAAAACXBIWXMAAAsSAAALEgHS3X78AAADMUlEQVRIx9VW2U4UURDtbXrf93W6p3t2FgX9Co1/aow/YHzwRRNR3BACCm7sDANiRE3U0wMawcRoTGagUnO7um%2bmc0/VOVVN3HmyfOvOvdXewbvtffjrjd7yux0Ea72D/c/f9j6dFe99%2bIK1f/h16c0G1t2PX9e2%2bgubhwROf/PG9ZWXL5/MPno8Ozs/92z%2b6dzD%2bzMvFhcP3u/v9XfxO/ajuN8/8WQojmNsbqyXwW7vxdIi1t3ezsbq2/X9z0Rj4tJYt5PnRaPZLL3RqNdxbeZ5Xq1WsyxN0yzNjq28Ka2WDqw2RMuL4ijACYui8IPg2tUrM/MrhOyEAsc5tm0YhiRJmm74nsMLgqpqge97peGBY1umKEme57IVhmaYKIot0yRJkhiFURSFtdtu3rr7iIjrY/Uix1lbrVY1reW1WrvdLoq6YzuyJAOSKMJLq1QqsiyzLK4VCVuiSNM0NQpjGAYALkyMP1h4RdCSyZSASJZlkVDsURQ9iEeT3b%2bvwMXJ8YU324SfNeMoCAKf5YQkjlwXbLEU8Mdzke%2b0WsWebdsgE1D9fAU5sJEDeP56kxAM39R1UIWiGUPXFUURRIHjBVVROI63bYBRgERTVTDn59FP2SgBhHkHJzRNU9e0/3zv0MCcAOCmjSgMkiQOw9B2HFWWfv8D2IU%2bJIkSSgGooiigWZnmkZuapkPiI6sAwSqSwBumwfE8%2bmtey9BndF13Hcey7DAMcMuLMjZqeZ7EMaaE5zpBGFXjpMiLbrcTJ0kA8JbhBYH232X8ZwCUaID3YejrhoHuCQjIa6c7Pj01BQUDAMexkESjqLfanWazlSaJ7/tRFGHMYU5YlsnzPEQP7TuuB%2bRDrwCvMjQtCDwaqOu4mqpUKoyiQsMKuvwxuSkKvcg0DKGcCTKGmuv5GHzsQNYj7kKi5XODwaSUbYdDoJYYKojBBzQf6o%2b6PK3a4YvYjDJDU6Fg1/OgSKzVJNZ1AwF4kqX4HMp%2b7Z6n4tFXABQ6Sh1xfuykiCV9wHKaJKlBWqkffhyXrDhjTtF0%2bS00OTEHAKRwjiuw%2bHaLoPSI5ESSV0hePi9Oi0g6PTF9%2bfbs0nfGqubrMqWV7gAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"979\" alt=\"old dotnet new\" data-srcset=\"/assets/static/first-dotnet-new.82a2fbd.fed45560bc11eca2085417cc08555458.png 480w, /assets/static/first-dotnet-new.a6c2149.fed45560bc11eca2085417cc08555458.png 979w\" data-sizes=\"(max-width: 979px) 100vw, 979px\" data-src=\"/assets/static/first-dotnet-new.a6c2149.fed45560bc11eca2085417cc08555458.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/first-dotnet-new.a6c2149.fed45560bc11eca2085417cc08555458.png\" width=\"979\" alt=\"old dotnet new\"></noscript></p>\n<h1 id=\"dotnet-new3\"><a href=\"#dotnet-new3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>dotnet new3</h1>\n<p>Microsoft is working on a new version of the dotnet new command with support for installing custom project templates from NuGet packages, zip files or folders. If you head over to the <a href=\"https://github.com/dotnet/templating\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dotnet/templating</a> GitHub repository you can follow the very simple instructions and try out a fairly complete version of this command which is temporarily called <code class=\"language-text\">dotnet new3</code>. The full <code class=\"language-text\">dotnet new</code> experience is due to be released in conjunction with Visual Studio 2017.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1103 639' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-24c05d14a9ac8f9f325d8224cd05d305'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-24c05d14a9ac8f9f325d8224cd05d305)' width='1103' height='639' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAlCAIAAAB9MnhgAAAACXBIWXMAAAsSAAALEgHS3X78AAAJ2klEQVRYw82YaY8U1xWGu3pfqnqpvWuvrl6nZ4AEKQY5DAxEiZ1PjlicweMg5x8kyt9JlD8TRcouRcqHJMYSZjNmMSMDHgRJnls103Q3hAEnYI6a5lZ1zb33Pec97zm3cn/657Xf/vGvV29tX7u9feXm9qc37ly6cZtLxrfu7dz96vEXDx59459bX%2b5kgys37964e39751%2bfbz/47Pb2x7ce5n7z%2bz//%2ble/vH3r5tXLl7BPLl68cf3q9atXLl68uLPz1b/fDHv8%2bFE2eHD/3sOdHQYPsQf3Pr/3KPfe%2b1vnzp7ZPP/BRz/96MKFC5ubm1sf/uTDra0PtrbOnj13%2bszZ8%2bc3f7y5eeb06XfefffcuffPnjl97Nj6xsbGcWEnsPX1db6zi42Nk6/ic/LUqd1BaqdOfe/IkaO/%2bPnPPvnsbk7RnVZTUTuqbVu1el2WZd0wu7bZSc20bUVuNFst27YbDdm0zHqjLklSLperlEvValXK5wvFYk6SisVCoVjIvRYrFMRCbx996w9/%2bzjnD1cno6GXGrv0PB%2bL4zCMIoZBGHRty/OD6draeDwKA1/VtH6/r%2bl6r8dDvtJsdrtOs9nUdV3V1Dx4Xr2Vy2UArH/37b/8/VIuGE6TXuy4Lr6PohgMbWGtIAhb7Va70wl9L0n6XcfRNE3ttDuqBi7TsnjSNI0sGq/ZsgicPHH82t2dXDRaG/TZ4SBJeqZp8kM%2bNbEzacHETxKUyTPgIruz9NDrBbB%2b%2bfb9XKHWdBxnMBzGUdRLkmql0lF1uNFR1dFoFEVRv58AzDAMnA%2b7iAw3iRiAdV1LAS8AyP6bv3x1AK7cuZ8brH7bdZ0wjuD6rnclibxkXCqVeHTRteng5V3%2b/43OAgBZQ4WaSJCiKKRjq9Waf7RcqUB8VIhkcF3XFtTv8mS1ViMlLMtUNd3udtMZ7FZqCBrh4kFNVUnxMAwUWd4H3rMAvyiAXFmuVWuwqNu1SdDUkBM2YVYqlYasRGEAhWzHRXYMXesPBu12ByRBEERRCGa2LpTK89LEtpMk8VwHNSPRmUpM7DgoMuR8JRHIVQBQDcKw14tgOXuF377vRXGvXqu2OtpkPGJnrudbpsmGyAFNN9h9GIbT6bQ/6KuqAE5iiB3rWjIYDAf9MIqpGyDpdNqEqNdLurZdLpcqVWGNRl1RZMSOqlIslTrtdrVaqdcbxLZcrsiNRrPZqtfrpVK5wSyyzD/%2bqtVqcskzchrSH77zfZHE%2bVqr02rhdvwd93r4coFC1RoL1xsNftI1NSMJdNINg1m63a7retygCHiuC05uAgavm6ZFaWMxogkDwQzCpqK02m1iixgQZCIDLWEj8VcFTocgw8Z2q6lpumVZwMBrtu0gIkzCtASb%2b3gEhp3%2b0Xuf3rqXk9VuEPhMMaPdQuLOCUt2NS8vWdLvsTY3u5x/7JXK6C6F5EadHgG4BLrX6wGmkNWBXE5ptgPPgU5%2bWoMNQ4djRIPLZlNJ%2bn1dN2LxJy4RgFYkkmnZKO9gOGoqjVk6Sk9ZblFql2Rtb/zsx2aFTACQqorabkMhUhP2sr95z1ENPM%2bloyApyRACShWAu0S/Xq2Kyt3tkqC9pD%2bdTkgLULEQCxQR4rlSuCypT91/qYgtqVCjUi5DSlVVZUVBZAzd0ASP3RSAPh4NCQt3SFxyFNdStsET%2bB4JWhRNXAEek3MkKJevsxILAIbf8z1XqEoUkqDso6mIZMfEo8WSLJJexqf8xP5QBWLFmNtUuv%2b2RodwWTbqQeqDNpsN4080QUXhIy0t5FkAuCN6QenlAbQtrysauA6ZTgT2LajLZEizJb9nM2bQn8JG5Iso4R2kLytYaB17RXxgJgmTtV58g8ZxnSUAYuY5vuX3LrM471Vi1aKzx0P1lAYIH0IGlYkGN2EXS1KDyqnxH%2bOK%2bH/3fim1cqmUPTE/RrmZs1FvZGlXTn%2bq1WpyKuqlYpFlxC3xfIX1M8kn/qgtFwzStXanLc0tUUlr4i6AcLgKmz2XOHTjuDcYDAg9ZRUf0V9kwfoaRouB8LuOQ48I3ln02GUUJ/QXDOgdZ/JMk7h2YC2OY1ZPehxF0HYfp%2b5PoWAwpUDQ8FB6kEvP9whx/n%2bWcKozVYomFgGg6j0BIMuclcg6WQzC3f3nC2x4MhlHKYA4jlKKuQRqfwDR%2bKCYrl5jXvKKUpe2EnQy5tMC/OIAmCYUnVKXs9GTUpdGIAXgwSW2O4uA2LHnEYEwEKYb%2bnNWXAQwWvU9NLTDjpkC6gMgFKzyYfDXjgBJ6aan03KpuAAgi4DvybJCBZztkHoi%2bgp8F/gQjGx8URWKJwfxRKspiz/2A3xmmCb7p0hRsFAScb6k%2b1FVji/P0c0lSwkZVyvVJScSgUCURRclISGzmxyk8T0uw4Ock2h1X0JGp4ePkm20wXyLWhD4dGaMISWQJpMJXqTQClIZ%2bovntC36PGdJFHcpFMX8VCyW8EqGjmozHo8o5CyH%2b2v7RX4BwPjQd3StkxZWEQLcLDpq0lrX19bWjHQMKT3BWqF9NMAloYbwq4ac1VJDiPkm52b9HIRA5nHt0rGlITfYKGtBErw2AzAaDon/eDLWNQ2FFgqemijwTx0kFgAkK4focAi3pkETLRT9TItZ%2bKY1osB12i3klaRk4ZhjQ5IQovTIwAnGGo9XbMsGJB6go6Otz9bgSEZn2F483%2b1SKERknPkEBcBwOIBaiDgtzMrKFDYxoK2EC/Rd0nMArB4%2bSgcpJnW6rifi4EEeUsERdNRNa3VlJRRtJtN1kYgsvaRnHgTnc8CywI%2bGZhikuQiE6VpLAIgADgJAkvQBk735mfWms%2b49%2b85S8cmh3jQ0%2bk2IRPWB65TCTrvDyWNluiL6FVU0m0gKQkdxyVpoL600%2bfkXEovZihyPxiOUAPBZ5Zee5EAEW5cAjMdjgI2Hw376goelCAhJGIo3bDG7QmdXJhNXvA3pW%2bnrn5mMHugn4hzAE3g3m5cYZZsr7HU4u9%2bSlL6q2L/pKgiREQ3HknAxT1HYshhkPUUxbRmYn1Exu0gbh9Lu/ULW/C5EoNYx6T2ASPpbtkX7QfqinEhnVoPITlvUozY1EtLTnVSr4pUELOM%2biUjvQhejP2ktX287LVWUVDScHlUwiihkQIGjumFCEiJOJrFzRId8Zt94CjfU6ZNhkmGAEvWhE5MV%2bZsBkK81YQ0CQoL6ou9VBLs9F8cjnWHakM2ffd8EW4xAtckF/kbaoASlHlG0LJOkg0aO62uampE3O6u/CZ9CqgobJ45fviPejSrSU5Io7X3eTJtF4PoX93Nm/5Ad9oPxwenhI8nqYX%2bwMjr01mD1W/HkUDBci8YHSrIq1Vr5evvN%2bZQUBKN47NQPfveP6/8BTLkOptMnQ0UAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1103\" alt=\"dotnet new3\" data-srcset=\"/assets/static/dotnet-new3.82a2fbd.af4d039ff67917e6d49cc0de520f1bff.png 480w, /assets/static/dotnet-new3.69d4f9f.af4d039ff67917e6d49cc0de520f1bff.png 1103w\" data-sizes=\"(max-width: 1103px) 100vw, 1103px\" data-src=\"/assets/static/dotnet-new3.69d4f9f.af4d039ff67917e6d49cc0de520f1bff.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/dotnet-new3.69d4f9f.af4d039ff67917e6d49cc0de520f1bff.png\" width=\"1103\" alt=\"dotnet new3\"></noscript></p>\n<p>If you take a look at the screenshot above, you'll notice that there are a lot more options available. You can list all installed project templates and install new ones too.</p>\n<h1 id=\"creating-new-templates\"><a href=\"#creating-new-templates\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Creating New Templates</h1>\n<p>Creating a new project template involves taking a folder containing your project (Mine is called Api-CSharp) and adding a .<code class=\"language-text\">template.config</code> folder to it containing two files.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 335 781' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-48d4bcf28d90557070d1240080396f77'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-48d4bcf28d90557070d1240080396f77)' width='335' height='781' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAACVCAIAAABn%2bGsVAAAACXBIWXMAAAsSAAALEgHS3X78AAAgAElEQVR42s1dB3Rc1Zn2OXt2s4RkQwjLWbDa9N5771XTZzQazYym9xlJo2bJljE2xuBgWGMwsRdIAsaFsvQsEJYSTIDNZnOSBQLGOAYDBixhQwgbmm32v%2b%2bNxoJgY2RJ1vM9T2/eu2/m/e/%2b5fv%2bW7zkmdf/74svvvj082OfHzv%2bxUm248ebB8ePHTt%2b/CRXZ57DSuOWU9TGvu6kv3s625J7Xjiyf%2bqjZfftWfnwa0c/OPTEk7/%2b9POj702%2be%2bD1g0c///zjjz8%2bcnhq6t3DRyYnP/zo4y%2bOf/bM7t2TU%2b9/9uknf/7wz58fPTo1eei9ySOHD01%2b9NdPPvvsU1y6t994bf%2bfXn3/zx/h4n4wNfXOwbf/9w9/eOvgIbj60V/ef%2bWPez/59NNjRz9/dc9Lk4ePgAzvHDhw5IMPZyPADb9%2bx7blt8prnhu6d//U3hev23T9rh133XvHHTdu2rp505Y7b9m2befOn/3kpquv2HDtxuue%2bZ/f733xxa0bN/3059vu3H7nz67buuP222%2b6bitc3br1xhu2bN33%2bpsffviXl1/43d33PnDHrbfeff%2bDd9xy21WXX/3qvgP33337T6694aH7H/z5rdt%2beu2/bd9%2bx/PPP//b3/z3fz/37G0/33bbTTeuv/Lql/YfhGc6duxbtMmSh/f8%2bdixozfsfn3jrw7ACz50aHJqEl7pEdhPTk7tff75N9%2bdnHz33UOTk4cOwdHUxx9/cuidt6cOv//Xv3z8wm9%2b%2b/bkYbg6NTl16NChd95596%2bffAJf%2bslfP4L2OTz53jvvvvPGG2/A%2bc8%2b%2b2xqCr526uDBg2%2b/c2jqELTc5Keffvb%2bkSn4wcNT78GPYbd/%2bjVad2oBfr0fNRxqaWjvY0fRzccbG/5dx7H3gevGcfR6jmEv6djRo%2bjC8cbbatwBpz/HNrg88zHgLLr3eMME8NqoWuO%2bxu7o0c8/%2b5bbkkdeeHfvy3/43fMvvPqn/W%2b//fbhI0f2vfryiy%2b9tG/PvudffOm1AwfeP3LklZf%2bCFffeH3//lf3wUvdu2fPnlf2HnzrrTcOHHjr4NvvvTf1%2buuvvbRn7/79%2bw%2b%2bdXASa43Dhw/ve3Xvy6%2b88uabb8LHqampV/e9/Nq%2bV/f/6bVX9v7pLawa2ia/tE1NvfdttyW7933w0ovPPfbko7ffves3v/s9vJ69e3//5O7HHr/3kW23/3LvG2/Bmf2v7Hn4Px559JeP3Ldr56NPPPb7p//r3nt/8fRzz/3yvof3vPBHqPDma/sefvSxx558/KGHHnrgwf947QDcdfzFF1585lfPPP3EE4c/%2bAs0yLP/9cij999z165773noiaefexb0Z062JVseePb%2be26//Y5dO3ftvO%2bBB5999rl77rlr65Ytd%2b64Y8fOf3/gFw/t3r17x/bt11%2b/%2bY4779yxbduOnTvvvuvfd%2bzYuX3nzjt33fngfff96qnd9997z5YtW3fu2rXr9ttv23brg794%2bKmndm/bdsumf71ux44dv3z0sccff2L7zm233Hzjju27tt7005/ecsuvnnzqMTj9%2bBNnWJZQDWEWjczh8oRCIYfNZjAYXC6Py%2bXyBXw6ndbS0rp0aWtraxuRSCIQiCQSBQ7aOwiwR2eIRDhuWdq6tKW1ra29o4MAhUAgQf2LL25pbYWL6Az%2bJS0tba1tHUQiEa8GZ%2bakLOE6EjIRTyKV8fl8uVyhUql4PJ5EIpFKpSAGjUan0xl0Gp1MpkAhgQgkMoVKI5PIcIzOkMh4Hdg3C7oFK1/5CEd/W%2bcMyxK2LS4RcPgCgdvt3rhx42233ZbP51ksFsjAZrPhESkUKoVK12h0Wo3G6nCatHqJWGY0m0xWu1ant9qsAh4PSQXVzkZZwrHFRTy2VCa78sor16xZ8/TTT2/evBnUSSwWs9kcTAB440xXpycYCISjUbfD4%2b50%2b4MBX3fMHwyGwiGpRALqRKXSzpoAQi5LqVKvXLmSTCavX7/%2b5ptvFmHbtACoHjQ6lUJDOkOmMJksGo2GKQ%2bjWeHstgBLJpdv2rTJbrdDIyxfvhy0H2sBpEL4qyVjteEY%2b0iZPo/UC5XGRlv4dkA2IOZzBEJRLBarVCpgAEJsE01vYNMioRAcE4fDZjKZbPjDZsNJEJLLQf%2baG5PFgktgTqIF3BoCiMQSMFzwofCIzWtgx%2bCXvF6vQqlKZQtD9ZFLL1k7OlgfHq4Hw12FYnFktF4r9w0ODC4bHRmo90%2bsnFg2Our3uKD1FAqFfEG2pgBiyfQ2Uz6DwQDPJFeq6qPLr7piw2WrLr/ysrVXXX1FpVoZWz6%2b4arL1qxcW6/UxkZHrrhy3VUbfrzhmmtSsQifL4Cvli3IdkIAeFzx9NZsAagBH6USqQptSqiiUqvhJDyfSqXWaXVKJXrTCqVSrVZB6FBp1EqlEp3BWgD2WN0vbfMoAGi2QCBASv9lAWAvFAoEQiGcgT8SqQROwhk%2bnycUoaYTipDblUplUqwB4Vgg4AvRPQLJ9Bm4RySG75TOkwASiMTBYBDs2O/3w3FTALABmVxZq42MDA30DfRXK6VIJDowBHo/tmJ8VaXY6/H6BkeGh%2bq1TDrhD4ZXTExUa7X64NCy0aG1l13qcTnS2Vz/4NDA0MDw0FAkFAD/MIft0IjEPD7fZrMVCgV4/eVy2Wg04jLAwbJlo2KJfN0VmzZv2rj2inXr169bvWbNVVdfueGajWtWXLZixeAlq9asu%2bLygYHi6ktXRiKRVavh47qN1/5k0zXrV126Am7fcNWGkeXjIxMTm/51Y7WYxTDLHAsAvpALzzo8PAwaXK1WdTod/AzoNPwSaALUg/Og0GinVBqMBrVKBR9BYUD59Xo9ru5aLaANNRxpVGqZVIbdKzAYjOhOhRJu1Gg0c%2b6dUCAT89mgQqPYBnHA5XJBO4DWAiwFrwrOHXY4MmOgPQ0LWShmofAMwI5CgatQh8HA/TAL36NbWXAjHR2jM8zm%2bTksSzj2OJ/NMJktmUwGxSksSOFmB48OeAGHnPDb4BxBBIhT0FwQrODdg1ljHlPJ53KJGDhd%2bNIwYjAsHD403WgTSsBrBnwPcRr022i2pdKJRCKbS6dr9ZFqX386nRoaGDCp1QDxzwqeO%2bGFmu4f35oC4PVASaAduDwBUn2xlA%2btBG5TKgM1A98IiAJDStSzKMCJQPa1AuCIH/QE6BW8bGBb7e0dUBBBQ8QL/iKCBvVxsrZgKPWEAJjVcsH5fEWFZtYGdYLXzmTzbBYLgG2VUslmsfUGk8PhdDsd4LswU0FQkM1iLYwMDQHEEilYcCAQsNkdDBYbi5sYoUF4mQaFSqMDEwYKVq3WlHrL2LLxkdFl5XLR5ujs7go7XN5apZzJ5ZdNrBroH6z117q7gsgqaHT89vkrjTjA5fG6QqHVay67%2bqr1PpsRuVGJhMNiUokdNBKhWehkIrmjncOgCTnccMAr4XNYVLJEKJBLRDJwSByWTqUQCwVep03CZVIIHVCfRiLCnkkhwZ5OIs78tjkp4EZ7wY0aTeYHHnxw87XXZAcn4pfdLJKrQCqSzHK%2bMnyBMniBMtQsF6rCP1IEz5P5fyjzf1/sPU8WgP33RJ5/kvj%2bSeyDg%2b9jB1DhfLyaPAD7c7GacDzzq%2bak4IGMIxCJV02sWH/Dz7479Mj5P37ln7NbpHxWq7br7x1j59iH/tE%2bPLP8g234At%2bK7zpHWyJrLvCv%2bOfAxEVdl/zAPUZIrCPFVl/UdWlL96rvu5Z9zzV2YWDFDz3jFwQuMYze0BFdfZ577Du24a982xkWTIX4HJ5QLOOzHLXLz12/z7n99XNGnhJJpG1qP/zeudb%2b71oH8HKudeA75v4LPaPlDdvOtQ1G120f3XrP4Oa7hn7yi9Eb71m146HxLXdddut/rt32QGBii2fixr6NO0dvvm9o0x1j/3ZfdfP9vWu3nmOufddab37hmZcTcUAkELAEkgtr25eu/8NFXavkPEaLLvz3zvFzHMP/6Bhplu/Yh7/Xuez7rrEfeJaz0uv5havpqSv%2bpXtd8Ipt6vpGfnGDsHwNr3Q1I/djVu7HovI1nMJVpNja1p7LnKu2xS7/%2bd%2bZ6%2bc4R2d%2b4RmWGXFAjAkhFDFkejAAOKYKlRcJDEsF%2bq%2bUi/m6i3g62F/AVv%2bIpTqfofwRQ3EhW/VDuvw8uvI8uuIHVPn5TOUP6Qoo59HkUA3qtPB1rQLDv/C0S7HbL%2bJq//abZ1G%2bEsiQ9wSvgsc0zAuBpRNPVhhkErgpoDxqmYjLYkiFAnBQbAZdIRHyWCyL0aCSS1VSMZNKQY6Lx%2bFz2WIeBz6yGTQuk0E/%2bTeffjmhQhB%2buNiGpySmE1sQLGgnKyQShcXhFat9A/WBQqFYLZdLlf7%2bgeGRkXoykagO1Lu7w3AxlcnU%2burAeJydzmKtH%2bB6vlzpr49IRUICkUyl0k/xE99YTqRVAOQA%2bXK73RBrpzNz7G%2bIpgD16AylCtiBGqC5FKUEgCurpBh/AKaskAMXFSuUqALwUJvd6XDa5UDwlEqAUhA6zzxaN1OL8sHBwf7%2bfgDVgDZPVwAKFdB2G4JFKOEMoZpAIKBPHQS0wzASFDwdDZ9QVphMRtWIxLnCSyiQ8Vg0t8cLTHLdunUrV65MpVI4pZyZWjzJ01PoDDa8ez4CQCLgBkAo9DoD2BEAVeD1QFXBqjhsYBBAWvkY3sZpEH2usDcuAN3h7ARCvHr16rGxMSCWoAbQCN8kAI1MIjE5gmIZiH42A0ioUC5U%2bwf7%2b0ZGRovlGiAll9eTzxbLpWI2mSoU8iIejzDXaeAGpYR3Fo1Gs9lsrVbr6enBuwi%2bUYVoGJySYcou4AtlCk1XJKqUyw1GEzBjmVRudTg6nU41GAlSegkQyzmHqCcYmUAgAM0BYg6O6GRwuqk5eNodNBt4Aup0aSfgXTj4HvEEArG1rQ2cGN6jg1%2baD4D9JUYGagpinIIP4E%2bPs2lgaYCueVwuqASwZyDvsAfWj3oTGAzknZRqGuYi5zVrfbqMjDKdXoe3azAYfT6fUCwPd4d8/lC5AK4rG09m04VCMpmu12rwsScaHxleFvT74M1T5pMrTwsgEuNZdQHKIAq/sQXgZdPoTADhJrPZYjLI5Qq11gjOX28wB71eiAwGvdHu6NRpNeR57n3CBUB5IQhk4HyAFuIu6BQ2AHqPp1tQRyT4e0zFIQp0YMdtbQ26jM4TSfPfQzNNaG688cbx8fHR0dE1a9bIZDKR6OvdaLMFqDQG2ACfx6PTGSywChZHJBSBj2ey2EKRmMPhLEyHTTMOOK%2b99trrr79%2b7dq1IAOE%2bq%2bNA7gNGI2mgD8glCjCXUF/MDxQLcTTmWqpViwVapVaLp2t1YfzxSJgOwzqLJAAnRs3bty8eTOIsWzZMqwFRKdoAQaDSaMxjGYzCGPQacVypdlo0un1TkcnwkBqDVzistmk%2bU9MNFTIZLbcdNNNExMTEIyhHfCk/ski8XQcoKKud6zXnkQk4Qc47EGpIXj5ZNT/txC9lCgSSyS66Q2M%2bNSBDM/pwl%2b1WsflIiHBDEDpURc8laHR6dksFoZ5aAua2BLM2E4dB0BtIA4IxPJQyO90eXLp3mg8UUhnwpFwKBgZXb6yVqv0xuBcUioWEea5D/xLgewUudGZPhRP4NGZbJPZarHaOp02lUZnM5m1eoPVarfYHJ2uTr1Oa7bZgSWhTvwFy42ejgDNOAClvR2jAWgISmMIS/s0ByASyUQASiTKgiZ3T0cAXONBmZhsHjh%2biN2g%2bMDM4BhQPlg/YDaUUcT0jUKlLi4Bmjbg9/kFEuXw0NBwX38qncyl0wPAAfKlFRPjVrMeWmDB%2bgpm0wLgXrkcLsRfQEIGrd5isdhA952dyCDsdsD%2bCzl4ZfY2ACjt4otb2qf5Lg5%2bcBSE5Quoi7cFUIcfqDmDbTIagRngHX5UdIlKpzPFYilUOAsdHN/CBkymYDDIEcpXXzKeyaR6eqKFfDaRyVdL5VKpUqz2V2FXLgHGWICOs9m0ADaqhs1ic2VSsUQqN5nMyVTK4XQ5rHaNRmO02J0OKA4gxwtgDLO0AQSHSGSA/hgnRk9JxAlxByIGBAKJgHrKyA3QsdgEoGKjFgH5SyRi9NwEEsbiCW3tBGgbqADMBnXPUmkgIQiz6GwAOLHX62XxJatXTeRzmUB3JNnbG4n2JpK9qUKxmM2FemK5ZDJXzMfjCU%2bnc14tYTZYCM/DMZgcl6vT5w%2bEovFIVxBQHUhlc7jcne5Oj9dhsfgCAbu902w0zKslzNIGsCQPuaUFDc5lMNkdOAkm4AaA9nhkQMawqFSoyQfgPDw3EDfAa3RoCy4faDJYLp6%2bnTG%2bkUpZVEbcxELBQJDB5mWzmVQyma/U0tliPp3qTWe6g125dEYk4CFIR12UkRj0h8fjw3UqjeFyeTxut1YPvMDhctitbn%2blUErEonweF6pRFzMWImJ0HbcBMp4exUAR3Af%2bFD09Bi4WqQA0BPcpDBZHp9cDGehoJ2BjPMhwFygYg85sMh6sh4q6GONAVyjURqLny5We7kge5YIS6VR6sN5fLFYyhWK0JxLrTSR6ezgs5nyTstlxYjRbAtyjWqszW%2bzdPVGbweDxgt/3d3V1mSxWl8tlNJkBEXHZrEUnQJMP4P0DABZaW9rQVA44aG3DRxNNZ0gJxPmfVzAbAfCRTwwGk0Fn8Lho9gM8PZlCRcP66CwKGWyaDKQNzkBwIKL8Lm0R2QC8XZ1O73Z72FxBMpVOJXtj0Wh3NJ7NpIvFQiZfCgW6usKRcl891RsrFstGrXpxQQl4GgBCCrkCwHKn2wNwKNIdCXfHIuGQ2%2b11AzYKhCORSCyRjHSDJFG7xXgyjj8nUp2RDeApIBQWEOYhnvjY6C8jd6CcEQljm%2bB96Ti%2bwEIErelnmyfPhg0wWDwOF5BcW2sbxC5sbCuLhIIaic3mggwiiYzNQo4I%2bFtLSwtG%2bQnYfC0SXyBEA0toNDB9OAmFvGBxQK83eD1eFleYyWZTqUQqmYr2Jgv5XLVSzherkTCQ5FitPgzBoViuRHoioVBPuVzq6U2mkulMOh0KBPLlWi6bSeYqfX198V4wlnisJ8yk02eRCpiNDQgEQjnwXTIVeLDT6QyFwqFwNBwKODvdTrfX6wt2hcPd0Vh3V9BitfkCIZ/LY7FaItFEwBdw2h1Bvy%2bVThoMeiAPXj/QoVin3eHzuFlMxkII0OQD0Bz4EFGMCiNtR%2bwSswGcGQPNBJiE9xDPTJti4ylwqkAkNCkEgTQ73DFLAQio/4LS1tYBAQvFrI4ObCpiY2gH6lqddjK4yU73Fn/ZZBsGfUZDfmcTB9RqjcPhYLC4fp8vFAz4A0GPx9vVBW7U7bA7nA5nuCusUSg6FiRD%2bq0FAGWQSqUatQY8UL5YTEAsS2d6emLlfMbldoW6wvFYDARQyGSEBcmQfmsVwmWAdkD9xNgkVvChS5e2LG1pnTk6CI%2b%2bVMoJnWmWuc06zjIO4M8BoQCb3UqD2iwmE%2b/ZxsyDymKykLefHgGCEX7cPMhMBvPsCwAhlMbkZotlj8vpC4Uz2XS1UvS4O0NdEbfH4wtF8ql4MAisIOqw2TRaPeAjjy8YAqPxB502M2nuEN4sM3MIEYll/q7uwaFBYPYmgz4Wi3cHA06Hp9A3WCiVMsl4KpWNJXpDoRBQhYGxsXQ6E/R5gP5Hu/2EuUt1zbIF8NLWToCgBg/SyJZSqKAkHJ4AAEIbggZwHkubEokcvhA72cFkcQQ8Hp56OfsCAMjpwCJXY0YLBWV8ISjwhWIehw1XqdgkXiqeLMImDcHXkRaDEcODMjn8bkDMQb831GW3WfVGk8fj9weDXT29I0MDid5op91Jx5rlK%2bmtOR4zNzsbAGzAE8r6%2byrVaj5ZrCSiEUQEgAn0RLy%2bSMjnBj5QLZUY2Az8xUgp8UYAU%2bZweWwOD5A%2b4AjQeBzqQHAA3q9Rq5F24a%2bc/KUp1fh8arzQZoAL6pePT8dTnZEN4LweG/dKZGAjEpHLJxBB10EMiG7gLel0BhFhCjo%2bdAIkBFMGIgHyg8yNMbGA%2b6azBHiSmDSNAudNANShx06msnar2Q6g2uFMZLJOm81gMndH4t09EYfd6nS6AoFgtdYnVyrDkWg0GolE491en9vrSyTSFosZiKjX5/NA%2bHACEvd6XZ0Wq9Xt8dqsVrFYYrc79VrNN66XMPs4IBDLEpk8MoO%2b/lIuHU0mexALSBQK%2bWi8F4w4GotHI%2bFcPh%2bMRIuFXE80Gk9mMrFYd3c3sIBoTw%2bqlUyHQsGeSE8ml0/0wBYJd0XgPLCKUKg76POSScRTK9LsVQixMwJRIpGKRBIBjwuKgXKONDr%2bzkBnyGQy7jFxpcfMmYqvroGPRUBqg81zxJNfiA9gSohjb8znzqsRk8l4RgggHfwony8AdSZjv93RDiZAwAAf9vTT0J/yZZeK8QR8SAVWmh%2bnu0PnUQB4dDaHb7Xa7DZ7p9sX602CktitNqVK5fH54KTN4fAGgnwUzsiLzo02sVAEeEAMHj4L5tkbj/dX%2b7PpVLlcBaIf641HYympiE9cbAOeTjQC%2bUS3AGK1JDIwNY1ay2GxIQ7g4BnTCgqmSPS/JQZnGwthdonNOW7Qcyy524ZFNBSoSBiRp0AEwIgoLia6SiSTGrSBcpYEwFSIJ5Qk4lGdVqfXg/c322zgvm1Wi1Wv1wMh8Pl9RqPBbLE5nK5Eb0yv07tcXqfTYbWYFXK5TKGyWKxsJuvMgd2sbYAoEMvLpZzT6QROnIzHkulsNJVbVq8n4rFITwLocqmST6fybqe9VCnlMrlyqVzIFyrFTKers6s7ms0XlVLxmfPmM4ISNDqDx0Pz7mnTOk2nMxl0Jj4HHw3Rx5aOoVHRxPoZKyjR0NBZJot61sEcoB20DlVHRwu2jBXWud2OR4bWFtTZAbSmOVAWj2WNg0Z6%2bKzyAQab53Z7nA6H3enudLlsNrtapYJjrV4P%2bg3GYLc7jHrtHJKvuTViIk8sL2SzRZSjLXTHE/X%2bwWg4BBCm1Nc/NFiv1/tz2UIyHqEsRgEaYuDrS6DhZ2TkLNG6X0wWW6XRaFQqJp2OQX06ZfESGjIFH/GH0wB8gQACNnaotQ1FA2yOIXWRCoBzYvChBqMRrMDR2Wmz2mQSqUqtMZvNRr3J4wsAJCbOf3p0ljYAoZQrlGV7E7WB/v5KMdDdUyyUe8KRrnAoCvCoO5ZMJe12G2ERDvo7Ec6wzg690ayUSdHwONB3emP1FFzBFmbs6xnZAL7iIBYKUBcHaD/q925txQAPMgbSIu3oxlVIIK2Wi1aLCTiAUgk7rRrBUY3FYlPIpVyeUK838rncRcoHUA%2bkTJXPJCIYtR3oq9Zqg9FkemxkpFKsJNNJXyCULxTtZkN7O2Ex8gF81Ru01hCdwWZzdAazw2aDKCAUCBlwhsPlY4Oi2Cz2fI9BPiNO3OjMw3rv0IQgzAYoZCo2H5TQhnUAL9Y4QKbQmWxgAjqDUavRABkwGIxqjRY4gUyuBiSkUCj0RpPBYKBSKIvSBjoIIoV2xcR4MplORWMDg/3FSn8hl%2b2GQBCKDw3V0%2blMsa%2ba7M1wWLR5HTI026wE8kJiAzbXExTebDJz2BwwBggCVqtdKhIysAHiuJ0sShvAPCkA/mbHXnMCaCt2Eo15agyFJc6rJ52dAOjpOXxxojeqVimxRfYEgVA4GAyYjGajVi0USZwOu0GvVykUcpXWZDLOH6ieLScmEPlixcjIYLVcTmVLg4CI6n19/bUCaH453%2bly9yYT/eVSMh5PZorBUIBMJM7TuK0zwEI0NAddIBDi64ui2a8sNovJ5vJ4cA6Mgcfjwzcwmcg2KBTKfIx2OrPEFlr4mIyvhNE%2bcw0MLOGD9Rk3hkDhoGhmyh9jDqjPGFVonCHjlfGpFae/gsDsbYAnEHu9HrhNqVBJpDKd3iDBFrO0250QGoRieU8iYdLpoT30OsQZ8AVNtTqL2%2bUUi2UGgwl%2bAyAUnFTp9DK05htaepDL5rDYPJlMfpoLl8xWABKZzRPkcvnRkZFMppjMZMvFQiqZgI%2bJeMztcueK5Up9cHx0PJ9JpZLpoeHBTD5fLRUy6UomkyoVy4VK33B9oFgtV/oGav31Yj5XrNQquUIul/b6goCtzAbt6eCo2asQ%2bHjQcg6XC1SYgS3JyOVysclBaG46h8NF89ZZHHz%2bOhutTsJloMUamVwuj81CCzuw0coCaAo7B63cy4VvgU88Hg99ZKPK89cCDTSBr17eUG409ZOMD3jCFzD/yqKI00OpKSf6lVHHMuzJeFcDmTKdMmpenVcb4PJFkUi3UacHAzCarQa9Ad6xVqvlcDgSmVyllC/eqYi4C2Jx%2bIVCIZ/O14eGcoVibyJVKJQmli8P%2bIM90Wg%2bm2Qy6Itu9PpXJiRCEOBz0cKwaGUGNkcuV9ltVhaLIxSilVqoi7kF8MxKB4558IGgRHJ7WwfOj7HpY8gqFmBG5Rm0APgTDgc8jM5oMWhUJDJViK1vAq7JaLY5Op1CvoBBn3ctmn3/gFCqHB9bNr58fHDZ8v5K3u8PpDMZsIp6rZot9ZWqtfGxMa1KjqXoFh8nxvpxGRKpHC1AjS89LRShv4BMuTwICSKxLJFMoulM87y4x7cTgIj9DxD4oCBc11F/3vR6GO3T4yamR4%2bSF5cNwINCiOULhGKJzOXxWixWjUZttdvoNLpKo7Va7E5Xp6OzU8DjQWug/xODx19EAlCxqak2G8rkSlT6FSsmlq9cWcpl6gM1q9XmD/j1elMymy1W6/X6YL1UyOaLid44mvW6qLwQPgmRSmWAqwGYCe8YQCS0AJvDk8sVAEU5HACSCiFyRFaFXA6%2bdRGpEGzYCAhkB9ioHmyyT3vDBrAR1Mj7o8k/BBJuEug/S0Erx5AXgwpRAadpdUazychgsoAEo//sgS9Uq9QAHtHKkgh%2bshkMFpfDBQ/FRv8lBJfJBNyJGD0Gy1EAAACsSURBVNn8OaJvYQPwUjVaI5DfXLlYLJUq5b6%2bcrFaA6UfHhgc6KtVe%2bNxn9%2bT6M0lenpKtb50NlUs1/r7%2bkN%2bN3ius8%2bJsXwoA1RcqVRCC9jsHp/LIVeq9QYDWi9SqdJq9Uq5VCCUmIwmrd4QCIagfZRKNRjD/OXnvp0Rw0cc5DSnPkwP9sCXyEM0ADY0XqijsWjeaQ59W9DR69PQAJ/WQP3bMShfOwpxnsr/A6ayzMp6GRTbAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"335\" alt=\"Custom project template example folder structure\" data-srcset=\"/assets/static/Custom-project-template-example-folder-structure.9c9be8f.500a213c87c1fb778802074b8c207ea7.png 335w\" data-sizes=\"(max-width: 335px) 100vw, 335px\" data-src=\"/assets/static/Custom-project-template-example-folder-structure.9c9be8f.500a213c87c1fb778802074b8c207ea7.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Custom-project-template-example-folder-structure.9c9be8f.500a213c87c1fb778802074b8c207ea7.png\" width=\"335\" alt=\"Custom project template example folder structure\"></noscript></p>\n<h2 id=\"template-metadata\"><a href=\"#template-metadata\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Template Metadata</h2>\n<p>The <code class=\"language-text\">template.json</code> file is where you specify metadata about your project template. This metadata is displayed when someone lists their installed project templates. A really basic one looks like this:</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Muhammad Rehan Saeed (RehanSaeed.com)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"classifications\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"WebAPI\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Boxed\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Tags used to search for the template.</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dotnet Boxed API\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"identity\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dotnet.Boxed.Api.CSharp\"</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// A unique ID for the project template.</span>\n  <span class=\"token property\">\"shortName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"api\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// You can create the project using this short name instead of the one above.</span>\n  <span class=\"token property\">\"tags\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"language\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C#\"</span>                        <span class=\"token comment\">// Specify that this template is in C#.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sourceName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ApiTemplate\"</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// Name of the csproj file and namespace that will be replaced.</span>\n  <span class=\"token property\">\"guids\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>                                <span class=\"token comment\">// GUID's used in the project that will be replaced by new ones.</span>\n    <span class=\"token string\">\"837bc53e-0271-4e9c-b5b5-c60ea7a7c7b5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"113f2d04-69f0-40c3-8797-ba3f356dd812\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The templating repositories <a href=\"https://github.com/dotnet/templating/wiki/%22Runnable-Project%22-Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wiki</a> page talks about what all of the properties mean in a lot more detail but I've added some basic comments for your understanding.</p>\n<h2 id=\"installing-templates\"><a href=\"#installing-templates\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installing Templates</h2>\n<p>Installing the above template from a folder is as easy as using the install command. You can also install templates from zip files and NuGet packages the same way.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1103 639' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-7a743587726e4549088d44bc9b1da4f4'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-7a743587726e4549088d44bc9b1da4f4)' width='1103' height='639' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAlCAIAAAB9MnhgAAAACXBIWXMAAAsSAAALEgHS3X78AAAHMElEQVRYw%2b1YWW8TVxSeGc/iGW9jezbPvnjLOAlFlQqIxjaBlpf%2bmVb9P63U/9JKValQH/pQhCrCkoQQSKKSKAjafveObWwSQqBScaQcmcmdO3fOPct3vnsG5tc7j3689dvDJ7uPnuzien/z2b2NbYwfbO1s/3W4c/ByHn4TS2Dh4939vcO/t/YONp/u3d1%2bwfx06/YP33%2b3t7Oztbm%2b/mj9/tq9Z9tbTx5vrK2tvTg8/Gc%2b5NWrl9ngYP95ZtULyMHzrecvmeHNr7784sY1KqtErmcjXAaDQX9KhsNhf6XfHwzxCGP8yeZXVjDbx%2bJs0M9uyLuDwWiA0TC7zfRAxkuzReQp/ZF7qCF7jZ8Ta67DqtWRgeTuxuXLV7795us/N3cZXlEZhuFyuXw%2bL4piLseJkiSJAh3nMC/lJXIjigzLCoIoYcCw9MfgFaxVCgWeJw9kWcFKQeCzFzmOwxqez%2bVlmc%2bRSYHnsX40KUl0scCyHEtniPCiwAuKImNSzsu8QJRhX2ZWsBDXq1cu/fL7XcZv9gLfS5qtpeXFMIwMQw/CyPe8BhXX8xy70bCdhmUVSyXHdQ1dg4eVSrlYLFq2bVmW53umYWiaFiUJluIt0zSiOOl0OljfbCaLi8sYmJaF1WEUQScULvZ6nW7Xshp4Udf1brcTJ4lpYpUZhmG5XIYePLUbFj9yjgaFDkg0Gab/%2bdXbf6wxZtBK4ojY6jqqqjKnEPYUa6q1uut68Nk0tFarraqVbB7OO64TxbFPxCPaaIBhahAE7HGq2bFw9AeBS5hfHQ7Wdw8ZqVTnARuKGYlIXkHy8nlZkcmMKCLX%2bBEMCUKerhBp7vFsNE%2bXSdmj8Ssk%2bTxPbyWeijhWhRmJalMUZfQ6VZWJDCDK2D9P8TnaQqCSbUYGFIerw/6Dp/uAUAqQOI4LMDiOF0cxskjD4yOHGdo%2bQNRq1SMabOjhqJIs0iiYIAhd1y4UCoDKJMau63a6Hc/zAaIw8EzLhklyXjpWeWYVHHj4bJ9x4i4MrdVq9XodwMV%2bQCRHNmM/2HrigKrato2KgpV1TZs4ALv9IIC5CDNKLpsENGDv4mKPLK5rIYrSIwBDJt7tQNi94HtuuVSEXgPuN2yUoaHr1WqN%2bQ8CRUEYoApR0LmpDBSKRZCE57ngAN8fgZ5jOc8jNjebzSCAIQGqGTh5WwRnHPCaKUIFB3DVDaNSUbFrSLLfANw%2b2AFdNxBU6EQ5TM8jAzAUT1AAcZxMihZ0A6NNw/RQ%2b56HZScon3EgWliOoqhWqyL8EQoASqwGUogxYIA4lYpFRSmAT4qFwulBBSRAbUWtcBw7TV4FWgOAB2oUXDmBEEkAqQ03iRP4ffJGMw6kFy8lSaJrWhzH8B1XXdNJCQe%2bZVq93qLrOGFIHiHv4IBTOmA7bkBZ8g32pQ5EoA0YkZEJMYgX03QBW3a73TiO1Oo72HzGgd6nV7R61fWQ1oYfRvVaDQcOImTA%2brRnGCbOB7hDwSBmL2dszBEZDXDFUYsh8xoSDo4k9gix0yIOEQtAKAjDbEGOF9rtFhzo9VJwyWgXqpke6NxJDjR7F20cflFsGQaoCMcqYAMiUtVqmvagrqqqzRYhOCQh8Nx2u20YBgoxjsjxlyJFEMcGYOCnLEuTIkYsAb9J%2bTJTRQwa5XKvzYIDOLYBrU6nbTfshXQBQECpIOmtVgtbc%2byMzELok0sgO0TFNHTkHYzkun7DMpCHKAxqdb3TajmOo%2bsm6gwqM2qbYBfHCjfORXbNbELqQCkoyDfKUSFFHCCf08nJMgBDm0kMbm21mjzlj8zcd0Coe%2bEzy9A9nzgAK%2bE0zgRNq%2bPf0tISeAkl1UZ4QnL4E/VRhOKmp559rPZxBqw0TZvNVhSG0zSK9OK0QTrfcCAlUU/ShYVOu4s8OK5n00YLpI4okL6o0YCTGAQ01lMs1F1G1EG9lmnK9AwH7HjaCOCWHuJkkJdoHyBKpVIJA9xmHdXbBMQFkimXysjANIgF2kHQfnOm26lUKliJF0B75HkBWCsWigWQX7lcKRIKLJCrghkskF87UDE9yzQQ2CSO0RgiWkQ92iFZGbW%2bggAVmCRMWiTWoHkuUF6FLhhJ3ZYxZv4vmYEQKxWzZtD33YD2saRV9Fw0IzgUETAgC5UNRgexuOhPSK8no/EgTBuEOLZLRMoZexxtIY/C7Fhgs%2b8jMw5wchnabNsBq6Dwy6TpJzmp1TUYiPKt12vMnMmsA/kybvDBEcchuAgZQFxD3wMDo6ijuImPlSnaYY/G7CM7wFAInfD1wnLsXGdAcyJwJppvfPsB1eAr5CHwybFFP%2bpMbs4dkEo1sCNYBeDBFSVaUVWMMyrDt%2b/cmf%2beEJpHOaaIx5/Lx8i8O8DmS2c7A%2bcOnDtw7sC5Ax/bgfLog/Xs/HL0P3evDQcPJt8DZzQDGzv7TK7q4pOAU9Qz9BNK%2bHjiV67f/PnOxr%2b4UbxfxUK/kgAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1103\" alt=\"dotnet new3 install\" data-srcset=\"/assets/static/dotnet-new3-install.82a2fbd.0694ae4a352e4b610577013681c3fa9d.png 480w, /assets/static/dotnet-new3-install.69d4f9f.0694ae4a352e4b610577013681c3fa9d.png 1103w\" data-sizes=\"(max-width: 1103px) 100vw, 1103px\" data-src=\"/assets/static/dotnet-new3-install.69d4f9f.0694ae4a352e4b610577013681c3fa9d.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/dotnet-new3-install.69d4f9f.0694ae4a352e4b610577013681c3fa9d.png\" width=\"1103\" alt=\"dotnet new3 install\"></noscript></p>\n<h2 id=\"template-nuget-packages\"><a href=\"#template-nuget-packages\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Template NuGet Packages</h2>\n<p>So how do you create a NuGet package containing a project template that's compatible with dotnet new? I'm assuming you are familiar with creating NuGet packages, if not take a look at the NuGet <a href=\"https://docs.microsoft.com/en-gb/nuget/quickstart/create-and-publish-a-package\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">documentation</a>. You can create NuGet packages of your project templates by creating a <code class=\"language-text\">Templates.nuspec</code> file like the one below and placing all of your templates in a content folder beside it. The content folder is a special folder which NuGet understands to contain static files. If you look at the nuspec file below, you'll notice the packageType element. This is a new way to tell NuGet that this NuGet package contains project templates.</p>\n<div class=\"line-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>metadata</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>Boxed.Templates<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>My project description.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>authors</span><span class=\"token punctuation\">></span></span>Muhammad Rehan Saeed (RehanSaeed.com)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>authors</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packageTypes</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packageType</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Template<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packageTypes</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>metadata</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>package</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"there-is-more\"><a href=\"#there-is-more\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>There is More!</h2>\n<p>What I've not told you is that it's possible to add features to your project template that developers can turn on or off based on command line switches a bit like <a href=\"http://yeoman.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yeoman</a> does for Node based NPM packages. As many of you will know I already do this in my <a href=\"https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASP.NET Core Boilerplate</a> project template but I came up with my own custom method. <code class=\"language-text\">dotnet new</code> makes this all a lot easier and I'll cover how to do this in a later blog post.</p>\n<h1 id=\"why-this-is-better\"><a href=\"#why-this-is-better\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Why This is Better</h1>\n<p>Traditionally, to create project templates, you could use Visual Studio to create zip files containing your project template or if you were brave you could create Visual Studio extensions (VSIX) to enable installing them directly into Visual Studio and share them on the <a href=\"https://marketplace.visualstudio.com/vs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio Marketplace</a>.</p>\n<p>This new method makes creating project templates about as easy as it's ever going to get and allows really easy sharing, versioning and personalization of project templates. At some point I envisage a website (Possible the Visual Studio Marketplace) where you could go and install these NuGet based project templates.</p>\n<h1 id=\"net-boxed-api\"><a href=\"#net-boxed-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>.NET Boxed API</h1>\n<p>I've been working on a brand new project template for building API's using dotnet new with a lot of help from the guys at Microsoft. My project templates are quite complex so it's a good test of the system. The API comes jam packed full of security, performance and best practice features and also implements Swagger right out of the box. You can try installing it with <code class=\"language-text\">dotnet new</code> from <a href=\"https://github.com/Dotnet-Boxed/Templates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NuGet</a>.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>Overall I'm really impressed with where the new project templating system is headed. It's very easy to do something simple but also very powerful should you need to do something complicated. There is a few blog posts worth of material here, so expect a few more posts in the coming weeks.</p>\n"}},{"node":{"title":"Colorful.Console","path":"/colorful-console/","date":"14 February 2016","timeToRead":2,"description":"Colorful.Console is a C# library that wraps around the System.Console class, making your console apps more colourful. Write ASCII art using Figlet fonts.","content":"<p>I needed to write a console application a while back and was investigating the best way to do this using the available NuGet packages. I'd seen the DNVM command line tool that Microsoft built for ASP.NET Core and really liked it and wanted something similar.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1823 1041' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b83c47504e2ac16d47a6da158348f0db'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b83c47504e2ac16d47a6da158348f0db)' width='1823' height='1041' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAlCAIAAAB9MnhgAAAACXBIWXMAAAsSAAALEgHS3X78AAAMYUlEQVRYw82YSVBj1xWGn4CmgYammWmaQUgCJBBoFmJu5rkZhJpRSEIghISY56bddjYpV%2bJKZZNUdbedqqS8SyqLVLbZZJNNFtnEY8qOk0UWsWOXl2l38t33JIYuL%2by4HTd1S3Xfvffdd865//n/c5H%2b8c/PP/nXx599/vmnn3368SefPPni6X9e%2bL8nT57w%2b8XTp/9%2b%2blQ6/eGbrz369dGrPz997c1Xf/rL7//kVz/%2b2W9/9MZvjn/wZvj0YeSlx2v3H4XvP4w%2beBx9IDqrpw/X7j9ce%2bkR4xEx%2bDj2yhvrDx5HxIhYz6C8RixmMPbK68%2bxrb/M516PvvSInQ9f/cWHH/1dMvRuajrXDb1bhc7lm66V8pZVOg1DuxmGuesmHy2r3lvUuJxn9qXrpnNtgUJHUB5fLHAE07SeLMPcjQavVDaRY/UXN65k6GfSq6aLm0JZDYuMiKmCoefeVIUjUk7/jeqZ3/3%2bDxJ2ZNR78%2b1LmQ3ejLqF6xhaN4%2bJ1%2boXMhsWs82%2bGxZ/nt2fbfZm1i9gU559iVkxbvVfq/deM3ozjAtXDXP4VuAQm/Aia%2bQXhZ8pNTPPvV3Rz0paT7Fr5a13P5BumHyF9iV125qmI1rWEtJ3x8wj%2b5qOSKEtYOjZaBjcLrKHSpv6TSO9BY4xqcKj0kxJ583DRqLp7orHyqn4Y6U8JS9Q6e4%2b95ZUNS2p3YT%2bnff/KiUbF5JsgVTTYqrFf6Xem9oUopNqmEsGIU2hNJMvxRpIcfivGjwp1d%2bKNd/EgbdxQGUNiNa4LNV7VbYlybUiWf0qi09lD0oNi5J9ScUj41UzKu3dJPFyvL0oDkjmRVXjimTxS8YFqW5BcgQls0/CepNPdFpCki0ggblKdxwkNDW/7hfFgYqBrfSmlcLujZyOaFFXLMe1UtK3XdizWT68l2VeTHMu32hby7X4si3%2bXNtSrn2J39Lm1dKWMFh/IRyovr1ddXu7YWBH3xVzjR9q2tda3CeO0X3n6H6NSOIdc/%2b2fWjXOrBt6tsqsvjr%2b7aMA2T20ovigHFwxDY%2bVexadk2dYm6hY7nRfa9x8qS2f7tx4qikNXytfyfffVzo/V721Gnq0M71zliGyadyLKlMizDSd%2b9AoX0kxzySWnM32zyfUTubWn0307iQY1nItSwiC4IT6%2bYl9IiQk9NkBY%2bQJlMkhmbqOzmHSw6Uto3VDAzfahsrahp1unvLO8e13f11/YPazlHB/faxlKrpK7xT4U7WeFK0niRa1XSyTjBScvU0DUaSiT%2bhDBfa/8OB5PG9lImD5M6IqjWc6jlM8RwnDW4UOJedd/Zckzvq5hVNe6Rx4rC6O1bTu9XquVfds1HVvWHs37aO7ptH9gx9WyVNIc7qmnEBSaaTXjtPP612jg5f%2bvZpdGhXGjtRdURVnTFp7Eiae6AaPZK6NnJawvrhQ73nXqFrRdsW7pp/mayo7dsyjexVtIVLmlcR6cqOiK5rAx/wR9e5ruuK8VvZHjEN7%2bFVedvalZqZbwNjl4WsbzPJc6oa2EnqXE%2bauZ809yBpZD9peE/ynEi9m6rJY2l0P6tppWFwt3nqHhXHVbkOQdRoZzkQx4xSR8hTKqUjfyyhfdMX%2bsrU%2baCy8n86AWdQal4VamUNSOhxa1hqWxOihvp2RKTaOTFiC6TVzBS7QkQ3s97Ly0LXFNwrAqd2x/uVcj%2budwnt0yQe1Ym3xJQn3lFf3MrztR1I0bhL7IFck7fUtZJn8pU6lytcoWJnsLI1XGjx6zqiNe2R7Lr5HGsAVFBdVndvFDWugByAVORcphQvblymJqdf1R2raFujf6t5taRpVd8nBstaw1TpvFvVFavp2SxpWuHD2s51ytV8R5BBXdd6acsqpbi6I5pj8X0VyF0%2bAfX01Vp/Wt1irm2Z8phKmDo5U3SC6UZvjsXP9SDLtEh9n2sN8Is1VM74k2ulxvaxS1YDF4Zgni2Q71hiHFPy7UFlCofp8EvDmQLHcrZpkc2LnEGqbjIe51kvr6H8DlCxf20H7Hd6zSP91jt9BY6RRCUss6FSGyvI1iTK43MkuFWVbpg0jhP1ZHz8DBLnWHLHYVYx%2bezUM4MyhBKJJFLoQv/iiOxAhZs7zNvvfSilGSZ13avGgYi%2bJ3rRS5YSmIq2SF3/1q3mkGX0QHM7ShFhHoZeT9Tta7rOaB31xfCevmcT3kzVz3KtoQ6HeZKqp1MNPIoRpTHLPYkp5fFKzWyGcT7Rn2E2VS86KdX0567q52DhVPmtFGVW3oq%2bGJcHsRBYivtAWu1CdfeWfezohtlPAJKUM5KJJdvsB/Ha21F9Twx8A9m6/m0g5Bg/qmgNl7eu4QC7qNsj9YPb9YM7QJlq76YzCLqg1NLmEPjGbWBZ3hY2Dm6TGwVOkQAEj51LXCFolwVs1TC0U%2bgMojb2OwdkETvrujduupZZX966CiMbB3Yq29fK2yPa2%2bvsgyV88f0P/iZx%2beKh7e5pLmVC%2beRZoU%2b9QEi4VQJxciC9bgG/kSqCDZMSiTTDLH1ATyxJFXxmTQbX0QZxXc4wesmZtNp5LpmAnuslRhO8TCXNzH5uqqg4H0qW2VPpcwI0hU%2bfuXIohCvjRywjvgkd0HpQVpAAx%2bfZA2cvA0pyzjp6YBrebXIfm4Z2yUKuoSzGZ4PMMLY7B86JY9fEsWVkj6iwmBEiSnTZnbBxh%2bYRquHcylrCHGllh8BhTe8mjJRRNyeJwiSuAEmXzL0kF/GRc1URSQy7yKVE9Yy6I0JRUNMdI5wJZZnGRcIPvikZQLzMdwBpwzlxhE36vi1uz6QH9QUw4KxKW8Mgh3tCpmFWKhlTkZrlEyK5%2bSVTK9zxfOWxTGnjImvVCVZQSEJhkYuiofTFeGJE7VaxuGwi3xp4iyTm%2bVZLGLCmAJuycTEHw8hZzylD8wTMOLhDUO1jh9hqHz/EmYr2iHlolyLC5T652bisCFxZ61qBfYn0IMCcAKl/q2WVg4UoeQRRYJ01%2bAk3oA%2bMV94WHSLItwoBXt08clnWsoqecFYkGI1vZZl8pCJbsbi8LcLKosZl%2b9jBu3/5SKrqWi8XqyOE3yA%2bvESYwSu%2bkvgQEZYJTBvm6PABpOCa0QttU3WnG2CPmSvV02CDWcQLvicxUBJWQvnkAOnBSLr8IruxErVhUP4HjBeHEQ0%2blyHXgqzk6oec4WSOJSCUpMGL7LAPK7E72%2bRDoPJtAQwgrYUDrKju2QS7FGTse8PsI2XTKPo1U9fqF3GPSBD4ivY1WII7mjiW2%2bsIKn4WNwY5HBjDMrLLi8RY37uZb/WzjMjxCFEgcDebQvAYm5Q0h%2bjrRMgibEsupRvm4kpyRvaaqQsFiDsOqjNoyVMKhPKsfhlClVOYYrtzCJHBYoABdwWNiiQOkpekB2mAKeBeLVgsWj%2b0WyMQdaDriuIAiILEsJg1RKVp8ri8NaxQytVaSH1WMLphFraR/y01ewXFkOmcDyEICa08c%2bBcuVS6uwnfRHUoms6jEBfmxZOYFYSQOyQQN5KU3ZsEWJTBlVPc3xsnj3HANXkEzEzD%2b46xA46CJDb0bxv7KGxCvMXrMprXCTypAl%2blVE8DPyCBrfABnAvMMFdWLlA3C3MAqlT8qZrOkAFGUxYo9wo6yiPAo%2bJQvGVNiqjPn6mFtJ66gR24hegCGLaOFxsksTXgnDjkGsDJ4IBI3JG9osYQJ2bohUxFVmE9jQVViuT1bdnv7NPn6Gr7NusHd8X5TN8va17FVYUAmqdOyMVacYWI4m3T1AmDtrFDqPxWU6hUMEpM5gChX0QEMgD9EDHEjXscUfLlYs5t6NsGu6QU7gpEVkyqKkWVkmP2uabuAQz5mhJtGNpDJhuGds0j%2bxgHiLn1YyvCLGi%2bNQwz0Ko61zGOwyHhsAZ5Rjv5mKjbKHhtAXIAXePSVyRLL1mRZ1vCaDIwRcbGeT4oENIkqiDNlIyiyydw3byI9SbZLJtM%2bdquGDnKNwiMffzIMryn7VoD1plGL4RLsmIQwaCDcQUyo13VzwiaP6/2JhOZl%2bByTSILlUEF2ZpEVUdf7f7qd%2bhLDlDBAi8YgzBk1S8QS0iaaF2X7eP44Mfrlplkrfz5CtkyoVDu%2bKOsOCpZUBU1vXzJuvTfyLM1Xya301/3Sgn5xllIFScpWQ6FWCZKXCGfbvngzsz68vZ//reKyIHySUTwrXfekyCmi2E7N%2btyLF%2boJt8HJlGVt9/7QPoO/0P4Df8rQXn/xz/9%2bb%2bY9os1ZtJqagAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1823\" alt=\"DNVM\" data-srcset=\"/assets/static/DNVM.82a2fbd.5030881000ac0ab731f92266b9c34b1a.png 480w, /assets/static/DNVM.cbab2cf.5030881000ac0ab731f92266b9c34b1a.png 1024w, /assets/static/DNVM.57e7292.5030881000ac0ab731f92266b9c34b1a.png 1823w\" data-sizes=\"(max-width: 1823px) 100vw, 1823px\" data-src=\"/assets/static/DNVM.57e7292.5030881000ac0ab731f92266b9c34b1a.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/DNVM.57e7292.5030881000ac0ab731f92266b9c34b1a.png\" width=\"1823\" alt=\"DNVM\"></noscript></p>\n<p>I really like the old school ASCII art title and the use of colour. The .NET Framework does contain an enum called ConsoleColor which contains a very limited set of hard coded colours you can use but it has some major omissions like the colour orange for example.</p>\n<p>In my hunt for a C# ASCII art generator, I discovered <a href=\"http://patorjk.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">patorjk.com</a> which is great for generating text using various <a href=\"http://www.figlet.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Figlet</a> fonts. Figlet fonts are basically .flf text files which contain instructions on how each letter in the ASCII character table can be printed out. It turns out these fonts are pretty ancient and there are libraries in every language writing out text using Figlet fonts.</p>\n<h1 id=\"colorfulconsole\"><a href=\"#colorfulconsole\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Colorful.Console</h1>\n<p>I was just about to give up and write my own open source library when I discovered <a href=\"http://colorfulconsole.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Colorful.Console</a>, available on <a href=\"https://github.com/tomakita/Colorful.Console\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a>.  Using this library you can very easily write console apps which look like this:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 489 130' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-a9740cf5d53f944b6a740fb9c8396093'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-a9740cf5d53f944b6a740fb9c8396093)' width='489' height='130' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAARCAIAAADi2T3bAAAACXBIWXMAAAsSAAALEgHS3X78AAAHeElEQVRIx8VW%2bW/iWBLm8oU5jA0YG4fDHLYBG5vDGAwYDIQbEiZHJ%2bmkO3N094xGam3/sNr/Y//hLXL0jmZXGo00h/X0VK%2bqXr3ve1Uu2%2bPxeMhwyB8IYDgGss/n87w%2bPr8fZn/A7/V6n00ESfqflM/WXzr/bQ9OEBcP95vLi%2b%2b/fD7c3wEmd718%2b%2bnDZLPaXF0A9GbXunh4G6GooiLv3lz99K9/iuUyHY8vD%2bf96WRxOIO9k82aDIWeef7VTzzF7t/fFSpykucqDV0o5PVupzXsl7Wqs11GGTpbLjaHNoqhsqG1x8OKoccScVD2Zm6pVlHNpukOi1UFxTCf3wfpgpje18zAEpRHjdf7ZA08Jw2Eo/xs8nmPS78fdh3H770FOpm4%2b/JzzWwGEMTZLRfXB3sxrXfNxqA33q/D0Wihqoz2a0gUoFzdXvbmk5JaZdikdeq23WHd7gAB0FBxBgDB8QiGvaB/LTaP94j464lfa/KJli%2bAIr%2bC9JWD9%2bn5DQKhWLQ1H20%2b3uujHiyrtlkf9WTTgKE53brTs9azcqueymfYrNBZTbSh1T9fjW/O1X4nGA4NDmtt1NXH9vBis/lw71xswa0xGUCo5mw4uT30dgu44/bCHV/vV9/eJgS%2b0m0t3r9pn46KhspmBPf2vLOatmZObzc33AEeDP6%2bJMDFK3arcerUXZuMRYRyobkYVftmez0FZJlqWem15LYhKEVjNlx9fFtzLFFTZKshWQbNseZ6KplGriZnlFJrOS7otTBDiXqVpCLpcr7U1DKVMitmBLnIF3O9w/KkUqLYhDbuVbrNSq%2bVKuY4MXsiF1Wnm1Nl8AnTlFAphZlYkApHEgzNs7/BBw%2bT/bt9/XTofnfl3B8gp43VSJ30ph9uxo%2bXKIHJ/RYZi9JcUp8PYcw%2b3iRzQiROrz9/qy%2bc1n7a3LjmfgZF0r/ZOe%2b%2b6ZzP1and/WapTWzZbja3EwgFHLKa4n5/Pf/p3jzM7dsdnU6lCtnV50frYmUeFtbFcvhwDkjwUBAiNDcT5%2bEAc/dylcimAxj6UlreX5eZJyaw0y/v05rkC/gLdkNdOWWnLY1MMGUMpey00CCeLGW17SjXVgs9Qz%2bb6PuJ7FpMLh1Ls7AEZ33nKtMuOEDcE0PJmapo1aVxp7YYYGHyazX/8i6hrmAcSwBFMAJ/frOD0fD/XvGxJfzfJHiPcT0kQ5kPu7RaApbV1UDdj/OWJtSPfHi1ZFyeQopYKS%2b5HWVuS1ML8JWcNshUmgWToCvZdk3QZQDN10pH2s2qNOnAXQD/TKNCCWw0ncTCQTgPDRF%2bgBsOkonY05fk2IWQII6Q%2bPF9fnrRAS4eDQVwFJa%2b1yYW4eIBHAuxDE6FQe9HAkEm6nvqeJ4wy1g/XgpmFSEwmBvvtpW9A3ppacvrfvXgtr87qx1cuMiUVso7DdDnnWblfEzn0wiBFyemOGrBsrJzChMTkEHc2sVEv1tBEF6X5PUAfBr3a9hYdNvVs1HrcZfpalGBzVga%2bNfO3cp2CBiUnYOShPF2DZr69bw0s%2bo3C0AFQufTBdxvzq5L855%2bu8z1DcAJaMHfE%2bLj8uUYTmUqOcHWkvVSqiWn2grfqZw4ekIrEHQkmktxnUq8KrJGWVx10z2VYCLxmsh3a%2bLCYqQsydLlg0NLGXBmG2W2IclXEyREZN1mcWszchZicqaSn5tJvZRqSnG1kJ22eKuGRciTka5cT7KjBhBm9ZJ0cIS%2bFq/m4cQAgcbKGenShbzxVhX0gAe2i/NOMBnzIQEYHoKJilsbUgYRhX49bWsZt5Hu1tJ9je/VCpseyTEg1x5X4rqbX3TETTcmZWA/YMrPO9LVGIJC3ov7AQw/hhR2/aPbugcFw9sqRODMSnbapuVMbm6eOAbblI7MV11GziChIMAqbGxQIiQhX7lggrBcp3oy1AGfMKjD6cCNUbJHDoO6MNRhpgppKLynXxo0kDv0c4dB%2bYdl9twGTaIjC0uTG%2buZfS81UNOz5snaEt%2bMoqU0Rofz1w4aJfEklb90hEWbHdSyh74wbz23hr/jX4ijxR/mkWqW4GjGlMh8KlYX0VAwMayl5s2YUYjWcnS7lBhUKS1HGSLdLlONAqWL8baUuRyERC6inPC7DimmcC7mJ7D4oBIqciQMMRXV8n4c9fqf/hGObcf30oxe5dd25HvuSM/f5hc3n/elBT0Lxx7q9bzs9f63pWLJaP7HJaXnIV%2bprZl5cJOnhhcLcIdu5nHCbtuwTJwa7LLJnVnc1kyMVP68S1sSmojGRyowD4QJ4arPbdpgDUSCTE9JuBrI7LyRnOoQ3/vyg/Tn5AflY%2bl/rKmZGptpkW6ZXhnegC9%2b1kYSkdhSL/77MWwdmyOhpFMfJuy7YWxl4PkkysXYhyH7OAoZOR%2bORPoyvdSZTSN%2bZsZONdCQejY2U%2bltkxpX6VWD/zSLdEp/CgEfhhAljiiwwASDITBwYf4gCjMSD6NsFBeTPsSP8XRQ4oNKmiimkHjEh6N4Jh6UeTRFgSdQwrMJMIESO2EgmbjAAMlgmQfN0QqcIRVI4A/H/x/DPkuEIGfoogAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"489\" alt=\"Colorful.Console Example 1\" data-srcset=\"/assets/static/Colorful.Console.Example-1.0e24772.c6774b197a10297353d1f8559b167747.png 489w\" data-sizes=\"(max-width: 489px) 100vw, 489px\" data-src=\"/assets/static/Colorful.Console.Example-1.0e24772.c6774b197a10297353d1f8559b167747.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Colorful.Console.Example-1.0e24772.c6774b197a10297353d1f8559b167747.png\" width=\"489\" alt=\"Colorful.Console Example 1\"></noscript></p>\n<p>Or this:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 635 26' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3e57d9409ce95bc2310f7529ae1fc7c7'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3e57d9409ce95bc2310f7529ae1fc7c7)' width='635' height='26' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAADCAIAAACsx55LAAAACXBIWXMAAAsSAAALEgHS3X78AAABwUlEQVQoz52Q6XKaUACFD26IK6JEZBcvy0VWUSLGREUzmY4mXdJJ2799/4co7SP0zDfn93cOJFm/m87abZYQ0uv1Hdd4vZWrJNisok0aZUnguaRWq6mqahjGVJKE/iCzvYQ4hR8uDev98fQUpbm33AfxY5hsPH82nrAca5iaReb8iA9t41wkm9C5j919trwPXFkUms2Wpmhz0%2bT5ia7jdmPyHEWB1QrbLS4XvLwgzxlRRLc7NE2D2DY/GFjAN4Y5ATlw%2bMeWYZBS2ZAnnW7Xsix%2bNNI15emSbI9ecaTld7q7eGFm1mv1ap7jOLKiTEdCucmLKC7C%2bP38/OVYHtK1rerBgqz9YL9ai8ORwM2I6mvSfMiNiS5f9tnDOvy4nu9Tut0FNLHu5lMncIhvtTv9IPgrXXVFFOF6xekEShGGEAR0On1NVavjOJbVgBjIABtYABQIAbyloBKaLEep5/tUHEsdHeQr4/6E8QnKAZMUjUajsnddVxRFU1N///px2G2Pu6LcP3y8vcaBX6/X54vFgtiSKrHoK0h4GCJciVkCjDSbWcTWdZMdcMvPETnaXum5z659sseK0GpyrVaPqb78r/wBUSJDxiY6V48AAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"635\" alt=\"Colorful.Console Example 2\" data-srcset=\"/assets/static/Colorful.Console.Example-2.a85ba4d.871cdf8d8e1acd5c4d0ee7961d705ad7.png 635w\" data-sizes=\"(max-width: 635px) 100vw, 635px\" data-src=\"/assets/static/Colorful.Console.Example-2.a85ba4d.871cdf8d8e1acd5c4d0ee7961d705ad7.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Colorful.Console.Example-2.a85ba4d.871cdf8d8e1acd5c4d0ee7961d705ad7.png\" width=\"635\" alt=\"Colorful.Console Example 2\"></noscript></p>\n<p>The only thing missing was a method to write ASCII text using Figlet fonts, so I contributed some code to the project to get this done. The output, combined with the fade that Colorful.Console is capable of created a pretty cool effect. Unbelievably this is a couple of lines of code to write!</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 570 188' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-e271edbb8cc727c0f9c6361cc4167741'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-e271edbb8cc727c0f9c6361cc4167741)' width='570' height='188' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAVCAIAAAB5SH/NAAAACXBIWXMAAAsSAAALEgHS3X78AAAHTUlEQVRIx9WW2XLjxg6GRXHft%2bZOkdQu7zOuqeTk4uT9Hytfd0vyjJNU%2bTYuF90EgR8/lga8Wq2M1WoVBtHQjHXZpHE69UscJgh9z29E21adyCvfC5BYloUOEp5Du1kba4R5WnR1XxX12E2BUgOtq6Skb4YiK5E4tgvUppvMtcmrYRhZkvOKbZmLeVhADoMQHJCxLZUVP57raXdtJT9JDqYF8p2DVMLrMm7LTPz%2b9ge4280%2bTwrkh%2bXEpzTOkig5bS9INv2cxVkUxkT7eHhGAj/8ER5BvpzfPMezLXs/HRzHhdxl/9iKDrXtZpdE6Xl3Wa9lzHUJg37q5/enH1EQnbZnMOdh6zou5AI/JBf41Rw8z8f2MJ9QQMITZHRg/3B4Wq3XJv7AJSsKuhFFzWG32RM9QshBi1eEy7gL/ABa6KxVLuEHHLnkk2la0uV8Mow1lXw%2bv1JDGXY3w2bqZgB5jcOYInPQ1SAMyaYZo0DGcFzOfCWbqkTSxLGd708/dFNQRl2Hl8s3UiA5t1ULRSImVqozqqKQV1wWaQn64/EZiKfTSy3aLM5pG5lyVzKTHZKWtuWgLIpKOyCjmhZnDiSvUhnxXL8q69fLN6wAfNg/VWUDaUpHucZ2IomhH1J8EGCZpXmWZHlazv2iI4dnLRqiXYYtCdKtKLsCT8QNP5onUR/oRZpMl%2bwwH8n30/EFNah09UC/6RtC2HzC2X4%2bah9DsyESbAkAZrKkMmfyIsG%2bb8b9dNSXYTcdpOF0oOVQI3HoaBegUWd92TQH3R2ktREdJF3HuwvlH26YLqhtWavbD0nSGiSGs749kNZ9pXWoBq8ITdO8G9LHSGzbvkts26FiCPl0cyS/8tRdpGkApdEs0/rEQU%2baq4lpfrC/fzPUz/3w81mPGkM9785uSsZnifGvkrv8Z4UPzZXxCf9nYl8B/8XNvwu/IvmK2hetvurR8By/zrssKiI/6cpN4EV6eJdpLbImj0v31mZ5LKqsLZOqzlpdljhI67wtEtHkvevIyw1alTVlKnWSMFPtZwOFwvq2B6IgaYoh9JMsKrtyREFa5Z1EzrtUWVEWx3IEHOQvNMSNQ1nlkgNM9LIIlu7Ay2%2bP/yeGbX%2bCDfL9cCGeNMohwVmOnWoqYhG4YVsMj9tvSNDvxcZ3/DwqnvfvvhtAZTeckRDYeXrqxCjnb3cA5DK/mGvZ3xDqxGZu99/P/wv9%2bDQ9RX7Mq2t7uPbdcKy3mGsOKIRevOtPS3eUQ7nZEozvBIrDm0zG1OwIi17njD3ocizUDK9A7gE3ABcdbUyejuMDqYUoEjIBs6GacK%2bHAQfQ8Pq4vEFL7opySEIyNnpq%2bAZeOFSzngrgk34kTdFjQoIgOlQLeSFxGOqMvO5/IJGD6Jb1h%2bWVxMl6IsISKY7lABUbQIk%2bi0ueMNsPZ%2bp43DyiSfohR4k91Sp0F0LCQ7NUYVNl3TNQJDY5bd2wks1m4AUdcOBKqEt70LY0G0/YsAfBwQWksdUcaIFNvYS3lkaOa1jpHpGXmNTSrBQRXM46UMKA3NTKrB/GhzwRT7vvddGBiFyHSn3GZqEdEdIheNW8s7gAkAKiKVcbLZbVcEWNplcBdKSWAwpLf9QzGkOs%2bMUXaKEfkabqxuG6B0h/3iLRlfzYAzqdJEBjXf%2bLcrzbHjD14rAsG1zK/bEH1mteSe19cquUB6hpk%2btmsF0k/Or9bUlHrh7z5s1Q/c8SKrRIb4mfOdwnD4ba18cA1QPYkJL15z1w2wRX%2bd%2bn/sdEUwvj02C%2bSX6Z8avrq75y/7gHrrK7/i9j3/iv7AHj9vo1j47l5mEVurHnhGXMrdK1ttOgRB77mR5/8n77WR5VaVBkodDFCRzWR40ETdtyb2giCwQ6gRur4W0lSmF93eiGr6xwFHkpBxrVNl2FXPKqrSSHtZ0FJThpICI/04WVHEKpmYal7lF/Iw5V0r/v/kR1qS9AyOFdn1FN/AJynOWNzDYS3YnqZLgM73KL%2bVmXzb4TAvc4/oAWXOfqDAOYHdrnNpvkUC4PgJz6N50IiCKfxOl1/gO1Y/eCPjqeHWRhBf5Y7kIVw1KdYy/j6yxOnOUuKhYRd3iE8GX4LkMaii3JJjeWypNmj4PAjQy5pEPH8sZyr4y3RLutH%2bq0t01548u4JYY222zE3nPUIFJoOIBurHKGP2BF3GoFEPpc7gEQiEckmk0HY/IyVccun9FXJh3UGdwP4zsxY0IW0JSzsX0mEgjLFCZBnoVlp0DhDSiZIAwQeYU6LUEFEj%2bHBORwiYKCK%2bk33Os20AWhhnIQ5zPKup3QhwTm6GzKA3JMQKYBiIFEElKTjqpjSZ/cskLGk0CaJA7FohMBiHTtBCgLFYbaA%2bJErOf%2bG4jElCseZJomm8SRslBffD9Pv1fJEHkJPpDL4WsHNB71JU4OumuJlmBkTfKpSvt71yEMvYRyUXTtngPBk29938Zih5eY/0i8lGLyrNMRMoqDed0DUUNNVHcl90n6F1XxtuwJSnVHAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"570\" alt=\"Colorful.Console Example 3\" data-srcset=\"/assets/static/Colorful.Console-Example-3.9cc3f8d.c60c84993a7a35f47d2aa2ac9a354524.png 570w\" data-sizes=\"(max-width: 570px) 100vw, 570px\" data-src=\"/assets/static/Colorful.Console-Example-3.9cc3f8d.c60c84993a7a35f47d2aa2ac9a354524.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Colorful.Console-Example-3.9cc3f8d.c60c84993a7a35f47d2aa2ac9a354524.png\" width=\"570\" alt=\"Colorful.Console Example 3\"></noscript></p>\n<p>The title image of this post is also generated using Colorful.Console but was a bit more complicated as it transitions through several colours. By default Colorful.Console includes a single Figlet font but there are dozens of others available which you can download and use yourself.  They aren't all included by default because they would bloat the library quite a bit.</p>\n<h1 id=\"command-line-parsers\"><a href=\"#command-line-parsers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Command Line Parsers</h1>\n<p>Now the only thing missing in my quest was a command line parser which could let me easily create commands, switches and flags so users could use my command line tool. The best tool I found was <a href=\"https://github.com/gsscoder/commandline\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Command Line Parser</a> available on GitHub. It's a pretty powerful and fully features library that makes writing a command line interface very easy. Unfortunately, its output is pretty ugly and it does not let you customize the 'look and feel' of what is output to the console.</p>\n<p>At some point, I'd like to make another contribution to Colorful.Console, so that it offers command line parsing too but take inspiration from several command line parsing libraries to make something that's fully customizable and of course very colourful.</p>\n<p>Command line tools have been around for decades, it's a wonder that a NuGet package that does all of these things does not exist yet.</p>\n"}},{"node":{"title":"Logging with Serilog.Exceptions","path":"/logging-with-serilog-exceptions/","date":"31 January 2016","timeToRead":4,"description":"Log exception details and custom properties that are not output in Exception.ToString() using Serilog.Exceptions for .NET.","content":"<p>Picking a logging framework for your new .NET project? I've tried all the best known ones, including <a href=\"https://logging.apache.org/log4net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">log4net</a>, <a href=\"http://nlog-project.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NLog</a> and Microsoft's <a href=\"https://msdn.microsoft.com/en-us/library/ff647183.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Logging Application Block</a>. All of these logging frameworks basically output plain text but recently I tried <a href=\"http://serilog.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Serilog</a> and was literally blown away by what you could do with it.</p>\n<h1 id=\"logging-in-json-format\"><a href=\"#logging-in-json-format\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Logging in JSON Format</h1>\n<p>Take a look at the code below which makes use of the Serilog logger to log a geo-coordinate and an integer:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">var</span> position <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Latitude <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> Longitude <span class=\"token operator\">=</span> <span class=\"token number\">134</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> elapsedMs <span class=\"token operator\">=</span> <span class=\"token number\">34</span><span class=\"token punctuation\">;</span>\n\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">Information</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Processed {@Position} in {Elapsed:000} ms.\"</span><span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> elapsedMs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you configure Serilog correctly, you can get it to output it's logs to JSON format, so the above line would log the following:</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"Timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2015-12-07T12:26:24.0557671+00:00\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Level\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Information\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"MessageTemplate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Processed {@Position} in {Elapsed:000} ms.\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"RenderedMessage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Processed { Latitude: 25, Longitude: 134 } in 034 ms.\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Position\"</span><span class=\"token operator\">:</span> \n    <span class=\"token punctuation\">{</span> \n        <span class=\"token property\">\"Latitude\"</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"Longitude\"</span><span class=\"token operator\">:</span> <span class=\"token number\">134</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n    <span class=\"token property\">\"Elapsed\"</span><span class=\"token operator\">:</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ProcessId\"</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ThreadId\"</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"User\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Domain\\\\Username\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Machine\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Machine-Name\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Source\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"My Application Name\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"why-json\"><a href=\"#why-json\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Why JSON?</h1>\n<p>What can you do with JSON formatted logs that you can't do with plain text? Well, if you store all your logs in something like <a href=\"https://www.elastic.co/webinars/get-started-with-elasticsearch?elektra=home&#x26;storm=banner\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Elastic Search</a>, you can query your logs and ask it questions. So if we take the above example further we could find all log messages from a particular machine or user with an elapsed time of more than 10 milliseconds and a distance of 10 Km away from the specific location.</p>\n<p>Not only that but if you set up something like <a href=\"https://www.elastic.co/products/kibana\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kibana</a>, then you can create visualisations for your logs which could grow to be gigabytes in size over time. You can create dashboards with cool charts and maps that look something like this:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1337 753' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3f1948529a6428611389c19acbe81072'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3f1948529a6428611389c19acbe81072)' width='1337' height='753' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAIAAAC2bqvFAAAACXBIWXMAAAsSAAALEgHS3X78AAAPBElEQVRYw71Y%2bZNc1XXuPyC/O45TlYAUjGa0sUigpCoGKoVJADu4yoAxTpzYgYBlkdhiE2iM5BjH2HJSBgR2wC4hC6EFCbFoBkkItICQNJqtp/e37/va/fr1Ovnuez2t1gKGxMmdU3fuu%2b/0vefc853lvszIlut3rv/JmV/uWzvy6LuHD4%2bMjKxZs2bjxg3r1z/%2bwANrNmx44oYbbli0aNGSJUsWL168cOHCRZdfvnTp0qGhy5dfefUtt91585dvv%2bXLt//VF7%2b0aGjRsmXLhoeHFy5c8GlpwYJLh4aG0i2w%2bPLlyzHAIxbEYBg0PAyGdHJoeJj8W7IEnCuvuSaz7tfXbb7v4cqOoy9s37p3z2vPPLv51T17jxw5tmnTz7e9vP3tAwdvvPGmz33uj8G/ZNlyDC655NJly68YGhpeeNnQjX/zlVtvu/OWv73jL75w45/86SXLr7hy8ZKln/3sH31a%2bsxn/nDBgoVLly1fsnTZ0PBi0GWXfR5bYNMVK1ZcffWKa1etuvbaVStXXnPVVVddceWVV1119YoVK1esXHnd9Tdk/u0/NmZPTZYm8rPFEsPypTJVrtA0w5348BTGmHnvyLH9o2%2b/%2bdYoaHTswP7RsWS8/8DBwwffOfLOu0fRg/AKkynP/4De2j%2bW/hz01v7RfW%2b8tX3n7meff%2bGrX/vHu7953x1f/zb62%2b/61t1//89pf%2bfd93z97%2b696xv3ZH781PNeWHX8wPMCx/Vdz3dArh%2bENTcZ1KJ6PW7GCdXjRm/caGI2iuKo3iO8wiSZJzyNer3RG3xiiud3AXlhjRak4ycnvn3fw2u%2b/8S9qx9ds/aJf7r/4e/%2b6wj6%2bx947J7vPLL6eyNr1v4gc3pyenImN5XNT4Jmcul4an4MOjOV7dH0APVmZgdogG0qOzE9OzHTm5ycnsU6eCQ95pPHlNJxOnkeTecK6E9NTJ86M3VqYurk%2bCRExfj0xPRJ0s9g/OH4ZCZqNDzfNW3TtC3bsT3ftx3L9VzH82zXbTQanXar3W63Ws20tUhL%2b3TQbM1PdkhrN5sNsNu2pWlqtVaL4joWJIu7DnrLwci2k143dMd1bcdpNBvNC6jRiLFdm%2bx%2bITUtiyxTb8QZ09Jt27AcghpV0yVZMWxPM21RFARRUDUFciiKDIEIyjwXPzMtwzB1ECSzHMtxIZfpeg7LsTzHBYGn6RrHs0Q%2bz/PDMKxW%2bxSAwqRVq34QAKlgIHomDYOwVqsmlE5Vq73HHkU1/JmGKYqirmleEGR0QzMMTRJKHHW6mJ/kNWgjazovqxIn0LzISAqvaKJmSBiruqQbsqwKDFeZzU9j3nJ0y9ZkhZdkDvycwLi%2bSbPlXHFGkBnbtesxXKU%2bN9A63S5o7ne1Tneum9B5rdaMOF3wHBcHAt/LGJYBa2i57fLRf7HLuxit5sw%2b4xZeLNIsRRd0U6WYCgSFGhBL02XDUhmOgvT5YtaE6KpAMWWoh3moh0fdVBi2wol0mSrCPlEc45ixcTeRpRq3dk2U9%2beYVmuuovsnWT0r2ccqMh6tMPrl8endZ6hx3thxpvTciZP7csX1%2b4%2b8OlX%2bgBOKqvf8sexpXnWjWl7XespE9YwBcDiupjKalDUMUdJNXZ4RmXFRFhi%2bIsoc5BYVThAZlqPwCGVEmaUYKFgSZOBE7svN8oQBMIQyuinbruEFPolRiQXa3Q76I1Ju1cvrb9rzo5u2Pf3FHT%2b77tXHr9%2b5ccW2dWsPv/Lk6Z3X7Vl3yXNrV708cukvRlbtfPBLbz%2b%2bZNvq20Y3/OWr6/7s5/%2b%2b7NeP//mWH89Iei1upsdBFLC8IJvLi6qp%2bQ1NKYbF51S5wvAs5KswRcAGx0wxpezsVIUq8hKTK8xIKg/kwBqCxHICJau8Zsp4BQVSQ4EwhlkCAL5WCwYs4Db9PeKh/fIxqa5NOPn3jFMnrKlD2gkjttlQ3sK8vkc6cNQc38Ed2FzatZM/%2bFTuN3uFd/bLx09Zs9u4Nw7IJ9vtzlk4QQHNchiWEVWN4jVZmA3p3ypSyXJNnGW5kq/QxcQIFaKJBTiVCqXZ1BmAE1HmRYmjuQoQX6rkYZnUPoouSjLxCvi3pGpw0lSBVIdmp9VoNy8O/AHEg63daad2671Mft4dcAuigIxgYepu4DjS8dDOT2SLxXLBcQ3bMZKzL%2bOMcZY4UYouGRbARM/mZ6AY/FjVRTwW4bHlXIUusXwF8xiLCtEB9kFitJKkOChhQqkQ3dShU5/uTSWT3bnuoKCd3iOZR6g%2bRwHTsWF3WVX8/Gan/AonIrCoOFdB4iAu0A8RIVaCFhrz5UoBykB6WAanPjF5mhcYBXGJLZUquUIJ0nOqLlTYItTzAg8%2bEITVwVPGoXbnRe9FGjLutJOJTvfsI6gzP9khYzJAUjoXQnBahVfRqRxP4iANZ%2bUTWYETQALST2cngBxAopJAKJUegpaoPLwZP4dNpmcmiuU8zVRgKCCtCFhVcpZrIwohpM/9/tqFFnBkRTRMFUEDkQRnKYoswAPYYAy4QyU4JWRiuUqxPIvoiWBPM2VABXUArOeFTqlcKBZznm8j%2bBimgigEK8E%2baRjt%2bwDZsl3fQR%2bRq7ZU05lQthp%2b1GlwoXJMzo3rlBV7M6piRP60Qx3m8%2b/znBKZcmRRrpGzxNMqY0WhX6/18UYU0CG4bUFWWREQWwSRlWVO1UTXtxAlGURGicOhlsp5VqByhWyxlKOBHbqAGIVsAA0tx7BsFAUG2MCsGbKkcDgCRRMcz0kKu7ivgF3zdlUOyVUD0hcdjrZFtx6IkX5CK3yozEqhUbRVIwrG9cIhZup9nmEDhXLFaYWdMekzRkUO3AsUcDyZpDLD8UxeoMoM4xb%2byyq8RLECjzwgMbws64Vt/IdPFcqlQjErSgiaKo6/UMoCPI6HRMAjtnI8DYkBMzpxbmgiSixqHpQ1g2GkHsXdZg8D7Wa7Xos7iDWNdqMah27oe2Gn2apHkW8H7bjdZ2vVG8RxLmipAq5me0hbOHviAALrCEcs4bhhmzhdAIZiGZP/wBPf0y1d0RTD8TXbp5An4DAiHKYC4CFSJd5Syuamy1QBuOJEBhBCmm8gx54fKpNgMl8loA%2bqNcf3w1rVJ8VSzQ%2brXhi2CdhTRz9bgKR%2bf44COHnZtIAHKIB44geoy1xJU/QEyoCWovGippZoWkfK5sbM2Rcl01MsV9Y0uAQcGmqXqTxcPzs7DehXmAJyHAyCGdSeqIVIjZrSfDGZtn5t2YuR0CQIUMOl4rYvYBtseMSyYS0iiQypwLRVBH64AeyuagLKAWwvySwOuFAqyCiJLEvSdSb7mpLdKqgGqe9UQ9VknD0cGrEIHkJqCoVjBNZUcqEj2g6SgOUGoev7PUKlGoYXoSBIq3fcqwh5Hij9iYPC3nW9834YBGAm/J6f4SUJwRtxE9HDcU0cPOrQCsOxAnqaEUTF8gwvlAxb1jVZUwSFqEqqU8M23EBUVZHUoUjVNPIXlC8LjD59vMbk7SB0HAvFs4amI04rKMUj1MmkRD6HqmGI8liSJA8lu%2b8rqgpmXddR5mALCzxxHTw9frJAVVEUTVV9Uk5bBpI/lwC6WJpFNuUlsURzHFZwQ80JQIplV1iWV3SUGJatIMfBs2lRVUwHOVzUDVElKRkuTjMlWqiIlZIhiYqhWraFC2kzuZ7024WP6QzuRAi4qPzSRyDKZIvC1EF%2b7O1Ys%2bD4vd/GDVKHydBRgZEzgCmMpqgSwgtAD8cVZJR2DpwV2huub/vVkmqhZMMvgKUZXp1iBJL4CMAEhH3KDCjdKygmLck0XWEYSjAM2rCQyeGUcaPxyZMU0nY/ahX27N731w%2b/tvZX33v23hcevMeezqcuX21FlM7hGg4TlSkqA53hQuntMPUe4i6dTprS09bq9DI8rAc8dgkbPJLcJMHYIg7aJZQUAanLptGj3mjUBxTAnOu6uI2ZpgnA4Ah93z9fgYQ/1Ol9dz12/Nbje78z%2brXJH945uvr1px6aSyKpWa3NygopbF23UCpn4FghuchF1SgK0xtdRMZBev1LCOgjg1qNOJPv9%2bYT5v7b3nWxWgt6k%2bQtFk8V6M5XAWNjYzt37tyyZQv6rVu3Hjp0aLDAhAJxTPjp0b0jN7%2b06ab3t6x54443n1yx42cP/fSxFkMR3WotQSVq4xacKxYzqBU1Q5dVVYJT6DrulwKQYhjVT9mSW26v4S4LvwVMEUzicy2AgzcMg6IovOV5RBBpsLZJFCBpu7j7ldXLf/EPXzj64CNnLn3kV5nv/udX77i/WS6SO53fFFgbYRacEDvjJxvjXOOIVF3IgvVqBKvU68li5zVMpnRBa%2bKPvMECkes4gAcu3QhB9Yv5AHYEAC7qA6nCNZnZ/JVHV38/%2b9DT%2bi2bTv/BN9fuemRdytMI2hbvdwmKO4hamShJNM249aZ0TK95oue8q4%2bfd2/4JM1vhf3LB%2bRD8A4S/JynQJqGOukXmKR9lBOrhcl3t7/w5JoXN9z/9LaNP61zTE8BN7BpgQzihmFauBM7JNLF7WfK24%2bV%2bZ/snnieeYXjW4YbJ6jtF%2bjpbWhuMJMP3qKyhhyQrx418kEnTj/ptCFNPYHEeS0NoB8ThXrHFzvm6ePWxKm4WmvPf6Jo1es110nPApkuoxomMAsL/Ibdc5KSf/jyme3Ka3tGnTxdTb9t/M6WspRl30JlZ%2bhO0izLCgDLZhORtIYtBwg2T7MsuSqc%2bwpVEGJAOiZfgeJW3J2Dopbne17CD4DCqs1Wug4Wz4RRBJOi9NuU/%2b3I60c37Z65%2bY0f3fqDY3uzE3SgjM/6U25JNWNa86JOFFY7ThzEzbYfNaJ2HYE3ajVIKO10a1EH%2bI0iskU9acQQjYbpehcSBAJd9NUgGY6ro1JHOhzkR%2bGOkmGeJ1Ml3zzg050Zi37pg%2bmK5I0xU2Pj8qzJFXR5puJPOkVWqhZUw6jbqt5gfNlwq6zuSaGmG7HgG5qPMubi2Qp46Iv7v6GPWSRV4COwkQAorjdcz8WtxHFwwY36l7rUF/uPKWj7rp8Ofl8KfAz1FOimN/9EjsRr5/r1eqPVTL%2beRySKAjat3jeSubO1%2bUdFrP8PBeA0Z2tutH4/MEiq%2bXZSStQ8z2u1O%2bd8LO7zn0v4FXT%2bv1bgvwG/nIJooHujTgAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1337\" alt=\"Kibana Dashboard Screenshot\" data-srcset=\"/assets/static/Kibana-Screenshot.82a2fbd.e96a2ce391412a40cdad4ce9201011d6.png 480w, /assets/static/Kibana-Screenshot.cbab2cf.e96a2ce391412a40cdad4ce9201011d6.png 1024w, /assets/static/Kibana-Screenshot.067a82c.e96a2ce391412a40cdad4ce9201011d6.png 1337w\" data-sizes=\"(max-width: 1337px) 100vw, 1337px\" data-src=\"/assets/static/Kibana-Screenshot.067a82c.e96a2ce391412a40cdad4ce9201011d6.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Kibana-Screenshot.067a82c.e96a2ce391412a40cdad4ce9201011d6.png\" width=\"1337\" alt=\"Kibana Dashboard Screenshot\"></noscript></p>\n<h1 id=\"logging-exceptions\"><a href=\"#logging-exceptions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Logging Exceptions</h1>\n<p>One major problem with all exceptions is that they do not log all the properties of an exception and throw away vital information. Take the <code class=\"language-text\">DbEntityValidationException</code> from EntityFramework as an example. This exception contains vital information buried not in the message but in a custom property called <code class=\"language-text\">EntityValidationErrors</code>. The problem is that when you do an <code class=\"language-text\">exception.ToString()</code> call, this vital information is not included in the resulting string. Even worse, it's not included in the debugger either. This is a pretty major failing in the .NET framework but alas we have to work around it.</p>\n<p>There are literally dozens of questions on <a href=\"https://stackoverflow.com/questions/15820505/dbentityvalidationexception-how-can-i-easily-tell-what-caused-the-error\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">StackOverflow</a> asking how to deal with this problem and all the major logging frameworks fail in this regard. All of them call <code class=\"language-text\">exception.ToString()</code> and fail to log the <code class=\"language-text\">EntityValidationErrors</code> collection.</p>\n<p><code class=\"language-text\">DbEntityValidationException</code> is not the only culprit, half the exceptions in the .NET framework contain custom properties that are not logged. The <code class=\"language-text\">Exception</code> base class itself has a <code class=\"language-text\">Data</code> dictionary collection which is never logged either.</p>\n<h1 id=\"serilogexceptions\"><a href=\"#serilogexceptions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Serilog.Exceptions</h1>\n<p>I wrote <a href=\"https://github.com/RehanSaeed/Serilog.Exceptions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Serilog.Exceptions</a> to solve this problem. So what happens when you log a <code class=\"language-text\">DbEntityValidationException</code> using this NuGet package added to Serilog itself? Well take a look yourself:</p>\n<div class=\"line-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"Timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2015-12-07T12:26:24.0557671+00:00\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Level\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"MessageTemplate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"RenderedMessage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Exception\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"System.Data.Entity.Validation.DbEntityValidationException: Message\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ExceptionDetail\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"EntityValidationErrors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"Entry\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"ValidationErrors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token property\">\"PropertyName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PropertyName\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token property\">\"ErrorMessage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PropertyName is Required.\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token property\">\"Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"System.Data.Entity.Validation.DbValidationError\"</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"IsValid\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"System.Data.Entity.Validation.DbEntityValidationResult\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Validation failed for one or more entities. See 'EntityValidationErrors' property for more details.\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"InnerException\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"TargetSite\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"StackTrace\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"HelpLink\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Source\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"HResult\"</span><span class=\"token operator\">:</span> <span class=\"token number\">-2146232032</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"System.Data.Entity.Validation.DbEntityValidationException\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ProcessId\"</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ThreadId\"</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"User\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Domain\\\\Username\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Machine\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Machine-Name\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Source\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"My Application Name\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It logs every single property of the exception and not only that but it drills down even further into the object hierarchy and logs that information too.</p>\n<p>You're probably thinking it uses reflection right? Well...sometimes. This library has custom code to deal with extra properties on most common exception types and only falls back to using reflection to get the extra information if the exception is not supported by Serilog.Exceptions internally.</p>\n<h1 id=\"getting-started-with-serilogexceptions\"><a href=\"#getting-started-with-serilogexceptions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Getting Started with Serilog.Exceptions</h1>\n<p>Add the Serilog.Exceptions NuGet package to your project using the NuGet Package Manager or run the following command in the Package Console Window:</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">Install<span class=\"token operator\">-</span>Package Serilog<span class=\"token punctuation\">.</span>Exceptions</code></pre></div>\n<p>When setting up your logger, add the <code class=\"language-text\">WithExceptionDetails</code> line like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> Serilog<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> Serilog<span class=\"token punctuation\">.</span>Exceptions<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">ILogger</span> logger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LoggerConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>Enrich<span class=\"token punctuation\">.</span><span class=\"token function\">WithExceptionDetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>WriteTo<span class=\"token punctuation\">.</span><span class=\"token function\">Sink</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RollingFileSink</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">@\"C:\\logs\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonFormatter</span><span class=\"token punctuation\">(</span>renderMessage<span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">CreateLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>That's it, it's one line of code!</p>\n"}},{"node":{"title":"Portable Class Library (PCL) version of NotificationsExtensions NuGet package","path":"/portable-class-library-version-of-notificationsextensions-nuget-package/","date":"06 May 2014","timeToRead":1,"description":"NotificationsExtensions.Portable is a Portable Class Library (PCL) used to Create Windows 8.1 or Windows Phone 8.1 Tile, Toast and Badge Notification XML.","content":"<p>I've recently got into creating NuGet packages, when I had to create one for <a href=\"/wpf-metro-part4-elysium-extra\">Elysium Extra</a>. I discovered it was <a href=\"http://docs.nuget.org/docs/creating-packages/using-a-gui-to-build-packages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">really easy</a> to do too. I've just finished creating another one called NotificationsExtensions.Portable and I did in in 5 minutes!</p>\n<h1 id=\"about\"><a href=\"#about\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>About</h1>\n<p>NotificationsExtensions.Portable is a <a href=\"http://msdn.microsoft.com/en-us/library/gg597391%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Portable Class Library (PCL)</a> version of other NotificationsExtensions NuGet Packages. It's used to Create Windows 8.1 or Windows Phone 8.1 Tile, Toast and Badge Notification XML. This package is intended for use, instead of or as well as the following NuGet packages:</p>\n<ul>\n<li><a href=\"https://www.nuget.org/packages/NotificationsExtensions.WinRT\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NotificationsExtensions.WinRT</a></li>\n<li><a href=\"https://www.nuget.org/packages/NotificationsExtensions.UniversalApps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NotificationsExtensions.UniversalApps</a></li>\n</ul>\n<h1 id=\"tile-toast-and-badge-templates\"><a href=\"#tile-toast-and-badge-templates\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tile, Toast and Badge Templates</h1>\n<p>This project helps to create XML representing Tile, Toast and Badge notifications on the Windows 8.1 and Windows Phone 8.1 platforms. You can take a look at the <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/Hh761491.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">template catalogue</a> to see the types of templates available on these platforms.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 644 372' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b51942778b0a8922dd2351be43146634'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b51942778b0a8922dd2351be43146634)' width='644' height='372' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAlCAIAAAB9MnhgAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAUwUlEQVRYw9WZCVRT17rHc51ura21VJEAISSggHOdKKCooATCPEpCZpIwZySQkJCEzMyzCoqIQ1UEFBRBkFFBsHWmoqitdrTXWpFZxZy7D1Svt33vvuGuvrVe1n/ttc8%2be5/9/b79fXufAwho6mc0Gt%2bW/79%2biMnJSWD36Ohoe3t7T0/Pd99/9803X9%2b4cf3Ro0cPHjz4299%2bfv1f/oz/6R0wwYsXL65dv955sevuvfs//PTTzVt93zx8eP/%2b/Z8fP37y5Elra%2bvt2/1PfvnlazDrNw8nXryA/fiujPDTjW9%2bU9NB7wox7XV4mms3gH788fGdOwM3b/YNDNy/cf3Wo0ff/TvLMj22//qXd65efnDr%2bncDt0HZd/PGlatXAcPTp08BTH/frUcP7t3tu3Wl59L42Nj/eAUu9tRfvHT2YndD7xfney43X%2bppBJddPY3dvU2g7Oyqv9DV0HGxvuPi2fYL9UBtnb%2bpHZQd9efb6nqvdHb1trW0nWntqG9ph9XWcfZ8a93lLzvBBJNGqOVX4/HHr6seT1b99OroDy%2bv3n/0w8P7N2/d/OLKl1/fv3v3yfO%2bYWP/qPH2iLFvaPKtbj1/1T8GXXrw/bnGhpt9t7%2b6M3Dj2o3mL24e%2b/5F5Q8vgY59/7L%2b8StEYLhFYDAqIBCN9zbF4039/FF%2b/paenos8PU29fSy9vJDu2z/B4ZCenpY7PMxxnmhvb6wHDu223WKbm/k2d8u1694vKpamKhlrPp2/xc1q8xYL1y0oNze0k9MnVIY7ABibNK5oHUJU/Trj1DMgRM1gVEFFRWEuixDmvnaVIplnaLueMjApvT0q7R9/V5K%2bEdX3UHjpybmzEbZ2S1w%2bXYNFLnrf0QtRN4I4%2bewvpwbBozBNQ4hwik04wXZnmK1YHKRWU4nhy8LDHeTyCIk4JMAPSyCsksmIBMJqHzw6OGg5OWIDjeZEJm8M9HfwxGE8PbFOjia7isUdndUEwsZNLot3uGNxHjbenkvdtlpExeCnAVa1D4MpZ9YNzjw9CCpJ%2bw83Hd8tpYWEbFhRmpmWe%2bGW7N6kon9McWf8XaV%2bNaL7ASLtq31/NsLFzWHbVjs%2bO8hfloc4%2bXTG6UHwNMSpQZvmIUQE3TYk1EqnY8oVRBptHZGwLDsrnsvFa7UsgcBXqaRmZHB1ulicB4pKdqRQHMkURxrDJTRk1RZXM1dXM3d3VMUBzbUrbZcunTOkx7tuQXp4YHx87Dw8rOLifAHA%2bKRxZdsQoubpzNpfgRA1z6Ly96QrUyN3OPsuRzGp1MJL/bKBV%2b8CyKcEALTfQ%2bSyOuRiEyozINJzTXlO7sG%2bnxDHH888/fxdAGxcvHNJiTQmZjOdvp5CXlVcLNmxfQEpYnV%2bviiS5pKZwYuJwnl7YqhUJzJlI5G0PoK4ISRoRWGh5HhlSc2pvW1tuW1tR9vaD97qu6rWRHpst9oZ%2bqmvj61QEAIARkEIXTIizhlnNE/OOPcScXaClFe%2bauWqrS7Oq2xtTD9ZnNZwRfngteL26LTp6rvj6fcmDPcmQKkaeHHo/tA3t7/ShTmRbGfXxgW3PjYiqp/%2bpXZwRi1YzEEsCKEIBoafuPXcuQq5LLh0T0oCZ3tuDjdZFKhVRx4oT/fCWfj52Hrh0D54GwLhUyrdMYK0PjDAPjc3%2bcsrnd09nZ0Xa%2bvqJM1NxQ2NqrbW4rbWkzvDVgcHLPf3sxMKguAkhqCtpQ1zJGVmuuqFmafsi7vi4nL8l28NwIe7uvmsdPiUXVavfgTJb48C61V3x%2bNujPn1jAT1jgT3jnh1DyX3T7b2PyTyErZSIwsLckrujpg0PFt8btDs3OCChmeOF54jyAxrcQqu4lCat9cHPK57UaEowA8lSQ5OlRIzDAlenpb%2bvkt8vW3xXtjAgGVE4prAQHtZKqOrp7PpfFXT%2beN1Z7JqTnIazqY2N5fX10u7u6p1umi8p7WnB1ooCJze6UgEopWZheNWPGsrpcst935Y7R2vwzeCjraSjtYH7JFXdMu%2bmVTeHku9M64bGMd1jYDsnHEKFqjYNj9XD0zI7hvTHkLyB0Zu35hb9/C27mFQbro4FHF1FEGPto3nris/IOVwXbKyWCplBIFgTwizU6kYfK6fF84cAPh42fh6Y/z80ThPFM4De%2bSotrFRXlcXd%2bZMae0pbVUV4%2bRJWm1NVG0142y9ob39xLHjiugoJ048nAOvX06EBIWsWLbc18P/fEjpQ7d9/RsKBzYUXbATFNMT%2b0uatXs6Ux79A8CzewQE94w6WKBi1/I8/d54av%2bYvH9MdXdM0De2pWsYaGvXsPOFIcKVUQQz3p7JtpNIPXbv5qanU8PCrIRCXHZ2fJLI39fHKtDPxs8XWI/180V74S1CQi3SVE7nmgLq6pBV1WuPVUoqq7hHPvc7etTj8EHXipJZNVW4sw1FvV80n2/RFBREG6cIkpPEn61awQ/Ca5MT26oaL2o%2bv8WpyiCyjpdn3Dl6Pq2oOeVbo2IKQPsGAN6y3gDo743L%2bsfB3bS74/w/AkQm2MVyVjBZtjQGlkTGhhPQQUHmfn5mPt6Lg4MwIcH2gQE2fj4oPN6Kz7Vubza/eP7j1qY57a3zTteYVhz2OnyMVFSyYm%2bZXeneFQfLEKdPWlfXBDc2lrS2nui6VADvQmMjvdcGmDSWINSPSwo6oEvUShOylYk5Ev7lMyfvFvdkH/5S/e0rw8C49t5EzoMJfPc7IVT9zL5lKP/rCe3AhO7eRMb9CfHt8T%2bsAMeBK1yfIvXkC5xFoq0JHGcOdxOP7xYd7eLvbxEf787ne8fFuXF4ngqZ6cH9pmcOv380b9bx/X89tWtmdeWy/PyNGtUHaoMJL2lOWcnstqblTY2fNTbiz53bfamnBgAMDv7ac%2blWpjY9eOtmXkRoTHiIy5qVWzauD/LyqjDsfn7gW/7h635XRsN7R8Iuj4R/MYLrGl7ZOrS6bWhN2xA4AV06hwlfjIRehu/uvDwS2DvyewAWdzlPtNGQEZ6mDsjMpMlSAxTKEI2Wmpq6M4JkzxfiEoX4tDSKXE3wDjDLz/34TMncQ/r39ibNOaKbceLwh3KpOS9utiBlAYExv2TXnAud81tbUOcbPjh/zrKnNw0ADI8OHZIXtpy9sH//wUDcdkfHLVGseCE/2WWTe0N09ZioZ0PWRUT98ExwTtfBx5zrheHMe%2bOqO7Cy7o9TvhwFRwe4BbZOEFEf1g%2b6XvwdAH9pnGCFWObKE6xjR9vTmbYMpgODvo4dtYlMWUam2JEpyylUByJtyU4y6uh%2b1KmKmYd3zTtieL8ic05h4YLC3c5S%2bYdC8bxUpfnpI%2b%2bdOjj7XN3s%2bso5Z2sR3Rdd4JN4bJgXn3jv3uPqmtOuTk6pYlnZrjJSBHtfaYWGmZ4SILDU1iEaJmaAYw6c06eebb4wDDIBBD0QyGkiAACn%2bOmpnK4dnP9HADrHOi5xeZrOO1m6WZjkJE7ZFs/ZKBR5x8ZtY0c7pkj9wiPQcTzXKO6GFGVgdXXskYPrKio21ldana5x3lOGT8%2b21qd/KJUv2L9vbu3%2bOZ8XzirJm1t3fO6ZGkT7eWcYYHSYI5BwhPJ9JRWh3j58bmLtwc%2b9d%2bBPVtaKVFkeXoFIfS2icWJm3a%2bzAEDtM2CffmBc3g8LJEYEADj1bNaZqdeQusGPzg4C0/9pG6UlWMWKHNQG7/ScMLXBP7eALk/z1RnoTNY6hSrUkEEnU7CxPGeOaFMUd3XZwYSifeHFpRuOHXMqOxCYLHVQqv%2bqTTfVGD7JA2uSP6f%2b0ExezIfcWJOjexEdzTDAyPBQJJvn6hGK8yXivMN34MO8fMNx%2bFB3zxCcP8XTI2CRrg5xZuIv4Hw9OYio/HVD2xA40URfwZLfHQ/pHQWNM2qegYRGVD2bW/tsbcfQ%2bs6hDZ1Dq9qfB3wBkliwJFq4XCjbGC9w4IpWx3CWcoWrI6MdKJFYVqwDnbWUzMAS6ZbUGCwjBi1KdRJJNx44YFtebp8oXkePxCjVJirdQkMWhsHExDA%2byJTPo1EW%2bgRYSkRzejo2AoCJifFjJ07tLT%2b2/9CJsorK8kMn9lVUlh2s3H%2bwct/BE/tKy5MarrH6XrGuDrGuDjOvj2XdG2/4%2bWXdTy9qf3rR%2bPPLfQ8nIq%2bNxdwYi74xxr4%2bxrs1ln1/IvsBvF%2bBTans2xeISAGGJbClJ6DpcUh6DJIWbUZhmrLi7KksNJGOjGBYhdOswujIQOr8nQyTwAgTRpR5TeXCIxUfkGmmoURzqWJRqnqRXG0XuhPl678oIMg8dKdZCMFSwp3d3eA6/VHzr75HJidu3bjZ13vxUmvL4OCz/8VnLYLGt2Ql2sgNO%2bT67YnSjRLFZqlqOyPGih5jSY1CU9nWESw0gWVBYC8KpZuSmAv3lZo21M2rPT6Xy5kfSrRMSUVLlCYytWNwGDIs3CycaB4eYRESYSWJe6%2blYv0bg/6FwDfiq5GRwdHR4dfGybcAQ0PP%2b25d%2b%2bnH7x98c%2b9fAyEYQjRLBAA8NDn%2bupxAicpVacAD68lRZhQ2MiJyUXjkImKUKSXOgsBElewxOX/6o6rDIEdnVx%2beFRe7WC4xy9PP1enXhxAsdpLMCWQUgQIWDUsgfVySs2naoF8Goce/QI%2bf/qa//Qr9/Kby5Blcgg6/PIcroPHnp8Yng9CDb4fqG3ubWq52dN/58YkRHvIHgc5gIIImsKbz0fIMd02uL1e6OkXjKtNvT1JuUhjwvBTHJIVbsspNpNrM5qPo8eYlOe8X6OaXF82r3DvnSMkclfSj7KR5J3L%2buscwP4KKJNLMiTQLEHUkJjaYbC5U4OAceGHkZELeXIgghQIToSARhIuDAoRQWDLkw4Nw8ZAfHwpIhDwTIH8BFJoM4blQSBLkJ4CIMihQBPf04UJ4zu8FHrgjFopUAQChJU1gqSsIMBQGCeVr0zI9hApHgXyDPi9UpHTT5YYV7GUYcvEJSZZMrplYvEggtMxRf7RLPUea%2bFGiYGEKa36mwESfaktjISlMC1KkFTESRWJjQmlIcRoMMDZujNZBLA2UuhsS5kKKEkhcCE/My4b4ORC4xdZA6RUwW5wBku6CTdeVQ9F6SLHHGKU1JmQYXSKhTUxYbyubgViQIxUKk0AIitCCyrcgJXxC5ZmyhJYMvjmDh2LyrWkcy0ieVXSidVwSSpCC5klQMcLFAol1ihQjFlslJSH5AgsO3zKBi%2bZLlorkYONC0dhmZJYlkWVBikaHMRZKNDvgv3e8NFIVkL8QNhGUwM3hKbC/gdcBAAAD7XQl3AIWJ1QMbY%2bBGGnwUuyUQMEimAfYDczdFAltYcPWO0dCzgyYwZECPwpB4VsxREuUOd6KTJxY65KW5SnRuLCFmNhkO27KCpHMIVmBlaqWJKai%2bWJrqQKTpsQoFDZy%2bVJpCio52VyUZJ2capuiWhOdYMeIMaNEIYlRiylx1kQ2UmrwgF/mJoxsLRQugQAGcDywjJgChwdJDpeghZ4GhYlhDKIUosihCBkUnwGRUmEkcioME5wENwIe0JOphsDTwChCCkRTQpwsCEHmoeiJNpo8H3Wuj1S/VZ2DF6udONKVAtnKZPkyidJGpsbI1OhEmblIjlaosTq1jVqF1qhhEqkUlSxBSdJsUzVrEvgYdsJiauziiBgzGgdDjjdTZHpN5wCYFYQssI8shwFACWwCBgGzgOnADlAC94NL4HKSDO4J0gBUQAnuArbpBQFeALdABSQPSANACJAQETxkBBcp1rsqsnHJGmddfmBRWWRGUVBhyc6CXV67SvFZBevyd28pLvWVqqy0etsMA0avRem11lqNtVyxRKP3lKntU3WrOULLGJ4ZPcEiIt6CzsdSuIsV2TDA2IQx1gDPBJwKTAcVhgoGABFPU8BgUVqIlgbFpcP54MWBu4EEABkPfB%2bjh8BYYDFoBIsD6qAPWJbP6HAIbaBM5QCJZ0HmWsuzvNJyvaXp23JKCEVlpPR89/JDtLKKiKOVrN37tu2t8CstD9AasNlZttkZmAwDNl2P0Wss1Bp7QzZZolqq0K%2bPF6Bj%2bUgWD0XmWNITMWTeInnOVAi9MII0nbYeOJIA3JwMOzVSDTeCSNgphp0N9iI4zJRwCaynKKa8LoYXAQQ6AHaPgVymQt%2bVBQvkgxMdHo4gcVEUAZYqsGSLsSLNWql%2bo0y/XpW%2bTpux3pC9LjN3SXYuUp9poTJYZudgCnNt8jKxgCFdb6XTotUa8/gkC6nOXmFYFyNARwtMWXwzMt88MglD5iOVufi3OQBmgiN4igTkMYgZYCJrigGuy%2bFLEBjAdMBAVsCdweIAzumwAdG1PRbO4Gnr3wLASUzmWYI8ZiZbx8ocUvQbldmbpPq1yvQNhlzXot0uBUXY/Hyz7FxUVp5VQYF1UZ5tQQ42NxOTmW6t1aHVahRHYpWkWaLKWM/kI5lCM2YikiZEsyV2FAEqLc/r7S70KRHeTMDuAWYFjpyu/KNk/LZLgku4hQ450uBtZ9PUkGltfsf63wNQBdZMMSYudWlquiNQsupTdZZLwR5caZl7XsHSzBxkRo5Ffj6quBBdXGBdkIPKy7HOzsRotFZqtVVskiVbaqPJcmbwLJmJFkyROT3RiiVxAM9U5nlOJzFIxM9o0LYoaMvUxG/11pTf1d%2b2bGG9GcL6J%2bv/CYAmtGGIbKNkS7gq%2bxTDmkT1Cpl%2bQ2bBNvCuX7DHM6vQJbtgWUaOVUERZncRprgADazPyVqSYbDWajGpadgEsTU5yU6d7cpMtAXLGCW2iky2ZkvsqUILZZ731N%2b9YQBw6Gxl/96If0f/AAiPRwJRhUi2BMVORoEYSFRiVenLtBlrlOmfaTJXaNNRCs2HhvT30vUfZGhNNGmfKOUm0hQTYbJJvMAkmvuxZ%2bSCqGQ7UtwCUvxHpISPw%2bI%2bDOcsCGDPStQ5v12BPxGgpqkYqK5115n2PbUtxWfailu6Sjt6StsvlXX0HrpweW97d2FbV9aFSxkd3dmdXXntnTmtnbnNHYWNbYVnzuedbSn8/Gxe1bniU80FJ5vyqpvyq5pya5pzjzdkNncfnMoB6M8F%2bPP%2b%2bTP9Yv%2bnA7x%2bPfnf0Ks3mnyn8psmX7%2ba/I/6g8b/A4C/AwzdD%2bFmaHgEAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"644\" alt=\"Wide Tile Template\" data-srcset=\"/assets/static/Tiles.a5d7b53.a234480e2bd581cba2d3f060827d3a80.png 644w\" data-sizes=\"(max-width: 644px) 100vw, 644px\" data-src=\"/assets/static/Tiles.a5d7b53.a234480e2bd581cba2d3f060827d3a80.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Tiles.a5d7b53.a234480e2bd581cba2d3f060827d3a80.png\" width=\"644\" alt=\"Wide Tile Template\"></noscript></p>\n<h1 id=\"why-is-this-useful\"><a href=\"#why-is-this-useful\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Why is this Useful?</h1>\n<p>It's useful when trying to send notifications from the server side using Azure Mobile Services .NET Backend or some other .NET based push notification. When you want to create notification XML in a standard .NET project and not a WinRT project. I personally use it for my <a href=\"http://apps.microsoft.com/windows/en-gb/app/london-travel-live/2916d32f-2ca3-4325-adc0-c62b44306fae\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">London Travel Live</a> and <a href=\"http://apps.microsoft.com/windows/en-gb/app/currency-converter-pro/32863ebf-c907-4806-a2dd-864fb4b573da\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Currency Converter Pro</a> apps.</p>\n<h1 id=\"nuget\"><a href=\"#nuget\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NuGet</h1>\n<p>NotificationsExtensions.Portable is available on NuGet. Simply follow the instructions below:</p>\n<ol>\n<li>Click Tools Menu Item in Visual Studio</li>\n<li>Click NuGet Package Manager</li>\n<li>Click Package Manager Console</li>\n<li>Select Your Project in the Package Manager Console</li>\n<li>Execute the following command to install NotificationsExtensions.Portable: <strong>PM> Install-Package NotificationsExtensions.Portable -Version 1.0.0</strong></li>\n</ol>\n<h1 id=\"attribution-and-changes-made\"><a href=\"#attribution-and-changes-made\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Attribution and Changes Made</h1>\n<p>All praise goes to the above two projects and the Microsoft developers who built them. The only changes I made to the code was to switch from XmlDocument to XDocument, remove a few WinRT specific references and stick it into a Portable Class Library (PCL).</p>\n"}}]}}},"context":{}}