{"hash":"40e5552e0c317f8c9718c32c69a10e16c5dade67","data":{"tag":{"title":"Rx","belongsTo":{"edges":[{"node":{"title":"Reactive Extensions (Rx) – Part 8 – Timeouts","path":"/reactive-extensions-rx-part-8-timeouts/","date":"02 January 2017","timeToRead":1,"description":"Should you use Reactive Extensions (Rx) to do timeouts in .NET? It turns out it's better to use CancellationTokenSource in the Task Parallel Library (TPL).","content":"<ul>\n<li><a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) - Part 1 - Replacing C# Events</a></li>\n<li><a href=\"/reactive-extensions-part2-wrapping-events/\">Reactive Extensions (Rx) - Part 2 - Wrapping C# Events</a></li>\n<li><a href=\"/reactive-extensions-part3-naming-conventions/\">Reactive Extensions (Rx) - Part 3 - Naming Conventions</a></li>\n<li><a href=\"/reactive-extensions-part4-replacing-timers/\">Reactive Extensions (Rx) - Part 4 - Replacing Timers</a></li>\n<li><a href=\"/reactive-extensions-part4-awaiting-observables/\">Reactive Extensions (Rx) - Part 5 - Awaiting Observables</a></li>\n<li><a href=\"/reactive-extensions-part6-task-toobservable/\">Reactive Extensions (Rx) - Part 6 - Task ToObservable</a></li>\n<li><a href=\"/reactive-extensions-part7-sample-events/\">Reactive Extensions (Rx) - Part 7 - Sample Events</a></li>\n<li><a href=\"/reactive-extensions-rx-part-8-timeouts/\">Reactive Extensions (Rx) - Part 8 - Timeouts</a></li>\n</ul>\n<p>In <a href=\"/reactive-extensions-part6-task-toobservable/\">part six</a> of this series of blog posts I talked about using Reactive Extensions for adding timeout logic to asynchronous tasks. Something like this:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">WaitForFirstResultWithTimeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">DownloadTheInternet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> task\n        <span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Timeout</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">FirstAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Last week I was working on a project and wanted to add a Timeout to my task but since it was an ASP.NET MVC project, I had no references to Reactive Extensions. After some thought I discovered another possible method of performing a timeout which may help in certain circumstances.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> cancellationTokenSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">DownloadTheInternet</span><span class=\"token punctuation\">(</span>cancellationTokenSource<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">OperationCanceledException</span> exception<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Timed Out\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I'm using an overload on CancellationTokenSource which takes a timeout value. Then passing the <code class=\"language-text\">CancellationToken</code> to <code class=\"language-text\">DownloadTheInternet</code>. This method should be periodically checking the <code class=\"language-text\">CancellationToken</code> to see if it has been cancelled and if so, throw an <code class=\"language-text\">OperationCanceledException</code>. In this example you'd probably use HttpClient which handles this for you if you give it the CancellationToken.</p>\n<p>The main reason why this method is better is that the task is actually being cancelled and stopped from doing any more work. In my above reactive extensions example, the task continues doing work but it's result is just ignored.</p>\n"}},{"node":{"title":"Reactive Extensions (Rx) – Part 7 – Sample Events","path":"/reactive-extensions-part7-sample-events/","date":"24 December 2014","timeToRead":2,"description":"Shows how to use the Reactive Extensions (Rx) Sample method to reduce the number of subscribed events by taking a sample from them over a given time period.","content":"<ul>\n<li><a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) - Part 1 - Replacing C# Events</a></li>\n<li><a href=\"/reactive-extensions-part2-wrapping-events/\">Reactive Extensions (Rx) - Part 2 - Wrapping C# Events</a></li>\n<li><a href=\"/reactive-extensions-part3-naming-conventions/\">Reactive Extensions (Rx) - Part 3 - Naming Conventions</a></li>\n<li><a href=\"/reactive-extensions-part4-replacing-timers/\">Reactive Extensions (Rx) - Part 4 - Replacing Timers</a></li>\n<li><a href=\"/reactive-extensions-part4-awaiting-observables/\">Reactive Extensions (Rx) - Part 5 - Awaiting Observables</a></li>\n<li><a href=\"/reactive-extensions-part6-task-toobservable/\">Reactive Extensions (Rx) - Part 6 - Task ToObservable</a></li>\n<li><a href=\"/reactive-extensions-part7-sample-events/\">Reactive Extensions (Rx) - Part 7 - Sample Events</a></li>\n<li><a href=\"/reactive-extensions-rx-part-8-timeouts/\">Reactive Extensions (Rx) - Part 8 - Timeouts</a></li>\n</ul>\n<p>Its been a while since I've done another Rx post. They've been pretty popular and thanks to the community for all the positive feedback. I was talking to a colleague yesterday who had been using standard C# events in WPF (The principals learned in this post can apply anywhere). He had subscribed to the TextChanged event in C# and was updating the user interface on the fly, whenever the user typed in a character of text. He was getting way too many events being fired and his user interface couldn't keep up with all the work it was being asked to do.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>TextBox<span class=\"token punctuation\">.</span>TextChanged <span class=\"token operator\">+=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>OnTextBoxTextChanged<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnTextBoxTextChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TextChangedEventArgs</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Heavy User Interface updates that can cause the application to lock up.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is a very common scenario which I myself have come across several times. The solution to this problem is to take a sample of the events being fired and only update the user interface every few seconds. This is possible without Reactive Extensions (Rx) but you have to write a fair amount of boilerplate code (I know, I've done it myself).</p>\n<p>Reactive Extensions (Rx) can do this with a few easy to understand (This is the real bonus) lines of code. The first step is to wrap the WPF TextChanged event (I've shown how to do this in a previous post <a href=\"/reactive-extensions-part2-wrapping-events/\">here</a>).</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span>TextChangedEventArgs<span class=\"token operator\">></span> WhenTextChanged\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Observable\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TextChangedEventHandler</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TextChangedEventArgs</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>TextBox<span class=\"token punctuation\">.</span>TextChanged <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>TextBox<span class=\"token punctuation\">.</span>TextChanged <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>WhenTextChanged\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Sample</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>DateTime<span class=\"token punctuation\">.</span>Now <span class=\"token operator\">+</span> <span class=\"token string\">\" Text Changed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The final and most succinct step is to use the Sample method to only pick out the latest text changed event every three seconds and pass that on to the <code class=\"language-text\">Subscribe</code> delegate. It really is that easy and this blog post really is this short because of that!</p>\n"}},{"node":{"title":"Model-View-ViewModel (MVVM) - Part 2 - IDisposable","path":"/model-view-viewmodel-mvvm-part2-idisposable/","date":"13 June 2014","timeToRead":4,"description":"Implementing IDisposable correctly is ridiculously hard. A Disposable base class can make it easier. Using IDisposable in Model-View-ViewModel (MVVM) really helps.","content":"<ul>\n<li><a href=\"/model-view-viewmodel-mvvm-part1-overview/\">Model-View-ViewModel (MVVM) - Part 1 - Overview</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part2-idisposable/\">Model-View-ViewModel (MVVM) - Part 2 - IDisposable</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part3-inotifypropertychanged/\">Model-View-ViewModel (MVVM) - Part 3 - INotifyPropertyChanged</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/\">Model-View-ViewModel (MVVM) - Part 4 - INotifyDataErrorInfo</a></li>\n</ul>\n<p>View models these days interact with all kinds of precious resources like Compasses and the GPS. Implementing <code class=\"language-text\">IDisposable</code> is an important pattern you can follow to dispose of these resources cleanly. Freeing them up to be used elsewhere and saving the users battery (Particularly important on mobile devices). Using the <code class=\"language-text\">IDisposable</code> interface in the Model-View-ViewModel (MVVM) pattern is a wise decision.</p>\n<p>Implementing <code class=\"language-text\">IDisposable</code> <strong>correctly</strong> is ridiculously hard. If you don't know how hard it really is, I recommend reading the top comment on <a href=\"http://stackoverflow.com/questions/538060/proper-use-of-the-idisposable-interface\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> Stack Overflow article.</p>\n<p>Implementing <a href=\"http://msdn.microsoft.com/en-GB/library/system.idisposable.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IDisposable</a> is one of the rare times in C# where a developer has to use <a href=\"http://msdn.microsoft.com/en-us/library/66x5fx1b.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">C# Destructors</a> and also one of the few times when we have to tickle the garbage collector to stop it from trying to release the unmanaged resources twice by calling <a href=\"http://msdn.microsoft.com/en-us/library/system.gc.suppressfinalize%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SuppressFinalize</a> on <a href=\"http://msdn.microsoft.com/en-us/library/system.gc%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GC</a>.</p>\n<p>Having to write this code repeatedly is difficult and error prone, so how about a base class?</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> Framework<span class=\"token punctuation\">.</span>ComponentModel\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">.</span>Linq<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">.</span>Subjects<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Base class for members implementing &lt;see cref=\"IDisposable\"/>.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Disposable</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IDisposable</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">bool</span> isDisposed<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> Subject<span class=\"token operator\">&lt;</span>Unit<span class=\"token operator\">></span> whenDisposedSubject<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Finalizes an instance of the &lt;see cref=\"Disposable\"/> class. Releases unmanaged</span>\n        <span class=\"token comment\">/// resources and performs other cleanup operations before the &lt;see cref=\"Disposable\"/></span>\n        <span class=\"token comment\">/// is reclaimed by garbage collection. Will run only if the</span>\n        <span class=\"token comment\">/// Dispose method does not get called.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token operator\">~</span><span class=\"token function\">Disposable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the when errors changed observable event. Occurs when the validation errors have changed for a property or for the entire object.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value></span>\n        <span class=\"token comment\">/// The when errors changed observable event.</span>\n        <span class=\"token comment\">/// &lt;/value></span>\n        <span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span>Unit<span class=\"token operator\">></span> WhenDisposed\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>IsDisposed<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Return</span><span class=\"token punctuation\">(</span>Unit<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">Subject</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Unit</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject<span class=\"token punctuation\">.</span><span class=\"token function\">AsObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets a value indicating whether this &lt;see cref=\"Disposable\"/> is disposed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value>&lt;c>true&lt;/c> if disposed; otherwise, &lt;c>false&lt;/c>.&lt;/value></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> IsDisposed <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isDisposed<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Dispose all managed and unmanaged resources.</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Take this object off the finalization queue and prevent finalization code for this</span>\n            <span class=\"token comment\">// object from executing a second time.</span>\n            GC<span class=\"token punctuation\">.</span><span class=\"token function\">SuppressFinalize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Disposes the managed resources implementing &lt;see cref=\"IDisposable\"/>.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DisposeManaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Disposes the unmanaged resources implementing &lt;see cref=\"IDisposable\"/>.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DisposeUnmanaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Throws a &lt;see cref=\"ObjectDisposedException\"/> if this instance is disposed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isDisposed<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectDisposedException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Releases unmanaged and - optionally - managed resources.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"disposing\">&lt;c>true&lt;/c> to release both managed and unmanaged resources;</span>\n        <span class=\"token comment\">/// &lt;c>false&lt;/c> to release only unmanaged resources, called from the finalizer only.&lt;/param></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> disposing<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Check to see if Dispose has already been called.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isDisposed<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// If disposing managed and unmanaged resources.</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>disposing<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">DisposeManaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">DisposeUnmanaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isDisposed <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// Raise the WhenDisposed event.</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject<span class=\"token punctuation\">.</span><span class=\"token function\">OnNext</span><span class=\"token punctuation\">(</span>Unit<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject<span class=\"token punctuation\">.</span><span class=\"token function\">OnCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There are several interesting facets to this implementation.</p>\n<ol>\n<li>There is a difference between disposing of managed and unmanaged resources in the disposable pattern. To facilitate this, there are two separate protected methods which can be overridden in a derived class to dispose of each of them.</li>\n<li>The disposable pattern requires you to throw an <code class=\"language-text\">ObjectDisposedException</code> when you try to access a property or method after the object has been disposed. To achieve this, there is a <code class=\"language-text\">ThrowIfDisposed</code> helper method which can be added to the top of each property or method.</li>\n<li>There is an <code class=\"language-text\">IsDisposed</code> property which can be useful if we don't know if the object is disposed or not.</li>\n<li>Finally, there is a Reactive Extensions (Rx) observable <code class=\"language-text\">WhenDisposed</code> property. This allows us to register for the dispose event.</li>\n</ol>\n<p>Here is an example of how the base class is used to dispose of both a managed and unmanaged (COM object) resources.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DisposableExample</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Disposable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ManagedResource</span> managedResource<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UnmanagedResource</span> unmanagedResource<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Do Stuff</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DisposeManaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>managedResource<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DisposeUnmanaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Marshal<span class=\"token punctuation\">.</span><span class=\"token function\">ReleaseComObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unmanagedResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unmanagedResource <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>An example of how to dispose of an instance of the above object.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\">DisposableExample</span> disposable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DisposableExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndisposable<span class=\"token punctuation\">.</span>WhenDisposed<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Disposed Event Fired\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndisposable<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>disposable<span class=\"token punctuation\">.</span>IsDisposed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see, it looks a whole lot simpler and has some pretty cool helper functions and features. No more need to remember how to implement this complicated pattern.</p>\n"}},{"node":{"title":"Reactive Extensions (Rx) – Part 6 – Task ToObservable","path":"/reactive-extensions-part6-task-toobservable/","date":"25 April 2014","timeToRead":5,"description":"How and where to use the Reactive Extensions (Rx) ToObservable Extension method to turn a Task Parallel Library (TPL) Task into an IObservable.","content":"<ul>\n<li><a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) - Part 1 - Replacing C# Events</a></li>\n<li><a href=\"/reactive-extensions-part2-wrapping-events/\">Reactive Extensions (Rx) - Part 2 - Wrapping C# Events</a></li>\n<li><a href=\"/reactive-extensions-part3-naming-conventions/\">Reactive Extensions (Rx) - Part 3 - Naming Conventions</a></li>\n<li><a href=\"/reactive-extensions-part4-replacing-timers/\">Reactive Extensions (Rx) - Part 4 - Replacing Timers</a></li>\n<li><a href=\"/reactive-extensions-part4-awaiting-observables/\">Reactive Extensions (Rx) - Part 5 - Awaiting Observables</a></li>\n<li><a href=\"/reactive-extensions-part6-task-toobservable/\">Reactive Extensions (Rx) - Part 6 - Task ToObservable</a></li>\n<li><a href=\"/reactive-extensions-part7-sample-events/\">Reactive Extensions (Rx) - Part 7 - Sample Events</a></li>\n<li><a href=\"/reactive-extensions-rx-part-8-timeouts/\">Reactive Extensions (Rx) - Part 8 - Timeouts</a></li>\n</ul>\n<h1 id=\"a-quick-recap\"><a href=\"#a-quick-recap\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A Quick Recap</h1>\n<p>In my previous posts on Reactive Extensions (Rx) I've outlined a few clear areas where Reactive Extensions can be used in the real world. I've uncovered areas where it provides a cleaner and improved API surface as compared to older .NET code. Namely, replacing C# events, wrapping existing C# events and replacing <code class=\"language-text\">System.Threading.Timers</code> (Or other <code class=\"language-text\">Timer</code> classes, of which there are a few in .NET).</p>\n<p>Once you have your observables, you need to do something with them. In my last post on the subject I showed how and when you can await an observable.</p>\n<p>In this post I'm going to show how you can also go the other way around. You can turn tasks into an observable. I'll also show one clear reason to use this facility.</p>\n<h1 id=\"converting-tasks-to-observables\"><a href=\"#converting-tasks-to-observables\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Converting Tasks to Observables</h1>\n<p>The <code class=\"language-text\">ToObservable</code> extension method allows you to convert a Task or <code class=\"language-text\">Task&lt;T&gt;</code> into an <code class=\"language-text\">IObservable&lt;T&gt;</code>. Calling <code class=\"language-text\">ToObservable</code> on a <code class=\"language-text\">Task</code> returns an <code class=\"language-text\">IObservable&lt;Unit&gt;</code>. A Unit is a kind of empty object that does nothing, the only reason it is there is because there is no <code class=\"language-text\">IObservable</code> (Without the 'T') interface.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">IObservable<span class=\"token operator\">&lt;</span>Unit<span class=\"token operator\">></span> observable <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Working\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nIObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> observableT <span class=\"token operator\">=</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"Working\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you subscribe to the above observables, they will only ever return one value and then complete. You might be thinking, hang on just a second Rehan, whats the point of doing this?</p>\n<h1 id=\"putting-it-all-together\"><a href=\"#putting-it-all-together\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Putting It All Together</h1>\n<p>So when should we use this feature? Well, lets walk through some examples and see what happens. Lets assume we have the following contrived code:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">GetHelloString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">GetWorldString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What happens in the case where we call both of these methods and want to get the first result back. How does this code look using the Task Parallel Library (TPL) as compared to Reactive Extensions (Rx).</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">WaitForFirstResultAndReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetHelloString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetWorldString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">WhenAny</span><span class=\"token punctuation\">(</span>task1<span class=\"token punctuation\">,</span> task2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">WaitForFirstResultAndReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> observable1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetHelloString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> observable2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetWorldString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> observable1<span class=\"token punctuation\">.</span><span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span>observable2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">FirstAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the Task Parallel Library (TPL) example, I simply use the <code class=\"language-text\">WhenAny</code> method to await the first task that completes and then return the result.</p>\n<p>In the Reactive Extensions example above, I'm converting my tasks to observables, using the Merge method to convert them to a single observable and then using the FirstAsync method to await the first result (We covered await'ing observables in the last post).</p>\n<p>Overall the two techniques look pretty similar, with the TPL having a slight edge in terms of simplicity.</p>\n<p>How about another example. Here we will try to await both of the results and put them together to get some meaningful result.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">WaitForAllResultsAndReturnCombinedResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetHelloString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetWorldString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">WhenAll</span><span class=\"token punctuation\">(</span>task1<span class=\"token punctuation\">,</span> task2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">WaitForAllResultsAndReturnCombinedResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> observable1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetHelloString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> observable2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetWorldString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> observable1<span class=\"token punctuation\">.</span><span class=\"token function\">Zip</span><span class=\"token punctuation\">(</span>observable2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the Task Parallel Library (TPL) example, I'm using the <code class=\"language-text\">WhenAll</code> method to await the results of both tasks which are returned as an array of strings. I then join these strings and return the results.</p>\n<p>In the Reactive Extensions example above, I'm converting my tasks to observables, then using the <code class=\"language-text\">Zip</code> method to combine the results returned from both observables by providing it with a delegate which joins the two strings.</p>\n<p>Again, both look pretty similar but with the pure TPL example being slightly simpler to understand.</p>\n<p>One more example, this time we'll return the first result but add a timeout to the equation.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">WaitForFirstResultAndReturnResultWithTimeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetHelloString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetWorldString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Task</span> timeoutTask <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Task</span> completedTask <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">WhenAny</span><span class=\"token punctuation\">(</span>task1<span class=\"token punctuation\">,</span> task2<span class=\"token punctuation\">,</span> timeoutTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>completedTask <span class=\"token operator\">==</span> timeoutTask<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TimeoutException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The operation has timed out\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>completedTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">WaitForFirstResultAndReturnResultWithTimeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> observable1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetHelloString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> observable2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetWorldString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> observable1<span class=\"token punctuation\">.</span><span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span>observable2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Timeout</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">FirstAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the Task Parallel Library (TPL) example, I'm awaiting a third task which represents the timeout. If the timeout task finishes first, I raise a <code class=\"language-text\">TimeoutException</code>.</p>\n<p>In the Reactive Extensions example, we merge the two observables again but this time use the <code class=\"language-text\">Timeout</code> method to achieve the same results.</p>\n<p>Here we have a clear winner, the Reactive Extensions code is more concise and easier to follow.</p>\n<p>What happens when we combine the two approaches.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">WaitForFirstResultAndReturnResultWithTimeOut2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetHelloString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> task2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetWorldString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> Task\n        <span class=\"token punctuation\">.</span><span class=\"token function\">WhenAny</span><span class=\"token punctuation\">(</span>task1<span class=\"token punctuation\">,</span> task2<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Timeout</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">FirstAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we use the <code class=\"language-text\">ToObservable</code> and <code class=\"language-text\">Timeout</code> methods right at the end. As you can see this combined approach gives us the best of both worlds and makes the code much easier to read.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>One definite reason to convert <code class=\"language-text\">Task</code>'s to Observables is to use the <code class=\"language-text\">Timeout</code> method. There may be other reasons but I'm having a hard time thinking of any right now. In fact, I'm having a hard time thinking of any other posts to make about Reactive Extensions (Rx). It's an interesting chunk of code and I've learned a lot writing this series of posts as I hope you have too.</p>\n"}},{"node":{"title":"Reactive Extensions (Rx) – Part 5 – Awaiting Observables","path":"/reactive-extensions-part5-awaiting-observables/","date":"27 March 2014","timeToRead":5,"description":"How and where to use Task Parallel Library (TPL) async and await with Reactive Extensions (Rx). Also, how to use TPL for awaiting observables.","content":"<ul>\n<li><a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) - Part 1 - Replacing C# Events</a></li>\n<li><a href=\"/reactive-extensions-part2-wrapping-events/\">Reactive Extensions (Rx) - Part 2 - Wrapping C# Events</a></li>\n<li><a href=\"/reactive-extensions-part3-naming-conventions/\">Reactive Extensions (Rx) - Part 3 - Naming Conventions</a></li>\n<li><a href=\"/reactive-extensions-part4-replacing-timers/\">Reactive Extensions (Rx) - Part 4 - Replacing Timers</a></li>\n<li><a href=\"/reactive-extensions-part4-awaiting-observables/\">Reactive Extensions (Rx) - Part 5 - Awaiting Observables</a></li>\n<li><a href=\"/reactive-extensions-part6-task-toobservable/\">Reactive Extensions (Rx) - Part 6 - Task ToObservable</a></li>\n<li><a href=\"/reactive-extensions-part7-sample-events/\">Reactive Extensions (Rx) - Part 7 - Sample Events</a></li>\n<li><a href=\"/reactive-extensions-rx-part-8-timeouts/\">Reactive Extensions (Rx) - Part 8 - Timeouts</a></li>\n</ul>\n<p>So I've just finished extolling the wonderful virtues of <code class=\"language-text\">TaskCompletionSource</code> with a colleague and thought I'd share the joy more widely. Eventually this will turn into a post about how great Reactive Extensions (Rx) is, I promise.</p>\n<h1 id=\"taskcompletionsource\"><a href=\"#taskcompletionsource\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>TaskCompletionSource</h1>\n<p><a href=\"http://msdn.microsoft.com/en-us/library/dd449174%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TaskCompletionSource</a> is a great tool to turn any asynchronous operation which does not follow the Task Parallel Library (TPL) pattern into a Task. The example below is something I've started to do in a few places.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">?</span><span class=\"token operator\">></span> <span class=\"token function\">ShowDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    TaskCompletionSource<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">?</span><span class=\"token operator\">></span> taskCompletionSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">TaskCompletionSource</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span>?<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Window</span> window <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyDialogWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">EventHandler</span> eventHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    eventHandler <span class=\"token operator\">=</span> \n        <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            window<span class=\"token punctuation\">.</span>Closed <span class=\"token operator\">-=</span> eventHandler<span class=\"token punctuation\">;</span>\n            taskCompletionSource<span class=\"token punctuation\">.</span><span class=\"token function\">SetResult</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>DialogResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span>Closed <span class=\"token operator\">+=</span> eventHandler<span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> taskCompletionSource<span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the example above we are creating a new window, registering for its <code class=\"language-text\">Closed</code> event and then showing the window. When the window is closed, we de-register from the closed event handler (To avoid a remaining reference to the window, causing a memory leak) and the <code class=\"language-text\">DialogResult</code> of the window is passed to the <code class=\"language-text\">TaskCompletionSource</code> using the <code class=\"language-text\">SetResult</code> method.</p>\n<p>The <code class=\"language-text\">TaskCompletionSource</code> gives us a nice <code class=\"language-text\">Task</code> object which we can return at the end of the method. When we return the task its status is <code class=\"language-text\">WaitingForActivation</code>. Only when the <code class=\"language-text\">SetResult</code> method is called when the window closes, does the tasks status change to <code class=\"language-text\">RanToCompletion</code>.</p>\n<p>This whole operation has been wrapped up and packaged nicely in a <code class=\"language-text\">Task&lt;bool?&gt;</code> with a nice bow on top with the help of <code class=\"language-text\">TaskCompletionSource</code>. Now we can call the method and await the results from the method call, thus allowing us to savour the power and simplicity the TPL affords us.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">bool</span><span class=\"token punctuation\">?</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">ShowDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>There are other great ways to use <code class=\"language-text\">TaskCompletionSource</code> of course. Generally speaking though I have found myself using it to turn an operation where I am waiting for an event into a task. For <a href=\"http://blogs.msdn.com/b/pfxteam/archive/2009/06/02/9685804.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">more information</a> on <code class=\"language-text\">TaskCompletionSource</code> or the TPL in general I highly recommend reading <a href=\"http://blogs.msdn.com/b/pfxteam/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stephen Toub's blog</a>.</p>\n<h1 id=\"awaiting-observables\"><a href=\"#awaiting-observables\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Awaiting Observables</h1>\n<p>Having showed my colleague the above example and feeling very content, I suddenly realised that Reactive Extensions (Rx) can make the code even simpler. With the advent of the latest version of Reactive Extensions (Rx) you can now await observables and we can turn the method above into this:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">?</span><span class=\"token operator\">></span> <span class=\"token function\">ShowDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> window <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyDialogWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> closed <span class=\"token operator\">=</span> Observable\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EventHandler</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            h <span class=\"token operator\">=></span> window<span class=\"token punctuation\">.</span>Closed <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n            h <span class=\"token operator\">=></span> window<span class=\"token punctuation\">.</span>Closed <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> closed<span class=\"token punctuation\">.</span><span class=\"token function\">FirstAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span>DialogResult<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">await</code> keyword is just some syntactic sugar in the C# language that makes writing thorny asynchronous code effortless. The real meat of what drives it is the <code class=\"language-text\">GetAwaiter</code> method. The Reactive Extensions (Rx) team seeing the genius that is the Task Parallel Library (TPL) took advantage. They added this method (actually an extension method) to <code class=\"language-text\">IObservable&lt;T&gt;</code>, allowing us to await an observable as seen in the example above.</p>\n<p>However, there is a caveat which I shall explain. In the example above the Closed event could conceivably be fired any number of times (If the window was opened and closed a few times) and the observable wrapper around the Closed event never completes. So our observable returns multiple results but a task can only return a single result.</p>\n<p>The secret in our example is the <code class=\"language-text\">FirstAsync</code> method. We are actually awaiting the first result returned by our observable and don't care about any further results. By default awaiting an observable without the <code class=\"language-text\">FirstAsync</code> method above will actually await the last result <strong>before completion</strong>. If your observable does not complete, then you will be waiting <strong>forever</strong>!</p>\n<p>Handily the Reactive Extensions (Rx) team has added several methods which you can use before you use <code class=\"language-text\">await</code> to modify the result of what you are awaiting. All of these methods end with the word <code class=\"language-text\">Async</code>. I've added a short list of these methods below (There are lots of overloads so I've just highlighted the main ones):</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Returns the first element of an observable sequence.</span>\n<span class=\"token keyword\">string</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">FirstAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Returns the first element of an observable sequence, or a default value if no such element exists.</span>\n<span class=\"token keyword\">string</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefaultAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Returns the last element of an observable sequence. </span>\n<span class=\"token comment\">// This is the default action of awaiting an observable.</span>\n<span class=\"token keyword\">string</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">LastAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Returns the last element of an observable sequence, </span>\n<span class=\"token comment\">// or a default value if no such element exists.</span>\n<span class=\"token keyword\">string</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">LastOrDefaultAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Returns the only element of an observable sequence, and throws an exception if there is not exactly </span>\n<span class=\"token comment\">// one element in the observable sequence.</span>\n<span class=\"token keyword\">string</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">SingleAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Returns the only element of an observable sequence, or a default value if the observable sequence </span>\n<span class=\"token comment\">// is empty; this method reports an exception if there is more than one element in the observable sequence.</span>\n<span class=\"token keyword\">string</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">SingleOrDefaultAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Invokes an action for each element in the observable sequence and returns a Task that will get </span>\n<span class=\"token comment\">// signalled when the sequence terminates.</span>\n<span class=\"token keyword\">await</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">ForEachAsync</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>All of the above methods allow you to pick a single result from your observable. <code class=\"language-text\">ForEachAsync</code> is different though as it performs an action on each item and when your observable completes (If it does) then the task completes.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>So we've learned how to await observables in different ways and how it can be another way of doing the same thing that <code class=\"language-text\">TaskCompletionSource</code> does but in a cleaner more elegant way.</p>\n<p>We've also learned that there are some caveats that you need to be aware of when awaiting an observable i.e. that observables return multiple results and you have to pick one to return in your task.</p>\n"}},{"node":{"title":"Reactive Extensions (Rx) – Part 4 – Replacing Timers","path":"/reactive-extensions-part4-replacing-timers/","date":"11 March 2014","timeToRead":3,"description":"You should definitely consider using Reactive Extensions (Rx) is as a direct replacement for .NET Timers. This post will explain how.","content":"<ul>\n<li><a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) - Part 1 - Replacing C# Events</a></li>\n<li><a href=\"/reactive-extensions-part2-wrapping-events/\">Reactive Extensions (Rx) - Part 2 - Wrapping C# Events</a></li>\n<li><a href=\"/reactive-extensions-part3-naming-conventions/\">Reactive Extensions (Rx) - Part 3 - Naming Conventions</a></li>\n<li><a href=\"/reactive-extensions-part4-replacing-timers/\">Reactive Extensions (Rx) - Part 4 - Replacing Timers</a></li>\n<li><a href=\"/reactive-extensions-part4-awaiting-observables/\">Reactive Extensions (Rx) - Part 5 - Awaiting Observables</a></li>\n<li><a href=\"/reactive-extensions-part6-task-toobservable/\">Reactive Extensions (Rx) - Part 6 - Task ToObservable</a></li>\n<li><a href=\"/reactive-extensions-part7-sample-events/\">Reactive Extensions (Rx) - Part 7 - Sample Events</a></li>\n<li><a href=\"/reactive-extensions-rx-part-8-timeouts/\">Reactive Extensions (Rx) - Part 8 - Timeouts</a></li>\n</ul>\n<p>Reactive Extensions (Rx) is a huge library. In this series of blog posts I've tried to illustrate real world applications where using Rx can significantly improve and/or simplify your code. So far I've talked about using Rx to replace standard C# events and also wrapping C# events with observables.</p>\n<p>In this post I'm going to talk about another area where Rx provides a nicer API surface, as compared to an existing .NET API. In particular, I'm talking about the .NET Timers. There are a few different timers available in the .NET framework. The main ones being <a href=\"http://msdn.microsoft.com/en-us/library/system.threading.timer%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">System.Threading.Timer</a> and <a href=\"http://msdn.microsoft.com/en-us/library/system.timers.timer%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">System.Timers.Timer</a>. Each one has their pros and cons but I'm not going to go into which ones are better as that's a whole <a href=\"http://stackoverflow.com/questions/1416803/system-timers-timer-vs-system-threading-timer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">other conversation</a>.</p>\n<h1 id=\"existing-net-timers\"><a href=\"#existing-net-timers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Existing .NET Timers</h1>\n<p>Below is a very simple example of how to use the <code class=\"language-text\">System.Timers.Timer</code> (<code class=\"language-text\">System.Threading.Timer</code> is very similar). We new-up a <code class=\"language-text\">Timer</code> with the number of milliseconds we want to timer to raise it's <code class=\"language-text\">Elapsed</code> event, register for the <code class=\"language-text\">Elasped</code> event and finally start the timer.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">StartTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Timer</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    timer<span class=\"token punctuation\">.</span>Elapsed <span class=\"token operator\">+=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>OnTimerElapsed<span class=\"token punctuation\">;</span>\n    timer<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnTimerElapsed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElapsedEventArgs</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do Stuff Here</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>SignalTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Console WriteLine Prints</span>\n    <span class=\"token comment\">// 11/03/2014 10:58:35</span>\n    <span class=\"token comment\">// 11/03/2014 10:58:40</span>\n    <span class=\"token comment\">// 11/03/2014 10:58:45</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"reactive-extensions-rx-timers\"><a href=\"#reactive-extensions-rx-timers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reactive Extensions (Rx) Timers</h1>\n<p>Now here is how to do almost the exact same thing with Reactive Extensions. In this scenario we use the <code class=\"language-text\">Interval</code> method to specify the timer interval and simply subscribe to the observable. The only difference is that we don't get a <code class=\"language-text\">DateTime</code> with the time of the timer elapsed event but an integer representing the number of times the timer elapsed delegate has been fired (Much more useful in my opinion, as you can always derive the time from this number).</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">StartTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Observable\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Interval</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>\n            x <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Do Stuff Here</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// Console WriteLine Prints</span>\n                    <span class=\"token comment\">// 0</span>\n                    <span class=\"token comment\">// 1</span>\n                    <span class=\"token comment\">// 2</span>\n                    <span class=\"token comment\">// ...</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But that's not all, Reactive Extensions provides another method which can be quite useful. In the example below which looks almost exactly the same, we use the <code class=\"language-text\">Timer</code> method instead of <code class=\"language-text\">Interval</code>. This method only calls the timer elapsed delegate once.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">StartTimerAndFireOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Observable\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>\n            x <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Do Stuff Here</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// Console WriteLine Prints</span>\n                <span class=\"token comment\">// 0</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">Timer</code> method has lots of overloads which you can take a look at. The example below calls the timer elapsed delegate every five seconds but only starts to do so, after a minute has passed.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">StartTimerInOneMinute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Observable\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>\n            x <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Do Stuff Here</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// Console WriteLine Prints</span>\n                <span class=\"token comment\">// 0</span>\n                <span class=\"token comment\">// 1</span>\n                <span class=\"token comment\">// 2</span>\n                <span class=\"token comment\">// ...</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The final thing you need to know about the <code class=\"language-text\">Interval</code> and <code class=\"language-text\">Timer</code> methods is that they can optionally take an <code class=\"language-text\">IScheduler</code> as a final parameter. This allows the timer elapsed delegate to be run on any thread of your choosing. In the example below we are subscribing the event on the WPF UI thread. There are several other <code class=\"language-text\">Scheduler</code>'s you can use, so just take a look.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">StartTimerOnUIThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Observable\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Interval</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> DispatcherScheduler<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>\n            x <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Do UI Stuff Here</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>If you haven't started using Reactive Extensions yet, then here is yet another reason to get going. What I have not shown in this post is the shear superhuman power you get when you use the Linq methods to modify your observable just before you make the call to <code class=\"language-text\">Subscribe</code>.</p>\n"}},{"node":{"title":"Reactive Extensions (Rx) – Part 3 – Naming Conventions","path":"/reactive-extensions-part3-naming-conventions/","date":"14 February 2014","timeToRead":2,"description":"Reactive Extensions (Rx) Advantages of using IObservable property naming conventions and comparison between C# events.","content":"<ul>\n<li><a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) - Part 1 - Replacing C# Events</a></li>\n<li><a href=\"/reactive-extensions-part2-wrapping-events/\">Reactive Extensions (Rx) - Part 2 - Wrapping C# Events</a></li>\n<li><a href=\"/reactive-extensions-part3-naming-conventions/\">Reactive Extensions (Rx) - Part 3 - Naming Conventions</a></li>\n<li><a href=\"/reactive-extensions-part4-replacing-timers/\">Reactive Extensions (Rx) - Part 4 - Replacing Timers</a></li>\n<li><a href=\"/reactive-extensions-part4-awaiting-observables/\">Reactive Extensions (Rx) - Part 5 - Awaiting Observables</a></li>\n<li><a href=\"/reactive-extensions-part6-task-toobservable/\">Reactive Extensions (Rx) - Part 6 - Task ToObservable</a></li>\n<li><a href=\"/reactive-extensions-part7-sample-events/\">Reactive Extensions (Rx) - Part 7 - Sample Events</a></li>\n<li><a href=\"/reactive-extensions-rx-part-8-timeouts/\">Reactive Extensions (Rx) - Part 8 - Timeouts</a></li>\n</ul>\n<p>Standard C# events do not have any real naming convention, except using the English language to suggest that something has happened e.g. <code class=\"language-text\">PropertyChanged</code>. Should a property returning an <code class=\"language-text\">IObservable&lt;T&gt;</code> have a naming convention? I'm not entirely certain but I'll explain why I have used one and why.</p>\n<p>C# events are easily differentiated in a class from properties and methods because they have a different icon in the Visual Studio Intelli-Sense. Visual Studio does not provide <code class=\"language-text\">IObservable&lt;T&gt;</code> properties any differentiation. This may change in the future if Microsoft decides to integrate Reactive Extensions (Rx) more deeply into Visual Studio.</p>\n<p>The second reason for using a naming convention is that I often wrap existing C# events with a Reactive Extensions event. It's not possible to have the same name for a C# event and an <code class=\"language-text\">IObservable&lt;T&gt;</code> property.</p>\n<p>You will have noticed already if you've looked at my previous posts that I use the word 'When' prefixed before the name of the property. I believe, this nicely indicates that an event has occurred and also groups all our Reactive Extension event properties together under Intelli-Sense.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> WhenPropertyChanged\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I have read in a few places people suggesting that so called 'Hot' and 'Cold' (See <a href=\"http://stackoverflow.com/questions/2521277/what-are-the-hot-and-cold-observables\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> for an explanation) observables should have different naming conventions. I personally feel that this is an implementation detail and I can't see why the subscriber to an event would need to know that an event was 'Hot' or 'Cold' (Prove me wrong). Also, trying to teach this concept to other developers and get them to implement it would mean constantly looking up the meanings (I keep forgetting myself), whereas using 'When' is a nice simple concept which anyone can understand.</p>\n<p>This is a pretty open question at the moment. What are your thoughts on the subject?</p>\n"}},{"node":{"title":"Reactive Extensions (Rx) – Part 2 – Wrapping C# Events","path":"/reactive-extensions-part2-wrapping-events/","date":"13 February 2014","timeToRead":3,"description":"Reactive Extensions IObservable wrappers for C# events and hiding the C# events entirely from subscribers using explicit interface implementations.","content":"<ul>\n<li><a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) - Part 1 - Replacing C# Events</a></li>\n<li><a href=\"/reactive-extensions-part2-wrapping-events/\">Reactive Extensions (Rx) - Part 2 - Wrapping C# Events</a></li>\n<li><a href=\"/reactive-extensions-part3-naming-conventions/\">Reactive Extensions (Rx) - Part 3 - Naming Conventions</a></li>\n<li><a href=\"/reactive-extensions-part4-replacing-timers/\">Reactive Extensions (Rx) - Part 4 - Replacing Timers</a></li>\n<li><a href=\"/reactive-extensions-part4-awaiting-observables/\">Reactive Extensions (Rx) - Part 5 - Awaiting Observables</a></li>\n<li><a href=\"/reactive-extensions-part6-task-toobservable/\">Reactive Extensions (Rx) - Part 6 - Task ToObservable</a></li>\n<li><a href=\"/reactive-extensions-part7-sample-events/\">Reactive Extensions (Rx) - Part 7 - Sample Events</a></li>\n<li><a href=\"/reactive-extensions-rx-part-8-timeouts/\">Reactive Extensions (Rx) - Part 8 - Timeouts</a></li>\n</ul>\n<p>Sometimes it is not possible to replace a C# event with a Reactive Extensions (Rx) event entirely. This is usually because we are implementing an interface which has a C# event and we don't own the interface.</p>\n<p>However, as I'll show in this post, its possible to create <code class=\"language-text\">IObservable&lt;T&gt;</code> wrappers for C# events and even to hide the C# events entirely from consumers of the class.</p>\n<p>The method of wrapping C# events depends on the type of event handler used. Below are the three type of event handler and the method of wrapping them with an observable event.</p>\n<h1 id=\"wrapping-an-eventhandler-c-event\"><a href=\"#wrapping-an-eventhandler-c-event\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Wrapping an EventHandler C# Event</h1>\n<p>The <code class=\"language-text\">FromEventPattern</code> method is used to wrap the event. Notice we have to specify delegates for subscribing (<code class=\"language-text\">+=</code>) and unsubscribing (<code class=\"language-text\">-=</code>) to the event.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">EventHandler</span> BunnyRabbitsAttack<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token operator\">></span> WhenBunnyRabbitsAttack\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Observable\n            <span class=\"token punctuation\">.</span><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">(</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"wrapping-an-eventhandlert-c-event\"><a href=\"#wrapping-an-eventhandlert-c-event\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Wrapping an EventHandler<T> C# Event</h1>\n<p>This example is much the same as the last, except we have to deal with the event arguments. The <code class=\"language-text\">FromEventPattern</code> method returns an <code class=\"language-text\">EventPattern&lt;T&gt;</code> object, which contains the sender and the event arguments. We're only interested in the contents of the event arguments, so we use a Select to return just the <code class=\"language-text\">BunnyRabbits</code> property.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> EventHandler<span class=\"token operator\">&lt;</span>BunnyRabbitsEventArgs<span class=\"token operator\">></span> BunnyRabbitsAttack<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span>BunnyRabbits<span class=\"token operator\">></span> WhenBunnyRabbitsAttack\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Observable\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BunnyRabbitsEventArgs</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">.</span>BunnyRabbits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"wrapping-a-custom-event-handler-c-event\"><a href=\"#wrapping-a-custom-event-handler-c-event\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Wrapping a Custom Event Handler C# Event</h1>\n<p>Some C# events use a custom event handler. In this case we have to specify the type of the event handler as a generic argument in the <code class=\"language-text\">FromEventPattern</code> method.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">BunnyRabbitsEventHandler</span> BunnyRabbitsAttack<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span>BunnyRabbits<span class=\"token operator\">></span> WhenBunnyRabbitsAttack\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Observable\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BunnyRabbitsEventHandler</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BunnyRabbitsEventArgs</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BunnyRabbitsAttack <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">.</span>BunnyRabbits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"hiding-existing-events-using-explicit-interface-implementation\"><a href=\"#hiding-existing-events-using-explicit-interface-implementation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hiding Existing Events Using Explicit Interface Implementation</h1>\n<p>The disadvantage of the above approach is that we now have two ways to access our event. One with the old style C# event and the other with our new Reactive Extensions event. With a bit of trickery we can hide the C# event in some cases.</p>\n<p>The <code class=\"language-text\">INotifyPropertyChanged</code> interface is very commonly used by XAML developers. It has a single event called <code class=\"language-text\">PropertyChanged</code>. To hide the <code class=\"language-text\">PropertyChanged</code> C# event we can explicitly implement the interface (Click <a href=\"http://stackoverflow.com/questions/143405/c-sharp-interfaces-implicit-implementation-versus-explicit-implementation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> for details on implicit versus explicit implementations of interfaces). Secondly, we wrap the event as we did before.</p>\n<p>Now the <code class=\"language-text\">PropertyChanged</code> C# event can only be accessed by first casting the object to <code class=\"language-text\">INotifyPropertyChanged</code> (Binding in XAML languages, which uses this interface continues to work). Our new Reactive Extensions observable event is now the default method of subscribing for property changed events.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NotifyPropertyChanges</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">INotifyPropertyChanged</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">event</span> <span class=\"token class-name\">PropertyChangedEventHandler</span> INotifyPropertyChanged<span class=\"token punctuation\">.</span>PropertyChanged\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">add</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">+=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">remove</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">-=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">PropertyChangedEventHandler</span> propertyChanged<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> WhenPropertyChanged\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Observable\n                <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PropertyChangedEventHandler</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PropertyChangedEventArgs</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n                    h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                    h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">.</span>PropertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyChanged<span class=\"token punctuation\">?.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PropertyChangedEventArgs</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"summing-up\"><a href=\"#summing-up\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Summing Up</h1>\n<p>So it may not always be possible to get rid of, dare I say it legacy C# events but we can certainly wrap them with Reactive Extension observables and even hide them altogether.</p>\n"}},{"node":{"title":"Reactive Extensions (Rx) - Part 1 - Replacing C# Events","path":"/reactive-extensions-part1-replacing-events/","date":"11 February 2014","timeToRead":5,"description":"You should definitely consider using Reactive Extensions (Rx) is as a direct replacement for C# events. This post will explain how.","content":"<ul>\n<li><a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) - Part 1 - Replacing C# Events</a></li>\n<li><a href=\"/reactive-extensions-part2-wrapping-events/\">Reactive Extensions (Rx) - Part 2 - Wrapping C# Events</a></li>\n<li><a href=\"/reactive-extensions-part3-naming-conventions/\">Reactive Extensions (Rx) - Part 3 - Naming Conventions</a></li>\n<li><a href=\"/reactive-extensions-part4-replacing-timers/\">Reactive Extensions (Rx) - Part 4 - Replacing Timers</a></li>\n<li><a href=\"/reactive-extensions-part4-awaiting-observables/\">Reactive Extensions (Rx) - Part 5 - Awaiting Observables</a></li>\n<li><a href=\"/reactive-extensions-part6-task-toobservable/\">Reactive Extensions (Rx) - Part 6 - Task ToObservable</a></li>\n<li><a href=\"/reactive-extensions-part7-sample-events/\">Reactive Extensions (Rx) - Part 7 - Sample Events</a></li>\n<li><a href=\"/reactive-extensions-rx-part-8-timeouts/\">Reactive Extensions (Rx) - Part 8 - Timeouts</a></li>\n</ul>\n<p>For those who have not tried Reactive Extensions (Rx) yet, I highly recommend it. If I had to describe it in a few words it would be 'Linq to events'. If you have not already learned about it, <a href=\"http://www.introtorx.com/uat/content/v1.0.10621.0/00_Foreword.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> is by far the best resource on learning its intricacies.</p>\n<p>I have spent a lot of time reading about Reactive Extensions but what I have not found in my research is examples or pointers on how or even where it should be used in preference to other code. One area where you should definitely consider using Reactive Extensions is as a direct replacement for bog standard C# events, which have been around since C# 1.0. This post will explain how.</p>\n<h1 id=\"exposing-an-event\"><a href=\"#exposing-an-event\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Exposing an Event</h1>\n<p>Here is an example of a standard C# event using the standard recommended pattern:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JetFighter</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> EventHandler<span class=\"token operator\">&lt;</span>JetFighterEventArgs<span class=\"token operator\">></span> PlaneSpotted<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SpotPlane</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JetFighter</span> jetFighter<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        EventHandler<span class=\"token operator\">&lt;</span>JetFighterEventArgs<span class=\"token operator\">></span> eventHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>PlaneSpotted<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eventHandler <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">eventHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JetFighterEventArgs</span><span class=\"token punctuation\">(</span>jetfighter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now this is how you replace it using Reactive Extensions:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JetFighter</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> Subject<span class=\"token operator\">&lt;</span>JetFighter<span class=\"token operator\">></span> planeSpotted <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">Subject</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JetFighter</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span>JetFighter<span class=\"token operator\">></span> PlaneSpotted <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">AsObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SpotPlane</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JetFighter</span> jetFighter<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">OnNext</span><span class=\"token punctuation\">(</span>jetFighter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So far it's all pretty straightforward, we have replaced the event with a property returning <code class=\"language-text\">IObservable&lt;T&gt;</code>. Raising the event is a simple matter of calling the <code class=\"language-text\">OnNext</code> method on the Subject class. Finally, we do not return our <code class=\"language-text\">Subject&lt;T&gt;</code> directly in our <code class=\"language-text\">PlaneSpotted</code> property, as someone could cast it back to <code class=\"language-text\">Subject&lt;T&gt;</code> and raise their own events! Instead we use the <code class=\"language-text\">AsObservable</code> method which returns a middle man. So far so good.</p>\n<p>Reactive Extensions also has the added concept of errors and completion, which C# events do not have. These are optional added concepts and not required for replacing C# events directly but worth knowing about, as they add an extra dimension to events which may be useful to you.</p>\n<p>The first concept is dealing with errors. What happens if there is an exception while you are spotting the plane and you want to notify your subscribers that there is a problem? Well you can do that, like this:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SpotPlane</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JetFighter</span> jetFighter<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>jetFighter<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UFO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UFO Found\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">OnNext</span><span class=\"token punctuation\">(</span>jetFighter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> exception<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">OnError</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we are using the <code class=\"language-text\">OnError</code> method to notify all the events subscribers that there has been an exception.</p>\n<p>So what about the concept of completion? Well, that's just as simple. Suppose that you have spotted all the planes and you want to notify all your subscribers that there will be no more spotted planes. You can do that like this:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AllPlanesSpotted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">OnCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So now all the code put together looks like this:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JetFighter</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> Subject<span class=\"token operator\">&lt;</span>JetFighter<span class=\"token operator\">></span> planeSpotted <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">Subject</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JetFighter</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span>JetFighter<span class=\"token operator\">></span> PlaneSpotted <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AllPlanesSpotted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">OnCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SpotPlane</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JetFighter</span> jetFighter<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>jetFighter<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UFO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UFO Found\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">OnNext</span><span class=\"token punctuation\">(</span>jetFighter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> exception<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">OnError</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"consuming-an-event\"><a href=\"#consuming-an-event\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Consuming an Event</h1>\n<p>Consuming the Reactive Extensions events is just as easy and this is where you start to see the real benefits of Reactive Extensions. This is how you subscribe and unsubscribe (often forgotten, which can lead to memory leaks) to a standard C# event:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BomberControl</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IDisposable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JetFighter</span> jetfighter<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">BomberControl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JetFighter</span> jetFighter<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        jetfighter<span class=\"token punctuation\">.</span>PlaneSpotted <span class=\"token operator\">+=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>OnPlaneSpotted<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        jetfighter<span class=\"token punctuation\">.</span>PlaneSpotted <span class=\"token operator\">-=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>OnPlaneSpotted<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPlaneSpotted</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JetFighterEventArgs</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token class-name\">JetFighter</span> spottedPlane <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>SpottedPlane<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I'm not going to go into it in too much detail, you subscribe using <code class=\"language-text\">+=</code> and unsubscribe using <code class=\"language-text\">-=</code> operators.</p>\n<p>This is how the same thing can be accomplished using Reactive Extensions:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BomberControl</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IDisposable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">IDisposable</span> planeSpottedSubscription<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">BomberControl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JetFighter</span> jetFighter<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span> planeSpottedSubscription <span class=\"token operator\">=</span> jetfighter<span class=\"token punctuation\">.</span>PlaneSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>OnPlaneSpotted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpottedSubscription<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPlaneSpotted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JetFighter</span> jetFighter<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token class-name\">JetFighter</span> spottedPlane <span class=\"token operator\">=</span> jetfighter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The key things to note here are first, the use of the <code class=\"language-text\">Subscribe</code> method to register for plane spotted events. Second, the subscription to the event is stored in an <code class=\"language-text\">IDisposable</code> which can later be disposed of, to un-register from the event. This is where things get interesting, since we now have an <code class=\"language-text\">IObservable&lt;T&gt;</code> we can now use all kinds of Linq queries on it like this:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">jetfighter<span class=\"token punctuation\">.</span>PlaneSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> “Eurofighter”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>OnPlaneSpotted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So in the above line of code, I'm using a Linq query to only register to events where the name of the spotted plane is <code class=\"language-text\">Eurofighter</code>. There are a lot more Linq methods you can use but that's beyond the scope of this post and also where you should take a look at <a href=\"http://www.introtorx.com/uat/content/v1.0.10621.0/00_Foreword.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this website</a>.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>Reactive Extensions (Rx) is a pretty large library which does a lot of stuff which overlaps with other libraries like the Task Parallel Library (TPL). It brings no new capabilities but does bring new ways to do things (much like Linq), while writing less code and with more elegance. It can be confusing coming to it as a newcomer, as to where exactly it can be used effectively. Replacing basic events with <code class=\"language-text\">IObservable&lt;T&gt;</code> is definitely one area where we can leverage its power.</p>\n"}}]}}},"context":{}}