{"hash":"9060675c298cf25575e36e9db010053531941368","data":{"tag":{"title":"Naming Convention","path":"/tag/naming-convention/","belongsTo":{"edges":[{"node":{"title":"Naming Conventions","path":"/naming-conventions/","date":"4 September 2014","timeToRead":3,"description":"Code is written to be read by humans, not machines. Naming conventions and standard code styling can boost productivity, particularly if working in teams.","content":"<p>Code is written to be read by humans, not for machines so it makes sense that following some basic ground rules for the look and feel of your code could make your code easier to read and boost your productivity. This is particularly important if you work in teams where each developer can go off and write their code in entirely different ways. Reading these different styles hinders your productivity. In my opinion if you add up all the few extra seconds here and there, it all adds up to extra hours or even days wasted over the course of a year per developer.</p>\n<div class=\"custom-block warning\"><p class=\"custom-block-title\">Disclaimer</p><p>At the end of the day, there are no rules for coding style. This is all a matter of personal preference.</p></div>\n<p>I've recently been doing a fair amount of T-SQL and C++ and thought I'd look into some form of naming conventions for the two languages. If you've read my previous blog post '<a href=\"/stop-brace-wars-use-stylecop/\">Stop the Brace Wars, Use StyleCop</a>', then you'll know how I feel about coding style in the C# language.</p>\n<h1 id=\"sql-coding-style\"><a href=\"#sql-coding-style\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL Coding Style</h1>\n<p>The SQL language is an interesting case, its a really old language from 1974 and in those days they didn't even have keyboards that could deal with upper and lower case letters!</p>\n<p>A lot of examples you'll see in books have used all-caps for the SQL keywords like <code class=\"language-text\">SELECT</code> and <code class=\"language-text\">WHERE</code>. As is <a href=\"http://en.wikipedia.org/wiki/All_caps#cite_note-autogenerated62-4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">widely researched</a>, all-caps is <strong>really</strong> bad for readability. However, as <a href=\"http://stackoverflow.com/questions/608196/why-should-i-capitalize-my-sql-keywords\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> StackOverflow article shows, all-caps is still a really popular style of writing SQL.</p>\n<div class=\"line-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> s<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>Size\n<span class=\"token keyword\">FROM</span> Spaceship s\n<span class=\"token keyword\">WHERE</span> s<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">'Death Star'</span></code></pre></div>\n<div class=\"line-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> s<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>Size\n<span class=\"token keyword\">from</span> Spaceship s\n<span class=\"token keyword\">where</span> s<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">'Death Star'</span></code></pre></div>\n<p>In the above example, the all capitals doesn't look too bad. It's a very short SQL statement and helps break up the three parts of the query. You could argue, that the SQL keywords are coloured blue, so we don't need the capitalization and that's a pretty good argument. As an aside please remember that colour blindness affects approximately 1 in 12 men and 1 in 200 women in the world (<a href=\"http://en.wikipedia.org/wiki/Color_blindness\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a>).</p>\n<p>But this is a really simple SQL statement, if you start writing a stored procedure of any complexity, things get ugly pretty fast (Imagine writing C# with upper case keywords, yuck!). Happily though, SQL developers seemed to have cottoned onto this. A lot more real world SQL examples on blogs and forums seem to be all lower-case. Even to me though, all lower case SQL does not look entirely correct, perhaps I've just been conditioned into all-caps, it is however easier to read for more complex T-SQL.</p>\n<h1 id=\"c-coding-style\"><a href=\"#c-coding-style\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C++ Coding Style</h1>\n<p>C++ is fairly similar to C#, so for me as a mainly C# developer it's easier to write in a similar style. However, I was not happy with this approach and wanted to see what was being done elsewhere and what was the more 'correct' approach, if there was one.</p>\n<p>I found the <a href=\"http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google C++ Style Guide</a> which is a really detailed, yet simple set of guidelines for how to write your C++. Definitely worth a quick read.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"aria-hidden\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusions</h1>\n<p>Coding style is a deeply personal subject and a pretty important one too that is often overlooked. In my opinion, it's always worth spending a little time looking up the preferred methods (There will usually be more than one) of writing in any particular language and picking one of the most popular approaches.</p>\n<p>If you're working in a team, you'll reap the benefits pretty quickly. Code written by others will look just like yours, saving you precious seconds. Even if your a solo developer, you'll benefit. Developers are inherently plagiarists, copying snippets of code found on-line written by others. Using a common coding style will mean that your style is more likely to be the same as the next snippet of code you or I shamelessly copy from the internet.</p>\n"}},{"node":{"title":"Reactive Extensions (Rx) – Part 3 – Naming Conventions","path":"/reactive-extensions-part3-naming-conventions/","date":"14 February 2014","timeToRead":2,"description":"Reactive Extensions (Rx) Advantages of using IObservable property naming conventions and comparison between C# events.","content":"<ul>\n<li><a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) - Part 1 - Replacing C# Events</a></li>\n<li><a href=\"/reactive-extensions-part2-wrapping-events/\">Reactive Extensions (Rx) - Part 2 - Wrapping C# Events</a></li>\n<li><a href=\"/reactive-extensions-part3-naming-conventions/\">Reactive Extensions (Rx) - Part 3 - Naming Conventions</a></li>\n<li><a href=\"/reactive-extensions-part4-replacing-timers/\">Reactive Extensions (Rx) - Part 4 - Replacing Timers</a></li>\n<li><a href=\"/reactive-extensions-part4-awaiting-observables/\">Reactive Extensions (Rx) - Part 5 - Awaiting Observables</a></li>\n<li><a href=\"/reactive-extensions-part6-task-toobservable/\">Reactive Extensions (Rx) - Part 6 - Task ToObservable</a></li>\n<li><a href=\"/reactive-extensions-part7-sample-events/\">Reactive Extensions (Rx) - Part 7 - Sample Events</a></li>\n<li><a href=\"/reactive-extensions-rx-part-8-timeouts/\">Reactive Extensions (Rx) - Part 8 - Timeouts</a></li>\n</ul>\n<p>Standard C# events do not have any real naming convention, except using the English language to suggest that something has happened e.g. <code class=\"language-text\">PropertyChanged</code>. Should a property returning an <code class=\"language-text\">IObservable&lt;T&gt;</code> have a naming convention? I'm not entirely certain but I'll explain why I have used one and why.</p>\n<p>C# events are easily differentiated in a class from properties and methods because they have a different icon in the Visual Studio Intelli-Sense. Visual Studio does not provide <code class=\"language-text\">IObservable&lt;T&gt;</code> properties any differentiation. This may change in the future if Microsoft decides to integrate Reactive Extensions (Rx) more deeply into Visual Studio.</p>\n<p>The second reason for using a naming convention is that I often wrap existing C# events with a Reactive Extensions event. It's not possible to have the same name for a C# event and an <code class=\"language-text\">IObservable&lt;T&gt;</code> property.</p>\n<p>You will have noticed already if you've looked at my previous posts that I use the word 'When' prefixed before the name of the property. I believe, this nicely indicates that an event has occurred and also groups all our Reactive Extension event properties together under Intelli-Sense.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> WhenPropertyChanged\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I have read in a few places people suggesting that so called 'Hot' and 'Cold' (See <a href=\"http://stackoverflow.com/questions/2521277/what-are-the-hot-and-cold-observables\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> for an explanation) observables should have different naming conventions. I personally feel that this is an implementation detail and I can't see why the subscriber to an event would need to know that an event was 'Hot' or 'Cold' (Prove me wrong). Also, trying to teach this concept to other developers and get them to implement it would mean constantly looking up the meanings (I keep forgetting myself), whereas using 'When' is a nice simple concept which anyone can understand.</p>\n<p>This is a pretty open question at the moment. What are your thoughts on the subject?</p>\n"}}]}}},"context":{}}