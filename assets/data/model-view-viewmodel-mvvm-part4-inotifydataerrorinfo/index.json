{"hash":"419bc9659fe0812c5ce9743fa48f56aefb017d4f","data":{"post":{"title":"Model-View-ViewModel (MVVM) - Part 4 - INotifyDataErrorInfo","path":"/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/","date":"2014-09-09T00:00:00+00:00","dateModified":null,"timeToRead":12,"author":"Muhammad Rehan Saeed","headings":[{"value":"How Does It Work?"},{"value":"Simple Example"},{"value":"Extensibility"},{"value":"Using Reactive Extensions (Rx) to Replace the ErrorsChanged Event"},{"value":"INotifyDataErrorInfo Support"},{"value":"Quick nod to IDataErrorInfo"},{"value":"Conclusions"}],"tags":[{"id":".NET","title":".NET","path":"/tag/net/"},{"id":"Base Class Library","title":"Base Class Library","path":"/tag/base-class-library/"},{"id":"BCL","title":"BCL","path":"/tag/bcl/"},{"id":"C#","title":"C#","path":"/tag/c/"},{"id":"Elysium Extra","title":"Elysium Extra","path":"/tag/elysium-extra/"},{"id":"Events","title":"Events","path":"/tag/events/"},{"id":"Explicit Interface Implementation","title":"Explicit Interface Implementation","path":"/tag/explicit-interface-implementation/"},{"id":"INotifyDataErrorInfo","title":"INotifyDataErrorInfo","path":"/tag/i-notify-data-error-info/"},{"id":"INotifyPropertyChanged","title":"INotifyPropertyChanged","path":"/tag/i-notify-property-changed/"},{"id":"Model-View-ViewModel (MVVM)","title":"Model-View-ViewModel (MVVM)","path":"/tag/model-view-view-model-mvvm/"}],"description":"An base class implementation for the INotifyDataErrorInfo interface. Used in the Model-View-ViewModel (MVVM) pattern. Targeted for best performance.","content":"<ol>\n<li><a href=\"/model-view-viewmodel-mvvm-part1-overview/\">Model-View-ViewModel (MVVM) - Overview</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part2-idisposable/\">Model-View-ViewModel (MVVM) - IDisposable</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part3-inotifypropertychanged/\">Model-View-ViewModel (MVVM) - INotifyPropertyChanged</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/\">Model-View-ViewModel (MVVM) - INotifyDataErrorInfo</a></li>\n</ol>\n<p>In this next part, I'm going to discuss validation of your view models using the <a href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifydataerrorinfo%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyDataErrorInfo</a> interface. Validation is an often ignored part of the Model-View-ViewModel (MVVM) story. If you need to create a form for your users to fill in (which is probably most applications, I would have thought), then you probably need to validate user input in some way and the <a href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifydataerrorinfo%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">INotifyDataErrorInfo</a> interface can get you there.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 250 80' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b1f8b4ee0775bda64008d9d31b6c6f23'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b1f8b4ee0775bda64008d9d31b6c6f23)' width='250' height='80' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAIAAACyFKxoAAAACXBIWXMAAAsSAAALEgHS3X78AAACQklEQVRIx%2b1VW6sSURj1ZwQVFfRfeughCvoHCb0m%2bRCnelTR0KejRg957SW8YArHG1qohOINRAXF25m862iOHh11TsvZByHOITxGHaJZD3v23vPNN2ut79szotN/HKJdgqbT6Xg8/n4VwHtZlt1TAMdxGCeTSTabbTabjUbjmAdFUcc741LB55%2btVCrFYnFLhozfRhRFU2R5JmDN40IBo9EI1LfLv4zlclkul8nbCYHpgnn87uH9w3sn7MmmAqvVCheLxaLX65PJ5GAwgNkQ3e12MSF17HQ6iUQCMa1WCwFOpxPe9Ho9zJEdGWq1msvlQrnb7TYE9/t93EXpSqWS2%2b0mPNaXBxgvFgskQQZ/wffq0wGzYJ5%2beHLr4Lrx6/uzChABR0dHUqlUJpNJJBK5XK5SqTQajVgsjsVi8/kchDwej06ngwa1Wm02m00mk9FoVCgUWq02lUqBusPhCIVCeFapVBoMBmSwWq3YtNvtpMJ7V6BU3ggA%2bzsvbz56%2b%2bDu69u6L4fbjhCRC8yG0M88CoVCvV6HtZFIBMxgJIyv8PD5fOFwGPWJx%2bM2mw3uptPparU6m81ggd/vR3G8Xm8mkwkEAvl8PhgMRqPR3xRAWohdsc9tz268uKYOvtkk5NbcKffTIT7f4mQHGnK5HMMwNE2jnWgeRBiAhsESDYMRMQjA5nA4xATjiEd/X6BF4R0MJXzoGW1LfVyulvxp4Hb9jMI8nAEkal8FyDn8xSdE9F/8yAQBggBBgCBAECAIEAT8IfwAQ0BrByykQ34AAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"250\" alt=\"INotifyDataErrorInfo Valid TextBox\" data-srcset=\"/assets/static/Valid.0f04e74.1bbb87ab75dd7e4a412c06aac201dfc7.png 250w\" data-sizes=\"(max-width: 250px) 100vw, 250px\" data-src=\"/assets/static/Valid.0f04e74.1bbb87ab75dd7e4a412c06aac201dfc7.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Valid.0f04e74.1bbb87ab75dd7e4a412c06aac201dfc7.png\" width=\"250\" alt=\"INotifyDataErrorInfo Valid TextBox\"></noscript></p>\n<p>That was a <strong>valid</strong> <code class=\"language-inline-text\">TextBox</code> using <code class=\"language-inline-text\">INotifyDataErrorInfo</code>.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 250 80' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-1b55166779042cbf76cef5763aed867b'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-1b55166779042cbf76cef5763aed867b)' width='250' height='80' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAUCAIAAACyFKxoAAAACXBIWXMAAAsSAAALEgHS3X78AAAD0ElEQVRIx9VWS3PaVhRm0W1X3fQfdNvptv%2bgneminf4Eb7twx/0HtWfiZpzEdcYTd2xDMA7GSQE/wEn84pHGjklFeMgxQrIEkrBAiKInet1eSenUTplJJwU6/uZDI6R77j3fPeeeIx%2b45vD9m0Et1WQkk5X/B9KSqRg29MF%2bDwG2a3Qhm2tpPJ8njl8SL34fKXMIkTrCtgtN6IZlmY430jFoh13nrCsCLBd9BdS7BpwLMKRFkaA2WtZJDcf3S5zrsCsA%2bxogHwNL8xx0BJim8yIYDM7Pz%2bdyOZ7nGYY5PT3lOI5hWbnbYRX7%2bQkOKLKHkwYxUlrnpHSG73kC4E%2bIAuwbQH0Paj%2b4/ht/C0gmkxMTE5OTk%2bPj41NTU9PT0zMzM2NjY0fZdNsERydVuBlwOkCOlhSpYfh%2b%2bS8Bpc/A2ReA%2bRGcfAB01ksdn%2b0mCtz1SqVy6AJFUZIkMQzLZDJSp91Q7BcIAVjKqlGgPlrSlEYQ%2b%2bWGI4APg2c%2bUPoUVL4CWR8gv3ODYPouZbzd9wwwohFLY1Sx%2bjpfrbzqQ6yAn5epYZBCKRQhEgUnAhbxLch/CNDPQeVLgHwEip94QXh3GTUtu3ShvGKVQqM/EVpMofQwmEbpvVK9THF/dPhWs67IIrAV2%2bw6JQieY%2b8M/Jcm4gWNZWgCO%2bvwzdYFy3ONgZNrsDDD63Umny/Z4O2WMAAB9Xq93W73TcLBolgs6rr%2bPp34nQJEscs1GLxKNFqCbahV7PyyHkPXTbfJGCbMR9u5Qhh6q8n3NAU/q5pXWy18rxsGNIe1v8U1Nd10J7NLpdKQBNQkWWmco4FgKJtJLS4uBFdWcyf5RGRtwR/pdNqpw9TL4%2bzSsj%2byuhaPb64EQjvJp4mNhzdu3mL5ln/h5%2b3kztydu1RTePIovHR/9UEgcD8U3t5IxB%2bt/3TzxvbuAVIowO%2bJcnk4AmiaFjpdoIvx2Eb2cPf2nbnDJ7sBvz/wy%2bJyOC7w3E4i%2bXgrfuv23LPM882HsdRBJh5ej0bj8dhWSxA2w6FYNDo7O0%2b3hK3Iij8USe%2bljrK/Ld6bvbe0vPf04Nf1B4/Tx3ChQqEwFAHwhAmC4HZ72w21cwtXsu03A/SeBrPiiqFl6T3dSSTbNk2YU6Y31rN/sy84xlw406LFfFtUnD42pBSq1WrwGPR6PUkUZVmBkCRJVVVZljVNkyVJUVTVeazIl6C6fxXXQJYld4jzwDOEM2har6epkiRDqSqsoJKEIIhhGIMXIIoibN6vB41TF94NvMIlCIL4Z6HzgWuOAQhwyt1I0LfPXPsI/AkVpvt2a4hVuAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"250\" alt=\"INotifyDataErrorInfo Invalid TextBox\" data-srcset=\"/assets/static/Invalid.0f04e74.84d40fcd0522512f58367ee0a7ab90f2.png 250w\" data-sizes=\"(max-width: 250px) 100vw, 250px\" data-src=\"/assets/static/Invalid.0f04e74.84d40fcd0522512f58367ee0a7ab90f2.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/Invalid.0f04e74.84d40fcd0522512f58367ee0a7ab90f2.png\" width=\"250\" alt=\"INotifyDataErrorInfo Invalid TextBox\"></noscript></p>\n<p>That was an <strong>invalid</strong> <code class=\"language-inline-text\">TextBox</code> using <code class=\"language-inline-text\">INotifyDataErrorInfo</code>.</p>\n<p>In the example above you can see a name text box which requires text, to be in a valid state. In the valid state there is a big green tick next to the text box and conversely in an invalid state, there is a big yellow warning sign, the text box background becomes pink and you get a nice tool-tip telling you what the error is. By the way, this example is taken from my <a href=\"https://github.com/RehanSaeed/Elysium-Extra\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Elysium Extra</a> WPF project which is freely available on GitHub.</p>\n<h1 id=\"how-does-it-work\"><a href=\"#how-does-it-work\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How Does It Work?</h1>\n<p>You can see the interface and its corresponding event arguments below. If the name property in our view model changes and is empty then the state of our view model is invalid, we can raise the <code class=\"language-inline-text\">ErrorsChanged</code> event, set the <code class=\"language-inline-text\">HasErrors</code> property to return true and make any calls to <code class=\"language-inline-text\">GetErrors</code> return a list of the errors (In our case we only have one but there could be multiple errors).</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>ComponentModel</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">INotifyDataErrorInfo</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> HasErrors <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">event</span> <span class=\"token class-name\">EventHandler<span class=\"token punctuation\">&lt;</span>DataErrorsChangedEventArgs<span class=\"token punctuation\">></span></span> ErrorsChanged<span class=\"token punctuation\">;</span>\n\n        <span class=\"token return-type class-name\">IEnumerable</span> <span class=\"token function\">GetErrors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataErrorsChangedEventArgs</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">EventArgs</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">DataErrorsChangedEventArgs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> PropertyName <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That's a fair amount of work and a base class to do all that makes life much easier. So what are the main aims of a base class implementing <code class=\"language-inline-text\">INotifyDataErrorInfo</code>?</p>\n<ul>\n<li>Integration - I usually want to raise an error in response to a property changing. So, we probably want to also implement <code class=\"language-inline-text\">INotifyPropertyChanged</code>. Handily, I showed how best to create a base class for that in my last article in this series. So our new base class can inherit from the <code class=\"language-inline-text\">NotifyPropertyChanges</code> base class.</li>\n<li>Performance - Performance is king. It needs to be fast and I mean really fast. You can't afford for your UI to freeze up while your view model works out if it has an error to raise or not. Some validation frameworks use an attribute based approach but this requires reflection so we will not be using that here.</li>\n<li>Reactive Extensions (Rx) - Events are old school, I want an observable error changed event notification system instead of the <code class=\"language-inline-text\">ErrorsChanged</code> C# event.</li>\n<li>Human Error - I don't want to raise error change events for properties that don't exist by accident.</li>\n<li>Has it Really Error'ed - I don't want to raise a error changed event twice by accident or if it has not really error'ed.</li>\n</ul>\n<p>So, without further ado, here is my implementation. Note that there are three classes:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Framework<span class=\"token punctuation\">.</span>ComponentModel</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>ComponentModel</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Diagnostics</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reflection</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">Framework<span class=\"token punctuation\">.</span>ComponentModel<span class=\"token punctuation\">.</span>Rules</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Provides functionality to provide errors for the object if it is in an invalid state.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;typeparam name=\"T\">The type of this instance.&lt;/typeparam></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NotifyDataErrorInfo<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">NotifyPropertyChanges</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">INotifyDataErrorInfo</span></span>\n        <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">NotifyDataErrorInfo<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> HasErrorsPropertyName <span class=\"token operator\">=</span> <span class=\"token string\">\"HasErrors\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">RuleCollection<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> rules <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RuleCollection<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> errors<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Occurs when the validation errors have changed for a property or for the entire object. </span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">event</span> <span class=\"token return-type class-name\">EventHandler<span class=\"token punctuation\">&lt;</span>DataErrorsChangedEventArgs<span class=\"token punctuation\">></span></span> INotifyDataErrorInfo<span class=\"token punctuation\">.</span>ErrorsChanged\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">add</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errorsChanged <span class=\"token operator\">+=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">remove</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errorsChanged <span class=\"token operator\">-=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Occurs when the validation errors have changed for a property or for the entire object. </span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">EventHandler<span class=\"token punctuation\">&lt;</span>DataErrorsChangedEventArgs<span class=\"token punctuation\">></span></span> errorsChanged<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the when errors changed observable event. Occurs when the validation errors have changed for a property or for the entire object. </span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value></span>\n        <span class=\"token comment\">/// The when errors changed observable event.</span>\n        <span class=\"token comment\">/// &lt;/value></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IObservable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> WhenErrorsChanged\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> Observable\n                    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>DataErrorsChangedEventArgs<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n                        h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errorsChanged <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                        h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errorsChanged <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">.</span>PropertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets a value indicating whether the object has validation errors. </span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value>&lt;c>true&lt;/c> if this instance has errors, otherwise &lt;c>false&lt;/c>.&lt;/value></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> HasErrors\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">InitializeErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the rules which provide the errors.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value>The rules this instance must satisfy.&lt;/value></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">RuleCollection<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> Rules <span class=\"token operator\">=></span> rules<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the validation errors for the entire object.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;returns>A collection of errors.&lt;/returns></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable</span> <span class=\"token function\">GetErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetErrors</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the validation errors for a specified property or for the entire object.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property to retrieve errors for. &lt;c>null&lt;/c> to </span>\n        <span class=\"token comment\">/// retrieve all errors for this instance.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns>A collection of errors.&lt;/returns></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable</span> <span class=\"token function\">GetErrors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetRuntimeProperty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Check that the property name exists for this instance.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">InitializeErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">IEnumerable</span> result<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span> allErrors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">KeyValuePair<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> keyValuePair <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    allErrors<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>keyValuePair<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                result <span class=\"token operator\">=</span> allErrors<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    result <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">[</span>propertyName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Raises the PropertyChanged event.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CallerMemberName</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyRules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyRules</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnPropertyChanged</span><span class=\"token punctuation\">(</span>HasErrorsPropertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Called when the errors have changed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnErrorsChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CallerMemberName</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetRuntimeProperty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Check that the property name exists for this instance.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">EventHandler<span class=\"token punctuation\">&lt;</span>DataErrorsChangedEventArgs<span class=\"token punctuation\">></span></span> eventHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errorsChanged<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eventHandler <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">eventHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DataErrorsChangedEventArgs</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Applies all rules to this instance.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ApplyRules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">InitializeErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName <span class=\"token keyword\">in</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>PropertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyRules</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Applies the rules to this instance for the specified property.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property.&lt;/param></span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ApplyRules</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">InitializeErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span> propertyErrors <span class=\"token operator\">=</span> rules<span class=\"token punctuation\">.</span><span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propertyErrors<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">[</span>propertyName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">[</span>propertyName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">[</span>propertyName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>propertyErrors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnErrorsChanged</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnErrorsChanged</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Initializes the errors and applies the rules if not initialized.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">InitializeErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyRules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Framework<span class=\"token punctuation\">.</span>ComponentModel<span class=\"token punctuation\">.</span>Rules</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// A named rule containing an error to be used if the rule fails.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;typeparam name=\"T\">The type of the object the rule applies to.&lt;/typeparam></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rule<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> error<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Initializes a new instance of the &lt;see cref=\"Rule&lt;T>\"/> class.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">The name of the property this instance applies to.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"error\">The error message if the rules fails.&lt;/param></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token function\">Rule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> error<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propertyName <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyName <span class=\"token operator\">=</span> propertyName<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>error <span class=\"token operator\">=</span> error<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the name of the property this instance applies to.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value>The name of the property this instance applies to.&lt;/value></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> PropertyName <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyName<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the error message if the rules fails.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value>The error message if the rules fails.&lt;/value></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> Error <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Applies the rule to the specified object.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"obj\">The object to apply the rule to.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns></span>\n        <span class=\"token comment\">/// &lt;c>true&lt;/c> if the object satisfies the rule, otherwise &lt;c>false&lt;/c>.</span>\n        <span class=\"token comment\">/// &lt;/returns></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Framework<span class=\"token punctuation\">.</span>ComponentModel<span class=\"token punctuation\">.</span>Rules</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Determines whether or not an object of type &lt;typeparamref name=\"T\"/> satisfies a rule and</span>\n    <span class=\"token comment\">/// provides an error if it does not.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;typeparam name=\"T\">The type of the object the rule can be applied to.&lt;/typeparam></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DelegateRule<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Rule<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> rule<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Initializes a new instance of the &lt;see cref=\"DelegateRule&lt;T>\"/> class.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">>The name of the property the rules applies to.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"error\">The error if the rules fails.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"rule\">The rule to execute.&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">DelegateRule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> error<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> rule<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rule <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rule <span class=\"token operator\">=</span> rule<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Applies the rule to the specified object.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"obj\">The object to apply the rule to.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns></span>\n        <span class=\"token comment\">/// &lt;c>true&lt;/c> if the object satisfies the rule, otherwise &lt;c>false&lt;/c>.</span>\n        <span class=\"token comment\">/// &lt;/returns></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">rule</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Framework<span class=\"token punctuation\">.</span>ComponentModel<span class=\"token punctuation\">.</span>Rules</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>ObjectModel</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// A collection of rules.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;typeparam name=\"T\">The type of the object the rules can be applied to.&lt;/typeparam></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RuleCollection<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Collection<span class=\"token punctuation\">&lt;</span>Rule<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Adds a new &lt;see cref=\"Rule{T}\"/> to this instance.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">The name of the property the rules applies to.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"error\">The error if the object does not satisfy the rule.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"rule\">The rule to execute.&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> error<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> rule<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DelegateRule<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> rule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Applies the &lt;see cref=\"Rule{T}\"/>'s contained in this instance to &lt;paramref name=\"obj\"/>.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"obj\">The object to apply the rules to.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;param name=\"propertyName\">Name of the property we want to apply rules for. &lt;c>null&lt;/c></span>\n        <span class=\"token comment\">/// to apply all rules.&lt;/param></span>\n        <span class=\"token comment\">/// &lt;returns>A collection of errors.&lt;/returns></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> obj<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span> errors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Rule<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> rule <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> rule<span class=\"token punctuation\">.</span>PropertyName<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rule<span class=\"token punctuation\">.</span><span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        errors<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"simple-example\"><a href=\"#simple-example\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simple Example</h1>\n<p>An example of how you can use this base class is as follows.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZombieViewModel</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">NotifyDataErrorInfo<span class=\"token punctuation\">&lt;</span>ZombieViewModel<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> limbsRemaining<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token function\">ZombieViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Rules<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DelegateRule<span class=\"token punctuation\">&lt;</span>ZombieViewModel<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Name cannot be empty.\"</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Rules<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DelegateRule<span class=\"token punctuation\">&lt;</span>ZombieViewModel<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"LimbsRemaining\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"A zombie can't have less than zero limbs.\"</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>LimbsRemaining <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Rules<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DelegateRule<span class=\"token punctuation\">&lt;</span>ZombieViewModel<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"LimbsRemaining\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"A zombie can only have up to four limbs.\"</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>LimbsRemaining <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">set</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> LimbsRemaining\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limbsRemaining<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">set</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limbsRemaining<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see, our view model has two properties and as shown in the last post in the series we are using the <code class=\"language-inline-text\">SetProperty</code> method to raise <code class=\"language-inline-text\">PropertyChanged</code> events. The only bit I've added for validation is in the static constructor containing the three validation rules.</p>\n<p>The <code class=\"language-inline-text\">Name</code> property has a single rule applied to it. When the name is empty a validation error is raised. The <code class=\"language-inline-text\">LimbsRemaining</code> property has two rules and when it is less than zero or more than four, validation errors are raised auto-magically.</p>\n<p>Under the covers, each time the <code class=\"language-inline-text\">PropertyChanged</code> event is raised, we apply the corresponding rule relating to the property and if the rule fails, we raise the <code class=\"language-inline-text\">ErrorsChanged</code> event, raise a <code class=\"language-inline-text\">PropertyChanged</code> event for the <code class=\"language-inline-text\">HasErrors</code> property (Which is now true) and finally ensure that any calls to <code class=\"language-inline-text\">GetErrors</code> now returns the error shown in the rule.</p>\n<h1 id=\"extensibility\"><a href=\"#extensibility\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extensibility</h1>\n<p>The <code class=\"language-inline-text\">DelegateRule&lt;T></code> class shown above is a really easy way to provide nice, simple rules. If you need something more complex you can create your own rule by inheriting from the <code class=\"language-inline-text\">Rule&lt;T></code> base class. An example of this could be a custom rule to validate an email address or telephone number.</p>\n<h1 id=\"using-reactive-extensions-rx-to-replace-the-errorschanged-event\"><a href=\"#using-reactive-extensions-rx-to-replace-the-errorschanged-event\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Reactive Extensions (Rx) to Replace the ErrorsChanged Event</h1>\n<p>C# events are old school. Reactive Extensions (Rx) provides a cleaner and far more powerful drop-in replacement for C# events. I'm not going to go over the advantages of Reactive Extensions here but you can take a look at a series of blog posts I've done in the <a href=\"/reactive-extensions-part1-replacing-events/\">past</a>.</p>\n<p>We can hide the <code class=\"language-inline-text\">ErrorsChanged</code> C# event by explicitly implementing the interface (Click <a href=\"http://stackoverflow.com/questions/143405/c-sharp-interfaces-implicit-implementation-versus-explicit-implementation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> for details on implicit versus explicit implementations of interfaces).</p>\n<p>The <code class=\"language-inline-text\">ErrorsChanged</code> C# event can still be accessed by first casting the object to <code class=\"language-inline-text\">INotifyDataErrorInfo</code>. Validation in XAML languages, which uses this interface continues to work. Our new Reactive Extensions (Rx) observable event called <code class=\"language-inline-text\">WhenErrorsChanged</code> of type? <code class=\"language-inline-text\">IObservable&lt;string></code> (The string is the property name) is now the default method of subscribing for error changed events and we've hidden away the old C# event.</p>\n<h1 id=\"inotifydataerrorinfo-support\"><a href=\"#inotifydataerrorinfo-support\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>INotifyDataErrorInfo Support</h1>\n<p>The <code class=\"language-inline-text\">INotifyDataErrorInfo</code> interface is supported by most XAML frameworks including WPF, Silverlight and Windows Phone. Currently WinRT does not support the interface at the time of writing but you can bet that they will in future and in the mean time you can use the <a href=\"https://winrtxamlvalidation.codeplex.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WinRT XAML Validation library</a> in conjunction with the code below to plug this gap.</p>\n<h1 id=\"quick-nod-to-idataerrorinfo\"><a href=\"#quick-nod-to-idataerrorinfo\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quick nod to IDataErrorInfo</h1>\n<p>This interface used to be used for validation but was replaced by <code class=\"language-inline-text\">INotifyDataErrorInfo</code>. The new interface provides a much nicer API which is easier to code against and better performance. If you are still using the old interface, its time to make the change.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusions</h1>\n<p>I have been tweaking this base class for the last few years and feel I've got a fairly good balance. I've not seen too many implementations of this interface, most blogs seem to cover <code class=\"language-inline-text\">INotifyPropertyChanged</code> pretty well though. I'd be very interested if anyone has any comments or thoughts on improvements. Feel free to sound-off in the comments.</p>\n","heroImage":"/images/hero/MVVM-1366x768.png"}},"context":{}}