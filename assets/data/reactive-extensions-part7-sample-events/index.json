{"hash":"de7dc91f4729a88c513fca1e9fed16b9345d97d0","data":{"post":{"title":"Reactive Extensions (Rx) - Part 7 - Sample Events","path":"/reactive-extensions-part7-sample-events/","date":"2014-12-24T00:00:00+00:00","dateModified":null,"timeToRead":2,"author":"Muhammad Rehan Saeed","headings":[],"tags":[{"id":".NET","title":".NET","path":"/tag/net/"},{"id":"C#","title":"C#","path":"/tag/c/"},{"id":"Reactive Extensions","title":"Reactive Extensions","path":"/tag/reactive-extensions/"},{"id":"Rx","title":"Rx","path":"/tag/rx/"}],"description":"Shows how to use the Reactive Extensions (Rx) Sample method to reduce the number of subscribed events by taking a sample from them over a given time period.","content":"<ul>\n<li><a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) - Part 1 - Replacing C# Events</a></li>\n<li><a href=\"/reactive-extensions-part2-wrapping-events/\">Reactive Extensions (Rx) - Part 2 - Wrapping C# Events</a></li>\n<li><a href=\"/reactive-extensions-part3-naming-conventions/\">Reactive Extensions (Rx) - Part 3 - Naming Conventions</a></li>\n<li><a href=\"/reactive-extensions-part4-replacing-timers/\">Reactive Extensions (Rx) - Part 4 - Replacing Timers</a></li>\n<li><a href=\"/reactive-extensions-part4-awaiting-observables/\">Reactive Extensions (Rx) - Part 5 - Awaiting Observables</a></li>\n<li><a href=\"/reactive-extensions-part6-task-toobservable/\">Reactive Extensions (Rx) - Part 6 - Task ToObservable</a></li>\n<li><a href=\"/reactive-extensions-part7-sample-events/\">Reactive Extensions (Rx) - Part 7 - Sample Events</a></li>\n<li><a href=\"/reactive-extensions-rx-part-8-timeouts/\">Reactive Extensions (Rx) - Part 8 - Timeouts</a></li>\n</ul>\n<p>Its been a while since I've done another Rx post. They've been pretty popular and thanks to the community for all the positive feedback. I was talking to a colleague yesterday who had been using standard C# events in WPF (The principals learned in this post can apply anywhere). He had subscribed to the <code class=\"language-text\">TextChanged</code> event in C# and was updating the user interface on the fly, whenever the user typed in a character of text. He was getting way too many events being fired and his user interface couldn't keep up with all the work it was being asked to do.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>TextBox<span class=\"token punctuation\">.</span>TextChanged <span class=\"token operator\">+=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>OnTextBoxTextChanged<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnTextBoxTextChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TextChangedEventArgs</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Heavy User Interface updates that can cause the application to lock up.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is a very common scenario which I myself have come across several times. The solution to this problem is to take a sample of the events being fired and only update the user interface every few seconds. This is possible without Reactive Extensions (Rx) but you have to write a fair amount of boilerplate code (I know, I've done it myself).</p>\n<p>Reactive Extensions (Rx) can do this with a few easy to understand (This is the real bonus) lines of code. The first step is to wrap the WPF <code class=\"language-text\">TextChanged</code> event (I've shown how to do this in a previous post <a href=\"/reactive-extensions-part2-wrapping-events/\">here</a>).</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span>TextChangedEventArgs<span class=\"token operator\">></span> WhenTextChanged\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Observable\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TextChangedEventHandler</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TextChangedEventArgs</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>TextBox<span class=\"token punctuation\">.</span>TextChanged <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span>\n                h <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>TextBox<span class=\"token punctuation\">.</span>TextChanged <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>WhenTextChanged\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Sample</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>DateTime<span class=\"token punctuation\">.</span>Now <span class=\"token operator\">+</span> <span class=\"token string\">\" Text Changed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The final and most succinct step is to use the Sample method to only pick out the latest text changed event every three seconds and pass that on to the <code class=\"language-text\">Subscribe</code> delegate. It really is that easy and this blog post really is this short because of that!</p>\n","heroImage":"/images/hero/Reactive-Extensions-1366x768.png"}},"context":{}}