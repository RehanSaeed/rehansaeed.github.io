{"hash":"e68251b9d1d2f604a9d7a710f49e1163785a0510","data":{"post":{"title":"Optimally Configuring Open Telemetry Tracing for ASP.NET Core","path":"/optimally-configuring-open-telemetry-tracing-for-asp-net-core/","date":"2022-02-03T00:00:00+00:00","dateModified":null,"timeToRead":5,"author":"Muhammad Rehan Saeed","headings":[{"value":"Simplest Setup"},{"value":"The Kitchen Sink Setup"},{"value":"Wrapping Up"}],"tags":[{"id":"Open Telemetry","title":"Open Telemetry","path":"/tag/open-telemetry/"},{"id":".NET","title":".NET","path":"/tag/net/"},{"id":".NET Core","title":".NET Core","path":"/tag/net-core/"},{"id":"ASP.NET Core","title":"ASP.NET Core","path":"/tag/asp-net-core/"},{"id":"Metrics","title":"Metrics","path":"/tag/metrics/"},{"id":"Logging","title":"Logging","path":"/tag/logging/"},{"id":"Tracing","title":"Tracing","path":"/tag/tracing/"},{"id":"Distributed Tracing","title":"Distributed Tracing","path":"/tag/distributed-tracing/"},{"id":"Span","title":"Span","path":"/tag/span/"},{"id":"Activity","title":"Activity","path":"/tag/activity/"}],"description":"How to optimally configure Open Telemetry traces for ASP.NET Core enriched with lots of extra information.","content":"<ol>\n<li><a href=\"/deep-dive-into-open-telemetry-for-net/\">Open Telemetry - Deep Dive into Open Telemetry for .NET</a></li>\n<li><a href=\"/open-telemetry-for-asp-net-core/\">Open Telemetry - Configuring Open Telemetry for ASP.NET Core</a></li>\n<li><a href=\"/exporting-open-telemetry-data-to-jaeger/\">Open Telemetry - Exporting Open Telemetry Data to Jaeger</a></li>\n<li><a href=\"/optimally-configuring-open-telemetry-tracing-for-asp-net-core/\">Open Telemetry - Optimally Configuring Open Telemetry Tracing for ASP.NET Core</a></li>\n</ol>\n<p>Configuring tracing in Open Telemetry for ASP.NET Core can be a fairly simple process but never accept the defaults! There is always more we can do to make improvements.</p>\n<p>In this post, I'll show you how you can take the simplest setup for Open Telemetry tracing I showed you in <a href=\"/open-telemetry-for-asp-net-core/\">'Configuring Open Telemetry for ASP.NET Core'</a> and move to a more fully featured example.</p>\n<h1 id=\"simplest-setup\"><a href=\"#simplest-setup\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simplest Setup</h1>\n<p>Here is a reminder of the simple setup I showed you in <a href=\"/open-telemetry-for-asp-net-core/\">'Configuring Open Telemetry for ASP.NET Core'</a>:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IWebHostEnvironment</span> webHostEnvironment<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...omitted</span>\n    services<span class=\"token punctuation\">.</span><span class=\"token function\">AddOpenTelemetryTracing</span><span class=\"token punctuation\">(</span>\n        builder <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            builder\n                <span class=\"token punctuation\">.</span><span class=\"token function\">SetResourceBuilder</span><span class=\"token punctuation\">(</span>ResourceBuilder\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">CreateDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">AddService</span><span class=\"token punctuation\">(</span>webHostEnvironment<span class=\"token punctuation\">.</span>ApplicationName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">AddAspNetCoreInstrumentation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>webHostEnvironment<span class=\"token punctuation\">.</span><span class=\"token function\">IsDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddConsoleExporter</span><span class=\"token punctuation\">(</span>\n                    options <span class=\"token operator\">=></span> options<span class=\"token punctuation\">.</span>Targets <span class=\"token operator\">=</span> ConsoleExporterOutputTargets<span class=\"token punctuation\">.</span>Debug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And the tracing output you can expect for a request/response cycle:</p>\n<div class=\"line-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Activity.Id:          00-dde96d459fee4144a83818e054e221b1-cac69896c1bcd14f-01\nActivity.DisplayName: /favicon-32x32.png\nActivity.Kind:        Server\nActivity.StartTime:   2021-02-01T10:28:25.4637044Z\nActivity.Duration:    00:00:00.0086712\nActivity.TagObjects:\n    http.host: localhost:5001\n    http.method: GET\n    http.path: /favicon-32x32.png\n    http.url: https://localhost:5001/favicon-32x32.png\n    http.user_agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36\n    http.status_code: 200\n    otel.status_code: UNSET\n    service.name: ApiTemplate\n    service.instance.id: defe9269-04f2-4b49-a05c-ebddf2112993\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 1.0.0.0</code></pre></div>\n<h1 id=\"the-kitchen-sink-setup\"><a href=\"#the-kitchen-sink-setup\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Kitchen Sink Setup</h1>\n<p>This time we're going to setup a more advanced configuration. We're going to start off by adding a lot more information to our <code class=\"language-inline-text\">ResourceBuilder</code> we pass to the <code class=\"language-inline-text\">SetResourceBuilder</code> function above.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">ResourceBuilder</span> <span class=\"token function\">GetResourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IWebHostEnvironment</span> webHostEnvironment<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> version <span class=\"token operator\">=</span> Assembly\n        <span class=\"token punctuation\">.</span><span class=\"token function\">GetExecutingAssembly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetCustomAttribute</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AssemblyFileVersionAttribute<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n        <span class=\"token punctuation\">.</span><span class=\"token return-type class-name\">Version</span>\n    ResourceBuilder\n        <span class=\"token punctuation\">.</span><span class=\"token function\">CreateEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddService</span><span class=\"token punctuation\">(</span>webHostEnvironment<span class=\"token punctuation\">.</span>ApplicationName<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">serviceVersion</span><span class=\"token punctuation\">:</span> version<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddAttributes</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">KeyValuePair<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deployment.environment\"</span><span class=\"token punctuation\">,</span> webHostEnvironment<span class=\"token punctuation\">.</span>EnvironmentName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"host.name\"</span><span class=\"token punctuation\">,</span> Environment<span class=\"token punctuation\">.</span>MachineName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AddEnvironmentVariableDetector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This time we want to start with an empty resource builder calling <code class=\"language-inline-text\">CreateEmpty</code>. We then add the application name and version which we can retrieve from the current assembly. You may have multiple versions of your application running over time and its important to have a way to differentiate between them.</p>\n<p>We then add a few attributes to every span including the environment name and machine name. The attribute names here are <a href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">standardised</a> as defined by the Open Telemetry specification. I decided that knowing the environment the application is running in and the machine name is important to know when troubleshooting issues.</p>\n<p>Finally, we add an environment variable detector which we can use to add further attributes to every span using environment variables. Using <code class=\"language-inline-text\">ResourceBuilder.CreateDefault</code> already included this in the simple example above but since we started with an empty resource builder we need to add it explicitly. Here is a PowerShell example of how you can add add additional attributes to every span using the <code class=\"language-inline-text\">OTEL_RESOURCE_ATTRIBUTES</code> environment variable:</p>\n<div class=\"line-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$env</span>:OTEL_RESOURCE_ATTRIBUTES = <span class=\"token string\">'key1=value1,key2=value2'</span></code></pre></div>\n<p>We can now plug the <code class=\"language-inline-text\">GetResourceBuilder</code> into our code below and add a few more goodies:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IWebHostEnvironment</span> webHostEnvironment<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...omitted</span>\n    services<span class=\"token punctuation\">.</span><span class=\"token function\">AddOpenTelemetryTracing</span><span class=\"token punctuation\">(</span>\n        builder <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            builder\n                <span class=\"token punctuation\">.</span><span class=\"token function\">SetResourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetResourceBuilder</span><span class=\"token punctuation\">(</span>webHostEnvironment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">AddAspNetCoreInstrumentation</span><span class=\"token punctuation\">(</span>\n                    options <span class=\"token operator\">=></span>\n                    <span class=\"token punctuation\">{</span>\n                        options<span class=\"token punctuation\">.</span>Enrich <span class=\"token operator\">=</span> Enrich<span class=\"token punctuation\">;</span>\n                        options<span class=\"token punctuation\">.</span>RecordException <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>webHostEnvironment<span class=\"token punctuation\">.</span><span class=\"token function\">IsDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddConsoleExporter</span><span class=\"token punctuation\">(</span>\n                    options <span class=\"token operator\">=></span> options<span class=\"token punctuation\">.</span>Targets <span class=\"token operator\">=</span> ConsoleExporterOutputTargets<span class=\"token punctuation\">.</span>Debug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Enrich</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Activity</span> activity<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> eventName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> obj<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">is</span> <span class=\"token class-name\">HttpRequest</span> request<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> context <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">;</span>\n        activity<span class=\"token punctuation\">.</span><span class=\"token function\">AddTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.flavor\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetHttpFlavour</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>Protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        activity<span class=\"token punctuation\">.</span><span class=\"token function\">AddTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.scheme\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>Scheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        activity<span class=\"token punctuation\">.</span><span class=\"token function\">AddTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.client_ip\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>Connection<span class=\"token punctuation\">.</span>RemoteIpAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        activity<span class=\"token punctuation\">.</span><span class=\"token function\">AddTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.request_content_length\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>ContentLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        activity<span class=\"token punctuation\">.</span><span class=\"token function\">AddTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.request_content_type\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>ContentType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> user <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>Name <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            activity<span class=\"token punctuation\">.</span><span class=\"token function\">AddTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enduser.id\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            activity<span class=\"token punctuation\">.</span><span class=\"token function\">AddTag</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"enduser.scope\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token char\">','</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>Claims<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">is</span> <span class=\"token class-name\">HttpResponse</span> response<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        activity<span class=\"token punctuation\">.</span><span class=\"token function\">AddTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.response_content_length\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>ContentLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        activity<span class=\"token punctuation\">.</span><span class=\"token function\">AddTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.response_content_type\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>ContentType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetHttpFlavour</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> protocol<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>HttpProtocol<span class=\"token punctuation\">.</span><span class=\"token function\">IsHttp10</span><span class=\"token punctuation\">(</span>protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>HttpProtocol<span class=\"token punctuation\">.</span><span class=\"token function\">IsHttp11</span><span class=\"token punctuation\">(</span>protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"1.1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>HttpProtocol<span class=\"token punctuation\">.</span><span class=\"token function\">IsHttp2</span><span class=\"token punctuation\">(</span>protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"2.0\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>HttpProtocol<span class=\"token punctuation\">.</span><span class=\"token function\">IsHttp3</span><span class=\"token punctuation\">(</span>protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"3.0\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">InvalidOperationException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Protocol </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">protocol</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> not recognised.\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, we configure <code class=\"language-inline-text\">AddAspNetCoreInstrumentation</code> to enrich the spans with additional information about the current request, response and the user (if any) using standardised attributes. Finally, we record details of exceptions from our controllers which would otherwise be lost. This outputs the following:</p>\n<div class=\"line-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Activity.Id:          00-3d0f70e71a8e6e5e87f156bdcf94b8c9-ccdd8d23a2e3ba93-01\nActivity.ActivitySourceName: OpenTelemetry.Instrumentation.AspNetCore\nActivity.DisplayName: /favicon-32x32.png\nActivity.Kind:        Server\nActivity.StartTime:   2022-02-03T10:52:47.6513334Z\nActivity.Duration:    00:00:00.0077181\nActivity.TagObjects:\n    http.host: localhost:5001\n    http.method: GET\n    http.target: /favicon-32x32.png\n    http.url: https://localhost:5001/favicon-32x32.png\n    http.user_agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36\n    http.flavor: 2.0\n    http.scheme: https\n    http.client_ip: ::1\n    http.request_content_length:\n    http.request_content_type:\n    http.status_code: 200\n    otel.status_code: UNSET\n    http.response_content_length: 628\n    http.response_content_type: image/png\n    deployment.environment: Development\n    host.name: REHANS-MACHINE\n    service.name: ApiTemplate\n    service.version: 5.1.1.0\n    service.instance.id: 4e364d08-4965-4d83-8afa-70769074ab0d</code></pre></div>\n<p>This time around you can see we've collected a lot more information. Now, this may not be 'optimal' for your application. Collecting additional information comes at a performance and monetary cost, so its up to you to judge what extra information is useful to you but I think most of the above is pretty essential basic information that would be valuable while debugging any issues.</p>\n<h1 id=\"wrapping-up\"><a href=\"#wrapping-up\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wrapping Up</h1>\n<p>In this post, I showed a simple example showing how you can configure Open Telemetry tracing and then went on to show a more advanced real world example.</p>\n<p>Open Telemetry is gaining popularity and traction with even <a href=\"https://github.blog/2021-05-26-why-and-how-github-is-adopting-opentelemetry/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub adopting it</a>. So far in this blog series we've only discussed the basics of Open Telemetry and tracing in particular. When Open Telemetry metrics and logs comes out of alpha/beta, I'll write another post discussing configuring those.</p>\n","heroImage":"/images/hero/Open-Telemetry-1600x900.png"}},"context":{}}