{"hash":"34e9ff3faf00b3811c8b86f44a5d9675a7bfd19f","data":{"posts":{"pageInfo":{"totalPages":9,"currentPage":9,"perPage":10,"totalItems":85,"hasPreviousPage":true,"hasNextPage":false,"isFirst":false,"isLast":true},"edges":[{"node":{"id":"5d81b5cf9506baad2c21f49a62cc1332","title":"Reactive Extensions (Rx) - Part 2 - Wrapping C# Events","date":"2014-02-13T00:00:00+00:00","dateModified":null,"timeToRead":3,"description":"Reactive Extensions IObservable wrappers for C# events and hiding the C# events entirely from subscribers using explicit interface implementations.","heroImage":"/images/hero/Reactive-Extensions-1366x768.png","path":"/reactive-extensions-part2-wrapping-events/","tags":[{"id":".NET","title":".NET","path":"/tag/net/"},{"id":"C#","title":"C#","path":"/tag/c/"},{"id":"Events","title":"Events","path":"/tag/events/"},{"id":"Explicit Interface Implementation","title":"Explicit Interface Implementation","path":"/tag/explicit-interface-implementation/"},{"id":"INotifyPropertyChanged","title":"INotifyPropertyChanged","path":"/tag/i-notify-property-changed/"},{"id":"Reactive Extensions","title":"Reactive Extensions","path":"/tag/reactive-extensions/"},{"id":"Rx","title":"Rx","path":"/tag/rx/"}]}},{"node":{"id":"0b1d562a7a4b460eba05040d3813bd4b","title":"Reactive Extensions (Rx) - Part 1 - Replacing C# Events","date":"2014-02-11T00:00:00+00:00","dateModified":null,"timeToRead":4,"description":"You should definitely consider using Reactive Extensions (Rx) is as a direct replacement for C# events. This post will explain how.","heroImage":"/images/hero/Reactive-Extensions-1366x768.png","path":"/reactive-extensions-part1-replacing-events/","tags":[{"id":".NET","title":".NET","path":"/tag/net/"},{"id":"C#","title":"C#","path":"/tag/c/"},{"id":"Events","title":"Events","path":"/tag/events/"},{"id":"Reactive Extensions","title":"Reactive Extensions","path":"/tag/reactive-extensions/"},{"id":"Rx","title":"Rx","path":"/tag/rx/"}]}},{"node":{"id":"8323e6257ac5b324c596d49841a36f9a","title":"Stop The Brace Wars, Use StyleCop","date":"2014-02-08T00:00:00+00:00","dateModified":null,"timeToRead":3,"description":"StyleCop analyzes C# source code to enforce a set of style and consistency rules. Rehan advocates its use in this thought provoking article.","heroImage":"/images/hero/StyleCop-1366x768.png","path":"/stop-brace-wars-use-stylecop/","tags":[{"id":"C#","title":"C#","path":"/tag/c/"},{"id":"standards","title":"standards","path":"/tag/standards/"},{"id":"StyleCop","title":"StyleCop","path":"/tag/style-cop/"}]}},{"node":{"id":"f3e43279303fc1588cb3696e0d1234ce","title":"ConfigureAwait in Task Parallel Library (TPL)","date":"2014-02-07T00:00:00+00:00","dateModified":null,"timeToRead":2,"description":"The importance of using ConfigureAwait when using the Task Parallel Library (TPL) to improve performance and reduce context switching.","heroImage":"/images/hero/Microsoft-.NET-1366x768.png","path":"/configureawait-task-parallel-library/","tags":[{"id":".NET","title":".NET","path":"/tag/net/"},{"id":"C#","title":"C#","path":"/tag/c/"},{"id":"ConfigureAwait","title":"ConfigureAwait","path":"/tag/configure-await/"},{"id":"HttpClient","title":"HttpClient","path":"/tag/http-client/"},{"id":"Task Parallel Library","title":"Task Parallel Library","path":"/tag/task-parallel-library/"},{"id":"ThreadPool","title":"ThreadPool","path":"/tag/thread-pool/"},{"id":"Threads","title":"Threads","path":"/tag/threads/"},{"id":"TPL","title":"TPL","path":"/tag/tpl/"}]}},{"node":{"id":"5203a9bdf8cfe4a161e771f32650d3e1","title":"Just Start - The First Blog Post","date":"2014-02-01T00:00:00+00:00","dateModified":null,"timeToRead":1,"description":"I thought I should begin this first blog post with a few words on what I hope to achieve.","heroImage":"/images/hero/Just-Start-1366x768.png","path":"/just-start-the-first-blog-post/","tags":[]}}]}},"context":{}}