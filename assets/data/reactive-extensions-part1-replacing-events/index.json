{"hash":"55cf9c278ae3ff7831d3f59626026ff72b1f2627","data":{"post":{"title":"Reactive Extensions (Rx) - Part 1 - Replacing C# Events","path":"/reactive-extensions-part1-replacing-events/","displayDate":"11 February 2014","date":"2014-02-11T00:00:00+00:00","timeToRead":5,"author":"Muhammad Rehan Saeed","headings":[{"value":"Exposing an Event"},{"value":"Consuming an Event"},{"value":"Conclusions"}],"tags":[{"id":".NET","title":".NET","path":"/tag/net/"},{"id":"C#","title":"C#","path":"/tag/c/"},{"id":"Events","title":"Events","path":"/tag/events/"},{"id":"Reactive Extensions","title":"Reactive Extensions","path":"/tag/reactive-extensions/"},{"id":"Rx","title":"Rx","path":"/tag/rx/"}],"description":"You should definitely consider using Reactive Extensions (Rx) is as a direct replacement for C# events. This post will explain how.","content":"<ul>\n<li><a href=\"/reactive-extensions-part1-replacing-events/\">Reactive Extensions (Rx) - Part 1 - Replacing C# Events</a></li>\n<li><a href=\"/reactive-extensions-part2-wrapping-events/\">Reactive Extensions (Rx) - Part 2 - Wrapping C# Events</a></li>\n<li><a href=\"/reactive-extensions-part3-naming-conventions/\">Reactive Extensions (Rx) - Part 3 - Naming Conventions</a></li>\n<li><a href=\"/reactive-extensions-part4-replacing-timers/\">Reactive Extensions (Rx) - Part 4 - Replacing Timers</a></li>\n<li><a href=\"/reactive-extensions-part4-awaiting-observables/\">Reactive Extensions (Rx) - Part 5 - Awaiting Observables</a></li>\n<li><a href=\"/reactive-extensions-part6-task-toobservable/\">Reactive Extensions (Rx) - Part 6 - Task ToObservable</a></li>\n<li><a href=\"/reactive-extensions-part7-sample-events/\">Reactive Extensions (Rx) - Part 7 - Sample Events</a></li>\n<li><a href=\"/reactive-extensions-rx-part-8-timeouts/\">Reactive Extensions (Rx) - Part 8 - Timeouts</a></li>\n</ul>\n<p>For those who have not tried Reactive Extensions (Rx) yet, I highly recommend it. If I had to describe it in a few words it would be 'Linq to events'. If you have not already learned about it, <a href=\"http://www.introtorx.com/uat/content/v1.0.10621.0/00_Foreword.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> is by far the best resource on learning its intricacies.</p>\n<p>I have spent a lot of time reading about Reactive Extensions but what I have not found in my research is examples or pointers on how or even where it should be used in preference to other code. One area where you should definitely consider using Reactive Extensions is as a direct replacement for bog standard C# events, which have been around since C# 1.0. This post will explain how.</p>\n<h1 id=\"exposing-an-event\"><a href=\"#exposing-an-event\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Exposing an Event</h1>\n<p>Here is an example of a standard C# event using the standard recommended pattern:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JetFighter</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> EventHandler<span class=\"token operator\">&lt;</span>JetFighterEventArgs<span class=\"token operator\">></span> PlaneSpotted<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SpotPlane</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JetFighter</span> jetFighter<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        EventHandler<span class=\"token operator\">&lt;</span>JetFighterEventArgs<span class=\"token operator\">></span> eventHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>PlaneSpotted<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eventHandler <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">eventHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JetFighterEventArgs</span><span class=\"token punctuation\">(</span>jetfighter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now this is how you replace it using Reactive Extensions:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JetFighter</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> Subject<span class=\"token operator\">&lt;</span>JetFighter<span class=\"token operator\">></span> planeSpotted <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">Subject</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JetFighter</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span>JetFighter<span class=\"token operator\">></span> PlaneSpotted <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">AsObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SpotPlane</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JetFighter</span> jetFighter<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">OnNext</span><span class=\"token punctuation\">(</span>jetFighter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So far it's all pretty straightforward, we have replaced the event with a property returning <code class=\"language-text\">IObservable&lt;T&gt;</code>. Raising the event is a simple matter of calling the <code class=\"language-text\">OnNext</code> method on the Subject class. Finally, we do not return our <code class=\"language-text\">Subject&lt;T&gt;</code> directly in our <code class=\"language-text\">PlaneSpotted</code> property, as someone could cast it back to <code class=\"language-text\">Subject&lt;T&gt;</code> and raise their own events! Instead we use the <code class=\"language-text\">AsObservable</code> method which returns a middle man. So far so good.</p>\n<p>Reactive Extensions also has the added concept of errors and completion, which C# events do not have. These are optional added concepts and not required for replacing C# events directly but worth knowing about, as they add an extra dimension to events which may be useful to you.</p>\n<p>The first concept is dealing with errors. What happens if there is an exception while you are spotting the plane and you want to notify your subscribers that there is a problem? Well you can do that, like this:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SpotPlane</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JetFighter</span> jetFighter<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>jetFighter<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UFO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UFO Found\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">OnNext</span><span class=\"token punctuation\">(</span>jetFighter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> exception<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">OnError</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we are using the <code class=\"language-text\">OnError</code> method to notify all the events subscribers that there has been an exception.</p>\n<p>So what about the concept of completion? Well, that's just as simple. Suppose that you have spotted all the planes and you want to notify all your subscribers that there will be no more spotted planes. You can do that like this:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AllPlanesSpotted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">OnCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So now all the code put together looks like this:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JetFighter</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> Subject<span class=\"token operator\">&lt;</span>JetFighter<span class=\"token operator\">></span> planeSpotted <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">Subject</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">JetFighter</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> IObservable<span class=\"token operator\">&lt;</span>JetFighter<span class=\"token operator\">></span> PlaneSpotted <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AllPlanesSpotted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">OnCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SpotPlane</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JetFighter</span> jetFighter<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>jetFighter<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UFO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UFO Found\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">OnNext</span><span class=\"token punctuation\">(</span>jetFighter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> exception<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">OnError</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"consuming-an-event\"><a href=\"#consuming-an-event\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Consuming an Event</h1>\n<p>Consuming the Reactive Extensions events is just as easy and this is where you start to see the real benefits of Reactive Extensions. This is how you subscribe and unsubscribe (often forgotten, which can lead to memory leaks) to a standard C# event:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BomberControl</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IDisposable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JetFighter</span> jetfighter<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">BomberControl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JetFighter</span> jetFighter<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        jetfighter<span class=\"token punctuation\">.</span>PlaneSpotted <span class=\"token operator\">+=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>OnPlaneSpotted<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        jetfighter<span class=\"token punctuation\">.</span>PlaneSpotted <span class=\"token operator\">-=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>OnPlaneSpotted<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPlaneSpotted</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JetFighterEventArgs</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token class-name\">JetFighter</span> spottedPlane <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>SpottedPlane<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I'm not going to go into it in too much detail, you subscribe using <code class=\"language-text\">+=</code> and unsubscribe using <code class=\"language-text\">-=</code> operators.</p>\n<p>This is how the same thing can be accomplished using Reactive Extensions:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BomberControl</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IDisposable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">IDisposable</span> planeSpottedSubscription<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">BomberControl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JetFighter</span> jetFighter<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span> planeSpottedSubscription <span class=\"token operator\">=</span> jetfighter<span class=\"token punctuation\">.</span>PlaneSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>OnPlaneSpotted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planeSpottedSubscription<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPlaneSpotted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JetFighter</span> jetFighter<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token class-name\">JetFighter</span> spottedPlane <span class=\"token operator\">=</span> jetfighter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The key things to note here are first, the use of the <code class=\"language-text\">Subscribe</code> method to register for plane spotted events. Second, the subscription to the event is stored in an <code class=\"language-text\">IDisposable</code> which can later be disposed of, to un-register from the event. This is where things get interesting, since we now have an <code class=\"language-text\">IObservable&lt;T&gt;</code> we can now use all kinds of Linq queries on it like this:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">jetfighter<span class=\"token punctuation\">.</span>PlaneSpotted<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> “Eurofighter”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>OnPlaneSpotted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So in the above line of code, I'm using a Linq query to only register to events where the name of the spotted plane is <code class=\"language-text\">Eurofighter</code>. There are a lot more Linq methods you can use but that's beyond the scope of this post and also where you should take a look at <a href=\"http://www.introtorx.com/uat/content/v1.0.10621.0/00_Foreword.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this website</a>.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusions</h1>\n<p>Reactive Extensions (Rx) is a pretty large library which does a lot of stuff which overlaps with other libraries like the Task Parallel Library (TPL). It brings no new capabilities but does bring new ways to do things (much like Linq), while writing less code and with more elegance. It can be confusing coming to it as a newcomer, as to where exactly it can be used effectively. Replacing basic events with <code class=\"language-text\">IObservable&lt;T&gt;</code> is definitely one area where we can leverage its power.</p>\n","cover_image":"/images/hero/Reactive-Extensions-1366x768.png"}},"context":{}}