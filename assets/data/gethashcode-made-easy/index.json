{"hash":"86541c2cc7a17374de92a8d79b559550eaa08abe","data":{"post":{"title":"GetHashCode Made Easy","path":"/gethashcode-made-easy/","date":"2014-04-14T00:00:00+00:00","dateModified":"2019-06-12T00:00:00+00:00","timeToRead":8,"author":"Muhammad Rehan Saeed","headings":[{"value":".NET Core HashCode"},{"value":"HashCode.Combine"},{"value":"HashCode.Add"},{"value":"Advantages and Disadvantages"},{"value":"License"}],"tags":[{"id":".NET","title":".NET","path":"/tag/net/"},{"id":"Base Class Library","title":"Base Class Library","path":"/tag/base-class-library/"},{"id":"BCL","title":"BCL","path":"/tag/bcl/"},{"id":"C#","title":"C#","path":"/tag/c/"},{"id":"GetHashCode","title":"GetHashCode","path":"/tag/get-hash-code/"}],"description":"Implementing GetHashCode is hard work and little understood. Learn how to implement GetHashCode as quickly and as simply as possible.","content":"<div class=\"custom-block tip\"><p class=\"custom-block-title\">Update (2021-10-22)</p><p>Updated after I discovered that there is a new Nuget package called <code class=\"language-inline-text\">Microsoft.Bcl.HashCode</code> which allows you to use <code class=\"language-inline-text\">System.HashCode</code> in frameworks older than <code class=\"language-inline-text\">netstandard2.1</code>.</p></div>\n<div class=\"custom-block tip\"><p class=\"custom-block-title\">Update (2019-06-12)</p><p>I updated my HashCode implementation to cover a few more scenarios which I discuss below.</p></div>\n<div class=\"custom-block tip\"><p class=\"custom-block-title\">Update (2018-08-14)</p><p>I updated this article to talk about a new <code class=\"language-inline-text\">HashCode</code> class included in .NET Core 2.1 and licensing information for my code since I've been asked repeatedly.</p></div>\n<p>Implementing <code class=\"language-inline-text\">GetHashCode</code> is hard work and little understood. If you take a look on MSDN or Stack Overflow for a few pointers, you'll see a plethora of examples with all kinds of little used C# operators and magic numbers with little explanation for developers (Especially the newbies) what they are for and why we need them. This, for a method which exists on the <code class=\"language-inline-text\">Object</code> class and is the root of all that is good and wholesome in C# is surprising.</p>\n<p>Before I continue, I recommend reading <a href=\"http://blogs.msdn.com/b/ericlippert/archive/2011/02/28/guidelines-and-rules-for-gethashcode.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Eric Lippert's blog post</a> about the subject. He does not show any code, just goes into when and where we need to implement the <code class=\"language-inline-text\">GetHashCode</code> method. Eric does a much better job than I could do but in short, <code class=\"language-inline-text\">GetHashCode</code> is implemented wherever you implement the <code class=\"language-inline-text\">Equals</code> method and ideally your class should be immutable.</p>\n<p>Now down to the nitty gritty. How do we make implementing <code class=\"language-inline-text\">GetHashCode</code> easy. Well, suppose we have the following class:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperHero</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ReadOnlyCollection<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> powers<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">SuperHero</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> powers<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>powers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReadOnlyCollection<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>powers<span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Age <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ReadOnlyCollection<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> Powers <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>powers<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> obj<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// TODO</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In our example we have an immutable object with a variety of fields of different types, including a collection. One possible implementation of <code class=\"language-inline-text\">GetHashCode</code> according to the highest rated <a href=\"http://stackoverflow.com/questions/263400/what-is-the-best-algorithm-for-an-overridden-system-object-gethashcode/263416#263416\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stack Overflow post</a> (If modified to fit our example and deal with <code class=\"language-inline-text\">null</code>'s) may be:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unchecked</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> hashCode <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span>\n\n        hashCode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hashCode <span class=\"token operator\">*</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        hashCode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hashCode <span class=\"token operator\">*</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> power <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>powers<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            hashCode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hashCode <span class=\"token operator\">*</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>power <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> power<span class=\"token punctuation\">.</span><span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> hashCode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I don't know about you but that code looks awfully unwieldy to me. For a start we've got two different magic numbers 17 and 23. Why? As it happens these are prime numbers and reduces the chance of getting collisions between hashes (Two un-equal objects are supposed to have different hash codes but sometimes this is not the case due to hash collisions that can occur).</p>\n<p>We've also got the <code class=\"language-inline-text\">unchecked</code> C# keyword which stops overflow checking to improve performance (That's not something you see every day). Bear in mind that the whole point of the <code class=\"language-inline-text\">GetHashCode</code> method is to allow things like the <code class=\"language-inline-text\">Dictionary</code> type to <strong>quickly</strong> retrieve objects.</p>\n<p>I personally would not be able to remember how to do this each time I need to implement <code class=\"language-inline-text\">GetHashCode</code> and it seems like you could very easily introduce bugs by making a typo. How about a helper class (Well actually a <code class=\"language-inline-text\">struct</code> for better performance)?</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">/// &lt;summary></span>\n<span class=\"token comment\">/// A hash code used to help with implementing &lt;see cref=\"object.GetHashCode()\"/>.</span>\n<span class=\"token comment\">/// &lt;/summary></span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">HashCode</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEquatable<span class=\"token punctuation\">&lt;</span>HashCode<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> EmptyCollectionPrimeNumber <span class=\"token operator\">=</span> <span class=\"token number\">19</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Initializes a new instance of the &lt;see cref=\"HashCode\"/> struct.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"value\">The value.&lt;/param></span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">HashCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Performs an implicit conversion from &lt;see cref=\"HashCode\"/> to &lt;see cref=\"int\"/>.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"hashCode\">The hash code.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>The result of the conversion.&lt;/returns></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HashCode</span> hashCode<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> hashCode<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Implements the operator ==.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"left\">The left.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;param name=\"right\">The right.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>The result of the operator.&lt;/returns></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HashCode</span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HashCode</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> left<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Implements the operator !=.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"left\">The left.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;param name=\"right\">The right.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>The result of the operator.&lt;/returns></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HashCode</span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HashCode</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Takes the hash code of the specified item.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;typeparam name=\"T\">The type of the item.&lt;/typeparam></span>\n    <span class=\"token comment\">/// &lt;param name=\"item\">The item.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>The new hash code.&lt;/returns></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">HashCode</span> <span class=\"token generic-method\"><span class=\"token function\">Of</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HashCode</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Takes the hash code of the specified items.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;typeparam name=\"T\">The type of the items.&lt;/typeparam></span>\n    <span class=\"token comment\">/// &lt;param name=\"items\">The collection.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>The new hash code.&lt;/returns></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">HashCode</span> <span class=\"token generic-method\"><span class=\"token function\">OfEach</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> items<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        items <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">?</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HashCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HashCode</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Adds the hash code of the specified item.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;typeparam name=\"T\">The type of the item.&lt;/typeparam></span>\n    <span class=\"token comment\">/// &lt;param name=\"item\">The item.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>The new hash code.&lt;/returns></span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">HashCode</span> <span class=\"token generic-method\"><span class=\"token function\">And</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HashCode</span><span class=\"token punctuation\">(</span><span class=\"token function\">CombineHashCodes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Adds the hash code of the specified items in the collection.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;typeparam name=\"T\">The type of the items.&lt;/typeparam></span>\n    <span class=\"token comment\">/// &lt;param name=\"items\">The collection.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>The new hash code.&lt;/returns></span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">HashCode</span> <span class=\"token generic-method\"><span class=\"token function\">AndEach</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> items<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>items <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HashCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HashCode</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;inheritdoc /></span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HashCode</span> other<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;inheritdoc /></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> obj<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">is</span> <span class=\"token class-name\">HashCode</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HashCode<span class=\"token punctuation\">)</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Throws &lt;see cref=\"NotSupportedException\" />.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;returns>Does not return.&lt;/returns></span>\n    <span class=\"token comment\">/// &lt;exception cref=\"NotSupportedException\">Implicitly convert this struct to an &lt;see cref=\"int\" /> to get the hash code.&lt;/exception></span>\n    <span class=\"token punctuation\">[</span><span class=\"token function\">EditorBrowsable</span><span class=\"token punctuation\">(</span>EditorBrowsableState<span class=\"token punctuation\">.</span>Never<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"Implicitly convert this struct to an int to get the hash code.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">CombineHashCodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> h1<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> h2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">unchecked</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Code copied from System.Tuple so it must be the best way to combine hash codes or at least a good one.</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>h1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> h1<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> h2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token generic-method\"><span class=\"token function\">GetHashCode</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">?.</span><span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token generic-method\"><span class=\"token function\">GetHashCode</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> items<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> startHashCode<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> temp <span class=\"token operator\">=</span> startHashCode<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> enumerator <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enumerator<span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            temp <span class=\"token operator\">=</span> <span class=\"token function\">CombineHashCodes</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> <span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span>enumerator<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>enumerator<span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                temp <span class=\"token operator\">=</span> <span class=\"token function\">CombineHashCodes</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> <span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span>enumerator<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            temp <span class=\"token operator\">=</span> <span class=\"token function\">CombineHashCodes</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> EmptyCollectionPrimeNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The helper <code class=\"language-inline-text\">struct</code> can be used in our <code class=\"language-inline-text\">SuperHero</code> class like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> HashCode\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">AndEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>powers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now isn't that pretty? All the nasty magic numbers and <code class=\"language-inline-text\">unchecked</code> code has been hidden away. It is a very lightweight and simple <code class=\"language-inline-text\">struct</code>, so although we create new instances of it, it's stored in the stack rather than the memory heap. What's more, is that is code is just as fast (I've timed it)! We're using generics so there is no boxing or unboxing going on. We're still using the <code class=\"language-inline-text\">unchecked</code> keyword, so overflow checking is still disabled.</p>\n<p>One interesting edge case is what to do when hashing a collection and you get either a <code class=\"language-inline-text\">null</code> or empty collection. Should you use a zero to represent both scenarios (zero is usually used to represent a <code class=\"language-inline-text\">null</code> value) or differentiate them somehow. I managed to get a response from <a href=\"\">Jon Skeet</a> himself on Stack Overflow:</p>\n<blockquote>\n<p>if both states are valid, it seems perfectly reasonable to differentiate between them. (Someone carrying an empty box isn't the same as someone not carrying a box at all...)</p>\n<footer><cite><a href=\"https://stackoverflow.com/questions/8094867/good-gethashcode-override-for-list-of-foo-objects-respecting-the-order/8094931?noredirect=1#comment99700237_8094931\">Jon Skeet</a></cite></footer>\n</blockquote>\n<p>This is why we use the prime number 19 (it could have been any prime number) to represent an empty collection. Whether this matters or not depends on your use case. If an empty collection means something different in your scenario, then we've got you covered. Generally speaking though, if you are exposing a collection property in your class you should consider making it a getter only and initializing it in the constructor, so that it is never <code class=\"language-inline-text\">null</code> in the first place but here we're trying to cover all scenarios.</p>\n<h1 id=\"net-core-hashcode\"><a href=\"#net-core-hashcode\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>.NET Core HashCode</h1>\n<p>If you are using .NET Core 2.1, consider using the <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.hashcode?view=netcore-2.1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">System.HashCode</a> <code class=\"language-inline-text\">struct</code> instead of my code. If your using an older framework you can also try the <code class=\"language-inline-text\">Microsoft.Bcl.HashCode</code> NuGet package. There are two ways to use it:</p>\n<h2 id=\"hashcodecombine\"><a href=\"#hashcodecombine\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HashCode.Combine</h2>\n<p>The <code class=\"language-inline-text\">Combine</code> method can be used to create a hash code, given up to eight objects.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    HashCode<span class=\"token punctuation\">.</span><span class=\"token function\">Combine</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">,</span> object2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"hashcodeadd\"><a href=\"#hashcodeadd\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HashCode.Add</h2>\n<p>The Add method is similar to my code but it does not handle collections and is not fluent:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">GetHashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hash <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    hash<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>object1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    hash<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>object2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">.</span><span class=\"token function\">ToHashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"advantages-and-disadvantages\"><a href=\"#advantages-and-disadvantages\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Advantages and Disadvantages</h2>\n<p>There are several advantages to using the .NET Core <code class=\"language-inline-text\">HashCode</code>:</p>\n<ul>\n<li>It's part of the .NET Core base class library (BCL), so it's maintained and officially supported.</li>\n<li>It has good performance. I haven't written a benchmark against comparing my code to the .NET Core code. If you do, I'd be interested to hear the results.</li>\n<li>Like my code, it handles <code class=\"language-inline-text\">null</code>'s automatically.</li>\n</ul>\n<p>The disadvantages are:</p>\n<ul>\n<li>You have to be using .NET Core 2.1 or above.</li>\n<li>It does not handle collections, you have to write a for loop to handle that yourself. You could be clever and write a quick extension method to handle this scenario.</li>\n<li>It's not fluent, so you end up with slightly uglier code in my opinion. If you are a fan of C# 7 expression bodied members, then my fluent code lets you use them, while the .NET Core <code class=\"language-inline-text\">HashCode.Add</code> method does not.</li>\n</ul>\n<h1 id=\"license\"><a href=\"#license\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>License</h1>\n<p>I have been asked repeatedly for licensing of my code above. Developers have been asking permission to use it in a Kerbal Space program plugin and even in the excellent <a href=\"https://chocolatey.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chocolatey</a> project which has been totally unexpected for me because this is code I wrote years ago. It just goes to show how fundamental <code class=\"language-inline-text\">GetHashCode</code> is. Please consider the code as MIT licensed, do good with it and be excellent to each other!</p>\n","heroImage":"/images/hero/Microsoft-.NET-1366x768.png"}},"context":{}}