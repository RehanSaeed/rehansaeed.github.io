{"hash":"ec155c1e8de65d56553b38aaf8b859e757ce6afa","data":{"post":{"title":"Canonical URL's for ASP.NET MVC","path":"/canonical-urls-for-asp-net-mvc/","date":"2015-07-14T00:00:00+00:00","dateModified":null,"timeToRead":11,"author":"Muhammad Rehan Saeed","headings":[{"value":"The Canonical Link Tag"},{"value":"301 Permanent Redirects"},{"value":"Canonical URL's in MVC"},{"value":"301 Permanent Redirects in MVC"},{"value":"Special Case 1"},{"value":"Special Case 2"},{"value":"Conclusions"}],"tags":[{"id":".NET","title":".NET","path":"/tag/net/"},{"id":"ASP.NET Core","title":"ASP.NET Core","path":"/tag/asp-net-core/"},{"id":"ASP.NET MVC","title":"ASP.NET MVC","path":"/tag/asp-net-mvc/"},{"id":"ASP.NET Core Boilerplate","title":"ASP.NET Core Boilerplate","path":"/tag/asp-net-core-boilerplate/"},{"id":"C#","title":"C#","path":"/tag/c/"},{"id":"Search Engine Optimization (SEO)","title":"Search Engine Optimization (SEO)","path":"/tag/search-engine-optimization-seo/"}],"description":"Use canonical URL's in ASP.NET MVC for better Search Engine Optimization (SEO) using ASP.NET Core Boilerplate and the RedirectToCanonicalUrlAttribute.","content":"<ul>\n<li><a href=\"/asp-net-mvc-boilerplate/\">ASP.NET Core Boilerplate</a></li>\n<li>\n<p>Security</p>\n<ul>\n<li><a href=\"/securing-the-aspnet-mvc-web-config/\">Securing the ASP.NET MVC Web.config (Updated)</a></li>\n<li><a href=\"/nwebsec-asp-net-mvc-security-through-http-headers/\">NWebSec ASP.NET MVC Security Through HTTP Headers</a></li>\n<li><a href=\"/content-security-policy-for-asp-net-mvc/\">Content Security Policy (CSP) for ASP.NET MVC</a></li>\n</ul>\n</li>\n<li>\n<p>Search Engine Optimization (SEO)</p>\n<ul>\n<li><a href=\"/canonical-urls-for-asp-net-mvc/\">Canonical URL's for ASP.NET MVC</a></li>\n<li><a href=\"/dynamically-generating-robots-txt-using-asp-net-mvc\">Dynamically Generating Robots.txt Using ASP.NET MVC</a></li>\n</ul>\n</li>\n<li><a href=\"/internet-favicon-madness/\">Internet Favicon Madness (Updated)</a></li>\n<li><a href=\"/building-rssatom-feeds-for-asp-net-mvc/\">Building RSS/Atom Feeds for ASP.NET MVC</a></li>\n</ul>\n<p>The aim of this post is to give your site better search engine rankings using special <a href=\"https://en.wikipedia.org/wiki/Search_engine_optimization\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Search Engine Optimization (SEO)</a> techniques. Take a look at the URL's below and see if you can spot the differences between them:</p>\n<ol>\n<li><a href=\"http://example.com/one/two/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://example.com/one/two/</a></li>\n<li><a href=\"https://example.com/one/two/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://example.com/one/two/</a></li>\n<li><a href=\"http://example.com/one/two\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://example.com/one/two</a></li>\n<li><a href=\"http://example.com/One/Two\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://example.com/One/Two</a></li>\n</ol>\n<p>The second one has a HTTPS scheme, the third omits the trailing slash and the fourth has mixed case characters. All of the URL's point to the same resource but it turns out that search engines treat every one of these URL's as unique and different. Search engines give each URL a page rank, which determines where the resource will show up in the search results. Another term you will also hear quite often is 'link juice'. The link juice conceptualizes how page rank flows between pages and websites.</p>\n<p>If your site exposes the above four different URL's to the single resource, your link juice is being spread against each one and as a result, that will be having a detrimental impact on your page rank.</p>\n<h1 id=\"the-canonical-link-tag\"><a href=\"#the-canonical-link-tag\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Canonical Link Tag</h1>\n<p>One way to solve this problem is to add a canonical link tag to the head of your HTML page. This tells search engines what the canonical (actual) URL to the page is. The link tag contains a URL to your preferred URL for the page.</p>\n<link rel=\"canonical\" href=\"http://example.com/one/two/\">\n<p>One thing you must decide early on is your preferred URL for every page. You must ask yourself the following questions and use the resulting URL in your canonical link tag.</p>\n<ol>\n<li>Do I prefer this page to be HTTP or HTTPS? This is yet another reason to go with HTTPS across your entire site.</li>\n<li>Should the URL end with a trailing slash? This is often preferred over omitting it but it's a matter of preference.</li>\n<li>Should I allow a mix of upper-case and lower-case characters? Most sites choose to go with all lower-case characters.</li>\n</ol>\n<p>When search engines follow a link to your page, regardless of which URL they followed to get to your page, all of the link juice will be given to the URL specified in your canonical link tag. Google goes into a lot more depth about this tag <a href=\"http://googlewebmastercentral.blogspot.co.uk/2009/02/specify-your-canonical.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<h1 id=\"301-permanent-redirects\"><a href=\"#301-permanent-redirects\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>301 Permanent Redirects</h1>\n<p>Unfortunately, using the canonical link tag is not the recommended approach. The intention is that it should only be used to retrofit older websites, so they can become optimized for search engines.</p>\n<p>According to both <a href=\"http://googlewebmastercentral.blogspot.co.uk/2010/04/to-slash-or-not-to-slash.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google</a> and <a href=\"http://blogs.bing.com/webmaster/2012/01/26/moving-content-think-301-not-relcanonical\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bing</a>, the recommended approach if you visit a non-preferred format of your pages URL is to perform a <a href=\"https://moz.com/learn/seo/redirection\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">301 permanent redirect</a> to the preferred canonical URL. According to them, you only lose a tiny amount of link juice by doing a 301 permanent redirect.</p>\n<h1 id=\"canonical-urls-in-mvc\"><a href=\"#canonical-urls-in-mvc\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Canonical URL's in MVC</h1>\n<p>ASP.NET MVC 5 and ASP.NET Core have two settings you can use to automatically create canonical URL's every time you generate URL's.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Append a trailing slash to all URL's.</span>\nRouteTable<span class=\"token punctuation\">.</span>Routes<span class=\"token punctuation\">.</span>AppendTrailingSlash <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Ensure that all URL's are lower-case.</span>\nRouteTable<span class=\"token punctuation\">.</span>Routes<span class=\"token punctuation\">.</span>LowercaseUrls <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">services<span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureRouting</span><span class=\"token punctuation\">(</span>\n    routeOptions <span class=\"token operator\">=></span> \n    <span class=\"token punctuation\">{</span> \n        <span class=\"token comment\">// Append a trailing slash to all URL's.</span>\n        routeOptions<span class=\"token punctuation\">.</span>AppendTrailingSlash <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Ensure that all URL's are lower-case.</span>\n        routeOptions<span class=\"token punctuation\">.</span>LowercaseUrls <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Once you apply these settings and are using the <code class=\"language-text\">UrlHelper</code> to generate all your URL's, you will see that across your site all URL's are lower-case and all end with a trailing slash (This is just my personal preference you may not like trailing slashes).</p>\n<p>This means that within your site, no 301 permanent redirects to canonical URL's are required because the URL's are already canonical. However, this just solves part of the problem. What about external links to your site? What happens when people copy and paste your site and delete or add a trailing slash? What happens when someone types in a link to your site and puts in an upper-case character? The fact is you have no control over external links and when search engine crawlers follow those non-canonical links you will be losing valuable link juice.</p>\n<h1 id=\"301-permanent-redirects-in-mvc\"><a href=\"#301-permanent-redirects-in-mvc\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>301 Permanent Redirects in MVC</h1>\n<p>Enter the <code class=\"language-text\">RedirectToCanonicalUrlAttribute</code>. This is an MVC filter you can apply, which will check that the URL from each request is canonical. If it is, it does nothing and MVC returns the view in its response as normal. If the URL is not canonical, it generates the canonical URL based on the above MVC settings and returns a 301 permanent redirect response to the client. The client can then make another request to the correct canonical URL.</p>\n<p>You can take a look at the source code for the <code class=\"language-text\">RedirectToCanonicalUrlAttribute</code>, <code class=\"language-text\">NoTrailingSlashAttribute</code> and <code class=\"language-text\">NoLowercaseQueryStringAttribute</code>'s (I shall explain in a minute) for MVC 5 below or the ASP.NET Core version <a href=\"https://github.com/Dotnet-Boxed/Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">/// &lt;summary></span>\n<span class=\"token comment\">/// To improve Search Engine Optimization SEO, there should only be a single URL for each resource. Case </span>\n<span class=\"token comment\">/// differences and/or URL's with/without trailing slashes are treated as different URL's by search engines. This </span>\n<span class=\"token comment\">/// filter redirects all non-canonical URL's based on the settings specified to their canonical equivalent. </span>\n<span class=\"token comment\">/// Note: Non-canonical URL's are not generated by this site template, it is usually external sites which are </span>\n<span class=\"token comment\">/// linking to your site but have changed the URL case or added/removed trailing slashes.</span>\n<span class=\"token comment\">/// (See Google's comments at http://googlewebmastercentral.blogspot.co.uk/2010/04/to-slash-or-not-to-slash.html</span>\n<span class=\"token comment\">/// and Bing's at http://blogs.bing.com/webmaster/2012/01/26/moving-content-think-301-not-relcanonical).</span>\n<span class=\"token comment\">/// &lt;/summary></span>\n<span class=\"token punctuation\">[</span><span class=\"token class-name\">AttributeUsage</span><span class=\"token punctuation\">(</span>AttributeTargets<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">|</span> AttributeTargets<span class=\"token punctuation\">.</span>Class<span class=\"token punctuation\">,</span> Inherited <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> AllowMultiple <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedirectToCanonicalUrlAttribute</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">FilterAttribute</span><span class=\"token punctuation\">,</span> IAuthorizationFilter\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> QueryCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> SlashCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token keyword\">bool</span> appendTrailingSlash<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token keyword\">bool</span> lowercaseUrls<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Initializes a new instance of the &lt;see cref=\"RedirectToCanonicalUrlAttribute\" /> class.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"appendTrailingSlash\">If set to &lt;c>true&lt;/c> append trailing slashes, otherwise strip trailing </span>\n    <span class=\"token comment\">/// slashes.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;param name=\"lowercaseUrls\">If set to &lt;c>true&lt;/c> lower-case all URL's.&lt;/param></span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">RedirectToCanonicalUrlAttribute</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">bool</span> appendTrailingSlash<span class=\"token punctuation\">,</span> \n        <span class=\"token keyword\">bool</span> lowercaseUrls<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appendTrailingSlash <span class=\"token operator\">=</span> appendTrailingSlash<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lowercaseUrls <span class=\"token operator\">=</span> lowercaseUrls<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Gets a value indicating whether to append trailing slashes.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;value></span>\n    <span class=\"token comment\">/// &lt;c>true&lt;/c> if appending trailing slashes; otherwise, strip trailing slashes.</span>\n    <span class=\"token comment\">/// &lt;/value></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> AppendTrailingSlash\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appendTrailingSlash<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Gets a value indicating whether to lower-case all URL's.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;value></span>\n    <span class=\"token comment\">/// &lt;c>true&lt;/c> if lower-casing URL's; otherwise, &lt;c>false&lt;/c>.</span>\n    <span class=\"token comment\">/// &lt;/value></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> LowercaseUrls\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lowercaseUrls<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Determines whether the HTTP request contains a non-canonical URL using &lt;see cref=\"TryGetCanonicalUrl\"/>, </span>\n    <span class=\"token comment\">/// if it doesn't calls the &lt;see cref=\"HandleNonCanonicalRequest\"/> method.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"filterContext\">An object that encapsulates information that is required in order to use the </span>\n    <span class=\"token comment\">/// &lt;see cref=\"RedirectToCanonicalUrlAttribute\"/> attribute.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;exception cref=\"ArgumentNullException\">The &lt;paramref name=\"filterContext\"/> parameter is &lt;c>null&lt;/c>.&lt;/exception></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizationContext</span> filterContext<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filterContext <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>HttpMethod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> StringComparison<span class=\"token punctuation\">.</span>Ordinal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">string</span> canonicalUrl<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">TryGetCanonicalUrl</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> canonicalUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">HandleNonCanonicalRequest</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">,</span> canonicalUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Determines whether the specified URl is canonical and if it is not, outputs the canonical URL.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"filterContext\">An object that encapsulates information that is required in order to use the </span>\n    <span class=\"token comment\">/// &lt;see cref=\"RedirectToCanonicalUrlAttribute\" /> attribute.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;param name=\"canonicalUrl\">The canonical URL.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if the URL is canonical, otherwise &lt;c>false&lt;/c>.&lt;/returns></span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">TryGetCanonicalUrl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizationContext</span> filterContext<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token keyword\">string</span> canonicalUrl<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">bool</span> isCanonical <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Uri</span> url <span class=\"token operator\">=</span> filterContext<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Url<span class=\"token punctuation\">;</span>\n        canonicalUrl <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> queryIndex <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">.</span><span class=\"token function\">IndexOf</span><span class=\"token punctuation\">(</span>QueryCharacter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// If we are not dealing with the home page. Note, the home page is a special case and it doesn't matter</span>\n        <span class=\"token comment\">// if there is a trailing slash or not. Both will be treated as the same by search engines.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>AbsolutePath<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queryIndex <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">bool</span> hasTrailingSlash <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">[</span>canonicalUrl<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> SlashCharacter<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appendTrailingSlash<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// Append a trailing slash to the end of the URL.</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hasTrailingSlash <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasNoTrailingSlashAttribute</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        canonicalUrl <span class=\"token operator\">+=</span> SlashCharacter<span class=\"token punctuation\">;</span>\n                        isCanonical <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// Trim a trailing slash from the end of the URL.</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasTrailingSlash<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        canonicalUrl <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">.</span><span class=\"token function\">TrimEnd</span><span class=\"token punctuation\">(</span>SlashCharacter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        isCanonical <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">bool</span> hasTrailingSlash <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">[</span>queryIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> SlashCharacter<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appendTrailingSlash<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// Append a trailing slash to the end of the URL but before the query string.</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hasTrailingSlash <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasNoTrailingSlashAttribute</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        canonicalUrl <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>queryIndex<span class=\"token punctuation\">,</span> SlashCharacter<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        isCanonical <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// Trim a trailing slash to the end of the URL but before the query string.</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasTrailingSlash<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        canonicalUrl <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>queryIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        isCanonical <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lowercaseUrls<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> character <span class=\"token keyword\">in</span> canonicalUrl<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasNoLowercaseQueryStringAttribute</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> queryIndex <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> QueryCharacter<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsUpper</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasNoTrailingSlashAttribute</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        canonicalUrl <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> queryIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                            canonicalUrl<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span>queryIndex<span class=\"token punctuation\">,</span> canonicalUrl<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> queryIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        isCanonical <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsUpper</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasNoTrailingSlashAttribute</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        canonicalUrl <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        isCanonical <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> isCanonical<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Handles HTTP requests for URL's that are not canonical. Performs a 301 Permanent Redirect to the canonical URL.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"filterContext\">An object that encapsulates information that is required in order to use the </span>\n    <span class=\"token comment\">/// &lt;see cref=\"RedirectToCanonicalUrlAttribute\" /> attribute.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;param name=\"canonicalUrl\">The canonical URL.&lt;/param></span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">HandleNonCanonicalRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizationContext</span> filterContext<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> canonicalUrl<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        filterContext<span class=\"token punctuation\">.</span>Result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedirectResult</span><span class=\"token punctuation\">(</span>canonicalUrl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Determines whether the specified action or its controller has the &lt;see cref=\"NoTrailingSlashAttribute\"/> </span>\n    <span class=\"token comment\">/// attribute specified.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"filterContext\">The filter context.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if a &lt;see cref=\"NoTrailingSlashAttribute\"/> attribute is specified, otherwise </span>\n    <span class=\"token comment\">/// &lt;c>false&lt;/c>.&lt;/returns></span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">HasNoTrailingSlashAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizationContext</span> filterContext<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> filterContext<span class=\"token punctuation\">.</span>ActionDescriptor<span class=\"token punctuation\">.</span><span class=\"token function\">IsDefined</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>NoTrailingSlashAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n            filterContext<span class=\"token punctuation\">.</span>ActionDescriptor<span class=\"token punctuation\">.</span>ControllerDescriptor<span class=\"token punctuation\">.</span><span class=\"token function\">IsDefined</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>NoTrailingSlashAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Determines whether the specified action or its controller has the &lt;see cref=\"NoLowercaseQueryStringAttribute\"/> </span>\n    <span class=\"token comment\">/// attribute specified.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"filterContext\">The filter context.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>&lt;c>true&lt;/c> if a &lt;see cref=\"NoLowercaseQueryStringAttribute\"/> attribute is specified, otherwise </span>\n    <span class=\"token comment\">/// &lt;c>false&lt;/c>.&lt;/returns></span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">HasNoLowercaseQueryStringAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizationContext</span> filterContext<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> filterContext<span class=\"token punctuation\">.</span>ActionDescriptor<span class=\"token punctuation\">.</span><span class=\"token function\">IsDefined</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>NoLowercaseQueryStringAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n            filterContext<span class=\"token punctuation\">.</span>ActionDescriptor<span class=\"token punctuation\">.</span>ControllerDescriptor<span class=\"token punctuation\">.</span><span class=\"token function\">IsDefined</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>NoLowercaseQueryStringAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// &lt;summary></span>\n<span class=\"token comment\">/// Requires that a HTTP request does not contain a trailing slash. If it does, return a 404 Not Found. This is </span>\n<span class=\"token comment\">/// useful if you are dynamically generating something which acts like it's a file on the web server. </span>\n<span class=\"token comment\">/// E.g. /Robots.txt/ should not have a trailing slash and should be /Robots.txt. Note, that we also don't care if </span>\n<span class=\"token comment\">/// it is upper-case or lower-case in this instance.</span>\n<span class=\"token comment\">/// &lt;/summary></span>\n<span class=\"token punctuation\">[</span><span class=\"token class-name\">AttributeUsage</span><span class=\"token punctuation\">(</span>AttributeTargets<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">|</span> AttributeTargets<span class=\"token punctuation\">.</span>Class<span class=\"token punctuation\">,</span> Inherited <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> AllowMultiple <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NoTrailingSlashAttribute</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">FilterAttribute</span><span class=\"token punctuation\">,</span> IAuthorizationFilter\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> QueryCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> SlashCharacter <span class=\"token operator\">=</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Determines whether a request contains a trailing slash and, if it does, calls the </span>\n    <span class=\"token comment\">/// &lt;see cref=\"HandleTrailingSlashRequest\"/> method.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"filterContext\">An object that encapsulates information that is required in order to use the </span>\n    <span class=\"token comment\">/// &lt;see cref=\"RequireHttpsAttribute\"/> attribute.&lt;/param></span>\n    <span class=\"token comment\">/// &lt;exception cref=\"ArgumentNullException\">The &lt;paramref name=\"filterContext\"/> parameter is null.&lt;/exception></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizationContext</span> filterContext<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filterContext <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">string</span> canonicalUrl <span class=\"token operator\">=</span> filterContext<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Url<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> queryIndex <span class=\"token operator\">=</span> canonicalUrl<span class=\"token punctuation\">.</span><span class=\"token function\">IndexOf</span><span class=\"token punctuation\">(</span>QueryCharacter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queryIndex <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canonicalUrl<span class=\"token punctuation\">[</span>canonicalUrl<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> SlashCharacter<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">HandleTrailingSlashRequest</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canonicalUrl<span class=\"token punctuation\">[</span>queryIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> SlashCharacter<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">HandleTrailingSlashRequest</span><span class=\"token punctuation\">(</span>filterContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Handles HTTP requests that have a trailing slash but are not meant to.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"filterContext\">An object that encapsulates information that is required in order to use the </span>\n    <span class=\"token comment\">/// &lt;see cref=\"RequireHttpsAttribute\"/> attribute.&lt;/param></span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">HandleTrailingSlashRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizationContext</span> filterContext<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        filterContext<span class=\"token punctuation\">.</span>Result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpNotFoundResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// &lt;summary></span>\n<span class=\"token comment\">/// Ensures that a HTTP request URL can contain query string parameters with both upper-case and lower-case </span>\n<span class=\"token comment\">/// characters.</span>\n<span class=\"token comment\">/// &lt;/summary></span>\n<span class=\"token punctuation\">[</span><span class=\"token class-name\">AttributeUsage</span><span class=\"token punctuation\">(</span>AttributeTargets<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">|</span> AttributeTargets<span class=\"token punctuation\">.</span>Class<span class=\"token punctuation\">,</span> Inherited <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> AllowMultiple <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NoLowercaseQueryStringAttribute</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">FilterAttribute</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Adding the <code class=\"language-text\">RedirectToCanonicalUrlAttribute</code> filter is easy. You can add it to the global filters collection so all requests will be handled by it like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">GlobalFilters<span class=\"token punctuation\">.</span>Filters<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RedirectToCanonicalUrlAttribute</span><span class=\"token punctuation\">(</span>\n    RouteTable<span class=\"token punctuation\">.</span>Routes<span class=\"token punctuation\">.</span>AppendTrailingSlash<span class=\"token punctuation\">,</span> \n    RouteTable<span class=\"token punctuation\">.</span>Routes<span class=\"token punctuation\">.</span>LowercaseUrls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>That's it! It's as simple as that! Now there are two special cases, which is where the <code class=\"language-text\">NoTrailingSlashAttribute</code> and <code class=\"language-text\">NoLowercaseQueryStringAttribute</code> filters comes in.</p>\n<h2 id=\"special-case-1\"><a href=\"#special-case-1\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Special Case 1</h2>\n<p>Say you want to have the following action method where visiting <code class=\"language-text\">http://example.com/robots.txt</code> returns a text result. We want the client to think it's just visiting a static <code class=\"language-text\">robots.txt</code> file but in reality we are dynamically generating it (One reason for doing this is that a <code class=\"language-text\">robots.txt</code> file must contain an absolute URL and you want to use the <code class=\"language-text\">UrlHelper</code> to just handle that, no matter what domain the site is running under).</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">NoTrailingSlash</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"robots.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ContentResult</span> <span class=\"token function\">RobotsText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">string</span> content <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>robotsService<span class=\"token punctuation\">.</span><span class=\"token function\">GetRobotsText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Content</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> ContentType<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">,</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Adding a trailing slash to <code class=\"language-text\">robots.txt</code> would just be weird. Also, the last thing you want to do when search engines try to visit <code class=\"language-text\">http://example.com/robots.txt</code> is 301 permanent redirect them to <code class=\"language-text\">http://example.com/robots.txt/</code>. So we add the <code class=\"language-text\">NoTrailingSlashAttribute</code> filter.</p>\n<p>The <code class=\"language-text\">RedirectToCanonicalUrlAttribute</code> knows about the <code class=\"language-text\">NoTrailingSlashAttribute</code> filter and when it sees it and we make a request to the above action, it ignores the <code class=\"language-text\">AppendTrailingSlash</code> setting and it works just like requesting a static <code class=\"language-text\">robots.txt</code> file from the file system.</p>\n<h2 id=\"special-case-2\"><a href=\"#special-case-2\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Special Case 2</h2>\n<p>Sometimes you want your query string parameters to be a mix of upper-case and lower-case. When you want to do this, simply add the <code class=\"language-text\">NoLowercaseQueryStringAttribute</code> attribute to the action method like so:</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">NoLowercaseQueryString</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"action\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Action</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> mixedCaseParameter<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// mixedCaseParameter can contain upper and lower case characters.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you are using the ASP.NET Identity NuGet package for authentication, then take note, you need to apply the <code class=\"language-text\">NoLowercaseQueryStringAttribute</code> to the <code class=\"language-text\">AccountController</code>.</p>\n<h1 id=\"conclusions\"><a href=\"#conclusions\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"22\" height=\"22\" aria-hidden=\"true\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusions</h1>\n<p>Once again, you can find a working example of this and much more using the <a href=\"https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASP.NET Core Boilerplate</a> project template or view the source code directly on <a href=\"https://github.com/Dotnet-Boxed/Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a>.</p>\n","heroImage":"/images/hero/Link-Juice-1366x768.png"}},"context":{}}