{"hash":"692e5f956d7f92f346607c79a77b6171f3613e0a","data":{"post":{"title":"Model-View-ViewModel (MVVM) - Part 2 - IDisposable","path":"/model-view-viewmodel-mvvm-part2-idisposable/","date":"2014-06-13T00:00:00+00:00","dateModified":null,"timeToRead":4,"author":"Muhammad Rehan Saeed","headings":[],"tags":[{"id":".NET","title":".NET","path":"/tag/net/"},{"id":"Base Class Library","title":"Base Class Library","path":"/tag/base-class-library/"},{"id":"BCL","title":"BCL","path":"/tag/bcl/"},{"id":"C#","title":"C#","path":"/tag/c/"},{"id":"Design Patterns","title":"Design Patterns","path":"/tag/design-patterns/"},{"id":"IDisposable","title":"IDisposable","path":"/tag/i-disposable/"},{"id":"Model-View-ViewModel (MVVM)","title":"Model-View-ViewModel (MVVM)","path":"/tag/model-view-view-model-mvvm/"},{"id":"MVVM","title":"MVVM","path":"/tag/mvvm/"},{"id":"Reactive Extensions","title":"Reactive Extensions","path":"/tag/reactive-extensions/"},{"id":"Rx","title":"Rx","path":"/tag/rx/"}],"description":"Implementing IDisposable correctly is ridiculously hard. A Disposable base class can make it easier. Using IDisposable in Model-View-ViewModel (MVVM) really helps.","content":"<ul>\n<li><a href=\"/model-view-viewmodel-mvvm-part1-overview/\">Model-View-ViewModel (MVVM) - Part 1 - Overview</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part2-idisposable/\">Model-View-ViewModel (MVVM) - Part 2 - IDisposable</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part3-inotifypropertychanged/\">Model-View-ViewModel (MVVM) - Part 3 - INotifyPropertyChanged</a></li>\n<li><a href=\"/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/\">Model-View-ViewModel (MVVM) - Part 4 - INotifyDataErrorInfo</a></li>\n</ul>\n<p>View models these days interact with all kinds of precious resources like Compasses and the GPS. Implementing <code class=\"language-text\">IDisposable</code> is an important pattern you can follow to dispose of these resources cleanly. Freeing them up to be used elsewhere and saving the users battery (Particularly important on mobile devices). Using the <code class=\"language-text\">IDisposable</code> interface in the Model-View-ViewModel (MVVM) pattern is a wise decision.</p>\n<p>Implementing <code class=\"language-text\">IDisposable</code> <strong>correctly</strong> is ridiculously hard. If you don't know how hard it really is, I recommend reading the top comment on <a href=\"http://stackoverflow.com/questions/538060/proper-use-of-the-idisposable-interface\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> Stack Overflow article.</p>\n<p>Implementing <a href=\"http://msdn.microsoft.com/en-GB/library/system.idisposable.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IDisposable</a> is one of the rare times in C# where a developer has to use <a href=\"http://msdn.microsoft.com/en-us/library/66x5fx1b.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">C# Destructors</a> and also one of the few times when we have to tickle the garbage collector to stop it from trying to release the unmanaged resources twice by calling <a href=\"http://msdn.microsoft.com/en-us/library/system.gc.suppressfinalize%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SuppressFinalize</a> on <a href=\"http://msdn.microsoft.com/en-us/library/system.gc%28v=vs.110%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GC</a>.</p>\n<p>Having to write this code repeatedly is difficult and error prone, so how about a base class?</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Framework<span class=\"token punctuation\">.</span>ComponentModel</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reactive</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">.</span>Subjects</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Base class for members implementing &lt;see cref=\"IDisposable\"/>.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Disposable</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isDisposed<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Subject<span class=\"token punctuation\">&lt;</span>Unit<span class=\"token punctuation\">></span></span> whenDisposedSubject<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Finalizes an instance of the &lt;see cref=\"Disposable\"/> class. Releases unmanaged</span>\n        <span class=\"token comment\">/// resources and performs other cleanup operations before the &lt;see cref=\"Disposable\"/></span>\n        <span class=\"token comment\">/// is reclaimed by garbage collection. Will run only if the</span>\n        <span class=\"token comment\">/// Dispose method does not get called.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token operator\">~</span><span class=\"token function\">Disposable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets the when errors changed observable event. Occurs when the validation errors have changed for a property or for the entire object.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value></span>\n        <span class=\"token comment\">/// The when errors changed observable event.</span>\n        <span class=\"token comment\">/// &lt;/value></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IObservable<span class=\"token punctuation\">&lt;</span>Unit<span class=\"token punctuation\">></span></span> WhenDisposed\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>IsDisposed<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Return</span><span class=\"token punctuation\">(</span>Unit<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Subject<span class=\"token punctuation\">&lt;</span>Unit<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject<span class=\"token punctuation\">.</span><span class=\"token function\">AsObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Gets a value indicating whether this &lt;see cref=\"Disposable\"/> is disposed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;value>&lt;c>true&lt;/c> if disposed; otherwise, &lt;c>false&lt;/c>.&lt;/value></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsDisposed <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isDisposed<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Dispose all managed and unmanaged resources.</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Take this object off the finalization queue and prevent finalization code for this</span>\n            <span class=\"token comment\">// object from executing a second time.</span>\n            GC<span class=\"token punctuation\">.</span><span class=\"token function\">SuppressFinalize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Disposes the managed resources implementing &lt;see cref=\"IDisposable\"/>.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DisposeManaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Disposes the unmanaged resources implementing &lt;see cref=\"IDisposable\"/>.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DisposeUnmanaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Throws a &lt;see cref=\"ObjectDisposedException\"/> if this instance is disposed.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">protected</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isDisposed<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ObjectDisposedException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Releases unmanaged and - optionally - managed resources.</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token comment\">/// &lt;param name=\"disposing\">&lt;c>true&lt;/c> to release both managed and unmanaged resources;</span>\n        <span class=\"token comment\">/// &lt;c>false&lt;/c> to release only unmanaged resources, called from the finalizer only.&lt;/param></span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> disposing<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Check to see if Dispose has already been called.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isDisposed<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// If disposing managed and unmanaged resources.</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>disposing<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">DisposeManaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">DisposeUnmanaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isDisposed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// Raise the WhenDisposed event.</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject<span class=\"token punctuation\">.</span><span class=\"token function\">OnNext</span><span class=\"token punctuation\">(</span>Unit<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject<span class=\"token punctuation\">.</span><span class=\"token function\">OnCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>whenDisposedSubject<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There are several interesting facets to this implementation.</p>\n<ol>\n<li>There is a difference between disposing of managed and unmanaged resources in the disposable pattern. To facilitate this, there are two separate protected methods which can be overridden in a derived class to dispose of each of them.</li>\n<li>The disposable pattern requires you to throw an <code class=\"language-text\">ObjectDisposedException</code> when you try to access a property or method after the object has been disposed. To achieve this, there is a <code class=\"language-text\">ThrowIfDisposed</code> helper method which can be added to the top of each property or method.</li>\n<li>There is an <code class=\"language-text\">IsDisposed</code> property which can be useful if we don't know if the object is disposed or not.</li>\n<li>Finally, there is a Reactive Extensions (Rx) observable <code class=\"language-text\">WhenDisposed</code> property. This allows us to register for the dispose event.</li>\n</ol>\n<p>Here is an example of how the base class is used to dispose of both a managed and unmanaged (COM object) resources.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DisposableExample</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Disposable</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ManagedResource</span> managedResource<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UnmanagedResource</span> unmanagedResource<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ThrowIfDisposed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Do Stuff</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DisposeManaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>managedResource<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DisposeUnmanaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Marshal<span class=\"token punctuation\">.</span><span class=\"token function\">ReleaseComObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unmanagedResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unmanagedResource <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>An example of how to dispose of an instance of the above object.</p>\n<div class=\"line-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\">DisposableExample</span> disposable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DisposableExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndisposable<span class=\"token punctuation\">.</span>WhenDisposed<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Disposed Event Fired\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndisposable<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>disposable<span class=\"token punctuation\">.</span>IsDisposed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see, it looks a whole lot simpler and has some pretty cool helper functions and features. No more need to remember how to implement this complicated pattern.</p>\n","heroImage":"/images/hero/MVVM-1366x768.png"}},"context":{}}