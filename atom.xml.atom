<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://rehansaeed.com</id>
    <title>Muhammad Rehan Saeed</title>
    <updated>2022-03-30T21:05:16.791Z</updated>
    <generator>Gridsome Feed Plugin</generator>
    <author>
        <name>Muhammad Rehan Saeed</name>
        <uri>https://rehansaeed.com</uri>
    </author>
    <link rel="alternate" href="https://rehansaeed.com"/>
    <link rel="self" href="https://rehansaeed.com/atom.xml.atom"/>
    <subtitle>Software Developer at Microsoft, YouTuber, Open Source Contributor and Blogger</subtitle>
    <logo>https://rehansaeed.com/images/hero/Muhammad-Rehan-Saeed-1600x900.jpg</logo>
    <icon>https://rehansaeed.com/favicon.ico</icon>
    <rights>Copyright © 2022 Muhammad Rehan Saeed</rights>
    <entry>
        <title type="html"><![CDATA[I Was Awarded as an Open UK Honouree]]></title>
        <id>https://rehansaeed.com/open-uk-honouree/</id>
        <link href="https://rehansaeed.com/open-uk-honouree/"/>
        <updated>2022-02-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I am very thankful for being awarded as an Open UK 2022 Honouree. Open UK is an organisation funded by tech companies to lobby the UK government in favour of open source.]]></summary>
        <content type="html"><![CDATA[<p>Generally speaking I&#39;m not the sort of person who generally receives awards or prizes, so I was rather surprised when out of the blue I was contacted by <a href="https://openuk.uk">Open UK</a> to receive a medal to signify being listed among their <a href="https://openuk.uk/2022HonoursList/">2022 honours list</a>.</p>
<p>I had never heard of Open UK before so I was initially very sceptical but it seems to be a legit organisation that is <a href="https://openuk.uk/participants/partners/">funded by the likes of arm, GitHub, Google, Huawei, Microsoft and Red Hat</a> and partners with <a href="https://openuk.uk/participants/our-memberships/">several open source</a> organisations including the Linux Foundation.</p>
<p>I did a bunch of reading before I accepted any award to make sure they weren&#39;t doing anything shady and found that they seem to be lobbying the UK government in favour of Open Source which is fine by me!</p>
<blockquote>
<p>The 2022 #openukgennext #openukhonouree list is made up of individuals with broad ranging experience in Open Technology identified as being ones to watch in the UK!</p>
</blockquote>
<blockquote>
<p>They hail from all walks of Open Source Software, Open Hardware and Open Data. This is <em>the</em> list of those to watch for the future of Open Technology. All are earmarked as leading the next generation of Open Technology whether through social media, their jobs, community contributions, policy or in education.</p>
<p>The British Honours system is something very specific to the UK and a means of rewarding an individual for their achievement or service. Medals are used within this system to recognise an activity or long or valuable service.</p>
<p>Congratulations to all of those listed. Enjoy the recognition of our New Year’s Honour from your peers at OpenUK and we look forward to seeing all that you will achieve in Open Technology through 2022 and beyond.</p>
<footer><cite><a href="https://openuk.uk/2022HonoursList/">Open UK 2022 Honours List</a></cite></footer>
</blockquote>
<p>This is the second year the award has been handed out. I&#39;m not certain what the selection criteria was apart from the fact that I&#39;m a developer in the UK but I do have a fairly active <a href="https://github.com/RehanSaeed">GitHub profile</a> so I suspect that is how they found me.</p>
<p><img src="https://rehansaeed.com/open-uk-honouree/images/Medal.jpg" alt="Open UK 2022 Honouree Medal"></p>
<p>Overall, I&#39;m very thankful that I was recognised (albeit without knowing exactly why) and am happy to add the Open UK medal to my small collection of <a href="https://mvp.microsoft.com/en-us/PublicProfile/5001654?fullName=Muhammad%20Rehan%20Saeed">Microsoft MVP</a> awards from before I became a Microsoft employee.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Live Streaming .NET]]></title>
        <id>https://rehansaeed.com/live-streaming-dotnet/</id>
        <link href="https://rehansaeed.com/live-streaming-dotnet/"/>
        <updated>2022-02-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How I started live streaming my learnings on C#, .NET, ASP.NET Core and beyond to YouTube and Twitch.]]></summary>
        <content type="html"><![CDATA[<p>I started live streaming my software development learnings simultaneously on <a href="https://www.youtube.com/c/MuhammadRehanSaeed">YouTube</a> and <a href="https://www.twitch.tv/rehansaeeduk">Twitch</a> a few months ago. I&#39;m by no means a professional and only have a couple hundred subscribers and a few thousand views at this time but I&#39;ve had a lot of fun learning and sharing my learnings with the world.</p>
<p>After streaming for a while, I discovered that I hadn&#39;t been writing much code at work as my role at Microsoft has evolved into one that has meant more project management style work and leading a team of developers. So It&#39;s been rather liberating to force myself to allocate an hour to a live stream where I can go and learn something new or update one of my many open source projects with some new feature. I realized that I do indeed really like writing, thinking and talking about code and I want to continue to do more of it going forward.</p>
<p>I put together a few YouTube playlists of the live streams I&#39;ve done so far.</p>
<h1 id="net-6-and-c-10">.NET 6 and C# 10</h1>
<p>This is where it all started, just before the release of .NET 6 and C# 10. There were <strong>a lot</strong> of hidden and not so obvious features in this release that I haven&#39;t seen many blog posts or videos cover. I&#39;ve been gathering these gems for the last year and talk about each one at length in this YouTube playlist.</p>
<p><a href="https://www.youtube.com/playlist?list=PLUAZAVKVXTmQEF67lddyErymHlBDaPpjU">https://www.youtube.com/playlist?list=PLUAZAVKVXTmQEF67lddyErymHlBDaPpjU</a></p>
<h1 id="twitter-snowflake-ids">Twitter Snowflake ID&#39;s</h1>
<p>Twitter uses Snowflake ID&#39;s to generate unique identifiers for tweets. In this YouTube playlist I deep dive into how Twitter does this and using ASP.NET Core minimal API&#39;s to create an API. I think Twitter Snowflake ID&#39;s are a really cool way of generating really clean looking globally unique ID&#39;s and its worth looking into them as an alternative to ugly GUID&#39;s.</p>
<p><a href="https://www.youtube.com/playlist?list=PLUAZAVKVXTmTS0Z1z-fmHv0jaxbF_Tys-">https://www.youtube.com/playlist?list=PLUAZAVKVXTmTS0Z1z-fmHv0jaxbF_Tys-</a></p>
<h1 id="pulumi-azure-and-net">Pulumi, Azure and .NET</h1>
<p><a href="https://www.pulumi.com/">Pulumi</a> is a tool used to build, deploy, and manage your cloud applications using pretty much any language on any cloud. I used Pulumi with .NET to play around with <a href="https://azure.microsoft.com/en-gb/pricing/details/container-apps/">Azure Container Apps</a> which I found to be promising but very early in its development. I&#39;m also now looking into creating an <a href="https://azure.microsoft.com/en-gb/services/kubernetes-service/">Azure Kubernetes Service</a> cluster using Pulumi.</p>
<p><a href="https://www.youtube.com/playlist?list=PLUAZAVKVXTmTAb2Vko40UMnnRLLW51UhS">https://www.youtube.com/playlist?list=PLUAZAVKVXTmTAb2Vko40UMnnRLLW51UhS</a></p>
<h1 id="feedback">Feedback</h1>
<p>Since I&#39;m new to this, I&#39;d love to hear your feedback and suggestions. Oh and don&#39;t forget to <strong>subscribe and smash that like button</strong>! Sorry, its obligatory to say that once you post videos to YouTube. I can&#39;t get over how silly it sounds when I say it.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Optimally Configuring Open Telemetry Tracing for ASP.NET Core]]></title>
        <id>https://rehansaeed.com/optimally-configuring-open-telemetry-tracing-for-asp-net-core/</id>
        <link href="https://rehansaeed.com/optimally-configuring-open-telemetry-tracing-for-asp-net-core/"/>
        <updated>2022-02-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to optimally configure Open Telemetry traces for ASP.NET Core enriched with lots of extra information.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/deep-dive-into-open-telemetry-for-net/">Open Telemetry - Deep Dive into Open Telemetry for .NET</a></li>
<li><a href="https://rehansaeed.com/open-telemetry-for-asp-net-core/">Open Telemetry - Configuring Open Telemetry for ASP.NET Core</a></li>
<li><a href="https://rehansaeed.com/exporting-open-telemetry-data-to-jaeger/">Open Telemetry - Exporting Open Telemetry Data to Jaeger</a></li>
<li><a href="https://rehansaeed.com/optimally-configuring-open-telemetry-tracing-for-asp-net-core/">Open Telemetry - Optimally Configuring Open Telemetry Tracing for ASP.NET Core</a></li>
</ol>
<p>Configuring tracing in Open Telemetry for ASP.NET Core can be a fairly simple process but never accept the defaults! There is always more we can do to make improvements.</p>
<p>In this post, I&#39;ll show you how you can take the simplest setup for Open Telemetry tracing I showed you in <a href="https://rehansaeed.com/open-telemetry-for-asp-net-core/">&#39;Configuring Open Telemetry for ASP.NET Core&#39;</a> and move to a more fully featured example.</p>
<h1 id="simplest-setup">Simplest Setup</h1>
<p>Here is a reminder of the simple setup I showed you in <a href="https://rehansaeed.com/open-telemetry-for-asp-net-core/">&#39;Configuring Open Telemetry for ASP.NET Core&#39;</a>:</p>
<pre><code class="language-cs">public virtual void ConfigureServices(
    IServiceCollection services,
    IWebHostEnvironment webHostEnvironment)
{
    // ...omitted
    services.AddOpenTelemetryTracing(
        builder =&gt;
        {
            builder
                .SetResourceBuilder(ResourceBuilder
                    .CreateDefault()
                    .AddService(webHostEnvironment.ApplicationName))
                .AddAspNetCoreInstrumentation();
            if (webHostEnvironment.IsDevelopment())
            {
                builder.AddConsoleExporter(
                    options =&gt; options.Targets = ConsoleExporterOutputTargets.Debug);
            }
        });
}
</code></pre>
<p>And the tracing output you can expect for a request/response cycle:</p>
<pre><code>Activity.Id:          00-dde96d459fee4144a83818e054e221b1-cac69896c1bcd14f-01
Activity.DisplayName: /favicon-32x32.png
Activity.Kind:        Server
Activity.StartTime:   2021-02-01T10:28:25.4637044Z
Activity.Duration:    00:00:00.0086712
Activity.TagObjects:
    http.host: localhost:5001
    http.method: GET
    http.path: /favicon-32x32.png
    http.url: https://localhost:5001/favicon-32x32.png
    http.user_agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36
    http.status_code: 200
    otel.status_code: UNSET
    service.name: ApiTemplate
    service.instance.id: defe9269-04f2-4b49-a05c-ebddf2112993
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.0.0.0
</code></pre>
<h1 id="the-kitchen-sink-setup">The Kitchen Sink Setup</h1>
<p>This time we&#39;re going to setup a more advanced configuration. We&#39;re going to start off by adding a lot more information to our <code>ResourceBuilder</code> we pass to the <code>SetResourceBuilder</code> function above.</p>
<pre><code class="language-cs">private static ResourceBuilder GetResourceBuilder(IWebHostEnvironment webHostEnvironment)
{
    var version = Assembly
        .GetExecutingAssembly()
        .GetCustomAttribute&lt;AssemblyFileVersionAttribute&gt;()!
        .Version
    ResourceBuilder
        .CreateEmpty()
        .AddService(webHostEnvironment.ApplicationName, serviceVersion: version)
        .AddAttributes(
            new KeyValuePair&lt;string, object&gt;[]
            {
                new(&quot;deployment.environment&quot;, webHostEnvironment.EnvironmentName),
                new(&quot;host.name&quot;, Environment.MachineName),
            })
        .AddEnvironmentVariableDetector();
}
</code></pre>
<p>This time we want to start with an empty resource builder calling <code>CreateEmpty</code>. We then add the application name and version which we can retrieve from the current assembly. You may have multiple versions of your application running over time and its important to have a way to differentiate between them.</p>
<p>We then add a few attributes to every span including the environment name and machine name. The attribute names here are <a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/README.md">standardised</a> as defined by the Open Telemetry specification. I decided that knowing the environment the application is running in and the machine name is important to know when troubleshooting issues.</p>
<p>Finally, we add an environment variable detector which we can use to add further attributes to every span using environment variables. Using <code>ResourceBuilder.CreateDefault</code> already included this in the simple example above but since we started with an empty resource builder we need to add it explicitly. Here is a PowerShell example of how you can add add additional attributes to every span using the <code>OTEL_RESOURCE_ATTRIBUTES</code> environment variable:</p>
<pre><code class="language-powershell">$env:OTEL_RESOURCE_ATTRIBUTES = &#39;key1=value1,key2=value2&#39;
</code></pre>
<p>We can now plug the <code>GetResourceBuilder</code> into our code below and add a few more goodies:</p>
<pre><code class="language-cs">public virtual void ConfigureServices(
    IServiceCollection services,
    IWebHostEnvironment webHostEnvironment)
{
    // ...omitted
    services.AddOpenTelemetryTracing(
        builder =&gt;
        {
            builder
                .SetResourceBuilder(GetResourceBuilder(webHostEnvironment))
                .AddAspNetCoreInstrumentation(
                    options =&gt;
                    {
                        options.Enrich = Enrich;
                        options.RecordException = true;
                    });
            if (webHostEnvironment.IsDevelopment())
            {
                builder.AddConsoleExporter(
                    options =&gt; options.Targets = ConsoleExporterOutputTargets.Debug);
            }
        });
}

private static void Enrich(Activity activity, string eventName, object obj)
{
    if (obj is HttpRequest request)
    {
        var context = request.HttpContext;
        activity.AddTag(&quot;http.flavor&quot;, GetHttpFlavour(request.Protocol));
        activity.AddTag(&quot;http.scheme&quot;, request.Scheme);
        activity.AddTag(&quot;http.client_ip&quot;, context.Connection.RemoteIpAddress);
        activity.AddTag(&quot;http.request_content_length&quot;, request.ContentLength);
        activity.AddTag(&quot;http.request_content_type&quot;, request.ContentType);

        var user = context.User;
        if (user.Identity?.Name is not null)
        {
            activity.AddTag(&quot;enduser.id&quot;, user.Identity.Name);
            activity.AddTag(
                &quot;enduser.scope&quot;,
                string.Join(&#39;,&#39;, user.Claims.Select(x =&gt; x.Value)));
        }
    }
    else if (obj is HttpResponse response)
    {
        activity.AddTag(&quot;http.response_content_length&quot;, response.ContentLength);
        activity.AddTag(&quot;http.response_content_type&quot;, response.ContentType);
    }
}

public static string GetHttpFlavour(string protocol)
{
    if (HttpProtocol.IsHttp10(protocol))
    {
        return &quot;1.0&quot;;
    }
    else if (HttpProtocol.IsHttp11(protocol))
    {
        return &quot;1.1&quot;;
    }
    else if (HttpProtocol.IsHttp2(protocol))
    {
        return &quot;2.0&quot;;
    }
    else if (HttpProtocol.IsHttp3(protocol))
    {
        return &quot;3.0&quot;;
    }

    throw new InvalidOperationException($&quot;Protocol {protocol} not recognised.&quot;);
}
</code></pre>
<p>Next, we configure <code>AddAspNetCoreInstrumentation</code> to enrich the spans with additional information about the current request, response and the user (if any) using standardised attributes. Finally, we record details of exceptions from our controllers which would otherwise be lost. This outputs the following:</p>
<pre><code>Activity.Id:          00-3d0f70e71a8e6e5e87f156bdcf94b8c9-ccdd8d23a2e3ba93-01
Activity.ActivitySourceName: OpenTelemetry.Instrumentation.AspNetCore
Activity.DisplayName: /favicon-32x32.png
Activity.Kind:        Server
Activity.StartTime:   2022-02-03T10:52:47.6513334Z
Activity.Duration:    00:00:00.0077181
Activity.TagObjects:
    http.host: localhost:5001
    http.method: GET
    http.target: /favicon-32x32.png
    http.url: https://localhost:5001/favicon-32x32.png
    http.user_agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36
    http.flavor: 2.0
    http.scheme: https
    http.client_ip: ::1
    http.request_content_length:
    http.request_content_type:
    http.status_code: 200
    otel.status_code: UNSET
    http.response_content_length: 628
    http.response_content_type: image/png
    deployment.environment: Development
    host.name: REHANS-MACHINE
    service.name: ApiTemplate
    service.version: 5.1.1.0
    service.instance.id: 4e364d08-4965-4d83-8afa-70769074ab0d
</code></pre>
<p>This time around you can see we&#39;ve collected a lot more information. Now, this may not be &#39;optimal&#39; for your application. Collecting additional information comes at a performance and monetary cost, so its up to you to judge what extra information is useful to you but I think most of the above is pretty essential basic information that would be valuable while debugging any issues.</p>
<h1 id="wrapping-up">Wrapping Up</h1>
<p>In this post, I showed a simple example showing how you can configure Open Telemetry tracing and then went on to show a more advanced real world example.</p>
<p>Open Telemetry is gaining popularity and traction with even <a href="https://github.blog/2021-05-26-why-and-how-github-is-adopting-opentelemetry/">GitHub adopting it</a>. So far in this blog series we&#39;ve only discussed the basics of Open Telemetry and tracing in particular. When Open Telemetry metrics and logs comes out of alpha/beta, I&#39;ll write another post discussing configuring those.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Problem with C# 10 Implicit Usings]]></title>
        <id>https://rehansaeed.com/the-problem-with-csharp-10-implicit-usings/</id>
        <link href="https://rehansaeed.com/the-problem-with-csharp-10-implicit-usings/"/>
        <updated>2021-10-13T09:24:00.000Z</updated>
        <summary type="html"><![CDATA[I tried using C# 10 implicit using statements and found that they had a fatal flaw which meant you couldn't use them under certain circumstances]]></summary>
        <content type="html"><![CDATA[<p>::: tip Update (2021-10-14)
<a href="https://twitter.com/markrendle">Mark Rendle</a> made an interesting suggestion on Twitter after seeing this blog post. I&#39;ve updated the post below with his code.
:::</p>
<p>Yesterday I livestreamed myself upgrading a project to .NET 6 and C# 10. Along the way I tried using a new C# 10 feature called <a href="https://docs.microsoft.com/en-us/dotnet/core/compatibility/sdk/6.0/implicit-namespaces">implicit using statements</a> and discovered that it wasn&#39;t quite as straightforward as I first thought and you should probably not use it under certain circumstances.</p>
<p>Here is the live stream for those who are interested (I&#39;m eager to get any feedback on how I&#39;m presenting as its not a natural skill for me):</p>
<p><a href="https://www.youtube.com/watch?v=FjnS4oF8K3E">https://www.youtube.com/watch?v=FjnS4oF8K3E</a></p>
<h1 id="what-are-implicit-using-statements">What are Implicit Using Statements?</h1>
<p>Adding the line below to your <code>.csproj</code> project file turns the feature on:</p>
<pre><code class="language-xml">&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
</code></pre>
<p>Once enabled, depending on the type of project you have created you&#39;ll have the following global using statements added to your project implicitly.</p>
<table>
<thead>
<tr>
<th>SDK</th>
<th>Default namespaces</th>
</tr>
</thead>
<tbody><tr>
<td>Microsoft.NET.Sdk</td>
<td><code>System</code><br><code>System.Collections.Generic</code><br><code>System.IO</code><br><code>System.Linq</code><br><code>System.Net.Http</code><br><code>System.Threading</code><br><code>System.Threading.Tasks</code></td>
</tr>
<tr>
<td>Microsoft.NET.Sdk.Web</td>
<td><code>System.Net.Http.Json</code><br><code>Microsoft.AspNetCore.Builder</code><br><code>Microsoft.AspNetCore.Hosting</code><br><code>Microsoft.AspNetCore.Http</code><br><code>Microsoft.AspNetCore.Routing</code><br><code>Microsoft.Extensions.Configuration</code><br><code>Microsoft.Extensions.DependencyInjection</code><br><code>Microsoft.Extensions.Hosting</code><br><code>Microsoft.Extensions.Logging</code></td>
</tr>
<tr>
<td>Microsoft.NET.Sdk.Worker</td>
<td><code>Microsoft.Extensions.Configuration</code><br><code>Microsoft.Extensions.DependencyInjection</code><br><code>Microsoft.Extensions.Hosting</code><br><code>Microsoft.Extensions.Logging</code></td>
</tr>
</tbody></table>
<p>Sounds great, now you can delete a large portion of the using statements in your project right? Well not so fast, here are some problems I discovered along the way.</p>
<h2 id="build-errors">Build Errors</h2>
<p>I discovered the first problem while multi-targetting a class library project for a NuGet package. I had targetted .NET 4.7.2 as well as other target frameworks like .NET 6 for backwards compatibility and found that <code>System.Net.Http</code> could not be found. It turns out I hadn&#39;t referenced that particular NuGet package for .NET 4.7.2 and was now getting a build error.</p>
<p>I could add the <code>System.Net.Http</code> NuGet package for .NET 4.7.2 on its own and that would solve the problem but I really didn&#39;t like having the overhead of another unnecessary package reference. That also means extra work for me to maintain updating the version number or relying on tools like <a href="https://dependabot.com/">Dependabot</a> and <a href="https://www.whitesourcesoftware.com/free-developer-tools/renovate/">Renovate</a> to submit PR&#39;s to upgrade the version number for me.</p>
<pre><code class="language-xml">&lt;ItemGroup Label=&quot;Package References (.NET 4.7.2)&quot; Condition=&quot;&#39;$(TargetFramework)&#39; == &#39;net472&#39;&quot;&gt;
    &lt;PackageReference Include=&quot;System.Net.Http&quot; Version=&quot;4.3.4&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<p><a href="https://twitter.com/markrendle">Mark Rendle</a> on Twitter suggested another workaround after seeing this blog post. His suggestion was to remove the offending using statement in the <code>.csproj</code> file.</p>
<pre><code class="language-xml">&lt;ItemGroup&gt;
    &lt;Using Remove=&quot;System.Net.Http&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<p>This looks awfully strange to me. I&#39;m not sure how I feel about adding or removing namespaces from C# project files yet. It doesn&#39;t seem very discoverable to me. So in this particular case I&#39;m happy to avoid using implicit using statements for now.</p>
<h2 id="what-usings-were-added">What Using&#39;s Were Added?</h2>
<p>The second problem is trying to understand what using&#39;s have been added. As you can see from the table above, you could go and look in the <a href="https://docs.microsoft.com/en-us/dotnet/core/compatibility/sdk/6.0/implicit-namespaces">documentation</a> to figure this out but that&#39;s slow and time consuming. Another alternative is actually to build your project and then look in its <code>obj</code> directory under:</p>
<pre><code>My.Project\obj\Debug\net472\My.Project.GlobalUsings.g.cs
</code></pre>
<p>That&#39;s not ideal either. I think Visual Studio should ideally show you these using statements somehow.</p>
<h1 id="conclusions">Conclusions</h1>
<p>Implicit usings are <a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-release-candidate-2/#net-sdk-c-project-templates-modernized">enabled by default</a> in the latest blank project templates shipped with .NET. Overall this is a cool feature that can remove the need for many duplicated lines of code in your project but I think there is a little too much magic going on here for my liking, so I think I&#39;ll be more careful about using this feature in the future.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Windows Package Manager]]></title>
        <id>https://rehansaeed.com/windows-package-manager/</id>
        <link href="https://rehansaeed.com/windows-package-manager/"/>
        <updated>2021-10-12T08:40:00.000Z</updated>
        <summary type="html"><![CDATA[The Windows Package Manager or winget has recently got quite good with the version 1.1 release. Here is my new machine setup script]]></summary>
        <content type="html"><![CDATA[<p>Winget is a package manager for Windows a bit like apt for linux or the open source Chocolatey for Windows. Version 1.1 of the Windows Package Manager (winget) was <a href="https://devblogs.microsoft.com/commandline/windows-package-manager-1-1/">recently released</a>. I&#39;ve had my eye on it for a while now and its only recently gotten good enough to use for real.</p>
<p>It now has the ability to install Windows Store applications and its library of apps that you can search for and install has gotten quite big. My PowerShell script to get a new machine started quickly with all the essential applications that I use as a .NET/Web developer is shown below.</p>
<pre><code class="language-powershell"># Environment Variables
[System.Environment]::SetEnvironmentVariable(&#39;DOTNET_CLI_TELEMETRY_OPTOUT&#39;, &#39;1&#39;, [EnvironmentVariableTarget]::Machine)

# Windows Features
# List features: Get-WindowsOptionalFeature -Online
Enable-WindowsOptionalFeature -Online -FeatureName &#39;Containers&#39; -All
Enable-WindowsOptionalFeature -Online -FeatureName &#39;Microsoft-Hyper-V&#39; -All
Enable-WindowsOptionalFeature -Online -FeatureName &#39;VirtualMachinePlatform&#39; -All

# Office
winget install --id &#39;9MSPC6MP8FM4&#39; # Microsoft Whiteboard
start &quot;https://github.com/zufuliu/notepad2/releases&quot;

# Utilities
winget install --id &#39;7zip.7zip&#39; --interactive --scope machine
winget install --id &#39;XP89DCGQ3K6VLD&#39; # Microsoft Power Toys
winget install --id &#39;9NJ3KMH29VGJ&#39; # Enpass
winget install --id &#39;WinSCP.WinSCP&#39; --interactive --scope machine
winget install --id &#39;9WZDNCRFJ3PV&#39; # Windows Scan

# Pheripherals
winget install --id &#39;Elgato.ControlCenter&#39; --interactive --scope machine
winget install --id &#39;Elgato.StreamDeck&#39; --interactive --scope machine

# Browsers
winget install --id &#39;Google.Chrome&#39; --interactive --scope machine
winget install --id &#39;Mozilla.Firefox&#39; --interactive --scope machine

# Communication
winget install --id &#39;Microsoft.Teams&#39; --interactive --scope machine
winget install --id &#39;OpenWhisperSystems.Signal&#39; --interactive --scope machine
winget install --id &#39;9WZDNCRDK3WP&#39; # Slack
winget install --id &#39;9WZDNCRFJ140&#39; # Twitter
winget install --id &#39;XP99J3KP4XZ4VV&#39; # Zoom

# Images
winget install --id &#39;9N3SQK8PDS8G&#39; # Screen To Gif
start https://www.getpaint.net/download.html # Paint.NET not yet available on winget

# Media
winget install --id &#39;XPDM1ZW6815MQM&#39; # VLC
winget install --id &#39;plex.plexmediaplayer&#39; --interactive --scope machine
winget install --id &#39;OBSProject.OBSStudio&#39; --interactive --scope machine
winget install --id &#39;dev47apps.DroidCam&#39; --interactive --scope machine
winget install --id &#39;XSplit.VCam&#39; --interactive --scope machine

# Terminal
winget install --id &#39;Microsoft.WindowsTerminal&#39; --interactive --scope machine
winget install --id &#39;Microsoft.Powershell&#39; --interactive --scope machine
winget install --id &#39;JanDeDobbeleer.OhMyPosh&#39; --interactive --scope machine
winget install --id &#39;9P9TQF7MRM4R&#39; # Windows Subsystem for Linux Preview
winget install --id &#39;9NBLGGH4MSV6&#39; # Ubuntu
winget install --id &#39;9P804CRF0395&#39; # Alpine

# Git
winget install --id &#39;Git.Git&#39; --interactive --scope machine
winget install --id &#39;GitHub.GitLFS&#39; --interactive --scope machine
winget install --id &#39;GitHub.cli&#39; --interactive --scope machine
winget install --id &#39;Axosoft.GitKraken&#39; --interactive --scope machine

# Azure
winget install --id &#39;Microsoft.AzureCLI&#39; --interactive --scope machine
winget install --id &#39;Microsoft.AzureCosmosEmulator&#39; --interactive --scope machine
winget install --id &#39;Microsoft.AzureDataStudio&#39; --interactive --scope machine
winget install --id &#39;Microsoft.AzureStorageEmulator&#39; --interactive --scope machine
winget install --id &#39;Microsoft.AzureStorageExplorer&#39; --interactive --scope machine

# Tools
winget install --id &#39;Docker.DockerDesktop&#39; --interactive --scope machine
winget install --id &#39;Microsoft.PowerBI&#39; --interactive --scope machine
winget install --id &#39;Telerik.Fiddler&#39; --interactive --scope machine

# IDE&#39;s
winget install --id &#39;Microsoft.VisualStudio.2022.Enterprise&#39; --interactive --scope machine
winget install --id &#39;Microsoft.VisualStudioCode&#39; --interactive --scope machine

# Frameworks
winget install --id &#39;OpenJS.NodeJS&#39; --interactive --scope machine
winget install --id &#39;Microsoft.dotnet&#39; --interactive --scope machine
</code></pre>
<p>A few of things to note in my script. All apps with random looking ID&#39;s like <code>9P9TQF7MRM4R</code> are Windows Store applications. Secondly, for non-Windows Store applications I always use the <code>--interactive</code> flag because:</p>
<blockquote>
<p>Don’t accept the defaults!</p>
<footer><cite>Abel Wang</cite></footer>
</blockquote>
<p>I never want a shortcut added to my desktop, extra toolbars or system tray icons, so never accept the defaults and always manually select the options you want in the installer. Maybe one day we can set the options we want from <code>winget</code> itself (we can dream!).</p>
<p>Finally, I set the scope of the installation to <code>machine</code> as opposed to <code>user</code>. I&#39;m not sure which installers respect this setting but I always want all applications available to whoever is using the machine.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[.NET Boxed Visual Studio Integration]]></title>
        <id>https://rehansaeed.com/dotnet-boxed-visual-studio-integration/</id>
        <link href="https://rehansaeed.com/dotnet-boxed-visual-studio-integration/"/>
        <updated>2021-05-27T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[You can now create .NET Boxed projects directly from Visual Studio. Here's a short post showing you how.]]></summary>
        <content type="html"><![CDATA[<p>A few weeks ago <a href="https://www.hanselman.com/blog/dotnet-boxed-includes-prescriptive-templates-for-net-core">Scott Hanselman blogged</a> about creating <code>dotnet new</code> based projects directly from Visual Studio. Unfortunately, at that time Visual Studio 16.9 didn&#39;t properly support full solution templates and only supported project templates.</p>
<p>Happily, Microsoft just released <a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2019-v16-10-and-v16-11-preview-1-are-available-today/">Visual Studio 16.10</a> and one of the things they didn&#39;t talk about was that it now adds a user interface for creating solutions from <code>dotnet new</code> templates.</p>
<p>Given that I author the <a href="https://github.com/Dotnet-Boxed/Templates">.NET Boxed</a> solution and item templates, I thought I&#39;d run through how it&#39;s done.</p>
<h1 id="step-by-step">Step by Step</h1>
<p>The first step is to install a <code>dotnet new</code> based solution/project/item template NuGet package. Sadly, this step is still command line only but there are plans to add a UI so you can search for and install templates all through Visual Studio.</p>
<pre><code class="language-powershell">dotnet new --install Boxed.Templates
</code></pre>
<p>Next we can fire up Visual Studio and go to the &#39;New Project&#39; dialogue. You can select &#39;.NET Boxed&#39; from the &#39;Project type&#39; menu on the top right to see all .NET Boxed project templates.</p>
<p><img src="https://rehansaeed.com/dotnet-boxed-visual-studio-integration/images/NewProject-1536x1020.png" alt="Visual Studio new project dialogue"></p>
<p>The next step is where we can give the project a name as usual and decide where we want to store it on disk.</p>
<p><img src="https://rehansaeed.com/dotnet-boxed-visual-studio-integration/images/ConfigureProject-1536x1020.png" alt="Visual Studio configure project dialogue"></p>
<p>Finally, we get to the new interesting bit, where we can select from the many options that .NET Boxed templates provide:</p>
<p><img src="https://rehansaeed.com/dotnet-boxed-visual-studio-integration/images/AdditionalInformation-1536x1942.png" alt="Visual Studio additional information dialogue"></p>
<p>Finally, we can hit &#39;Create&#39; and start getting productive in Visual Studio.</p>
<p><img src="https://rehansaeed.com/dotnet-boxed-visual-studio-integration/images/VisualStudio-2256x1455.png" alt="New Visual Studio solution"></p>
<p>That&#39;s it! Simple isn&#39;t it.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Code Coverage & Frontend Testing]]></title>
        <id>https://rehansaeed.com/code-coverage-and-frontend-testing/</id>
        <link href="https://rehansaeed.com/code-coverage-and-frontend-testing/"/>
        <updated>2021-05-10T11:23:00.000Z</updated>
        <summary type="html"><![CDATA[What is the correct level of code coverage for your project and what tools are best for quickly writing unit and integration tests for a frontend application.]]></summary>
        <content type="html"><![CDATA[<p>I was recently asked an interesting question about unit test code coverage and frontend testing by a colleague:</p>
<blockquote>
<p>Policies describe 80% plus unit test coverage and our React devs are pushing back a lot, arguing there is little logic in React and it would be a wast of time.
Rehan any advice/pointer for us on this?</p>
</blockquote>
<p>Code coverage in tests is always a controversial topic with developers in which I don&#39;t think there is a &#39;correct&#39; answer. The answer you&#39;re going to get from most people is &#39;it depends&#39; 🤷🏼.</p>
<p>If you&#39;re developing a mars rover where one bad line of code could mean mission over or flight navigation software, go ahead and go for 100% code coverage, let alone 80%. The question is, how tolerant are you to the risk of a bug in the front end React code? If something doesn&#39;t work, how long will it take you to fix it and how much will that cost you versus the cost of writing extra tests?</p>
<h1 id="jest">Jest</h1>
<p>Specifically regarding frontend unit testing, my team has been using <a href="https://jestjs.io/">Jest</a> which is an excellent unit testing framework built by Facebook which I highly recommend. Jest is special because it&#39;s a single NPM package with everything you need rolled into it, including an assertion library, mocking framework and code coverage tools.</p>
<p>To reduce the burden of writing tests you can leverage snapshot testing. A snapshot test takes very few lines of code to write and generates a file containing the rendered HTML for a Vue/React/Angular/Web/Other component. My team writes at least one snapshot test for every component we write and it hasn&#39;t been too onerous for us.</p>
<p>I just ran the code coverage tool built into Jest on one of our projects and it came to 78.7% coverage. It&#39;s worth mentioning that our projects are mostly very simple and don&#39;t contain much complex branching logic. Jest also allows you to set a code coverage limit which will fail a build if code coverage drops below a certain level set by you. Here is an example of configuring Jest that in your <code>package.json</code> file to do just that:</p>
<pre><code class="language-json">&quot;jest&quot;: {
  &quot;coverageThreshold&quot;: {
    &quot;global&quot;: {
      &quot;branches&quot;: 70,
      &quot;functions&quot;: 70,
      &quot;lines&quot;: 70,
      &quot;statements&quot;: -10
    }
  }
}
</code></pre>
<h1 id="cypress">Cypress</h1>
<p>In addition, if you want a robust system, it&#39;s also worth setting up some integration or functional tests. I recommend a tool called <a href="https://www.cypress.io/">Cypress</a> for this job. According to the testing pyramid you need fewer of these tests as compared to unit tests as they can be more brittle.</p>
<p><img src="https://rehansaeed.com/code-coverage-and-frontend-testing/images/Test-Pyramid-800x400.png" alt="Testing Pyramid showing UI, Service and Unit Tests in that order"></p>
<p>I&#39;ve found them very useful for making sure that you don&#39;t release something completely broken (happens more often in the wild than any dev would like you to think). In fact, I use Cypress for this very blog to verify every commit to make sure I don&#39;t accidentally break it.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Web Component Custom Element Gotchas]]></title>
        <id>https://rehansaeed.com/web-component-custom-element-gotchas/</id>
        <link href="https://rehansaeed.com/web-component-custom-element-gotchas/"/>
        <updated>2021-04-30T12:12:00.000Z</updated>
        <summary type="html"><![CDATA[Web components have certain gotchas with relation to custom elements and CSS. This post goes through them all and shows how you can avoid them.]]></summary>
        <content type="html"><![CDATA[<p>::: tip Update (04 May 2021)
<a href="https://twitter.com/chrisdholt">Chris Holt</a> from the <a href="https://www.fast.design/docs/fast-element/getting-started">FAST UI</a> team at Microsoft got in touch with me with an alternative workaround to using a wrapper element when required to use a semantic HTML element like a <code>section</code>, so I&#39;ve updated that section below.
:::</p>
<p>Recently I&#39;ve been writing web components and found several gotchas that make working with them, that much more difficult. In this post, I&#39;ll describe some gotchas you can experience when using web components.</p>
<p>This post is framework agnostic but I&#39;ve been using a lightweight library called <a href="https://www.fast.design/docs/fast-element/getting-started">FAST Element</a> built by Microsoft. It is similar to Google&#39;s <a href="https://lit-element.polymer-project.org/guide">LitElement</a> in that it provides a very lightweight wrapper around native web component API&#39;s. Overall the experience has been interesting but I&#39;m not sure I&#39;m willing to give up on Vue just yet. This post was written based on my experiences with it.</p>
<h1 id="non-web-components">Non-Web Components</h1>
<p>When writing a non-web component called <code>custom-component</code> using a framework like Vue, React or Angular, you quite often end up with HTML and CSS that looks like this:</p>
<pre><code class="language-html">&lt;div class=&quot;custom-component&quot;&gt;
    &lt;h1&gt;Hello&lt;/h1&gt;
    &lt;p&gt;World&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-css">.custom-component {
    // ...
}
</code></pre>
<p>The rendered HTML from these frameworks looks exactly the same as above. However, when writing web components, you have an addition custom HTML element rendered into the DOM with the contents of the element being rendered into the shadow DOM which can introduce bugs for the unwary developer.</p>
<pre><code class="language-html">&lt;custom-component&gt;
    &lt;!-- Shadow DOM --&gt;
    &lt;div class=&quot;custom-component&quot;&gt;
        &lt;h1&gt;Hello&lt;/h1&gt;
        &lt;p&gt;World&lt;/p&gt;
    &lt;/div&gt;
&lt;/custom-component&gt;
</code></pre>
<h1 id="the-wrapper-div">The Wrapper div</h1>
<p>The first gotcha we encounter is that we now have an extra HTML element that we don&#39;t actually need. Extra DOM elements, mean higher memory usage and slower performance. As I&#39;ll discuss in a moment, it can also mean a more complex layout. The fix for this is simple, we can simply remove the wrapper <code>div</code> inside our component, so our code now becomes:</p>
<pre><code class="language-html">&lt;h1&gt;Hello&lt;/h1&gt;
&lt;p&gt;World&lt;/p&gt;
</code></pre>
<pre><code class="language-css">:host {
    // ...
}
</code></pre>
<p>We can use the <code>:host</code> pseudo-selector to style the <code>custom-component</code> HTML element and now when our component is rendered we get the following:</p>
<pre><code class="language-html">&lt;custom-component&gt;
    &lt;!-- Shadow DOM --&gt;
    &lt;h1&gt;Hello&lt;/h1&gt;
    &lt;p&gt;World&lt;/p&gt;
&lt;/custom-component&gt;
</code></pre>
<h1 id="semantic-html">Semantic HTML</h1>
<p>Removing the wrapper <code>div</code> is all well and good but what if it&#39;s not a <code>div</code> but a semantic HTML element like <code>section</code> or <code>article</code>? Both of these tags have a specific meanings for screen readers and search engines and we must use these tags to support them. Well, in this case we have to bring back our wrapper element like so and encounter our second gotcha:</p>
<pre><code class="language-html">&lt;section class=&quot;custom-component&quot;&gt;
    &lt;h1&gt;Hello&lt;/h1&gt;
    &lt;p&gt;World&lt;/p&gt;
&lt;/section&gt;
</code></pre>
<p>Our HTML will now be rendered as:</p>
<pre><code class="language-html">&lt;custom-component&gt;
    &lt;section class=&quot;custom-component&quot;&gt;
        &lt;h1&gt;Hello&lt;/h1&gt;
        &lt;p&gt;World&lt;/p&gt;
    &lt;/section&gt;
&lt;/custom-component&gt;
</code></pre>
<p>Now if we want to style the component we have to target the <code>.custom-element</code> class where we can place most of our styles but we also need to target the <code>:host</code> to change some defaults.</p>
<p>The default value for <code>display</code> in a custom HTML element like <code>&lt;custom-element&gt;</code> is actually <code>inline</code> which is usually not what you will want (<code>margin</code>, <code>padding</code>, <code>border</code> will not work as you expect), so you&#39;ll need to explicitly set your own default. This is our third gotcha! I think it makes sense to be explicit and do this for every web component.</p>
<p>In addition, if the content of your web component does not extend beyond the boundary of the component itself, it&#39;s a good idea to add <code>contain: paint</code> for a small performance boost (The Mozilla Docs have more on <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/contain">contain</a>).</p>
<pre><code class="language-css">:host {
    display: block;

    contain: paint;
}

.custom-component {
    // ...
}
</code></pre>
<h1 id="template-element">Template Element</h1>
<p>One alternative to using a <code>section</code> above pointed out by <a href="https://twitter.com/chrisdholt">Chris Holt</a> is to use a <code>template</code> HTML element which gives you the ability to add custom HTML attributes to the <code>custom-component</code> element itself.</p>
<pre><code class="language-html">&lt;template role=&quot;section&quot;&gt;
    &lt;h1&gt;Hello&lt;/h1&gt;
    &lt;p&gt;World&lt;/p&gt;
&lt;/template&gt;
</code></pre>
<p>Our HTML will now be rendered as:</p>
<pre><code class="language-html">&lt;custom-component role=&quot;section&quot;&gt;
    &lt;h1&gt;Hello&lt;/h1&gt;
    &lt;p&gt;World&lt;/p&gt;
&lt;/custom-component&gt;
</code></pre>
<p>In the example above, I&#39;ve added <code>role=&quot;section&quot;</code> to tell search engines and screen readers to treat the <code>custom-component</code> HTML element like a <code>section</code> element. With this approach, we no longer have a wrapper HTML element which should help improve performance and lower memory usage (particularly on low powered phones). We also get the advantage of not having to add extra styles for the wrapper element. One downside is that we have to use the <code>role</code> attribute.</p>
<pre><code class="language-css">:host {
    display: block;

    contain: paint;
    // ...
}
</code></pre>
<p>Another downside of this approach I discovered when trying to write a custom button component is that some CSS pseudo-selectors like <code>:disabled</code> will not work:</p>
<pre><code class="language-html">&lt;custom-button role=&quot;button&quot;&gt;
    &lt;slot&gt;&lt;/slot&gt;
&lt;/custom-button&gt;
</code></pre>
<pre><code class="language-css">:host(:disabled) {
    // This will not work.
    color: red;
}
</code></pre>
<p>You have to fallback to using a HTML <code>button</code> element instead which lights up the <code>:disabled</code> pseudo-selector:</p>
<pre><code class="language-html">&lt;custom-button&gt;
    &lt;button class=&quot;custom-button&quot;&gt;
        &lt;slot&gt;&lt;/slot&gt;
    &lt;/button&gt;
&lt;/custom-button&gt;
</code></pre>
<pre><code class="language-css">.custom-button:disabled {
    // This will work.
    color: red;
}
</code></pre>
<h1 id="final-thoughts">Final Thoughts</h1>
<p>The promise of web components are that they are lightweight and fast to run. The downside seems to be that there is more to think about when building a web component, as opposed to a standard framework based component using Vue, React or Angular.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS General Rules of Thumb]]></title>
        <id>https://rehansaeed.com/css-general-rules-of-thumb/</id>
        <link href="https://rehansaeed.com/css-general-rules-of-thumb/"/>
        <updated>2021-04-20T12:24:00.000Z</updated>
        <summary type="html"><![CDATA[Getting to grips with CSS is difficult. This post describes some general rules of thumb that can guide you down the right path to success.]]></summary>
        <content type="html"><![CDATA[<p>Learning CSS is difficult and as someone who has tried to teach CSS others, it&#39;s also difficult to point to good teaching resources. There isn&#39;t a simple video course I can point to and say &quot;go and watch this&quot;. I think part of the problem is that there are so many ways to do things in CSS and also that there are so many little tricks you have to learn. As yet, the best advice I&#39;ve been able to give is to go and read the last few years worth of <a href="https://css-tricks.com/">CSS Tricks</a> blog posts but that isn&#39;t really an easy or quick task or even one that most people would do.</p>
<p>In this post, I wanted to give some super simple general rules of thumb that developers who are new to CSS can follow and get pretty far fairly quickly. I also wanted a public resource I could point to when I was reviewing CSS in pull requests. As these are rules of thumb, they won&#39;t be applicable everywhere but they should work in the general case.</p>
<h1 id="standards">Standards</h1>
<p>There are lots of ways of doing things in CSS. Here are some friendly defaults that make a good start.</p>
<h2 id="css-type-selectors">CSS Type Selectors</h2>
<p>Using <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors">CSS type selectors</a> that target a specific HTML tag makes your CSS brittle. If someone decides to change the tag used in their HTML, your CSS will also need to be changed.</p>
<pre><code class="language-html">&lt;div&gt;&lt;/div&gt;
</code></pre>
<pre><code class="language-css">div {
    color: red;
}
</code></pre>
<p>A better way is to use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors">CSS class selectors</a> which will decouple your HTML from your CSS.</p>
<pre><code class="language-html">&lt;div class=&quot;foo&quot;&gt;&lt;/div&gt;
</code></pre>
<pre><code class="language-css">.foo {
    color: red;
}
</code></pre>
<h2 id="block-element-modifier-bem">Block Element Modifier (BEM)</h2>
<p>You should add CSS classes to any HTML elements you want to add CSS styles to. This means coming up with a naming convention for these CSS class names. <a href="https://css-tricks.com/bem-101/">Block Element Modifier (BEM)</a> is a great naming convention to get you started. It&#39;s worth noting that there are many conventions out there, the key is to pick one and stay consistent.</p>
<pre><code class="language-css">/* Block component */
.button {
}

/* Element that depends upon the block */
.button__price {
}

/* Modifier that changes the style of the block */
.button--orange {
}
.button--big {
}
</code></pre>
<h2 id="important">!important</h2>
<p>If you are using <code>!important</code> in your CSS, you are probably doing the wrong thing. It&#39;s usually used to force a particular style because a developer couldn&#39;t get the style to be applied in other ways that they tried. What you need to do instead is understand <a href="https://css-tricks.com/specifics-on-css-specificity/">CSS Specificity</a>. The problem you are having is probably because you have some styles elsewhere which are far too specific and are taking precedence. If you make these styles less specific, then should not need to use <code>!important</code>, except <a href="https://css-tricks.com/when-using-important-is-the-right-choice/">in a few cases</a>.</p>
<h2 id="css-code-style">CSS Code Style</h2>
<p>Keeping your CSS organised can help make reading it easier for yourself and others. Code style is a very subjective topic and everyone has their own opinions. I talk more about this <a href="https://rehansaeed.com/system-for-grouping-and-sorting-css-properties/">here</a>.</p>
<h1 id="layout">Layout</h1>
<p>I find that people have a lot of trouble laying out content the way they want. This is a huge topic but here are some basic things I found useful.</p>
<h2 id="html">HTML</h2>
<p>If your HTML isn&#39;t great, you are going to have a tough time with your CSS. This is usually because there are lots of extra <code>div</code> or <code>span</code> elements that you don&#39;t need. Get your HTML right first and avoid adding HTML elements just to get the layout right.</p>
<p>It&#39;s also a good idea to learn about <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element">Semantic HTML</a>. Every HTML tag has a meaning for search engines and those who use assistive technologies like screen readers to navigate the web (there are more people using these than you think).</p>
<h2 id="grid-vs-flexbox">Grid vs FlexBox</h2>
<p>As a general rule <a href="https://css-tricks.com/snippets/css/complete-guide-grid/">CSS Grid</a> can cater to 80% of your layout needs, so learn it well. In particular pay close attention to <code>grid-template-areas</code> which is a little more verbose to setup but makes your CSS Grid layout much easier to read and makes it more flexible because changing the layout means only changing the CSS for the container instead of each and every child of the container.</p>
<p>When you want to wrap content <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">CSS FlexBox</a> has your back.</p>
<h2 id="display-block-vs-inline">Display Block vs Inline</h2>
<p>Understanding the different <a href="https://css-tricks.com/almanac/properties/d/display/">display modes</a> (<code>inline</code>, <code>block</code>, <code>inline-block</code>, <code>grid</code>, <code>flex</code>, etc.) is a must. In particular pay attention to the first two because they are the default for a lot of HTML elements.</p>
<p>If your element is hugging the top instead of taking all the available space, it&#39;s probably because it&#39;s using <code>display: block</code> and your good friend <code>display: grid</code> will fix that for you.</p>
<h2 id="heights-and-widths">Heights and Widths</h2>
<p>Get your hands away from the keyboard and put them down very slowly. If you are setting <code>height</code> and <code>width</code>, it&#39;s usually the wrong thing to do and makes your layout brittle and unwilling to flex.</p>
<p>Rather than explicitly setting a size, try to allow the contents of the container to set the size for you. This means changing the way you think about layout. In general there is an ordering to the CSS properties you should use for sizing your elements:</p>
<ol>
<li><code>auto-fit</code>/<code>auto-fill</code> and <code>minmax()</code> - Used in conjunction with CSS Grid&#39;s <code>grid-template-columns</code>, these will allow your grid to become responsive.</li>
<li><code>grid-gap</code> or <code>gap</code> (in newer browsers) - Used with CSS Grid and FlexBox (only supports <code>gap</code>). This allows you to add spacing between elements in your container.</li>
<li><code>padding</code> - It&#39;s generally preferable to use CSS properties that only affect the current element as opposed to the parent elements like <code>margin</code> does.</li>
<li><code>margin</code></li>
<li><code>min-height</code>/<code>max-height</code> and <code>min-width</code>/<code>max-width</code></li>
<li><code>height</code> and <code>width</code> - Use this with care if you really know what you&#39;re doing.</li>
</ol>
<h1 id="browser-support">Browser Support</h1>
<p>The web is a wild west, there are many features in CSS which have varying degrees of support in different browsers and the many different versions of each browser. Whenever you&#39;re considering using a new CSS feature you found online, it&#39;s a good idea to search on <a href="https://caniuse.com/">caniuse.com</a> to see if it&#39;s supported in the web browsers you want to target for your application.</p>
<h1 id="colours">Colours</h1>
<p>A colour in CSS can be written in several ways. Below, I&#39;m setting the colour white in a few different ways. You should prefer <code>hsl</code> because it&#39;s easiest for a human to understand how it works.</p>
<pre><code class="language-css">color: white;
color: #ffffff;
color: rgb(255, 255, 255);
color: hsl(0, 0%, 100%);
</code></pre>
<h1 id="accessibility">Accessibility</h1>
<p>Making your web application accessible is a must, lets talk about how.</p>
<h2 id="accessible-html">Accessible HTML</h2>
<p>I&#39;ve talked about HTML before but I&#39;ll repeat it here because it&#39;s so important. You must learn <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element">Semantic HTML</a> and get your HTML right before thinking about the CSS.</p>
<h2 id="outline">Outline</h2>
<p>Never set the <code>outline</code> on a focusable element to <code>none</code>. People need those outlines to see what they&#39;ve focused on.</p>
<pre><code class="language-css">.foo {
    outline: none;
}
</code></pre>
<h2 id="accessible-colours">Accessible Colours</h2>
<p>Ensure that the <code>background-color</code> and <code>color</code> you&#39;ve chosen are accessible. It&#39;s pretty easy to to do and you can read more <a href="https://css-tricks.com/understanding-web-accessibility-color-contrast-guidelines-and-ratios/">here</a>.</p>
<h1 id="closing-thoughts">Closing Thoughts</h1>
<p>CSS seems on the face of it to be a simple programming language (and yes it is one) but it has a lot of depth to it once you start using it. If you want to learn more, reading the <a href="https://css-tricks.com/">CSS Tricks</a> blog posts are a great way to learn, there are also some decent courses on <a href="https://frontendmasters.com/">Frontend Masters</a> although you do have to pay to view those.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A System for Grouping & Sorting CSS Properties]]></title>
        <id>https://rehansaeed.com/system-for-grouping-and-sorting-css-properties/</id>
        <link href="https://rehansaeed.com/system-for-grouping-and-sorting-css-properties/"/>
        <updated>2021-04-20T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[Grouping and Sorting CSS properties can make your CSS easier to read and helps with consistency in a team environment. There is no correct answer but something is better than nothing.]]></summary>
        <content type="html"><![CDATA[<p>There are no hard and fast rules for code style and as I&#39;ve <a href="https://rehansaeed.com/stop-brace-wars-use-stylecop/">written about before</a> it can get ugly when people have various opposing opinions on the subject. In CSS, which I&#39;m quite fond of writing, I believe the answer is mostly given to us by using <a href="https://prettier.io/">Prettier</a>, the opinionated code formatter. Unfortunately, Prettier does not sort CSS properties for you <a href="https://github.com/prettier/prettier/issues/1963">and never will</a>, so this post is one solution (<strong>not</strong> the correct solution because there is no correct solution).</p>
<p>There are automated tools like <a href="https://github.com/hudochenkov/postcss-sorting">postcss-sorting</a> that can help with this but I think it&#39;d be difficult to use in real life because there will always be exceptions to the hard coded rules.</p>
<p>But why even bother to group and sort CSS properties? Well, I think it makes sense for two reasons. The first is that it can make it quicker to quickly scan the CSS and find what you need. The second is that if you&#39;re working in a team environment, it can make it easier to work on CSS that has one over arching consistent style.</p>
<h1 id="grouping-css-properties">Grouping CSS Properties</h1>
<p>I believe you can split CSS properties into a few groups:</p>
<ol>
<li>Parent layout</li>
<li>Layout</li>
<li>Box Model</li>
<li>Positioning</li>
<li>Display</li>
</ol>
<p>Here is an example of the four groups in real life:</p>
<pre><code class="language-css">.card {
    /* Parent Layout */
    grid-area: card;

    /* Layout */
    display: grid;
    align-items: center;
    gap: 10px;
    grid-template-areas:
        &quot;header header&quot;
        &quot;content content&quot;;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr 1fr;
    justify-items: center;

    /* Box Model */
    box-sizing: border-box;
    width: 100px;
    height: 100px;
    margin: 10px;
    padding: 10px;

    /* Positioning */
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 10;

    /* Display */
    background-color: red;
    border: 10px solid green;
    color: white;
    font-family: sans-serif;
    font-size: 16px;
    text-align: center;
}
</code></pre>
<h2 id="parent-layout">Parent Layout</h2>
<p>The parent layout is any CSS layout properties that effect or come from the parent element. This usually boils down to <code>grid-area</code> if you&#39;re using <code>grid-template-areas</code> which you <a href="https://css-tricks.com/snippets/css/complete-guide-grid/#grid-template-areas">totally should</a> because it allows you to change the layout child elements without modifying the child elements CSS too much.</p>
<pre><code class="language-css">.card {
    /* Parent Layout */
    grid-area: card;

    /* ... */
}
</code></pre>
<h2 id="layout">Layout</h2>
<p>CSS Layout properties determine how the contents of the CSS class will be layed out. The common case is that you&#39;re using CSS Grid or FlexBox and want to group their respective properties together where they make the most sense.</p>
<p>I think it makes the most sense to start with the <code>display</code> property because that determines the type of layout followed by other properties in alphabetical order.</p>
<pre><code class="language-css">.card {
    /* ... */

    /* Layout */
    display: grid;
    align-items: center;
    gap: 10px;
    grid-template-areas:
        &quot;header header&quot;
        &quot;content content&quot;;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr 1fr;
    justify-items: center;

    /* ... */
</code></pre>
<h2 id="box-model">Box Model</h2>
<p>CSS properties that affect the box model can come next. Again, I&#39;m using alphabetical order except for <code>width</code> and <code>height</code> where it makes more sense for them to go together with <code>width</code> always being first (there are a lot of exceptions to the rules in CSS).</p>
<pre><code class="language-css">.card {
    /* ... */

    /* Box Model */
    box-sizing: border-box;
    margin: 10px;
    padding: 10px;
    width: 100px;
    height: 100px;

    /* ... */
</code></pre>
<h2 id="positioning">Positioning</h2>
<p>CSS properties related to <code>position</code> come next. Similar to <code>display</code>, we put the position at the top and follow in alphabetical order. Again there is an exception to be made here with <code>top</code>, <code>right</code>, <code>bottom</code> and <code>left</code> which follow the order that <code>margin</code> and <code>padding</code> values take.</p>
<pre><code class="language-css">.card {
    /* ... */

    /* Positioning */
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 10;

    /* ... */
</code></pre>
<h2 id="display">Display</h2>
<p>Finally, there are CSS display properties which affect the look and feel. This is also a kind of &#39;Other&#39; category where you can place remaining properties which don&#39;t make sense in other groups.</p>
<pre><code class="language-css">.card {
    /* ... */

    /* Display */
    background-color: red;
    border: 10px solid green;
    color: white;
    font-family: sans-serif;
    font-size: 16px;
    text-align: center;
}
</code></pre>
<h1 id="final-comments">Final Comments</h1>
<p>This is just one method of grouping and ordering CSS properties that I&#39;ve found useful in real life projects. There is no correct answer to this problem and I think the problem space is probably too complex to make a tool like Prettier do the work for you because there will always be exceptions to the rules.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Exporting Open Telemetry Data to Jaeger]]></title>
        <id>https://rehansaeed.com/exporting-open-telemetry-data-to-jaeger/</id>
        <link href="https://rehansaeed.com/exporting-open-telemetry-data-to-jaeger/"/>
        <updated>2021-02-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to optimally export Open Telemetry metrics, logs, and traces for .NET to Jaeger.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/deep-dive-into-open-telemetry-for-net/">Open Telemetry - Deep Dive into Open Telemetry for .NET</a></li>
<li><a href="https://rehansaeed.com/open-telemetry-for-asp-net-core/">Open Telemetry - Configuring Open Telemetry for ASP.NET Core</a></li>
<li><a href="https://rehansaeed.com/exporting-open-telemetry-data-to-jaeger/">Open Telemetry - Exporting Open Telemetry Data to Jaeger</a></li>
<li><a href="https://rehansaeed.com/optimally-configuring-open-telemetry-tracing-for-asp-net-core/">Open Telemetry - Optimally Configuring Open Telemetry Tracing for ASP.NET Core</a></li>
</ol>
<p>As I talked about in my <a href="https://rehansaeed.com/deep-dive-into-open-telemetry-for-net/">first post</a>, the end goal is to get nice visualisations from our Open Telemetry data, so we can spot patterns and learn something from the behaviours of our applications.</p>
<p>In this post, I&#39;ll show how we can export the Open Telemetry traces, logs and metrics that we&#39;ve collected to Jaeger and view them in the Jaeger dashboard.</p>
<h1 id="open-telemetry-protocol-otlp">Open Telemetry Protocol (OTLP)</h1>
<p>There are actually two methods of exporting our telemetry to Jaeger. The first uses Jaeger&#39;s proprietary protocol and is not something I plan to cover in this post. The second uses the Open Telemetry Protocol (OTLP), which is an open standard that we can use to export Open Telemetry data to <strong>any</strong> application that supports it.</p>
<p>Jaeger is a pretty complex application that splits it&#39;s responsibilities into several separate binaries. It splits the collection of telemetry into a binary called a &#39;collector&#39;. If we want Jaeger to collect telemetry using the Open Telemetry Protocol, we need to use the Jaeger Open Telemetry collector. I&#39;m not going to cover how we can setup Jaeger in a full production setup. Instead I&#39;ll be using the <code>jaegertracing/opentelemetry-all-in-one</code> Docker image which makes running Jaeger with the Open Telemetry collector as easy as running this command:</p>
<pre><code class="language-powershell">docker run --name jaeger -p 13133:13133 -p 16686:16686 -p 4317:55680 -d --restart=unless-stopped jaegertracing/opentelemetry-all-in-one
</code></pre>
<p>I&#39;ve also opened up a few ports to the Docker container:</p>
<ul>
<li><strong>4317</strong> - Open Telemetry Protocol (OTLP) receiver where we expect to receive Open Telemetry data.</li>
<li><strong>16686</strong> - Dashboard where users can see visualisations.</li>
<li><strong>13133</strong> - Jaeger health check.</li>
</ul>
<p>::: warning
The default port used by the Open Telemetry Protocol has recently been changed from <code>55680</code> to <code>4317</code>. This change has not yet been made in Jaeger which uses the older port number.
:::</p>
<h1 id="exporting-from-net">Exporting from .NET</h1>
<p>In the <a href="https://rehansaeed.com/open-telemetry-for-asp-net-core/">last post</a> I showed how we can collect Open Telemetry data in an ASP.NET Core application. I&#39;m going to build on that example to export to Jaeger. To start with, we&#39;ll need to add an additional NuGet package called <code>OpenTelemetry.Exporter.OpenTelemetryProtocol</code>:</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;OpenTelemetry.Exporter.Console&quot; Version=&quot;1.0.1&quot; /&gt;
&lt;PackageReference Include=&quot;OpenTelemetry.Exporter.OpenTelemetryProtocol&quot; Version=&quot;1.0.1&quot; /&gt;
&lt;PackageReference Include=&quot;OpenTelemetry.Extensions.Hosting&quot; Version=&quot;1.0.0-rc2&quot; /&gt;
&lt;PackageReference Include=&quot;OpenTelemetry.Instrumentation.AspNetCore&quot; Version=&quot;1.0.0-rc2&quot; /&gt;
</code></pre>
<p>Then we can use the <code>AddOtlpExporter</code> method to configure where to export to. In this case, I&#39;m exporting to <code>http://localhost:4317</code> where port <code>4317</code> is the default port used by the Open Telemetry Protocol. Ideally, we&#39;d retrieve this value from configuration but I&#39;m keeping things simple in this example.</p>
<pre><code class="language-cs">services.AddOpenTelemetryTracing(
    builder =&gt;
    {
        builder
            .SetResourceBuilder(ResourceBuilder
                .CreateDefault()
                .AddService(webHostEnvironment.ApplicationName))
            .AddAspNetCoreInstrumentation()
            .AddOtlpExporter(options =&gt; options.Endpoint = new Uri(&quot;http://localhost:4317&quot;));
        if (webHostEnvironment.IsDevelopment())
        {
            builder.AddConsoleExporter(options =&gt; options.Targets = ConsoleExporterOutputTargets.Debug);
        }
    });
</code></pre>
<h1 id="the-dashboard">The Dashboard</h1>
<p>We can now fire up the Jaeger dashboard in our browser which we can access at <code>http://localhost:16686</code>. If we execute some request/response cycles in our application where we have added Open Telemetry support, we can see the telemetry for each request/response:</p>
<p><img src="https://rehansaeed.com/exporting-open-telemetry-data-to-jaeger/images/Jaeger-Dashboard-1903x1086.png" alt="The Jaeger dashboard showing request/response cycles"></p>
<p>If we drill down into a particular request/response trace, we can view the spans (in this simple example, there is only one) and all attributes associated with the span. This is the same data we saw in the debug output from my previous post:</p>
<p><img src="https://rehansaeed.com/exporting-open-telemetry-data-to-jaeger/images/Jaeger-Dashboard-Span-1903x800.png" alt="The Jaeger dashboard showing request/response cycles"></p>
<h1 id="up-next">Up Next</h1>
<p>In this post, I&#39;ve shown how you can quickly fire up Jaeger and how you can get an ASP.NET Core app to export Open Telemetry data to it. In my next final post I&#39;ll discuss optimally configuring Open Telemetry for an ASP.NET application.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Open Telemetry for ASP.NET Core]]></title>
        <id>https://rehansaeed.com/open-telemetry-for-asp-net-core/</id>
        <link href="https://rehansaeed.com/open-telemetry-for-asp-net-core/"/>
        <updated>2021-02-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The basics of how to configure Open Telemetry metrics, logs, and traces for ASP.NET Core and export the traces.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/deep-dive-into-open-telemetry-for-net/">Open Telemetry - Deep Dive into Open Telemetry for .NET</a></li>
<li><a href="https://rehansaeed.com/open-telemetry-for-asp-net-core/">Open Telemetry - Configuring Open Telemetry for ASP.NET Core</a></li>
<li><a href="https://rehansaeed.com/exporting-open-telemetry-data-to-jaeger/">Open Telemetry - Exporting Open Telemetry Data to Jaeger</a></li>
<li><a href="https://rehansaeed.com/optimally-configuring-open-telemetry-tracing-for-asp-net-core/">Open Telemetry - Optimally Configuring Open Telemetry Tracing for ASP.NET Core</a></li>
</ol>
<p>Configuring Open Telemetry for ASP.NET Core is a fairly simple process. In this post, I&#39;ll show you the simplest setup for tracing Open Telemetry in ASP.NET Core and then move to a more fully featured example.</p>
<p>To begin with, we&#39;ll just be exporting our Open Telemetry traces to the debug output so we can see what is being recorded but we&#39;ll soon move on to exporting to Jaeger in another post where we can see nice visualisations of our traces.</p>
<h1 id="the-simplest-setup">The Simplest Setup</h1>
<p>Open Telemetry for ASP.NET Core ships as several NuGet packages. The <code>OpenTelemetry.Extensions.Hosting</code> package is the required core package to add Open Telemetry to your application.</p>
<p>You can optionally add packages beginning with <code>OpenTelemetry.Instrumentation.*</code> to collect extra span attributes e.g. the <code>OpenTelemetry.Instrumentation.AspNetCore</code> package adds span attributes for the current request and response.</p>
<p>You can also optionally add packages beginning with <code>OpenTelemetry.Exporter.*</code> to export trace data e.g. the <code>OpenTelemetry.Exporter.Console</code> package exports all trace data to the console or debug output of your application.</p>
<pre><code class="language-xml">&lt;ItemGroup Label=&quot;Package References&quot;&gt;
  &lt;PackageReference Include=&quot;OpenTelemetry.Exporter.Console&quot; Version=&quot;1.0.1&quot; /&gt;
  &lt;PackageReference Include=&quot;OpenTelemetry.Extensions.Hosting&quot; Version=&quot;1.0.0-rc2&quot; /&gt;
  &lt;PackageReference Include=&quot;OpenTelemetry.Instrumentation.AspNetCore&quot; Version=&quot;1.0.0-rc2&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<p>In our <code>Program.cs</code> I&#39;ve added a <code>ConfigureServices</code> method, where we can add Open Telemetry support with just a few lines of code using the <code>AddOpenTelemetryTracing</code> method.</p>
<pre><code class="language-cs">public virtual void ConfigureServices(
    IServiceCollection services,
    IWebHostEnvironment webHostEnvironment)
{
    // ...omitted
    services.AddOpenTelemetryTracing(
        builder =&gt;
        {
            builder
                .SetResourceBuilder(ResourceBuilder
                    .CreateDefault()
                    .AddService(webHostEnvironment.ApplicationName))
                .AddAspNetCoreInstrumentation();
            if (webHostEnvironment.IsDevelopment())
            {
                builder.AddConsoleExporter(
                    options =&gt; options.Targets = ConsoleExporterOutputTargets.Debug);
            }
        });
}
</code></pre>
<p>The <code>SetResourceBuilder</code> method is your opportunity to add a set of common attributes to all spans created in the application. In the above case, we&#39;ve added an application name.</p>
<p>The <code>AddAspNetCoreInstrumentation</code> method is where we enable collection of attributes relating to ASP.NET Core requests and responses.</p>
<p>Finally, we use <code>AddConsoleExporter</code> to export the trace data to the debug output. You could also output to the console but there is a lot of trace data and the console is already outputting log information which results in duplication, so I prefer not to do that. Note that we only do this if we are running in the development environment.</p>
<h1 id="the-trace-output">The Trace Output</h1>
<p>If we now start the application and execute a request/response cycle, we can see the following in our IDE&#39;s debug output window:</p>
<pre><code>Activity.Id:          00-dde96d459fee4144a83818e054e221b1-cac69896c1bcd14f-01
Activity.DisplayName: /favicon-32x32.png
Activity.Kind:        Server
Activity.StartTime:   2021-02-01T10:28:25.4637044Z
Activity.Duration:    00:00:00.0086712
Activity.TagObjects:
    http.host: localhost:5001
    http.method: GET
    http.path: /favicon-32x32.png
    http.url: https://localhost:5001/favicon-32x32.png
    http.user_agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36
    http.status_code: 200
    otel.status_code: UNSET
    service.name: ApiTemplate
    service.instance.id: defe9269-04f2-4b49-a05c-ebddf2112993
    telemetry.sdk.name: opentelemetry
    telemetry.sdk.language: dotnet
    telemetry.sdk.version: 1.0.0.0
</code></pre>
<p>The first few lines give us some basic information about the span, including the span ID, start time and duration of the span. Under TagObjects is where we can see all attributes assigned to the span.</p>
<p>All attributes starting with <code>http</code> tell us about the request and response while the attributes starting with <code>service</code> tell us about the application itself. This includes a unique identifier for the current instance of the application. This can be useful if we were running multiple instances of the application in Kubernetes or Docker Swarm for example.</p>
<p>Finally, we also get quite a lot of information about the Open Telemetry library used to collect the information. It may eventually be useful when multiple versions of the Open Telemetry protocol are released and there is some feature difference between them but as of now, it&#39;s not very useful. I haven&#39;t been able to find a way to turn it off, since it&#39;s a fair amount of information to send in absolutely every trace message.</p>
<h1 id="up-next">Up Next</h1>
<p>I&#39;ve shown a basic example of setting up Open Telemetry and discussed the defaults of what trace data is collected in ASP.NET Core. In my next post, I&#39;ll cover how you can fire up Jaeger and show how you can get an ASP.NET Core app to export Open Telemetry data to it.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deep Dive into Open Telemetry for .NET]]></title>
        <id>https://rehansaeed.com/deep-dive-into-open-telemetry-for-net/</id>
        <link href="https://rehansaeed.com/deep-dive-into-open-telemetry-for-net/"/>
        <updated>2021-01-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to use the Open Telemetry specification, tools and SDK's used to instrument, generate, collect, and export telemetry data (metrics, logs, and traces) using .NET and ASP.NET.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/deep-dive-into-open-telemetry-for-net/">Open Telemetry - Deep Dive into Open Telemetry for .NET</a></li>
<li><a href="https://rehansaeed.com/open-telemetry-for-asp-net-core/">Open Telemetry - Configuring Open Telemetry for ASP.NET Core</a></li>
<li><a href="https://rehansaeed.com/exporting-open-telemetry-data-to-jaeger/">Open Telemetry - Exporting Open Telemetry Data to Jaeger</a></li>
<li><a href="https://rehansaeed.com/optimally-configuring-open-telemetry-tracing-for-asp-net-core/">Open Telemetry - Optimally Configuring Open Telemetry Tracing for ASP.NET Core</a></li>
</ol>
<p>Open Telemetry is an open source specification, tools and SDK&#39;s used to instrument, generate, collect, and export telemetry data (metrics, logs, and traces). <a href="https://opentelemetry.io/">Open Telemetry</a> is backed by the <a href="https://www.cncf.io/webinars/fundamentals-of-opentelemetry/">Cloud Native Computing Foundation (CNCF)</a> which backs a mind boggling array of popular open source projects. It&#39;s worth looking at the <a href="https://landscape.cncf.io/">CNCF Landscape</a> to see what I really mean. The SDK&#39;s support all the major programming languages including C# and ASP.NET Core.</p>
<p>In this post, I&#39;m going to discuss what Open Telemetry is all about, why you&#39;d want to use it and how to use it with .NET specifically. With a typical application there are three sets of data that you usually want to record: metrics, logs and traces. Lets start by discussing what they are.</p>
<h2 id="logging">Logging</h2>
<p>Provides insight into application-specific messages emitted by processes. In a .NET application, Open Telemetry support can easily be added if you use <code>ILogger</code> for logging which lives in the <code>Microsoft.Extensions.Logging</code> NuGet package. You&#39;d typically already use this if you&#39;re building an ASP.NET Core application.</p>
<h2 id="metrics">Metrics</h2>
<p>Provide quantitative information about processes running inside the system, including counters, gauges, and histograms. Support for metrics in Open Telemetry is still under development and being finalised at the time of writing. Examples of metrics are:</p>
<ul>
<li>Percentage CPU usage.</li>
<li>Bytes of memory used.</li>
<li>Number of HTTP requests.</li>
</ul>
<h2 id="tracing">Tracing</h2>
<p>Also known as distributed tracing, this records the start and end times for individual operations alongside any ancillary data relevant to the operation. An example of this is recording a trace of a HTTP request in ASP.NET Core. You might record the start and end time of a request/response and the ancillary data would be the HTTP method, scheme, URL etc.</p>
<p>If an ASP.NET Core application makes database calls and HTTP requests to external API&#39;s these could also be recorded if the database and API&#39;s which are in totally separate processes also support recording Open Telemetry tracing. It&#39;s possible to follow the trace of a HTTP request from a client, down to your API, down to a database and all the way back again. This allows you to get a deep understanding of where the time is being spent or if there is an exception, where it is occurring.</p>
<h1 id="jaeger">Jaeger</h1>
<p>Collecting metrics, logs and traces is only half of the equation, the other half is exporting that data to various applications that know how to collect Open Telemetry formatted data, so you can view it. The endgame is to be able to see your data in an easily consumable fashion using nice visualisations, so you can spot patterns and solve problems.</p>
<p>The two main applications that can collect and display Open Telemetry compatible trace data are <a href="https://www.jaegertracing.io/">Jaeger</a> and Zipkin. Zipkin is a bit older and doesn&#39;t have as nice a UI, so I&#39;d personally recommend Jaeger. It looks something like this:</p>
<p><img src="https://rehansaeed.com/deep-dive-into-open-telemetry-for-net/images/Jaeger-Trace-Detail-3360x1859.png" alt="Jaeger Trace Detail"></p>
<p>The above image shows the trace from a &#39;frontend&#39; application. You can see how it makes calls to MySQL, Redis and external API&#39;s using HTTP requests. The length of each line shows how long it took to execute. You can easily see all of the major operations executed in a trace from end to end. You can also drill into each individual line and see extra information relevant to that part of the trace. I&#39;ll show you how you can run Jaeger and collect Open Telemetry data in my next blog post.</p>
<h1 id="spans">Spans</h1>
<p>Each line in the Jaeger screenshot above is called a Span or in .NET is represented by the <code>System.Activities.Activity</code> type. It has a unique identifier, start and end time along with a parent span unique identifier too, so it can be connected to other spans in a tree structure representing an overall trace. Finally, a span can also contain other ancillary data that I will discuss further on.</p>
<p>::: tip
Unfortunately, .NET&#39;s naming has significantly deviated from the official Open Telemetry specification, resulting in quite a lot of confusion on my part. Happily, I&#39;ve been through that confusion, so you don&#39;t have to!</p>
<p>My understanding is that .NET already contained a type called <code>Activity</code>, so the .NET team decided to reuse it instead of creating a new <code>Span</code> type like you&#39;d expect. This means that a lot of naming does not match up with the Open Telemetry specification. From this point forward you can use the words &#39;span&#39; and &#39;activity&#39; interchangeably.
:::</p>
<p>Recording your own traces using spans is pretty simple. First we must create an <code>ActivitySource</code> from which spans or activities can be recorded. This just contains a little information about the source of the spans created from it.</p>
<pre><code class="language-cs">private static ActivitySource activitySource = new ActivitySource(
    &quot;companyname.product.library&quot;,
    &quot;semver1.0.0&quot;);
</code></pre>
<p>Then we can call <code>StartActivity</code> to start recording and finally call <code>Dispose</code> to stop recording the span.</p>
<pre><code class="language-cs">using (var activity = activitySource.StartActivity(&quot;ActivityName&quot;)
{
    // Pretend to do some work.
    await LongRunningAsync().ConfigureAwait(false);
} // Activity gets stopped automatically at end of this block during dispose.
</code></pre>
<h2 id="events">Events</h2>
<p>Along with our span we can record events. These are timestamped events that occur at a single point in time within your span.</p>
<pre><code class="language-cs">using (var activity = activitySource.StartActivity(&quot;ActivityName&quot;)
{
    await LongRunningOperation().ConfigureAwait(false);
}

public async Task LongRunningOperationAsync()
{
    await Task.Delay(1000).ConfigureAwait(false);

    // Log timestamped events that can take place during an activity.
    Activity.Current?.AddEvent(new ActivityEvent(&quot;Something happened.&quot;));
}
</code></pre>
<p>Within the <code>LongRunningOperationAsync</code> method, we don&#39;t have access to the current span. One way to get hold of it would be to pass it in as a method parameter. However, a better way that decouples the two operations is to use <code>Activity.Current</code> which gives you access to the current span within the currently running thread.</p>
<p>One common pitfall I can foresee is that <code>Activity.Current</code> could be <code>null</code> due to the caller deciding not to create a span for some reason. Therefore, we use the null conditional operator <code>?.</code> to only call <code>AddEvent</code> if the current span is not null.</p>
<h2 id="attributes">Attributes</h2>
<p>Attributes are name value pairs of data that you can record as part of an individual span. The attribute names have a loose standard for how they are put together that I&#39;ll talk about further on.</p>
<p>::: tip
<code>Tags</code> in .NET are called <code>Attributes</code> in the <a href="https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/api.md#set-attributes">Open Telemetry specification</a>.
:::</p>
<pre><code class="language-cs">using (var activity = activitySource.StartActivity(&quot;ActivityName&quot;)
{
    await LongRunningOperation().ConfigureAwait(false);
}

public async Task LongRunningOperationAsync()
{
    await Task.Delay(1000).ConfigureAwait(false);

    // Log an attribute containing arbitrary data.
    Activity.Current?.SetTag(&quot;http.method&quot;, &quot;GET&quot;);
}
</code></pre>
<p>You can add new attributes or update existing attributes using the <code>Activity.SetTag</code> method. There is also an <code>Activity.AddTag</code> method but that will throw if an attribute does not already exist, so I&#39;d avoid using it.</p>
<h1 id="isrecording">IsRecording</h1>
<p><code>IsRecording</code> is a flag on a span that returns <code>true</code> if the end time of the span has not yet been set and <code>false</code> if it has, thus signifying whether the span has ended. In addition it can also be set to <code>false</code> if the application is sampling Open Telemetry spans i.e. you don&#39;t want to collect a trace for every single execution of the code but might only want a trace for say 10% of executions to reduce the significant overhead of collecting telemetry.</p>
<p>::: tip
The <code>Activity.IsAllDataRequested</code> property in .NET is called <code>IsRecording</code> in the <a href="https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/api.md#isrecording">Open Telemetry specification</a>.
:::</p>
<pre><code class="language-cs">using (var activity = activitySource.StartActivity(&quot;ActivityName&quot;)
{
    await LongRunningOperation().ConfigureAwait(false);
}

public async Task LongRunningOperationAsync()
{
    await Task.Delay(1000).ConfigureAwait(false);

    // It&#39;s possible to optionally request more data from a particular span.
    var activity = Activity.Current;
    if (activity != null &amp;&amp; activity.IsAllDataRequested)
    {
        activity.SetTag(&quot;http.url&quot;, &quot;http://www.mywebsite.com&quot;);
    }
}
</code></pre>
<p>It&#39;s worth reading a bit more about <a href="https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/sdk.md#sampling">Open Telemetry Sampling</a> for more details. In most real world applications, collecting telemetry for every execution of your code is prohibitively expensive and unrealistic, so you will likely be using some form of sampling. Therefore the <code>IsRecording</code>/<code>IsAllDataRequested</code> flag becomes something you should probably always check (as in the above example) before you add events or attributes to your span.</p>
<h1 id="trace-semantic-conventions">Trace Semantic Conventions</h1>
<p>Note the attribute names <code>http.method</code> and <code>http.url</code> I used in the above examples. There are certain commonly used attribute names that have been standardised in the Open Telemetry specification.</p>
<p>Standardised attribute names use a <code>lower_kebab_case</code> syntax with <code>.</code> separator characters. Standardising the names of commonly used attribute names gives applications like Jaeger the ability to show nice UI customisations. Attribute names have been categorised under a few different buckets, it&#39;s worth spending some time taking a look at them:</p>
<ul>
<li><a href="https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/span-general.md">General</a>: General semantic attributes that may be used in describing different kinds of operations.</li>
</ul>
<ul>
<li><a href="https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md">HTTP</a>: Spans for both HTTP client and server.</li>
<li><a href="https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md">Database</a>: Spans for SQL and NoSQL client calls.</li>
<li><a href="https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/rpc.md">RPC/RMI</a>: Spans for remote procedure calls (e.g., gRPC).</li>
<li><a href="https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/messaging.md">Messaging</a>: Spans for interaction with messaging systems (queues, publish/subscribe, etc.).</li>
<li><a href="https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/faas.md">FaaS</a>: Spans for Function as a Service (e.g., AWS Lambda).</li>
<li><a href="https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/exceptions.md">Exceptions</a>: Attributes for recording exceptions associated with a span.</li>
</ul>
<h1 id="exporting-telemetry">Exporting Telemetry</h1>
<p>There are many plugins for exporting data collected using Open Telemetry which I&#39;ll discuss in my next blog post about using Open Telemetry in ASP.NET Core. Therefore, it&#39;s highly unlikely that you&#39;d need to manually write your own code to consume data collected using Open Telemetry.</p>
<p>However, if you&#39;re interested then <a href="https://jimmybogard.com">Jimmy Bogard</a> has a very well written <a href="https://jimmybogard.com/activitysource-and-listener-in-net-5/">blog post</a> about using <code>ActivitySource</code> and <code>ActivityListener</code> to listen to any incoming telemetry. In short, you can easily subscribe to consume Open Telemetry data like so:</p>
<pre><code class="language-cs">using var subscriber = DiagnosticListener.AllListeners.Subscribe(
    listener =&gt;
    {
        Console.WriteLine($&quot;Listener name {listener.Name}&quot;);

        listener.Subscribe(kvp =&gt; Console.WriteLine($&quot;Received event {kvp.Key}:{kvp.Value}&quot;));
    });
</code></pre>
<h1 id="crossing-the-process-boundary">Crossing the Process Boundary</h1>
<p>Earlier on I spoke about how it&#39;s possible to record a trace across process boundaries. For example collecting a trace from a client application through to a database and API both running in separate processes. Given what you now know about recording spans above, how is this possible?</p>
<p>This is where the <a href="https://www.w3.org/TR/trace-context/">W3C Trace Context</a> standard comes in. It defines a series of HTTP headers that pass information from one process to another about any trace that is currently being recorded. There are two HTTP headers defined in the specification:</p>
<ul>
<li><code>traceparent</code> - Contains the <code>version</code>, <code>trace-id</code>, <code>parent-id</code> and <code>trace-flags</code> in an encoded form separated by dashes.<ul>
<li><code>version</code> - The version of Open Telemetry being used which is always <code>00</code> at the time of writing.</li>
<li><code>trace-id</code> - The unique identifier of the trace.</li>
<li><code>parent-id</code> - The unique identifier of the span which is acting as the current parent span.</li>
<li><code>trace-flags</code> - A set of flags for the current trace which determines whether the current trace is being sampled and the trace level.</li>
</ul>
</li>
<li><code>tracestate</code> - Vendor-specific data represented by a set of name/value pairs.</li>
</ul>
<p>I&#39;m not sure why but the HTTP headers are defined in lower-case. Here is an example of what these headers look like in a HTTP request:</p>
<pre><code class="language-http">traceparent: 00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-01
tracestate: asp=00f067aa0ba902b7,redis=t61rcWkgMzE
</code></pre>
<p>If you&#39;re interested in what it looks like to actually implement the W3C Trace Context, <a href="https://jimmybogard.com">Jimmy Bogard</a> has been implementing <a href="https://jimmybogard.com/building-end-to-end-diagnostics-and-tracing-a-primer-trace-context/">Open Telemetry for NServiceBus</a> and shows how it can be done.</p>
<h1 id="baggage">Baggage</h1>
<p>Similar to attributes, baggage is another way we can add data as name value pairs to a trace. The difference is that baggage travels across process boundaries using a <code>baggage</code> HTTP header as defined in the <a href="https://www.w3.org/TR/baggage/">W3C Baggage</a> specification. It is also added to all spans in a trace.</p>
<pre><code class="language-http">baggage: userId=alice,serverNode=DF:28,isProduction=false
</code></pre>
<p>Similar to the way attributes can be recorded using the <code>AddTag</code> and <code>SetTag</code> methods, with baggage we can use the <code>AddBaggage</code> method. For some reason a <code>SetBaggage</code> method that would also update baggage does not exist.</p>
<pre><code class="language-cs">using (var activity = activitySource.StartActivity(&quot;ActivityName&quot;)
{
    await LongRunningOperation().ConfigureAwait(false);
}

public async Task LongRunningOperationAsync()
{
    await Task.Delay(1000).ConfigureAwait(false);

    // Log an attribute containing arbitrary data.
    Activity.Current?.AddBaggage(&quot;http.method&quot;, &quot;GET&quot;);
}
</code></pre>
<p>So why would you use baggage over attributes? Well, if you have a global unique identifier for a particular trace like a user ID, order ID or some session ID it might be useful to add it as baggage because it&#39;s relevant to all spans in your trace. However, you must be careful not to add too much baggage because it will add overhead when making HTTP requests.</p>
<h1 id="youre-already-using-it">You&#39;re Already Using It</h1>
<p>The .NET team in their wisdom decided to take quite a large gamble on Open Telemetry. They not only repurposed their <code>Activity</code> type to represent a span but they also instrumented several libraries, so you don&#39;t have to.</p>
<p>The <code>HttpClient</code> already adds the W3C Trace Context HTTP headers from the current span automatically if a trace is being recorded. Also an ASP.NET Core application already reads W3C Trace Context HTTP headers from incoming requests and populates the current span with that information.</p>
<p>Since the .NET team has made it so easy to collect telemetry and integrated the <code>Activity</code> type into the base class libraries, I expect a lot of other libraries and applications to follow this example.</p>
<p>The <code>ILogger</code> interface from the <code>Microsoft.Extensions.Logging</code> NuGet package used commonly in an ASP.NET Core application is also able to collect logs compatible with Open Telemetry too.</p>
<h1 id="up-next">Up Next</h1>
<p>I&#39;ve discussed that Open Telemetry is all about collecting Logs, Metrics and Trace data and gone fairly deep into collecting Trace data. In my next post, I&#39;ll cover how you can configure ASP.NET Core and Open Telemetry traces and logs.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Muhammad Rehan Saeed: Developer at Microsoft | Leonardo Tuna Podcast]]></title>
        <id>https://rehansaeed.com/leonardo-tuna-podcast/</id>
        <link href="https://rehansaeed.com/leonardo-tuna-podcast/"/>
        <updated>2020-11-30T10:57:00.000Z</updated>
        <summary type="html"><![CDATA[I did a fun podcast episode with Leonardo Tuna. We talked about the difficulty of getting a job at Microsoft, some of my work there, JavaScript frontend frameworks, Vue vs React and my interesting experiences writing software for education at Bridge International Academies.]]></summary>
        <content type="html"><![CDATA[<p>I did a fun podcast episode with <a href="https://www.leotuna.com/">Leonardo Tuna</a>. We talked about the difficulty of getting a job at Microsoft, some of my work there, JavaScript frontend frameworks, Vue vs React and my interesting experiences writing software for education at Bridge International Academies.</p>
<p>Leonardo is also looking for other developers from all walks of life who are interested in recoding podcast episodes, so if you&#39;re interested give him a ping.</p>
<p><a href="https://www.youtube.com/watch?v=ou8ghziWAwA">https://www.youtube.com/watch?v=ou8ghziWAwA</a></p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Automating .NET Security Updates]]></title>
        <id>https://rehansaeed.com/automating-dotnet-security-updates/</id>
        <link href="https://rehansaeed.com/automating-dotnet-security-updates/"/>
        <updated>2020-09-23T15:35:00.000Z</updated>
        <summary type="html"><![CDATA[.NET SDK updates are released every few weeks. In this post, I talk about how you can automate them.]]></summary>
        <content type="html"><![CDATA[<p>Every few weeks Microsoft pushes out a .NET SDK update to patch zero day security vulnerabilities. It&#39;s important to keep up to date with these to ensure that your software is protected. The problem is, keeping up to date is a manual and boring process but what if you could automate it?</p>
<p>In this post, I&#39;ll talk through how you can get most of the way to a fully automated solution with the last hurdle requiring some of your help.</p>
<h1 id="single-source-of-truth">Single Source of Truth</h1>
<p>The first problem we need to solve is to enforce a specific version of the .NET SDK to be used to build our code. We can do this by adding a <code>global.json</code> file to the root of our repository. We can set the .NET SDK version in it like so:</p>
<pre><code class="language-json">{
  &quot;sdk&quot;: {
    &quot;version&quot;: &quot;3.1.402&quot;
  }
}
</code></pre>
<p>::: warning Security vs Convenience
If a developer doesn&#39;t have the version of the .NET SDK you&#39;ve specified in your <code>global.json</code> file, Visual Studio will fail to load the projects and show a pretty good error in the output window telling you to update the SDK. It would be nice if it also contained a link to the exact SDK install you needed to smooth the experience.
:::</p>
<h1 id="continuous-integration">Continuous Integration</h1>
<p>Continuous integration servers like GitHub Actions, Azure Pipelines or AppVeyor all have a version of the .NET SDK pre-installed for your convenience. However, when a new version is released it takes them days to update to the latest version.</p>
<p>In my opinion, it&#39;s just better to install the .NET SDK yourself, which is pretty easy to do. The trick is to read the .NET SDK version number from the <code>global.json</code> file, so that there is a single source of truth for the  version number and it&#39;s easier to update.</p>
<p>It&#39;s worth noting that this adds a few seconds to your build time. However, if the build server already has the version installed which is usually true, it&#39;s very quick.</p>
<h2 id="github-actions">GitHub Actions</h2>
<p>For GitHub Actions, we can use the first party <code>actions/setup-dotnet</code> GitHub action to install the .NET SDK. You can provide it a hard coded version number but it turns out omitting this causes it to lookup the version number from any <code>global.json</code> file it finds.</p>
<pre><code class="language-yml">- name: &#39;Install .NET Core SDK&#39;
  uses: actions/setup-dotnet@v1
</code></pre>
<h2 id="azure-pipelines">Azure Pipelines</h2>
<p>Azure Pipelines has a similar first party <code>UseDotNet</code> task that can install the .NET SDK. It&#39;s a bit more verbose, as you need to set the <code>useGlobalJson</code> flag to <code>true</code>.</p>
<pre><code class="language-yml">- task: UseDotNet@2
  displayName: &#39;Install .NET Core SDK&#39;
  inputs:
    packageType: &#39;sdk&#39;
    useGlobalJson: true
</code></pre>
<h2 id="powershell">PowerShell</h2>
<p>.NET ships with a PowerShell and Bash script to install the .NET SDK. They both ship with an argument you can pass to tell them to use the <code>global.json</code> file to read the version number. Here is a short cross-platform PowerShell 7 (previously known as PowerShell Core) script that you can use:</p>
<pre><code class="language-powershell">if ($isWindows) {
    Invoke-WebRequest &quot;https://dot.net/v1/dotnet-install.ps1&quot; -OutFile &quot;./dotnet-install.ps1&quot;
    ./dotnet-install.ps1 -JSonFile global.json
}
else {
    Invoke-WebRequest &quot;https://dot.net/v1/dotnet-install.sh&quot; -OutFile &quot;./dotnet-install.sh&quot;
    sudo chmod u+x dotnet-install.sh
    sudo ./dotnet-install.sh --jsonfile global.json
}
</code></pre>
<h2 id="appveyor">AppVeyor</h2>
<p>AppVeyor has some issues with installing the .NET SDK using the PowerShell and Bash scripts. For reasons I&#39;m not too clear on, you have to set the installation directory. So here is the updated script I use for that:</p>
<pre><code class="language-powershell">if ($isWindows) {
    Invoke-WebRequest &quot;https://dot.net/v1/dotnet-install.ps1&quot; -OutFile &quot;./dotnet-install.ps1&quot;
    ./dotnet-install.ps1 -JSonFile global.json -InstallDir &#39;C:\Program Files\dotnet&#39;
}
else {
    Invoke-WebRequest &quot;https://dot.net/v1/dotnet-install.sh&quot; -OutFile &quot;./dotnet-install.sh&quot;
    sudo chmod u+x dotnet-install.sh
    if ($isMacOS) {
        sudo ./dotnet-install.sh --jsonfile global.json --install-dir &#39;/Users/appveyor/.dotnet&#39;
    } else {
        sudo ./dotnet-install.sh --jsonfile global.json --install-dir &#39;/usr/share/dotnet&#39;
    }
}
</code></pre>
<h1 id="dependabot">Dependabot</h1>
<p><a href="https://github.blog/2020-06-01-keep-all-your-packages-up-to-date-with-dependabot/">Dependabot</a> is an amazing tool that GitHub recently acquired. It automatically submits pull requests to your repository to update packages of various kinds including NuGet and NPM packages.</p>
<p>This is where I need your help. The Dependabot GitHub repository has an open issue (<a href="https://github.com/dependabot/dependabot-core/issues/2442">dependabot-core#2442</a>) to also do the same for the .NET SDK version in the <code>global.json</code> file. Upvoting the issue will really help raise it&#39;s profile and get it implemented.</p>
<h1 id="conclusions">Conclusions</h1>
<p>Security is hard. Keeping up to date is important but a never ending boring chore. It doesn&#39;t have to be that way. With a little extra work, we can get as close to making a .NET SDK update a three character commit every few weeks and with your help, maybe even that can be automated with Dependabot.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Fastest NuGet Package Ever Published (Probably)]]></title>
        <id>https://rehansaeed.com/the-fastest-nuget-package-ever-published-probably/</id>
        <link href="https://rehansaeed.com/the-fastest-nuget-package-ever-published-probably/"/>
        <updated>2020-07-08T08:34:00.000Z</updated>
        <summary type="html"><![CDATA[The fastest way to create a new NuGet package project and get it published with all the bells and whistles like continuous integration (CI) builds and drafted release notes.]]></summary>
        <content type="html"><![CDATA[<p>::: tip Updated 2021-04-12 09:50
I appeared on the <a href="https://dotnet.microsoft.com/live/dotnet-docs">.NET Docs Show</a> and ran through this blog post and much more. I&#39;ve added a <a href="https://www.youtube.com/watch?v=A93Fn_qMLX4">link to the show</a> on YouTube below.
:::</p>
<p>::: tip Updated 2020-09-17 09:29
Added GitHub CLI commands to create labels instead of doing it manually. The GitHub CLI also simplified some commands, so I&#39;ve updated the post to make use of those simpler commands.
:::</p>
<p><a href="https://www.youtube.com/watch?v=A93Fn_qMLX4">https://www.youtube.com/watch?v=A93Fn_qMLX4</a></p>
<p>So, you want to publish a new NuGet package? You just want to get your code up into nuget.org as quickly as possible but there is so much that you have to setup to get there. Not any more! I&#39;ll show you how you can create a new project and publish a NuGet package with all the bells and whistles in a <strong>couple of minutes</strong>.</p>
<p>We&#39;ll start off by creating a new GitHub repository using the new <a href="https://github.com/cli/cli">GitHub CLI</a>.</p>
<pre><code class="language-powershell">gh repo create RehanSaeed/FastestNuGet --public --confirm
cd FastestNuGet
</code></pre>
<p>The next step is to install the <a href="https://github.com/Dotnet-Boxed/Templates">Dotnet Boxed</a> project templates and then create a new project using the <a href="https://github.com/Dotnet-Boxed/Templates/blob/main/Docs/NuGet.md">NuGet template</a>. There is a <strong>lot</strong> of optional features you can toggle in this project template which you can review by looking at the output for the <code>dotnet new nuget --help</code> command.</p>
<pre><code class="language-powershell">dotnet new --install Boxed.Templates
dotnet new nuget --help
dotnet new nuget --title &quot;Project Title&quot; --description &quot;Project Description&quot; --github-username RehanSaeed --github-project FastestNuGet
</code></pre>
<p>Next we&#39;ll commit and push our newly created project to the <code>main</code> branch.</p>
<pre><code class="language-powershell">git add .
git commit -m &quot;Initial&quot;
git push --set-upstream origin main
</code></pre>
<p>As soon as we do this, we&#39;ll see two GitHub Actions have started.</p>
<p><img src="https://rehansaeed.com/the-fastest-nuget-package-ever-published-probably/images/GitHub-Actions-1062x551.png" alt="GitHub Actions"></p>
<p>The <code>Build</code> GitHub Action has completed several actions you can see below. Note that these actions were completed on Windows, MacOS and Ubuntu Linux. This ensures that your code builds and passes tests on all platforms.</p>
<p><img src="https://rehansaeed.com/the-fastest-nuget-package-ever-published-probably/images/Build-GitHub-Action-1062x700.png" alt="Build GitHub Action"></p>
<p>This resulted in a NuGet package being packaged up and pushed to GitHub packages. This is a nice place to store pre-release packages that you can use for testing.</p>
<p><img src="https://rehansaeed.com/the-fastest-nuget-package-ever-published-probably/images/GitHub-Packages-1062x551.png" alt="GitHub Packages"></p>
<p>The other <code>Release Drafter</code> GitHub action created a draft release for us in GitHub releases.</p>
<p><img src="https://rehansaeed.com/the-fastest-nuget-package-ever-published-probably/images/GitHub-Releases-1062x600.png" alt="GitHub Releases"></p>
<p>Next we need to create some default labels that we can apply to pull requests. This will help us create automatic release notes for any NuGet packages we release. The <code>bug</code>, <code>enhancement</code> and <code>maintenance</code> labels will categorise changes in our release notes. The <code>major</code>, <code>minor</code> and <code>patch</code> labels will automatically generate a semantic versioning 2.0 compliant version number for us.</p>
<p><img src="https://rehansaeed.com/the-fastest-nuget-package-ever-published-probably/images/GitHub-Labels-1106x756.png" alt="GitHub Labels"></p>
<p>I&#39;ve gone in to GitHub and deleted all the existing labels and then run a few GitHub CLI commands to create just the ones I want:</p>
<pre><code class="language-powershell">gh api --silent repos/:owner/:repo/labels -f name=&quot;documentation&quot; -f description=&quot;Pull requests or issues to add or modify documentation.&quot; -f color=&quot;0075ca&quot;
gh api --silent repos/:owner/:repo/labels -f name=&quot;bug&quot; -f description=&quot;Issues describing a bug or pull requests fixing a bug.&quot; -f color=&quot;ee0701&quot;
gh api --silent repos/:owner/:repo/labels -f name=&quot;enhancement&quot; -f description=&quot;Issues describing an enhancement or pull requests adding an enhancement.&quot; -f color=&quot;a2eeef&quot;
gh api --silent repos/:owner/:repo/labels -f name=&quot;maintenance&quot; -f description=&quot;Pull requests that perform maintenance on the project but add no features or bug fixes.&quot; -f color=&quot;fff89b&quot;
gh api --silent repos/:owner/:repo/labels -f name=&quot;major&quot; -f description=&quot;Pull requests requiring a major version update according to semantic versioning.&quot; -f color=&quot;b23021&quot;
gh api --silent repos/:owner/:repo/labels -f name=&quot;minor&quot; -f description=&quot;Pull requests requiring a minor version update according to semantic versioning.&quot; -f color=&quot;f99248&quot;
gh api --silent repos/:owner/:repo/labels -f name=&quot;patch&quot; -f description=&quot;Pull requests requiring a patch version update according to semantic versioning.&quot; -f color=&quot;eaf42c&quot;
</code></pre>
<p>Now it&#39;s time to make a change and submit a new pull request (PR) to our repository. Notice I&#39;m adding a <code>major</code> and <code>enhancement</code> label to the pull request.</p>
<pre><code class="language-powershell">git switch --create some-change
git add .
git commit -m &quot;Some change&quot;
git push --set-upstream origin some-change
gh pr create --fill --label major --label enhancement
</code></pre>
<p>Next, I&#39;ll check that the pull request passed all eight of it&#39;s continuous integration build checks and merge the pull request.</p>
<p><img src="https://rehansaeed.com/the-fastest-nuget-package-ever-published-probably/images/Completed-Pull-Request-1106x756.png" alt="Completed Pull Request"></p>
<p>If we go back to GitHub Releases, we&#39;ll see that our draft GitHub release was automatically updated with details of our pull request! Notice that the <code>enhancement</code> label also caused our pull request to be categorised under &#39;New Features&#39;.</p>
<p><img src="https://rehansaeed.com/the-fastest-nuget-package-ever-published-probably/images/Pull-Request-GitHub-Releases-1106x756.png" alt="GitHub Releases"></p>
<p>Next, we&#39;ll want to publish an official release of our NuGet package to <a href="https://www.nuget.org">nuget.org</a> but first, we need to get hold of a NuGet API key from nuget.org and add it as a secret named <code>NUGET_API_KEY</code> in GitHub secrets.</p>
<p><img src="https://rehansaeed.com/the-fastest-nuget-package-ever-published-probably/images/GitHub-Secrets-1062x600.png" alt="GitHub Secrets"></p>
<p>Finally I&#39;ll edit the release and change the tag name and display name for the release to <code>1.0.0</code>. Normally, the <code>major</code>, <code>minor</code> and <code>patch</code> labels we applied earlier would generate this version for us but this is the first ever Git tag, so we&#39;ll need to do it ourselves.</p>
<p>In my last post &#39;<a href="https://rehansaeed.com/the-easiest-way-to-version-nuget-packages/">The Easiest Way to Version NuGet Packages</a>&#39; I talked more about how we are using MinVer for taking the Git tags and versioning our DLL&#39;s and NuGet packages.</p>
<p><img src="https://rehansaeed.com/the-fastest-nuget-package-ever-published-probably/images/Published-GitHub-Release-1106x756.png" alt="Published GitHub Release"></p>
<p>Now bask in the glory of seeing your NuGet package on nuget.org. I also just noticed there is a Black Lives Matter (BLM) banner on the site! Those lives certainly do matter, check out my recent post on <a href="https://rehansaeed.com/racism-in-software-development-and-beyond/">Racism in Software Development and Beyond</a> for my take on the subject.</p>
<p><img src="https://rehansaeed.com/the-fastest-nuget-package-ever-published-probably/images/NuGet-1064x848.png" alt="NuGet"></p>
<p>That&#39;s not all! We didn&#39;t just push one NuGet package, we also pushed it&#39;s symbols to the nuget.org symbol server. The NuGet package is also signed and has <a href="https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/sourcelink">source link</a> support, so developers can debug code in your NuGet package. If you look at the main ReadMe of your project, you&#39;ll see a badge showing you the status of the latest GitHub Action run on the main branch and finally you also see a graph showing you how long each GitHub Action run took and it&#39;s status over time.</p>
<p><img src="https://rehansaeed.com/the-fastest-nuget-package-ever-published-probably/images/Main-ReadMe-1065x652.png" alt="Main ReadMe"></p>
<p>You can take a look at the repository at <a href="https://github.com/RehanSaeed/FastestNuGet">RehanSaeed/FastestNuGet</a> to see all of the above in action.</p>
<h1 id="the-complete-script">The Complete Script</h1>
<p>Here is the complete script we ran to get from starting a new project to publishing on NuGet. I took lots of screenshots along the way but overall, you can do all this in about two minutes assuming you have everything installed.</p>
<pre><code class="language-powershell">gh repo create RehanSaeed/FastestNuGet --public --confirm
cd FastestNuGet

dotnet new --install Boxed.Templates
dotnet new nuget --title &quot;Project Title&quot; --description &quot;Project Description&quot; --github-username RehanSaeed --github-project FastestNuGet

git add .
git commit -m &quot;Initial&quot;
git push --set-upstream origin main

# View GitHub Actions Continuous Integration Build
start &quot;https://github.com/RehanSaeed/FastestNuGet/actions&quot;

# View NuGet Package Published to GitHub Packages
start &quot;https://github.com/RehanSaeed/FastestNuGet/packages&quot;

# Create major, minor, patch, bug, enhancement, maintenance labels
start &quot;https://github.com/RehanSaeed/FastestNuGet/labels&quot;
gh api --silent repos/:owner/:repo/labels -f name=&quot;documentation&quot; -f description=&quot;Pull requests or issues to add or modify documentation.&quot; -f color=&quot;0075ca&quot;
gh api --silent repos/:owner/:repo/labels -f name=&quot;bug&quot; -f description=&quot;Issues describing a bug or pull requests fixing a bug.&quot; -f color=&quot;ee0701&quot;
gh api --silent repos/:owner/:repo/labels -f name=&quot;enhancement&quot; -f description=&quot;Issues describing an enhancement or pull requests adding an enhancement.&quot; -f color=&quot;a2eeef&quot;
gh api --silent repos/:owner/:repo/labels -f name=&quot;maintenance&quot; -f description=&quot;Pull requests that perform maintenance on the project but add no features or bug fixes.&quot; -f color=&quot;fff89b&quot;
gh api --silent repos/:owner/:repo/labels -f name=&quot;major&quot; -f description=&quot;Pull requests requiring a major version update according to semantic versioning.&quot; -f color=&quot;b23021&quot;
gh api --silent repos/:owner/:repo/labels -f name=&quot;minor&quot; -f description=&quot;Pull requests requiring a minor version update according to semantic versioning.&quot; -f color=&quot;f99248&quot;
gh api --silent repos/:owner/:repo/labels -f name=&quot;patch&quot; -f description=&quot;Pull requests requiring a patch version update according to semantic versioning.&quot; -f color=&quot;eaf42c&quot;

git switch --create some-change
git add .
git commit -m &quot;Some change&quot;
git push --set-upstream origin some-change
gh pr create --fill --label major --label enhancement

# View and Complete Pull Request
start &quot;https://github.com/RehanSaeed/FastestNuGet/pull/1&quot;

# Add NUGET_API_KEY to GitHub Secrets
start &quot;https://github.com/RehanSaeed/FastestNuGet/settings/secrets&quot;

# View and Publish Updated Draft Release
start &quot;https://github.com/RehanSaeed/FastestNuGet/releases&quot;

# View NuGet Package Published to NuGet
start &quot;https://www.nuget.org/packages/FastestNuGet/&quot;
</code></pre>
<h1 id="conclusions">Conclusions</h1>
<p>I hope this <a href="https://github.com/Dotnet-Boxed/Templates">Dotnet Boxed</a> project template accelerates development of your next NuGet package. There are lots of optional features of the <a href="https://github.com/Dotnet-Boxed/Templates/blob/main/Docs/NuGet.md">NuGet project template</a> I haven&#39;t even shown like support for Azure Pipelines and Appveyor continuous integration builds and more, so please do go and take a look.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Easiest Way to Version NuGet Packages]]></title>
        <id>https://rehansaeed.com/the-easiest-way-to-version-nuget-packages/</id>
        <link href="https://rehansaeed.com/the-easiest-way-to-version-nuget-packages/"/>
        <updated>2020-07-01T16:36:29.000Z</updated>
        <summary type="html"><![CDATA[Using MinVer is the easiest way to version your NuGet packages and DLL's using semantic versioning (SemVer).]]></summary>
        <content type="html"><![CDATA[<p>The <strong>easiest</strong> way to version NuGet packages using <a href="https://semver.org/">semantic versioning</a> in my opinion is to use <a href="https://github.com/adamralph/minver">MinVer</a>. Getting started is literally as easy as adding the <code>MinVer</code> NuGet package. Getting finished is not too much more than that.</p>
<p>In this post I&#39;ll discuss the semantic versioning 2.0 standard and show you how you can semantically version your NuGet packages and the DLL&#39;s within them using MinVer and Git tags.</p>
<h1 id="what-is-semantic-versioning">What is Semantic Versioning?</h1>
<p><a href="https://semver.org/">Semantic versioning</a> is the idea that each part of a version number has some intrinsic meaning. Lets break down an example of a full version number into it&#39;s constituent parts:</p>
<pre><code>1.2.3-preview.0.4+b34215d3d2539837ac3e20fc3111ba7d46670064
</code></pre>
<ul>
<li><strong>1</strong> - The major version number. Incrementing this means that a major breaking change has occurred.</li>
<li><strong>2</strong> - The minor version number. Incrementing this means that a non-breaking change has occurred.</li>
<li><strong>3</strong> - The patch version number. Incrementing this means that a patch or fix has been issued for a bug.</li>
<li><strong>preview</strong> (Optional) - This determines that the build is a pre-release build. This pre-release label is often set to <code>alpha</code> or <code>beta</code>.</li>
<li><strong>0</strong> (Optional) - This is the pre-release version number.</li>
<li><strong>4</strong> (Optional) - The Git height or the number of commits since the last non-pre-release build.</li>
<li><strong>b34215d3d2539837ac3e20fc3111ba7d46670064</strong> (Optional) - The Git SHA or hash of the current commit.</li>
</ul>
<p>Isn&#39;t that cool! Every number in there has so much significance. Lets break it down, just by looking at version numbers we can determine:</p>
<ul>
<li>Whether something was fixed, enhanced or broken when comparing one version to the previous one.</li>
<li>Whether it is a release or pre-release version.</li>
<li>Which commit the code was built with.</li>
<li>How many commits were made after the last release.</li>
</ul>
<h1 id="versioning-the-wrong-way">Versioning the Wrong Way</h1>
<p>In the past I&#39;ve tried to generate version numbers in quite a few different ways, none of which has been very satisfactory and none have conformed to semantic versioning 2.0. I&#39;ve tried using the current date and time to generate a version number. This tells you when the package was created but nothing more.</p>
<pre><code>[Year].[Month].[Day].[Hour][Minutes]
2020.7.2.0908
</code></pre>
<p>I&#39;ve also generated version numbers based on the automatically incrementing continuous integration (CI) build number but how do you turn one number into three? Well in my case I hard coded a major or minor version and used the CI build number for the patch version. Using this method lets you tie a package version back to a CI build and through inference a Git commit but it&#39;s less than ideal.</p>
<pre><code>[Hard Coded].[Hard Coded].[CI Build Number]
1.2.3
</code></pre>
<h1 id="minver">MinVer</h1>
<p>MinVer leans on Git tags to help version your NuGet packages and the assemblies within them. Lets start by adding the MinVer NuGet package to a new class library project:</p>
<pre><code class="language-xml">&lt;ItemGroup Label=&quot;Package References&quot;&gt;
  &lt;PackageReference Include=&quot;MinVer&quot; PrivateAssets=&quot;All&quot; Version=&quot;2.3.0&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<p>We&#39;ll need an initial version number for our NuGet package, so I&#39;ll tag the current commit as <code>0.0.1</code> and push the tag to my Git repository. Then I&#39;ll build my NuGet package:</p>
<pre><code class="language-powershell">git tag -a 0.0.1 -m &quot;Initial&quot;
git push --tags
dotnet build
</code></pre>
<p>If you now use an IL decompiler tool like <a href="https://github.com/0xd4d/dnSpy">dnSpy</a> (which is free and open source) to take a peek inside the resulting DLL, you&#39;ll notice the following version assembly level attributes have been automatically added:</p>
<p><img src="https://rehansaeed.com/the-easiest-way-to-version-nuget-packages/images/dnSpy-1952x1319.png" alt="dnSpy showing assembly level attributes"></p>
<pre><code class="language-cs">[assembly: AssemblyVersion(&quot;0.0.0.0&quot;)]
[assembly: AssemblyFileVersion(&quot;0.0.1.0&quot;)]
[assembly: AssemblyInformationalVersion(&quot;0.0.1+362b09133bfbad28ef8a015c634efdb35eb17122&quot;)]
</code></pre>
<p>If you now run <code>dotnet pack</code> to build a NuGet package, you&#39;ll notice that it has the correct version. Note that <code>0.0.1</code> is a <strong>release</strong> version of our NuGet package i.e. something we might want push to nuget.org in this case.</p>
<p><img src="https://rehansaeed.com/the-easiest-way-to-version-nuget-packages/images/NuGet-Package-With-Version-1177x340.png" alt="NuGet package with release version set to 0.0.1"></p>
<p>Now lets make a random change in our repository and then rebuild and repack our NuGet package:</p>
<pre><code class="language-powershell">git add .
git commit -m &quot;Some changes&quot;
dotnet build
dotnet pack
</code></pre>
<p>Now MinVer has automatically generated a <strong>pre-release</strong> version of our NuGet package. The patch version has been automatically incremented, a pre-release name <code>preview</code> has been given with a pre-release version of <code>0</code>. We also have a git height of one because we have made one commit since our last release and we still have the git commit SHA too:</p>
<p><img src="https://rehansaeed.com/the-easiest-way-to-version-nuget-packages/images/NuGet-Package-With-PreRelease-Version-1180x342.png" alt="NuGet package with pre-release version set to 0.0.2-preview.0.1"></p>
<p>If we crack open our DLL and view it&#39;s assembly level attributes again, we&#39;ll see more details:</p>
<pre><code class="language-cs">[assembly: AssemblyVersion(&quot;0.0.0.0&quot;)]
[assembly: AssemblyFileVersion(&quot;0.0.2.0&quot;)]
[assembly: AssemblyInformationalVersion(&quot;0.0.2-preview.0.1+7af23ee0f769ddf0eb8991d59ad09dcbc8d82855&quot;)]
</code></pre>
<p>Now at this stage you could make some more commits and you&#39;d see the major, minor and patch versions stay the same but the preview version, git height and git SHA would change. Eventually though, you will want to get another <strong>release</strong> version of your NuGet package ready. Well, this is as simple as creating another git tag:</p>
<pre><code class="language-powershell">git tag -a 0.0.2 -m &quot;The next amazing version&quot;
git push --tags
dotnet build
</code></pre>
<p>Now you can simply take the latest <code>0.0.2</code> release and push it to nuget.org.</p>
<h1 id="nerdbankgitversioning">Nerdbank.GitVersioning</h1>
<p>There is a more popular competitor to MinVer out there called <a href="https://github.com/dotnet/Nerdbank.GitVersioning">Nerdbank.GitVersioning</a> which is part of the .NET Foundation and is worth talking about because it works slightly differently. It requires you to have a <code>version.json</code> file in your repository to contain the version information, instead of using Git tags.</p>
<pre><code class="language-json">{
  &quot;$schema&quot;: &quot;https://raw.githubusercontent.com/dotnet/Nerdbank.GitVersioning/master/src/NerdBank.GitVersioning/version.schema.json&quot;,
  &quot;version&quot;: &quot;1.0-beta&quot;
  // This file can get very complicated...
}
</code></pre>
<p>In my opinion, this is not as nice. Git tags are an underused feature of Git and using them to tag release versions of your packages is a great use case. Git allows you to checkout code from a tag, so you can easily view the code in a package just by knowing it&#39;s version.</p>
<pre><code class="language-powershell">git checkout 0.0.1
</code></pre>
<p>Having a version number in a file, also means lots of commits just to edit the version number.</p>
<h1 id="conclusions">Conclusions</h1>
<p>MinVer is an easy way to version your NuGet packages and DLL&#39;s. It also comes with a CLI tool that you can use to version other things like Docker images which I&#39;ll cover in another post. If you&#39;d like to see an example of MinVer in action, you can try my <a href="https://github.com/Dotnet-Boxed/Templates">Dotnet Boxed</a> NuGet package project template by running a few simple commands to create a new project:</p>
<pre><code class="language-powershell">dotnet new --install Boxed.Templates
dotnet new nuget --name &quot;MyProject&quot;
</code></pre>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Racism in Software Development & Beyond]]></title>
        <id>https://rehansaeed.com/racism-in-software-development-and-beyond/</id>
        <link href="https://rehansaeed.com/racism-in-software-development-and-beyond/"/>
        <updated>2020-06-12T16:36:29.000Z</updated>
        <summary type="html"><![CDATA[If you're of North African, Middle Eastern or South Asian origin, you have to send up to 90% more job applications than your white counterparts in the United Kingdom. This level of discrimination has been unchanged since the 1960's.]]></summary>
        <content type="html"><![CDATA[<p>If you&#39;re of North African, Middle Eastern or South Asian origin, you have to send up to <strong>90%</strong> more job applications than your white counterparts in the United Kingdom. This level of discrimination has been <strong>unchanged</strong> since the 1960&#39;s. Let that sink in for a moment.</p>
<p>I read this statistic in a <a href="https://www.theguardian.com/world/2019/jan/17/minority-ethnic-britons-face-shocking-job-discrimination">Guardian article</a> last year and it&#39;s been on my mind ever since. The study was carried out by the Centre for Social Investigation at Nuffield College, University of Oxford. You can read their full report <a href="http://csi.nuff.ox.ac.uk/wp-content/uploads/2019/01/Are-employers-in-Britain-discriminating-against-ethnic-minorities_final.pdf">here</a>. </p>
<p>Those carrying out the study applied to nearly 3200 jobs, randomly varying the minority background of fictitious job applicants while holding their skills, qualifications and work experience constant.</p>
<p>They looked at high and low skill jobs. What I found particularly interesting was that the high skill jobs they looked at included <strong>software engineers</strong>. They found that there was no difference between applying for high or low skill jobs, you were going to be equally discriminated against.</p>
<p><img src="https://rehansaeed.com/racism-in-software-development-and-beyond/images/Chart.png" alt="Chart showing Middle Eastern &amp; North African&#39;s need to send 90% more job applications"></p>
<p>If you don&#39;t live in the UK, then as the study points out there is a similar situation in other countries. <strong>Spain</strong>, <strong>Germany</strong>, <strong>Netherlands</strong> and <strong>Norway</strong> are called out by name and <a href="https://www.nber.org/digest/sep03/w9873.html">here</a> is a similar study about the <strong>United States</strong>. Racism is a human condition, it affects everyone.</p>
<p>If you are from a majority ethic group, the next time you&#39;re at work (I hope we defeat this virus soon and can get back), take a look around at your colleagues. If one of them is from a minority, they were either very lucky or perhaps had to work harder than you to get the same job. They may even have had to be more qualified than you.</p>
<h1 id="economic-racism--physical-racism">Economic Racism &gt; Physical Racism</h1>
<p>When physical or verbal racist abuse occurs, people know about it, they can deal with it and hopefully move on. When people are discriminated against economically by not being able to get a job or perhaps getting a lower paid job, there is no way for them to know that they&#39;ve been discriminated against.</p>
<p>We <strong>know</strong> that if you&#39;re an ethnic minority in Britain, you&#39;re <a href="https://www.jrf.org.uk/report/poverty-rates-among-ethnic-groups-great-britain">more likely to live in poverty</a> and we <strong>know</strong> that that living in poverty means that you&#39;re more likely to have physical and mental health problems, you&#39;re less likely to do well in education, you&#39;re more likely to go to prison and you are liable to die sooner.</p>
<p>COVID-19 has revealed the contrast even more starkly. People from black, asian and minority ethnic (BAME) backgrounds have suffered from higher rates of death than their white counterparts. If you&#39;re black, you&#39;re <a href="https://www.theguardian.com/world/2020/jun/02/covid-19-death-rate-in-england-higher-among-bame-people">3.9 times more likely to die</a>. In a report <a href="https://www.theguardian.com/world/2020/jun/13/bma-demands-answers-over-missing-bame-pages-of-covid-19-report">the government tried to hide</a>, it was revealed that <a href="https://www.theguardian.com/world/2020/jun/16/historical-racism-may-be-behind-englands-higher-bame-covid-19-rate">historical racism plays a part</a>.</p>
<p>Hit a man in the face and he&#39;ll bleed for a day, hit a man in the pocket and he&#39;ll bleed for a lifetime.</p>
<h1 id="this-is-personal">This is Personal</h1>
<p>I was born and bred in East London but my parents are originally from Pakistan and I happen to be a Muslim too. As one of those people who has to send 40% more job applications according to the report above, this is kind of personal.</p>
<p>I have experienced direct verbal racist abuse before (Most people of any ethnic minority have at least once) but it&#39;s rare for me at least. I have also received abuse online on Twitter and even GitHub but it&#39;s par for the course online.</p>
<p>I do not know...I cannot know if I have ever been discriminated against when applying for jobs. If I had a different name, would I have been offered more chances? I don&#39;t think I would have but the statistics say differently. It did take me years of applying to get a job at Microsoft but so did one of my colleagues and in the end I did get one.</p>
<p>With that said I&#39;m also one of the lucky ones. If I think back to the people that hired me and gave me a chance in my first few jobs, I&#39;d really like to thank them.</p>
<h1 id="what-can-be-done">What Can be Done?</h1>
<p>Clearly there are many problems but I would hate to leave things there without suggesting potential solutions, so here are three.</p>
<h2 id="1-anonymous-job-applications">1. Anonymous Job Applications</h2>
<p>Anonymous job applications, where names are stripped from job applications are not as far fetched as you might think. They were trialled by <a href="https://www.independent.co.uk/news/uk/would-muslims-get-better-jobs-if-bosses-didn-t-know-they-were-muslim-a6690621.html">100 British firms in 2012</a>, backed by the former deputy prime minister Nick Clegg. Some still use the special software that enables this system but there is resistance from some employers.</p>
<p>Eventually, a candidate will have to meet someone in an in-person interview where there is no hiding their ethnicity but at least it will mean getting more ethnic minorities a foot in the door that they otherwise clearly are not getting according to the evidence.</p>
<h2 id="2-ethnicity-pay-gap-reporting">2. Ethnicity Pay Gap Reporting</h2>
<p>In the UK, if your company has more than 250 employees, you <a href="https://www.gov.uk/guidance/gender-pay-gap-reporting-overview">must report the gender pay gap</a> between your male and female employees. This has highlighted the disparity with <a href="https://www.theguardian.com/world/2019/apr/04/gender-pay-gap-figures-show-eight-in-10-uk-firms-pay-men-more-than-women">eight out of ten employers</a> paying men more than women.</p>
<p>Employers should be required to do the same for ethnicity. There is reportedly, a <a href="https://www.theguardian.com/money/2018/dec/27/uk-black-and-ethnic-minorities-lose-32bn-a-year-in-pay-gap">£3.2bn pound gap</a> in wages between ethnic minorities and their white colleagues doing the same jobs.</p>
<p><a href="https://www.writetothem.com/">Email your local member of parliament</a> and urge them to support the requirement for large firms to publish an ethnicity pay gap and perhaps anonymous job applications too.</p>
<h2 id="3-stop-putting-racists-in-power">3. Stop Putting Racists in Power</h2>
<p>My prime minister, Boris Johnson, once called black people <a href="https://www.telegraph.co.uk/comment/personal-view/3571742/If-Blairs-so-good-at-running-the-Congo-let-him-stay-there.html">&quot;piccaninnies&quot; with &quot;watermelon smiles&quot;</a>. When writing about the continent of Africa he said:</p>
<blockquote>
<p>The problem is not that we were once in charge, but that we are not in charge anymore.</p>
<footer><cite><a href="https://www.independent.co.uk/voices/boris-johnson-foriegn-secretary-us-press-questions-no-laughing-matter-hold-to-account-a7147766.html">Boris Johnson</a></cite></footer>
</blockquote>
<p>He&#39;s been anti-semitic too, writing an <a href="https://www.independent.co.uk/news/uk/politics/boris-johnson-book-jews-control-media-general-election-a9239346.html">entire book</a> about powerful Jews controlling the media and influencing elections.</p>
<p>He&#39;s made Islamophobic remarks about Muslim women looking like bank robbers and letterboxes that <a href="https://www.theguardian.com/politics/2019/sep/02/boris-johnsons-burqa-comments-led-to-surge-in-anti-muslim-attacks">caused an up-tick in violence</a> towards Muslim women with racists sometimes using Mr Johnson&#39;s exact words. This was apparently in an effort to help them he says. I hope he doesn&#39;t try helping anyone else.</p>
<p>That&#39;s not even the half of it, he&#39;s also insulted or abused half a dozen other groups of people. It&#39;s been fun to watch right wing politicians and political commentators contort themselves into strange shapes trying to defend his blatant racism.</p>
<p>The sad thing is, if you put a racist in power, many others follow them in their wake. The Conservative party is now <a href="https://twitter.com/miqdaad/status/1101781296639025152">riddled with racist members, councillors and even members of parliament</a>. The far right group Britain First has even said that <a href="https://www.theguardian.com/politics/2019/dec/28/britain-first-far-right-members-5000-have-joined-tories">5,000 of their members have even joined the Conservative party</a>.</p>
<p>The solution for me is clear. If you put a racist in charge, they build a whole pyramid of racists underneath them.</p>
<h1 id="conclusions">Conclusions</h1>
<p>As many others have said, it&#39;s not enough to be a passive non-racist in society. Over the last half a century, structural and institutional racism still pervades our society. It is necessary for us all to be actively working against racism. We also need to recognise that a lot of the inequalities we see come from implicit biases that <strong>all</strong> human beings have, including our own selves. If we recognise that we ourselves are deficient, perhaps we can do something about it.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spicing up your Browser Console]]></title>
        <id>https://rehansaeed.com/spicing-up-your-browser-console/</id>
        <link href="https://rehansaeed.com/spicing-up-your-browser-console/"/>
        <updated>2020-06-10T18:00:00.000Z</updated>
        <summary type="html"><![CDATA[Use figlet fonts, ASCII art and browser console themes to spice up your browser console.]]></summary>
        <content type="html"><![CDATA[<p>Wouldn&#39;t it be cool if when you opened the browser console up on a site, you saw a cool secret message? There are many sites that do this with quite a few business&#39;s advertising frontend development jobs in this way. I wanted to join in on the fun, so...I did. Here is my story of two hours I&#39;m not getting back.</p>
<p>I&#39;ve done some work on <a href="https://rehansaeed.com/colorful-console/">Colorful.Console</a> which is an amazing C# console library that lets you write text in ASCII art using <a href="https://en.wikipedia.org/wiki/FIGlet">figlet fonts</a>. I wanted to do the same for my blog. I was too lazy to use Colorful.Console and used a random <a href="https://www.askapache.com/online-tools/figlet-ascii/">online generator</a> I found. I tried a couple of different fonts out and came up with this JavaScript code:</p>
<pre><code class="language-js">const consoleOptions = &#39;background: #ffffff; color: #6b17e8&#39;;

// Standard Figlet Font
console.log(&#39;%c  ____      _                 &#39;, consoleOptions);
console.log(&#39;%c |  _ \\ ___| |__   __ _ _ __  &#39;, consoleOptions);
console.log(&#39;%c | |_) / _ \\ &#39;_ \\ / _` | &#39;_ \\ &#39;, consoleOptions);
console.log(&#39;%c |  _ &lt;  __/ | | | (_| | | | |&#39;, consoleOptions);
console.log(&#39;%c |_| \\_\\___|_| |_|\\__,_|_| |_|&#39;, consoleOptions);

// o8 Figlet Font
console.log(&#39;%c oooooooooo             oooo                              &#39;, consoleOptions);
console.log(&#39;%c  888    888 ooooooooo8  888ooooo    ooooooo   oo oooooo  &#39;, consoleOptions);
console.log(&#39;%c  888oooo88 888oooooo8   888   888   ooooo888   888   888 &#39;, consoleOptions);
console.log(&#39;%c  888  88o  888          888   888 888    888   888   888 &#39;, consoleOptions);
console.log(&#39;%c o888o  88o8  88oooo888 o888o o888o 88ooo88 8o o888o o888o&#39;, consoleOptions);
</code></pre>
<p>For the standard font, I had to escape quite a few characters using a back slash <code>\</code>, so watch out for that. The results in a browser console were pretty terrible and hard to read...</p>
<p><img src="https://rehansaeed.com/spicing-up-your-browser-console/images/First-Try-723x427.png" alt="My name rendered in ASCII art using a figlet font"></p>
<p>Notice that I passed options to the <code>console.log</code> API to set the background and foreground colour of the text. The Chrome browser adds a lot of space between lines and the font just looks a little anaemic and hard to read. I rooted around the Character Map app in Windows, to see if I could find a more substantial set of characters that would show up more brightly instead of using dashes, pipes and numbers. Then I found these: <code>▀ ▄ █ ▌ ▐ ▲ ► ▼ ◄</code>.</p>
<h1 id="my-final-form">My Final Form</h1>
<p>I took the o8 figlet font text above and simply did a find and replace on it. I replaced the <code>8</code> character with <code>█</code> and I also replaced the <code>o</code> character with <code>▄</code>:</p>
<pre><code class="language-js">console.log(&#39;%c ▄▄▄▄     ▄▄▄▄            ▄▄▄▄                                                                ▄▄▄▄&#39;, consoleOptions);
console.log(&#39;%c  ████▄   ███ ▄▄▄▄  ▄▄▄▄   ███▄▄▄▄▄    ▄▄▄▄▄▄▄   ▄▄ ▄▄▄ ▄▄▄▄   ▄▄ ▄▄▄ ▄▄▄▄    ▄▄▄▄▄▄▄    ▄▄▄▄▄███ &#39;, consoleOptions);
console.log(&#39;%c  ██ ███▄█ ██  ███   ███   ███   ███   ▄▄▄▄▄███   ███ ███ ███   ███ ███ ███   ▄▄▄▄▄███ ███    ███ &#39;, consoleOptions);
console.log(&#39;%c  ██  ███  ██  ███   ███   ███   ███ ███    ███   ███ ███ ███   ███ ███ ███ ███    ███ ███    ███ &#39;, consoleOptions);
console.log(&#39;%c ▄██▄  █  ▄██▄  ███▄██ █▄ ▄███▄ ▄███▄ ██▄▄▄██ █▄ ▄███▄███▄███▄ ▄███▄███▄███▄ ██▄▄▄██ █▄  ██▄▄▄███▄&#39;, consoleOptions);

console.log(&#39;%c ▄▄▄▄▄▄▄▄▄▄             ▄▄▄▄                              &#39;, consoleOptions);
console.log(&#39;%c  ███    ███ ▄▄▄▄▄▄▄▄▄█  ███▄▄▄▄▄    ▄▄▄▄▄▄▄   ▄▄ ▄▄▄▄▄▄  &#39;, consoleOptions);
console.log(&#39;%c  ███▄▄▄▄██ ███▄▄▄▄▄▄█   ███   ███   ▄▄▄▄▄███   ███   ███ &#39;, consoleOptions);
console.log(&#39;%c  ███  ██▄  ███          ███   ███ ███    ███   ███   ███ &#39;, consoleOptions);
console.log(&#39;%c ▄███▄  ██▄█  ██▄▄▄▄███ ▄███▄ ▄███▄ ██▄▄▄██ █▄ ▄███▄ ▄███▄&#39;, consoleOptions);

console.log(&#39;%c ▄▄▄▄▄▄▄▄█                                          ▄▄▄▄ &#39;, consoleOptions);
console.log(&#39;%c ███           ▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄█ ▄▄▄▄▄▄▄▄▄█  ▄▄▄▄▄███ &#39;, consoleOptions);
console.log(&#39;%c ███▄▄▄▄▄▄    ▄▄▄▄▄███  ███▄▄▄▄▄▄█ ███▄▄▄▄▄▄█ ███    ███ &#39;, consoleOptions);
console.log(&#39;%c         ███ ███    ███ ███        ███        ███    ███ &#39;, consoleOptions);
console.log(&#39;%c ▄██▄▄▄▄███   ██▄▄▄██ █▄  ██▄▄▄▄███  ██▄▄▄▄███  ██▄▄▄███▄&#39;, consoleOptions);
</code></pre>
<p>This seemed to work great and created a cool effect:</p>
<p><img src="https://rehansaeed.com/spicing-up-your-browser-console/images/Second-Try-1125x569.png" alt="My name rendered in ASCII art using a figlet font"></p>
<h1 id="conclusions">Conclusions</h1>
<p>All you need to do now is copy and paste that text somewhere in the main part of your app. Now, when someone opens the browser console, they&#39;ll see your cool surprise. You can hit ||F12|| right now and take a look at mine.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Choosing a Static Site Generator]]></title>
        <id>https://rehansaeed.com/choosing-a-static-site-generator/</id>
        <link href="https://rehansaeed.com/choosing-a-static-site-generator/"/>
        <updated>2020-06-09T19:19:49.000Z</updated>
        <summary type="html"><![CDATA[I choose a static site generator from among a long list including Jekyll, Gatsby, Statiq, Hugo, VuePress, Next.js, Nuxt.js and Gridsome.]]></summary>
        <content type="html"><![CDATA[<p>I recently rebuilt this blog using a static site generator called <a href="https://gridsome.org/">Gridsome</a> which is based on <a href="https://vuejs.org/">Vue.js</a> and <a href="https://graphql.org/">GraphQL</a>. This is the story of all the static site generators I tried or read up on, how I moved from WordPress to Gridsome and what I discovered along the way.</p>
<p>I want blogging to be as low friction as possible. Quite frankly if there is even a little friction, I&#39;ll stop writing posts which is what has kind of happened over the last couple of years where my output has definitely dropped.</p>
<h1 id="wordpress-was-giving-me-a-bad-time">WordPress was Giving Me a Bad Time</h1>
<p>I was using WordPress in the past which was achingly slow and a major barrier to writing posts. Thinking of writing a post in WordPress just put me off it altogether.</p>
<p>WordPress stores its posts in HTML. You can use markdown using the new Gutenberg plugin but if you want to edit the post after the fact, you&#39;re back to HTML.</p>
<p>The other issue is that WordPress gets hacked all the time because people don&#39;t keep it and any installed plugins up to date. However, I found over the years that when I upgraded a plugin, there was a 50% chance that something was going to break and another 20% chance that I wouldn&#39;t find out about it until a week later.</p>
<p>Plugins were the bane of my life. My code formatting plugin became unsupported without an easy alternative that I could migrate to. This meant I had to stick to an older version of PHP and wait for another plugin to add a migration path.</p>
<p>Finally, I was paying for hosting on Azure Web apps which isn&#39;t the simplest or cheapest option I could have gone with. It was time to move...</p>
<h1 id="static-vs-dynamic-sites">Static vs Dynamic Sites</h1>
<p>So why switch from a dynamic site like WordPress, to a statically generated site? I found so many reasons, some of which I hadn&#39;t thought of before I made the switch.</p>
<p>The obvious ones are that a static site is going to be faster and cheaper to run. A nice side effect of being faster is that search engines will also give you a little more link juice and rank you higher.</p>
<p>The biggest win for me was that I can now finally own my own content. It&#39;s strange to say that hosting my own WordPress site was not owning my own content but the fact is, I was not fully in control of the content that WordPress was generating. I became painfully aware of this after I had exported my posts from WordPress to markdown.</p>
<p>I had used certain plugins that formatted content strangely or I was using short codes which don&#39;t translate well. There were a myriad of issues. The amazing thing was that I could use VS Code to easily find and replace broken formatting with the help of some regular expression magic (I know enough to be dangerous!). The downside was that I had to manually go back, fix and check every blog post I&#39;d ever written.</p>
<p>At the end of the day, my content is now simple markdown files formatted to my liking. There is nothing simpler than a text file and I am finally in control. If I ever need to pick up and switch to a different static file generator, I can pick-up my content which is in an open, easy to move format and move it easily. I&#39;m never going back.</p>
<p>The other thing that I really loved was building the site itself. I have a folder of bookmarks containing cool little things you can do on the web that I have collected over the years. I put nearly all of it into practice, which was a lot of fun but did take me a couple of months to finish. It turns out, I love HTML, CSS and JavaScript but particularly CSS where visual feedback is instant and very satisfying.</p>
<h1 id="picking-a-static-site-generator">Picking a Static Site Generator</h1>
<p>Surveying the static site generator landscape was a dizzying experience. There didn&#39;t seem to be a clear winner at first, so this is what I found:</p>
<p>::: warning
I certainly didn&#39;t do an in-depth review of each static site generator. These are my personal views based on the limited knowledge, limited time looking at each project and in-built human biases I have.
:::</p>
<h2 id="jekyll">Jekyll</h2>
<p>The one that started it all, <a href="https://jekyllrb.com/">Jekyll</a> is backed by GitHub and has been going for a long time, which means it has a large community and lots of plugins. Hosting with GitHub pages was easy, since there were some nice integrations.</p>
<p>My only problem with it was that it was built on Ruby which in my experience a year ago, does not play well on Windows. I hope that has changed but I suppose you could use the Windows Subsystem for Linux (WSL) to run Ruby instead.</p>
<p><a href="https://khalidabuhakmeh.com/">Khalid Abuhakmeh</a> uses Jekyll and his blog looks pretty amazing, so well worth a look.</p>
<h2 id="gatsby">Gatsby</h2>
<p><a href="https://www.gatsbyjs.org/">Gatsby</a> is built with <a href="https://reactjs.org/">React</a> and <a href="https://graphql.org/">GraphQL</a>. Plugins can be used used to hook up various data sources like markdown files and GraphQL makes querying extremely simple.</p>
<p>I&#39;m not much of a React fan personally but if you are, it has a huge following, so community support and plugins are easy to find. Plus I cannot understate how much simpler the GraphQL plugins make it, to consume arbitrary content. Knowing GraphQL is important but it&#39;s not too difficult to learn.</p>
<h2 id="statiq">Statiq</h2>
<p><a href="https://statiq.dev/framework/">Statiq</a> is built on ASP.NET Core and uses Razor to write views. It&#39;s a very new static site generator and I believe is an evolution of another project called <a href="https://wyam.io/">Wyam</a>. If you&#39;re not too knowledgeable in web technologies and live in the C# and .NET space, this may be a really good choice for you.</p>
<h2 id="hugo">Hugo</h2>
<p>I&#39;ve heard a lot of good things about <a href="https://gohugo.io">Hugo</a>. It&#39;s built on Go. The community is pretty large and the project is pretty popular. If I hadn&#39;t gone with Gridsome, I would have liked to spend some more time with Hugo.</p>
<p>My only issue with Hugo having used Kubernetes Helm templates, was that I found the Go templating quite difficult to read due to the liberal use of brackets everywhere. However, the system is fairly intuitive to use.</p>
<pre><code class="language-html">{{ define &quot;main&quot; }}
    &lt;main aria-role=&quot;main&quot;&gt;
      &lt;header class=&quot;homepage-header&quot;&gt;
        &lt;h1&gt;{{.Title}}&lt;/h1&gt;
        {{ with .Params.subtitle }}
        &lt;span class=&quot;subtitle&quot;&gt;{{.}}&lt;/span&gt;
        {{ end }}
      &lt;/header&gt;
      &lt;div class=&quot;homepage-content&quot;&gt;&lt;/div&gt;
      &lt;div&gt;
        {{ range first 10 .Site.RegularPages }}
            {{ .Render &quot;summary&quot;}}
        {{ end }}
      &lt;/div&gt;
    &lt;/main&gt;
{{ end }}
</code></pre>
<h2 id="vuepress">VuePress</h2>
<p>I took a pretty deep dive into <a href="https://vuepress.vuejs.org/">Vuepress</a> which is built on <a href="https://vuejs.org/">Vue.js</a>. I&#39;m a huge fan of Vue.js due to its single file components which allow you to write HTML, JavaScript <strong>and</strong> CSS in a single file. React has a lot to say about the first two but leaves CSS up to you, which has led to the whole CSS-in-JS movement. Personally, I think writing simple CSS or SCSS is where it&#39;s at.</p>
<p>In the end though, I found that VuePress is not really geared towards building blogs, it&#39;s more geared towards documentation sites for open source projects. It does a really good job in that space.</p>
<h2 id="nuxtjsnextjs">Nuxt.js/Next.js</h2>
<p><a href="https://nuxtjs.org/">Nuxt.js</a> is a well known framework which uses <a href="https://vuejs.org/">Vue.js</a> in combination with server side rendering. <a href="https://nextjs.org/">Next.js</a> is a similar project for React. What some don&#39;t know is that you can also create static sites using these tools.</p>
<p>Nuxt.js recently released <a href="https://content.nuxtjs.org/">Nuxt Content</a> which allows you to drive content from Markdown files. This came too late for me to try but I&#39;d certainly take a deeper look the next time.</p>
<h2 id="gridsome">Gridsome</h2>
<p><a href="https://gridsome.org/">Gridsome</a> is the <a href="https://vuejs.org/">Vue.js</a> equivalent of Gatsby, in that it also uses the power of <a href="https://graphql.org/">GraphQL</a>.</p>
<p>There are a lot of plugins that can connect your static site to various sources of data using GraphQL. Want a data driven site? Want to consume some markdown, JSON, random images, content from WordPress or Ghost? Just install a plugin and write a simple GraphQL query.</p>
<p>In the end, I chose Gridsome for its simplicity. Its just HTML, SCSS and JavaScript at the end of the day (albeit in a single file component). It&#39;s the closest solution to the web and also why I really enjoy Vue.js.</p>
<h1 id="hosting-your-static-site">Hosting Your Static Site</h1>
<h2 id="netlify">Netlify</h2>
<p>I realized that a <strong>lot</strong> of people are using Netlify in my reading. It has a lot of nice little extra features but I personally didn&#39;t need any of them but they&#39;re worth a look. Netlify has a free tier but does ramp up to being quite costly after that, so beware and make sure your site doesn&#39;t use a lot of bandwidth.</p>
<h2 id="github-pages">GitHub Pages</h2>
<p>I chose to host my site on GitHub pages. It&#39;s free until GitHub thinks you&#39;re abusing it and asks you to move. It doesn&#39;t have any bells or whistles but it works. There are two issues I wish they would fix:</p>
<ol>
<li>Your GitHub project has to end with <code>.github.io</code>.</li>
<li>The branch containing the actual static files to be served has to be called <code>master</code> or <code>main</code>.</li>
</ol>
<p>With all that said, it&#39;s simple and there was one less thing I had to worry about, since my content was already on GitHub.</p>
<h1 id="conclusions">Conclusions</h1>
<p>I picked Gridsome and am pretty happy but you may have a different knowledge set and something else might suit you. Whatever makes you happy! The key is that writing blog posts needs to be low friction, so that you actually end up doing it.</p>
<p>In my next post, I&#39;ll talk about the features I look to build in a blog and which of them I think are essential to a good blog site.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ASP.NET Core Integration Testing & Mocking using Moq]]></title>
        <id>https://rehansaeed.com/asp-net-core-integration-testing-mocking-using-moq/</id>
        <link href="https://rehansaeed.com/asp-net-core-integration-testing-mocking-using-moq/"/>
        <updated>2020-01-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Mocking services using Moq while integration testing ASP.NET Core applications in memory.]]></summary>
        <content type="html"><![CDATA[<p>If you want to run an integration test for your ASP.NET Core app without also testing lots of external dependencies like databases and the like, then the <strong>lengthy</strong> official &#39;<a href="https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-2.2">Integration tests in ASP.NET Core</a>&#39; documentation shows how you can use stubs to replace code that talks to a database or some other external service. If you want to use mocks using <a href="https://github.com/moq/moq4">Moq</a>, this is where you run out of guidance and runway. It does in fact require a fair amount of setup to do it correctly and reliably without getting flaky tests.</p>
<h1 id="startup">Startup</h1>
<p>The <code>ConfigureServices</code> and <code>Configure</code> methods in your applications <code>Startup</code> class must be <code>virtual</code>. This is so that we can inherit from this class in our tests and replace production versions of certain services with mock versions.</p>
<pre><code class="language-cs">public class Startup
{
    private readonly IConfiguration configuration;
    private readonly IWebHostingEnvironment webHostingEnvironment;

    public Startup(
        IConfiguration configuration,
        IWebHostingEnvironment webHostingEnvironment)
    {
        this.configuration = configuration;
        this.webHostingEnvironment = webHostingEnvironment;
    }

    public virtual void ConfigureServices(IServiceCollection services) =&gt; ...

    public virtual void Configure(IApplicationBuilder application) =&gt; ...
}
</code></pre>
<h1 id="teststartup">TestStartup</h1>
<p>In your test project, inherit from the <code>Startup</code> class and override the <code>ConfigureServices</code> method with one that registers the mock and the mock object with IoC container.</p>
<p>I like to use strict mocks using <code>MockBehavior.Strict</code>, this ensures that nothing is mocked unless I specifically setup a mock.</p>
<pre><code class="language-cs">public class TestStartup : Startup
{
    private readonly Mock clockServiceMock;

    public TestStartup(
        IConfiguration configuration,
        IHostingEnvironment hostingEnvironment)
        : base(configuration, hostingEnvironment)
    {
        this.clockServiceMock = new Mock(MockBehavior.Strict);
    }

    public override void ConfigureServices(IServiceCollection services)
    {
        services
            .AddSingleton(this.clockServiceMock);

        base.ConfigureServices(services);

        services
            .AddSingleton(this.clockServiceMock.Object);
    }
}
</code></pre>
<h1 id="customwebapplicationfactory">CustomWebApplicationFactory</h1>
<p>In your test project, write a custom <code>WebApplicationFactory</code> that configures the <code>HttpClient</code> and resolves the mocks from the <code>TestStartup</code>, then exposes them as properties, ready for our integration test to consume them. Note that I&#39;m also changing the environment to <code>Testing</code> and telling it to use the <code>TestStartup</code> class for startup.</p>
<p>Note also that I&#39;ve implemented <code>IDisposable</code>&#39;s <code>Dispose</code> method to verify all of my strict mocks. This means I don&#39;t need to verify any mocks manually myself. Verification of all mock setups happens automatically when xUnit is disposing the test class.</p>
<pre><code class="language-cs">public class CustomWebApplicationFactory : WebApplicationFactory
    where TEntryPoint : class
{
    public CustomWebApplicationFactory()
    {
        this.ClientOptions.AllowAutoRedirect = false;
        this.ClientOptions.BaseAddress = new Uri(&quot;https://localhost&quot;);
    }

    public ApplicationOptions ApplicationOptions { get; private set; }

    public Mock ClockServiceMock { get; private set; }

    public void VerifyAllMocks() =&gt; Mock.VerifyAll(this.ClockServiceMock);

    protected override void ConfigureClient(HttpClient client)
    {
        using (var serviceScope = this.Services.CreateScope())
        {
            var serviceProvider = serviceScope.ServiceProvider;
            this.ApplicationOptions = serviceProvider
                .GetRequiredService&lt;IOptions&lt;ApplicationOptions&gt;&gt;().Value;
            this.ClockServiceMock = serviceProvider
                .GetRequiredService&lt;Mock&lt;IClockService&gt;&gt;();
        }

        base.ConfigureClient(client);
    }

    protected override void ConfigureWebHost(IWebHostBuilder builder) =&gt;
        builder
            .UseEnvironment(&quot;Testing&quot;)
            .UseStartup();

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            this.VerifyAllMocks();
        }

        base.Dispose(disposing);
    }
}
</code></pre>
<h1 id="integration-tests">Integration Tests</h1>
<p>I&#39;m using xUnit to write my tests. Note that the generic type passed to <code>CustomWebApplicationFactory</code> is <code>Startup</code> and not <code>TestStartup</code>. This generic type is used to find the location of your application project on disk and not to start the application.</p>
<p>I setup a mock in my test and I&#39;ve implemented <code>IDisposable</code> to verify all mocks for all my tests at the end but you can do this step in the test method itself if you like.</p>
<p>Note also, that I&#39;m not using xUnit&#39;s <code>IClassFixture</code> to only boot up the application once as the ASP.NET Core documentation tells you to do. If I did so, I&#39;d have to reset the mocks between each test and also you would only be able to run the integration tests serially one at a time. With the method below, each test is fully isolated and they can be run in parallel. This uses up more CPU and each test takes longer to execute but I think it&#39;s worth it.</p>
<pre><code class="language-cs">public class FooControllerTest : CustomWebApplicationFactory
{
    private readonly HttpClient client;
    private readonly Mock clockServiceMock;

    public FooControllerTest()
    {
        this.client = this.CreateClient();
        this.clockServiceMock = this.ClockServiceMock;
    }

    [Fact]
    public async Task GetFoo_Default_Returns200OK()
    {
        this.clockServiceMock
            .Setup(x =&gt; x.UtcNow)
            .ReturnsAsync(new DateTimeOffset(2000, 1, 1));

        var response = await this.client.GetAsync(&quot;/foo&quot;);

        Assert.Equal(HttpStatusCode.OK, response.StatusCode);
    }
}
</code></pre>
<h1 id="xunitrunnerjson">xunit.runner.json</h1>
<p>I&#39;m using xUnit. We need to turn off shadow copying, so any separate files like <code>appsettings.json</code> are placed in the right place beside the application DLL file. This ensures that our application running in an integration test can still read the <code>appsettings.json</code> file.</p>
<pre><code class="language-json">{
  &quot;shadowCopy&quot;: false
}
</code></pre>
<h1 id="appsettingstestingjson">appsettings.Testing.json</h1>
<p>Should you have configuration that you want to change just for your integration tests, you can add a <code>appsettings.Testing.json</code> file into your application. This configuration file will only be read in our integration tests because we set the environment name to &#39;Testing&#39;.</p>
<h2 id="working-examples">Working Examples</h2>
<p>If you&#39;d like to see an end to end working example of how this all works. You can create a project using the <a href="https://github.com/Dotnet-Boxed/Templates">Dotnet Boxed</a> <a href="https://github.com/Dotnet-Boxed/Templates/blob/main/Docs/API.md">API project template</a> or the <a href="https://github.com/Dotnet-Boxed/Templates/blob/main/Docs/GraphQL.md">GraphQL project template</a>.</p>
<h2 id="conclusions">Conclusions</h2>
<p>I wrote this because there is little to no information on how to combine ASP.NET Core with Moq in integration tests. I&#39;ve messed about with using <code>IClassFixture</code> as the ASP.NET Core documentation tells you to do and it&#39;s just not a good idea with Moq which needs a clean slate before each test. I hope this stops others going through much pain.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[What dotnet new Could Be]]></title>
        <id>https://rehansaeed.com/what-dotnet-new-could-be/</id>
        <link href="https://rehansaeed.com/what-dotnet-new-could-be/"/>
        <updated>2019-12-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[What the 'dotnet new' CLI command could be if some effort was spent on developing it. I compare it to other templating engines and suggest ideas.]]></summary>
        <content type="html"><![CDATA[<p>The &#39;<a href="https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates">dotnet new</a>&#39; CLI command is a great way to create projects from templates in dotnet. However, I think it could provide a much better experience than it currently does. I also suspect it isn&#39;t used much, mostly because templates authored for the <code>dotnet new</code> experience are not included in the <code>Visual Studio File -&gt; New Project</code> experience. For template authors, the experience of developing templates could do with some improvements. I tweeted about it this morning and got asked to write a short gist about what could be improved, so this is that list.</p>
<p><a href="https://twitter.com/RehanSaeedUK/status/1211663043840684036?s=20"><img src="https://rehansaeed.com/what-dotnet-new-could-be/images/Twitter.png" alt="Any plans to improve the dotnet new templating engine? Lots of unfixed bugs. Lots of rough edges needing smoothing. A &#39;dotnet new ui&#39; command to create projects using a visual editor would be cool"></a></p>
<h2 id="why-do-i-care">Why do I Care?</h2>
<p>I author a <a href="https://github.com/Dotnet-Boxed/Templates/blob/main/Docs/API.md">Swagger API</a>, <a href="https://github.com/Dotnet-Boxed/Templates/blob/main/Docs/GraphQL.md">GraphQL API</a>, <a href="https://github.com/Dotnet-Boxed/Templates/blob/main/Docs/Orleans.md">Microsoft Orleans</a> and <a href="https://github.com/Dotnet-Boxed/Templates/blob/main/Docs/NuGet.md">NuGet</a> project templates in my <a href="https://github.com/Dotnet-Boxed/Templates">Dotnet Boxed</a> project. The project currently has 1,900 stars on GitHub and the <a href="https://www.nuget.org/packages/Boxed.Templates/">Boxed.Templates</a> NuGet package has around 12,149 downloads at the time of writing. The Dotnet Boxed templates are also some of the more complex templates using <code>dotnet new</code>. They all have a dozen or more optional features.</p>
<h2 id="visual-studio-integration">Visual Studio Integration</h2>
<p>In the past, I also authored the <a href="https://marketplace.visualstudio.com/items?itemName=RehanSaeed.ASPNETMVCBoilerplate">ASP.NET Core Boilerplate</a> project templates which are published as a Visual Studio extension. This extension currently has 159,307 installs which is an order of magnitude more than the 12,149 installs of my <code>dotnet new</code> based <code>Boxed.Templates</code> NuGet package.</p>
<p>I have read in the <a href="https://github.com/dotnet/templating">dotnet/templating</a> GitHub issues that there is eventually going to be Visual Studio integration in which you&#39;d be able to search and install <code>dotnet new</code> based templates on NuGet, and then create projects from those templates much as you would with Visual Studio today. Given the download counts of my two projects, this would be the number one feature I&#39;d like to see implemented.</p>
<p>You could create a Visual Studio extension that wraps your <code>dotnet new</code> templates but having messed around with them in the past, it&#39;s a lot of effort. I&#39;m in the template making business, not in the extension making business. Also, given the above rumour, I&#39;ve held off going this route.</p>
<h2 id="nugetvisual-studio-marketplace-integration">NuGet/Visual Studio Marketplace Integration</h2>
<p>Currently there is no way to search for a list of all <code>dotnet new</code> based project templates on NuGet or on the Visual Studio marketplace. There is <a href="https://github.com/dotnet/templating/wiki/Available-templates-for-dotnet-new">this list</a> buried in the <a href="https://github.com/dotnet/templating">dotnet/templating</a> GitHub project but the only people who are going to find that are template authors. It would be great if there was some kind of marketplace or store to find templates, rate them, provide feedback etc.</p>
<h2 id="dotnet-new-ui">dotnet new ui</h2>
<p>If you&#39;ve seen the <a href="https://cli.vuejs.org/guide/creating-a-project.html#using-the-gui">Vue CLI</a>, it has a magical UI for creating projects from it&#39;s template. This is the benchmark by which I now measure all project creation experiences. Just take a look at it&#39;s majesty:</p>
<p><img src="https://rehansaeed.com/what-dotnet-new-could-be/images/Vue-CLI-Create-a-New-Project-1024x828.png" alt="Vue CLI Create a New Project"></p>
<p>Imagine executing <code>dotnet new ui</code>, then seeing a nice browser dialogue popup like the one above where you could find, install and even create projects from templates. Creating a project would involve entering the name of your project, the directory where you want it to be saved and then toggling any custom options that the project template might offer.</p>
<p>That last bit is where having a UI shines. There aren&#39;t many <code>dotnet new</code> templates that use the templating engine to it&#39;s full potential and have additional optional features. When you use the current command line experience it&#39;s unwieldy and slow to set custom options. Having a custom UI with some check boxes and drop downs would be a far quicker and more delightful experience.</p>
<h2 id="missing-features">Missing Features</h2>
<p>There are a bunch of cool missing or half implemented features in the <code>dotnet new</code> templating engine that could use finishing. Chief among these are called post actions. These are a set of custom actions that can be performed once your project has been created.</p>
<p>As far as I can work out, the only post action that works is the one that restores all NuGet packages in your project. This was implemented because the basic Microsoft project templates wanted to use them but I understand that they no longer do for reasons unknown to me. Happily I still use this one and it works nicely.</p>
<p>Other post actions that are half implemented (They exist and you can use them but they just print content to the console) are for opening files in the editor, opening files or links in the web browser or even running arbitrary scripts. The last one has the potential for being a security risk however, so it would be better to have a health list of post actions for specific tasks. I&#39;d love to be able to open the ReadMe.md file that ships with my project template.</p>
<p>In terms of new post actions, I&#39;d really like to see one that removes and sorts using statements. I have a lot of optional pieces of code in my project templates, so I have to have a lot of <code>#if</code> <code>#endif</code> code to tell the templating engine which lines of code to remove. It&#39;s particularly easy to get this wrong with using statements, leaving you with a fresh project that doesn&#39;t compile because you&#39;ve removed one too many using statements by accident. To avoid this, I created my own unit testing framework for <code>dotnet new</code> projects called <a href="https://github.com/Dotnet-Boxed/Framework#boxeddotnetnewtest">Boxed.DotnetNewTest</a>.</p>
<h2 id="docs-docs--docs">Docs, Docs &amp; Docs</h2>
<p>There is <a href="https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates">one page of documentation</a> on how to create project templates in the official docs page. There is a bunch more in the <a href="https://github.com/dotnet/templating/wiki">dotnet/templating wiki</a> and some crucial bits of information in comments of GitHub issues. In particular, there is precious little information about how to conditionally remove code or files based on options the user selects. There is also very little about post actions. It would be great if this could be tidied up.</p>
<p>Secondary to the docs is the <a href="https://github.com/dotnet/templating/issues">GitHub issues</a> . There are currently 168 open issues with a large number having only one comment from the original author. Given the lack of documentation, having questions answered is really important.</p>
<h2 id="fixing-bugs">Fixing Bugs</h2>
<p>The latest version of the <code>dotnet</code> CLI has fixed some bugs but there are still a few that really get in the way of a great experience:</p>
<ul>
<li><a href="https://github.com/dotnet/templating/issues/1544">#1544</a>/<a href="https://github.com/dotnet/templating/issues/348">#348</a> - Running <code>dotnet new foo --help</code> outputs some pretty terrible looking text if you have any custom options.</li>
<li><a href="https://github.com/dotnet/templating/issues/2208">#2208</a> - You cannot conditionally remove text from a file if it has no file extension, so that means <code>Dockerfile</code>, <code>.gitignore</code>, <code>.editorconfig</code> files.</li>
<li><a href="https://github.com/dotnet/templating/issues/2209">#2209</a> - Complex conditionals fail if not wrapped in parentheses. I always forget to do this. There is no warnings, your template won&#39;t work.</li>
<li><a href="https://github.com/dotnet/templating/issues/1438">#1438</a> - Using conditional code in <code>.csproj</code> files requires some workarounds to work.</li>
</ul>
<h2 id="conclusions">Conclusions</h2>
<p>The Vue CLI has really shown how great a new project creation experience can be. With a bit of work, the <code>dotnet new</code> experience could be just as great.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unit Testing dotnet new Templates]]></title>
        <id>https://rehansaeed.com/unit-testing-dotnet-new-templates/</id>
        <link href="https://rehansaeed.com/unit-testing-dotnet-new-templates/"/>
        <updated>2019-08-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[It's difficult to know if your 'dotnet new' based project will work if they have lots of options, in this post I show how to unit test them.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/custom-project-templates-using-dotnet-new/">dotnet new - Custom Project Templates Using dotnet new</a></li>
<li><a href="https://rehansaeed.com/dotnet-new-feature-selection/">dotnet new - dotnet new Feature Selection</a></li>
<li><a href="https://rehansaeed.com/unit-testing-dotnet-new-templates/">dotnet new - Unit Testing dotnet new Templates</a></li>
</ol>
<p>As I talked about in my previous post some time ago about <code>dotnet new</code> project templates, it&#39;s possible to enable feature selection, so that developers can toggle certain features of a project template on or off. This is not a feature that many templates in the wild use a lot. Quite often I&#39;ve seen templates have no optional features or only a few. One reason is that it gets very complicated to test that toggling your optional features doesn&#39;t break the generated project in some way by stopping it from building for example. This is why I decided to write a small unit test helper library for <code>dotnet new</code> project templates. It is unit test framework agnostic and can work with xUnit, NUnit, MSTest or any other unit test framework.</p>
<h2 id="example-usage">Example Usage</h2>
<p>Below is an example showing how you can use it inside an xUnit test project.</p>
<pre><code class="language-cs">public class ApiTemplateTest
{
    public ApiTemplateTest() =&gt; DotnetNew.Install&lt;ApiTemplateTest&gt;(&quot;ApiTemplate.sln&quot;).Wait();

    [Theory]
    [InlineData(&quot;StatusEndpointOn&quot;, &quot;status-endpoint=true&quot;)]
    [InlineData(&quot;StatusEndpointOff&quot;, &quot;status-endpoint=false&quot;)]
    public async Task RestoreAndBuild_CustomArguments_IsSuccessful(string name, params string[] arguments)
    {
        using (var tempDirectory = TempDirectory.NewTempDirectory())
        {
            var dictionary = arguments
                .Select(x =&gt; x.Split(&#39;=&#39;, StringSplitOptions.RemoveEmptyEntries))
                .ToDictionary(x =&gt; x.First(), x =&gt; x.Last());
            var project = await tempDirectory.DotnetNew(&quot;api&quot;, name, dictionary);
            await project.DotnetRestore();
            await project.DotnetBuild();
        }
    }

    [Fact]
    public async Task Run_DefaultArguments_IsSuccessful()
    {
        using (var tempDirectory = TempDirectory.NewTempDirectory())
        {
            var project = await tempDirectory.DotnetNew(&quot;api&quot;, &quot;DefaultArguments&quot;);
            await project.DotnetRestore();
            await project.DotnetBuild();
            await project.DotnetRun(
                @&quot;Source\DefaultArguments&quot;,
                async (httpClient, httpsClient) =&gt;
                {
                    var httpResponse = await httpsClient.GetAsync(&quot;status&quot;);
                    Assert.Equal(HttpStatusCode.OK, httpResponse.StatusCode);
                });
        }
    }
}
</code></pre>
<p>The first thing it does in the constructor is install the <code>dotnet new</code> project templates in your solution. It needs to know the name of the solution file. It then walks the sub-directory tree below your solution file and installs all project templates for you.</p>
<p>If we then look at the first unit test, we first need a temporary directory, where we can create a project from our <code>dotnet new</code> project template. We will generate a project from the template in this directory and then delete the directory at the end of the test. We then run <code>dotnet new</code> with the name of a project template, the name we want to give to the generated project and any custom arguments that particular project template supports. Using xUnit, I&#39;ve parametrised the arguments, so we can run multiple tests while tweaking the arguments for each test. Running <code>dotnet new</code> returns a project which contains some metadata about the project that we&#39;ve just created and we can also use it to further <code>dotnet</code> commands against.</p>
<p>Finally, we run <code>dotnet restore</code> and <code>dotnet build</code> against the project. So this test ensures that toggling the <code>StatusEndpointOn</code> option on our project template doesn&#39;t stop the generated project from restoring NuGet packages or building successfully.</p>
<p>The second unit test method is where it gets really cool. If the project template is an ASP.NET Core project, we can use <code>dotnet run</code> to start the project listening on some random free ports on the machine. The unit test framework then gives you two <code>HttpClient</code>&#39;s (One for HTTP and one for HTTPS) with which to call your newly generated project. In summary, not only can you test that the generated projects build, you can test that the features in your generated project work as they should.</p>
<p>This API is pretty similar to the ASP.NET Core <code>TestHost</code> API that also gives you a <code>HttpClient</code> to test the API with. The difference is that this framework is actually running the app using the <code>dotnet run</code> command. I have experimented with using the <code>TestHost</code> API to run the generated project in memory, so it could be run a bit faster but the .NET Core API&#39;s for dynamically loading DLL files needs some work which .NET Core 3.0 might solve.</p>
<h2 id="where-to-get-it">Where To Get It?</h2>
<p>You can download the <a href="https://www.nuget.org/packages/Boxed.DotnetNewTest/">Boxed.DotnetNewTest</a> NuGet package or see the <a href="https://github.com/Dotnet-Boxed/Framework#boxeddotnetnewtest">source code</a> on GitHub.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[.gitattributes Best Practices]]></title>
        <id>https://rehansaeed.com/gitattributes-best-practices/</id>
        <link href="https://rehansaeed.com/gitattributes-best-practices/"/>
        <updated>2019-07-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Best practices for configuring Git in the .gitattributes file. Configuring CRLF and LF line endings. Configuring Git Large File System (LFS) for binary files.]]></summary>
        <content type="html"><![CDATA[<p>::: tip Update (2020-08-04)
Added some more information about CRLF line endings for <code>.cmd</code> and <code>.bat</code> files. Also added a section about Git LFS support on GitHub.
:::</p>
<h2 id="gitignore">.gitignore</h2>
<p>If you&#39;ve messed with Git for long enough, you&#39;re aware that you can use the .gitignore file to exclude files from being checked into your repository. There is even a whole <a href="https://github.com/github/gitignore">GitHub repository</a> with nothing but pre-made <code>.gitignore</code> files you can download. If you work with anything vaguely in the Microsoft space with Visual Studio, you probably want the <a href="https://github.com/github/gitignore/blob/master/VisualStudio.gitignore">&#39;Visual Studio&#39; .gitignore file</a>.</p>
<h2 id="gitattributes">.gitattributes</h2>
<p>There is a lesser know <a href="https://www.git-scm.com/docs/gitattributes">.gitattributes</a> file that can control a bunch of Git settings that you should consider adding to almost <strong>every</strong> repository as a matter of course.</p>
<h3 id="line-endings">Line Endings</h3>
<p>If you&#39;ve studied a little computer science, you&#39;ll have seen that operating systems use different characters to represent line feeds in text files. Windows uses a Carriage Return (CR) followed by the Line Feed (LF) character, while Unix based operating systems use the Line Feed (LF) alone. All of this has it&#39;s origin in typewriters which is pretty amazing given how antiquated they are. I recommend reading the <a href="https://en.wikipedia.org/wiki/Newline">Newline Wikipedia article</a> for more on the subject.</p>
<p>Newline characters often cause problems in Git when you have developers working on different operating systems (Windows, Mac and Linux). If you&#39;ve ever seen a phantom file change where there are no visible changes, that could be because the line endings in the file have been changed from CRLF to LF or vice versa.</p>
<p>Git can actually be configured to automatically handle line endings using a setting called <a href="https://help.github.com/en/articles/configuring-git-to-handle-line-endings">autocrlf</a>. This automatically changes the line endings in files depending on the operating system. However, you shouldn&#39;t rely on people having correctly configured Git installations. If someone with an incorrect configuration checked in a file, it would not be easily visible in a pull request and you&#39;d end up with a repository with inconsistent line endings.</p>
<p>The solution to this is to add a <code>.gitattributes</code> file at the root of your repository and set the line endings to be automatically normalised like so:</p>
<pre><code class="language-git"># Set default behavior to automatically normalize line endings.
* text=auto

# Force batch scripts to always use CRLF line endings so that if a repo is accessed
# in Windows via a file share from Linux, the scripts will work.
*.{cmd,[cC][mM][dD]} text eol=crlf
*.{bat,[bB][aA][tT]} text eol=crlf

# Force bash scripts to always use LF line endings so that if a repo is accessed
# in Unix via a file share from Windows, the scripts will work.
*.sh text eol=lf
</code></pre>
<p>Only the first line is strictly necessary. It hard codes the line endings for Windows cmd and batch scripts to CRLF and bash scripts to be LF, so that they can be executed via a file share. It&#39;s a practice I picked up from the <a href="https://github.com/dotnet/corefx/blob/master/.gitattributes">corefx repository</a>.</p>
<h3 id="git-large-file-system-lfs">Git Large File System (LFS)</h3>
<p>It&#39;s pretty common to want to check binary files into your Git repository. Building a website for example, involves images, fonts, maybe some compressed archives too. The problem with these binary files is that they bloat the repository a fair bit. Every time you check-in a change to a binary file, you&#39;ve now got both files saved in Git&#39;s history. Over time this bloats the repository and makes cloning it slow. A much better solution is to use <a href="https://git-lfs.github.com/">Git Large File System (LFS)</a>. LFS stores binary files in a separate file system. When you clone a repository, you only download the latest copies of the binary files and not every single changed version of them.</p>
<p>LFS is supported by most source control providers like GitHub, Bitbucket and Azure DevOps. It a plugin to Git that has to be separately installed (It&#39;s a checkbox in the Git installer) and it even has it&#39;s own CLI command &#39;git lfs&#39; so you can run queries and operations against the files in LFS. You can control which files fall under LFS&#39;s remit in the <code>.gitattributes</code> file like so:</p>
<pre><code class="language-git"> # Archives
*.7z filter=lfs diff=lfs merge=lfs -text
*.br filter=lfs diff=lfs merge=lfs -text
*.gz filter=lfs diff=lfs merge=lfs -text
*.tar filter=lfs diff=lfs merge=lfs -text
*.zip filter=lfs diff=lfs merge=lfs -text

# Documents
*.pdf filter=lfs diff=lfs merge=lfs -text

# Images
*.gif filter=lfs diff=lfs merge=lfs -text
*.ico filter=lfs diff=lfs merge=lfs -text
*.jpg filter=lfs diff=lfs merge=lfs -text
*.png filter=lfs diff=lfs merge=lfs -text
*.psd filter=lfs diff=lfs merge=lfs -text
*.webp filter=lfs diff=lfs merge=lfs -text

# Fonts
*.woff2 filter=lfs diff=lfs merge=lfs -text

# Other
*.exe filter=lfs diff=lfs merge=lfs -text 
</code></pre>
<p>So here I&#39;ve added a whole list of file extensions for various file types I want to be controlled by Git LFS. I tell Git that I want to filter, diff and merge using the LFS tool and finally the <code>-text</code> argument tells Git that this is not a text file, which is a strange way to tell it that it&#39;s a binary file.</p>
<p>A quick warning about adding LFS to an existing repository with existing binary files checked into it. The existing binary files will be checked into Git and not LFS without rewriting Git history which would be bad and you shouldn&#39;t do unless you are the only developer. You will have to add a one off commit to take the latest versions of all binary files and add them to LFS. Everyone who uses the repository will also have to re-clone the repository (I found this out the hard way in a team of 15 people. Many apologies were made over the course of a week). Ideally you add this from day one and educate developers about Git&#39;s treatment of binary files, so people don&#39;t check-in any binary files not controlled by LFS.</p>
<h3 id="github">GitHub</h3>
<p>GitHub does technically provide Git LFS for free but they limit the bandwidth to 1GB. If your repository is public and you have any traffic going to your site whatsoever, you will get through that very quickly. GitHub charges $5 per month for a data pack which gives you 50GB of bandwidth per month which I&#39;ve found is enough for a moderately popular GitHub repository.</p>
<p>I really don&#39;t understand why GitHub charges for Git LFS because people who don&#39;t want to pay are just going to check in binary files in Git instead which presumably would cost them more bandwidth. Surely they should be encouraging it&#39;s use by making it free?</p>
<h3 id="binary-files">Binary Files</h3>
<p>When talking about the <code>.gitattributes</code> file, you will quite often hear some people talk about explicitly listing all binary files instead of relying on Git to auto-detect binary files (yes Git is clever enough to do that) like this:</p>
<pre><code class="language-git"># Denote all files that are truly binary and should not be modified.
*.png binary
*.jpg binary
</code></pre>
<p>As you saw above, we already do this with Git LFS but if you don&#39;t use LFS, read on as you may need to explicitly list binary files in certain rare circumstances.</p>
<p>I was interested so I asked a <a href="https://stackoverflow.com/questions/57030698/do-i-really-need-to-specify-all-binary-files-in-gitattributes">Stack Overflow question</a> and got great answers. If you look at the <a href="https://github.com/git/git/blob/9c9b961d7eb15fb583a2a812088713a68a85f1c0/xdiff-interface.c#L187-L193">Git source code</a>, it checks first 8,000 bytes of a file to see if it contains a NUL character. If it does, the file is assumed to be binary. However, there are cases where you may need to do it explicitly:</p>
<ul>
<li>UTF-16 encoded files could be mis-detected as binary.</li>
<li>Some image format or file that consists only of printable ASCII bytes. This is pretty weird and sounds unlikely to happen.</li>
</ul>
<h2 id="final-form">Final Form</h2>
<p>This is what the final <code>.gitattributes</code> file I copy to most repositories looks like:</p>
<pre><code class="language-git">###############################
# Git Line Endings            #
###############################

# Set default behaviour to automatically normalize line endings.
* text=auto

# Force batch scripts to always use CRLF line endings so that if a repo is accessed
# in Windows via a file share from Linux, the scripts will work.
*.{cmd,[cC][mM][dD]} text eol=crlf
*.{bat,[bB][aA][tT]} text eol=crlf

# Force bash scripts to always use LF line endings so that if a repo is accessed
# in Unix via a file share from Windows, the scripts will work.
*.sh text eol=lf

###############################
# Git Large File System (LFS) #
###############################

# Archives
*.7z filter=lfs diff=lfs merge=lfs -text
*.br filter=lfs diff=lfs merge=lfs -text
*.gz filter=lfs diff=lfs merge=lfs -text
*.tar filter=lfs diff=lfs merge=lfs -text
*.zip filter=lfs diff=lfs merge=lfs -text

# Documents
*.pdf filter=lfs diff=lfs merge=lfs -text

# Images
*.gif filter=lfs diff=lfs merge=lfs -text
*.ico filter=lfs diff=lfs merge=lfs -text
*.jpg filter=lfs diff=lfs merge=lfs -text
*.pdf filter=lfs diff=lfs merge=lfs -text
*.png filter=lfs diff=lfs merge=lfs -text
*.psd filter=lfs diff=lfs merge=lfs -text
*.webp filter=lfs diff=lfs merge=lfs -text

# Fonts
*.woff2 filter=lfs diff=lfs merge=lfs -text

# Other
*.exe filter=lfs diff=lfs merge=lfs -text
</code></pre>
<h2 id="conclusions">Conclusions</h2>
<p>All of the above are bits and pieces I&#39;ve put together over time. Are there any other settings that should be considered best practice and added to any <code>.gitattributes</code> file?</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git Cloning the Windows OS Repo]]></title>
        <id>https://rehansaeed.com/git-cloning-the-windows-os-repo/</id>
        <link href="https://rehansaeed.com/git-cloning-the-windows-os-repo/"/>
        <updated>2019-06-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[My experiences of cloning and working on the Windows OS Git repository.]]></summary>
        <content type="html"><![CDATA[<p>::: warning Disclaimer
I&#39;m a Microsoft employee but my opinions in this personal blog post are my own and nothing to do with Microsoft. The information in this blog post is already publicly available and I talk in very general terms.
:::</p>
<p>I recently had the unique opportunity to git clone the Windows OS repository. For me as a developer, I think that has got to be a bucket list (a list of things to do before you die) level achievement!</p>
<p>A colleague who was doing some work in the repo was on leave and the task of completing the job unexpectedly fell on me to finish up. I asked around to see if anyone had any pointers on what to do and I was pointed towards an Azure DevOps project. The first thing I naively tried was running:</p>
<pre><code class="language-powershell">git clone https://microsoft.fake.com/foo/bar/os
</code></pre>
<p>This gave me the very helpful error:</p>
<pre><code>remote: This repo requires GVFS. Ensure the version of git you are using supports GVFS.
fatal: protocol error: bad pack header
</code></pre>
<p>This triggered a memory in the dark recesses of my mind about <a href="https://devblogs.microsoft.com/devops/announcing-gvfs-git-virtual-file-system/">GVFS (Git Virtual File System)</a>. The Windows OS repository is around 250GB in size. When you consider that there are tens or maybe hundreds of developers committing changes every day, you are not going to have a very pleasant developer experiences if you just used Git and tried to pull all 250GB of files. So GVFS abstracts away the file system and only downloads files when you try to access them.</p>
<p>The Windows OS has a very large and thorough internal Wiki. This wiki has sections covering all areas of the Windows OS going back for years. After a short time searching the wiki I discovered a very thorough getting started guide for new developers.</p>
<p>The getting started guide involves running some PowerShell files which install a very specific but recent version of Git and setting up GVFS. Interestingly, you can also optionally point your Git client at a cache server to speed up git commands. There are a few cache servers all over the world to choose from. Finally, there is a VS Code extension specific to the OS repo that gives you some extra intelli-sense, very fancy.</p>
<p>Even though pulling the code using GVFS should in theory only pull what you need at any given time, it still took a fair amount of time to get started. Standard git commands still worked but took tens of seconds to execute, so you had to be pretty sure of what you were doing.</p>
<p>At this point a colleague warned against using &#39;find in files&#39;, as this would cause GVFS to pull all files to disk. I think search would do the same. An alternative approach I used instead was to search via the Azure DevOps website where you can view all files in any repo.</p>
<p>Once I&#39;d had a chance to have a root around the repo, I realised that it was probably the largest folder structure I&#39;d ever seen. There are many obscure sounding folders like &#39;ds&#39; and &#39;net&#39;. The reason for the wiki&#39;s existence became clear.</p>
<p>Other random things I found was that the repo contains an &#39;src&#39; folder just like a lot of other repositories. There is a tonne of file extensions I&#39;ve never seen or heard of before and there are binaries checked into the repo which seems suboptimal on the face of it. I even found the <code>Newtonsoft.Json</code> binary in there.</p>
<p>I was pleasantly surprised to see an <code>.editorconfig</code> file in the repo. It turns out that spaces are preferred over tabs and line endings are CRLF (I don&#39;t know what else I expected).</p>
<p>There is a tools folder with dozens of tools in it. In fact, I had to use one of these tools to get my job done. The tool I used was a package manager a bit like NuGet. You can use a CLI tool to version and upload a folder of files. This made sense. The OS repo does not a mono repo in that it doesn&#39;t contain every line of code in Windows. There are many other repositories that package up and upload their binaries using this tool.</p>
<p>Some further reading on this package manager and I discovered that the Windows OS does some de-duplication of files to save space. I&#39;m guessing they still have to fit Windows onto a DVD (How quaint, do people still use DVD&#39;s?), so file size is important.</p>
<p>While trying to figure out how to use the package manager, I accidentally executed a search through all packages. Text came streaming down the page like in the Matrix. Eventually I managed to fumble the right keys on the keyboard to cancel the search.</p>
<p>Once I&#39;d finished with my changes I checked in and found that I had to rebase because newer commits were found on the server. I re-based as normal, except for the very long delay in executing git commands.</p>
<p>Once I&#39;d finally pushed the branch containing my changes up to the server, I created a pull request in Azure DevOps. As soon as I&#39;d done that, I got inundated with emails from Azure Pipelines telling me that a build had started and various reviewers had been added to my pull request.</p>
<p>The Azure Pipelines build only took 25 minutes to complete. A quick look shows a bunch of builds with five hours or more. I&#39;m guessing that my changes had only gone through a cursory initial build to make sure nothing was completely broken.</p>
<p>A few days later I got a notification telling me my pull request had been merged. All I did was change a few config files and upload a package or two, but it was an interesting experience none the less.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Securing ASP.NET Core in Docker]]></title>
        <id>https://rehansaeed.com/securing-asp-net-core-in-docker/</id>
        <link href="https://rehansaeed.com/securing-asp-net-core-in-docker/"/>
        <updated>2019-03-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to secure your ASP.NET Core Docker image by setting the file system to be read-only. First in a series of blog posts covering Docker image security.]]></summary>
        <content type="html"><![CDATA[<p>::: warning Update (2020-10-12)
Making the file system for an ASP.NET Core application read-only is great for security but under high load ASP.NET Core can buffer requests to disk. In this scenario, you will see exceptions. So weight the positives and negatives of doing this.
:::</p>
<p>Some time ago, I blogged about how you can get some <a href="https://rehansaeed.com/docker-read-file-systems/">extra security when running Docker containers</a> by making their file systems read-only. This ensures that should an attacker get into the container somehow, they won&#39;t be able to change any files. This only works with certain containers that support it however and unfortunately, at that time ASP.NET Core did not support running in a Docker container with a read-only file system. Happily, this is now fixed!</p>
<p>Lets see an example. I created a brand new hello world ASP.NET Core project and added this <code>Dockerfile</code>:</p>
<pre><code class="language-dockerfile">FROM microsoft/dotnet:2.2-sdk AS builder
WORKDIR /source
COPY *.csproj .
RUN dotnet restore
COPY . .
RUN dotnet publish --output /app/ --configuration Release

FROM microsoft/dotnet:2.2-aspnetcore-runtime
WORKDIR /app
COPY --from=builder /app .
ENTRYPOINT [&quot;dotnet&quot;, &quot;ReadOnlyTest.dll&quot;]
</code></pre>
<p>I build the Docker image using this command:</p>
<pre><code class="language-powershell">docker build -t read-only-test .
</code></pre>
<p>If I run this image with a read-only file system:</p>
<pre><code class="language-powershell">docker run --rm --read-only -it -p 8000:80 read-only-test
</code></pre>
<p>This outputs the following error as read-only file systems are not supported by default:</p>
<pre><code>Failed to initialize CoreCLR, HRESULT: 0x80004005
</code></pre>
<p>If I now run the same image with the <code>COMPlus_EnableDiagnostics</code> environment variable turned off:</p>
<pre><code class="language-powershell">docker run --rm --read-only -it -p 8000:80 -e COMPlus_EnableDiagnostics=0 read-only-test
</code></pre>
<p>The app now starts! The <code>COMPlus_EnableDiagnostics</code> environment variable (which is <a href="https://docs.microsoft.com/en-us/dotnet/core/run-time-config/debugging-profiling#enable-diagnostics">documented here</a>) turns off debugging and profiling support, so I would not bake this environment variable into the <code>Dockerfile</code>. For some reason these features need a read/write file system to work properly. If you&#39;d like to try this yourself, you can checkout all the code in <a href="https://github.com/RehanSaeed/ReadOnlyDockerTest">this repo</a>.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Simple and Fast Object Mapper]]></title>
        <id>https://rehansaeed.com/a-simple-and-fast-object-mapper/</id>
        <link href="https://rehansaeed.com/a-simple-and-fast-object-mapper/"/>
        <updated>2019-03-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[.NET Boxed mapper is an object to object mapper that is simpler and faster than Automapper and makes zero allocations of memory, thus making the garbage collector do less work.]]></summary>
        <content type="html"><![CDATA[<p>I have a confession to make...I don&#39;t use <a href="https://github.com/AutoMapper/AutoMapper">Automapper</a>. For those who don&#39;t know Automapper is the number one object to object mapper library on NuGet by far. It takes properties from one object and copies them to another. I couldn&#39;t name the second place contender and looking on NuGet, nothing else comes close. This post talks about object mappers, why you <strong>might</strong> not want to use Automapper and introduces a faster, simpler object mapper that you <strong>might</strong> want to use instead.</p>
<h1 id="why-use-an-object-mapper">Why use an Object Mapper</h1>
<p>This is a really good question. Most of the time, it boils down to using Entity Framework. Developers want to be good citizens and not expose their EF Core models in the API surface area because this can have really bad security implications (See overposting <a href="https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/implementing-basic-crud-functionality-with-the-entity-framework-in-asp-net-mvc-application">here</a>).</p>
<p>I have received a lot of comments at this point in the conversation saying &quot;Why don&#39;t you use <a href="https://github.com/StackExchange/Dapper">Dapper</a> instead. Then you don&#39;t need model classes for your data layer, you can just go direct to your view model classes via Dapper&quot;. Dapper is really great, don&#39;t get me wrong but it&#39;s not always the right tool for the job, there are distinct disadvantages to using Dapper instead of EF Core:</p>
<ol>
<li>I have to write SQL. That&#39;s not so bad (You should learn SQL!) but it takes time to context switch and you often find yourself copying and pasting code back and forth from SQL Management Studio or <a href="https://docs.microsoft.com/en-us/sql/azure-data-studio/what-is?view=sql-server-2017">Azure Data Studio</a> (I&#39;ve started using it, you should too). It just makes development a bit slower, that&#39;s all.</li>
<li>EF Core can be run in-memory, making for very fast unit tests. With Dapper, I have to run functional tests against a real SQL Server database which is slow, brittle and a pain to setup. Before each test, you need to ensure the database is setup with just the right data, so your tests are repeatable, otherwise you end up with flaky tests. Don&#39;t underestimate the power of this point.</li>
<li>EF Core Migrations can automatically generate the database for me. With Dapper, I have to use external tools like Visual Studio Database Projects, <a href="https://dbup.github.io/">DbUp</a> or <a href="https://flywaydb.org/">Flyway</a> to create my database. That&#39;s an extra headache at deployment time. EF Core lets you cut out the extra time required to manage all of that.</li>
<li>EF Core Migrations can automatically handle database migrations for me. Migrating databases is hard! Keeping track of what state the database is in and making sure you&#39;ve written the right <code>ALTER TABLE</code> scripts is extra work that can be automated. EF Core handles all that for me. Alternatively, Visual Studio Database Projects can also get around this problem.</li>
<li>I can switch database provider easily. Ok...ok...nobody does this in the real world and I can only think of one case where this happened. People always mention this point though for some reason.</li>
<li>EF Core defaults to using the right data types, while on the other hand human beings...have too often chosen the wrong data types and then paid the penalties later on when the app is in production. Use <code>NVARCHAR</code> instead of <code>VARCHAR</code> and <code>DATETIMEOFFSET</code> instead of <code>DATETIME2</code> or even <code>DATETIME</code> people! I&#39;ve seen professional database developers make these mistakes all the time. Automating this ensures that the correct decision is made all the time.</li>
<li>EF Core is not that much slower than using Dapper. We&#39;re not talking about orders of magnitude slower as it was with EF6. Throwing away all of the above benefits for slightly better speed is not a trade-off that everyone can make though, it depends on the app and situation.</li>
</ol>
<p>You need to use the right tool for the right job. I personally use Dapper, where there is an existing database with all the migrations etc. already handled by external tools and use EF Core where I&#39;m working with a brand new database.</p>
<h1 id="what-is-good-about-automapper">What is good about Automapper?</h1>
<p>Automapper is great when you have a small project that you want to throw together quickly and the objects you are mapping to and from have the same or similar property names and structure.</p>
<p>It&#39;s also great for unit testing because once you&#39;ve written your mapper, testing it is just a matter of adding a one liner to test that all the properties in your object have a mapping setup for them.</p>
<p>Finally if you use Automapper with Entity Framework, you can use the <code>ProjectTo</code> method which uses the property mapping information to limit the number of fields pulled back from your database making the query a lot more efficient. I think this is probably the biggest selling point of Automapper. The alternative is to write your own Entity Framework Core projection.</p>
<h1 id="what-is-wrong-with-automapper">What is wrong with Automapper?</h1>
<p>Cezary Piatek writes a <a href="https://cezarypiatek.github.io/post/why-i-dont-use-automapper/">very good rundown</a> of some of the problems when using Automapper. I&#39;m not going to repeat what he says but here is a short description:</p>
<ol>
<li>In the real world, mapping between identical or similar classes is not that common.</li>
<li>If you have similar classes you are mapping between, there is no guarantee that they will not diverge, requiring you to write increasingly complex Automapper code or rewriting the mapping logic without Automapper.</li>
<li>Finding all usages of a property no longer works when using Automapper unless you explicitly map every property, lowering discoverability.</li>
<li>If you have a complex scenario, <a href="https://jimmybogard.com/">Jimmy Bogard</a> (the author of the tool) <a href="https://jimmybogard.com/automapper-usage-guidelines/">suggests not using Automapper</a>:<ul>
<li>DO NOT use AutoMapper except in cases where the destination type is a flattened subset of properties of the source type.</li>
<li>DO NOT use AutoMapper to support a complex layered architecture.</li>
<li>AVOID using AutoMapper when you have a significant percentage of custom configuration in the form of <code>Ignore</code> or <code>MapFrom</code>.</li>
</ul>
</li>
<li>If you&#39;re mapping from database models to view models in an API, then dumping your database schema out as JSON makes for a bad API. You usually want more complex nested objects.</li>
<li>How much time does it really save? Object mapping code is the simplest code a developer can write, I can do it without thinking and knock a few mappings out in a couple of minutes.</li>
<li>Automapper is complex, it has a massive <a href="https://automapper.readthedocs.io">documentation</a> site just to show you how to use it and just checkout the 29 point list of <a href="https://jimmybogard.com/automapper-usage-guidelines/">guidelines</a> on how to use it. Why should copying values from one object to another need to be so complex?</li>
</ol>
<h1 id="a-simple-and-fast-object-mapper">A Simple and Fast Object Mapper</h1>
<p>I wrote an object mapper library that consists of a couple of interfaces and a handful of extension methods to make mapping objects slightly easier. The API is super simple and very light and thus fast. You can use the <a href="https://www.nuget.org/packages/Boxed.Mapping/">Boxed.Mapping</a> NuGet package or look at the code at on GitHub in the <a href="https://github.com/Dotnet-Boxed/Framework">Dotnet-Boxed/Framework</a> project. Lets look at an example. I want to map to and from instances of these two classes:</p>
<pre><code class="language-cs">public class MapFrom
{
    public bool BooleanFrom { get; set; }
    public DateTimeOffset DateTimeOffsetFrom { get; set; }
    public int IntegerFrom { get; set; }
    public string StringFrom { get; set; }
}

public class MapTo
{
    public bool BooleanTo { get; set; }
    public DateTimeOffset DateTimeOffsetTo { get; set; }
    public int IntegerTo { get; set; }
    public string StringTo { get; set; }
}
</code></pre>
<p>The implementation for an object mapper using the .NET Boxed Mapper is shown below. Note the <code>IMapper</code> interface which is the heart of the .NET Boxed Mapper. There is also an <code>IAsyncMapper</code> if for any reason you need to map between two objects asynchronously, the only difference being that it returns a <code>Task</code>.</p>
<pre><code class="language-cs">public class DemoMapper : IMapper&lt;MapFrom, MapTo&gt;
{
    public void Map(MapFrom source, MapTo destination)
    {
        destination.BooleanTo = source.BooleanFrom;
        destination.DateTimeOffsetTo = source.DateTimeOffsetFrom;
        destination.IntegerTo = source.IntegerFrom;
        destination.StringTo = source.StringFrom;
    }
}
</code></pre>
<p>And here is an example of how you would actually map a single object, array or list:</p>
<pre><code class="language-cs">public class UsageExample
{
    private readonly IMapper mapper = new DemoMapper();
    
    public MapTo MapOneObject(MapFrom source) =&gt; this.mapper.Map(source);
    
    public MapTo[] MapArray(List source) =&gt; this.mapper.MapArray(source);
    
    public List MapList(List source) =&gt; this.mapper.MapList(source);
}
</code></pre>
<p>I told you it was simple! Just a few convenience extension methods bundled together with an interface that makes it just ever so slightly quicker to write object mapping than rolling your own implementation. If you have more complex mappings, you can compose your mappers in the same way that your models are composed.</p>
<h1 id="performance">Performance</h1>
<p>Keeping things simple makes the .NET Boxed Mapper fast. I put together some benchmarks using <a href="https://github.com/dotnet/BenchmarkDotNet">Benchmark.NET</a> which you can find <a href="https://github.com/Dotnet-Boxed/Framework/tree/main/Benchmarks/Boxed.Mapping.Benchmark">here</a>. The baseline is hand written mapping code and I compare that to Automapper and the .NET Boxed Mapper.</p>
<p>I even got <a href="https://stackoverflow.com/questions/46500630/how-to-improve-performance-of-c-sharp-object-mapping-code">a bit of help from the great Jon Skeet himself</a> on how to improve the performance of instantiating an instance when using the generic <code>new()</code> constraint which it turns out is pretty slow because it uses <code>Activator.CreateInstance</code> under the hood.</p>
<h2 id="object-to-object-mapping-benchmark">Object to Object Mapping Benchmark</h2>
<p>This benchmark measures the time taken to map from a <code>MapFrom</code> object to the <code>MapTo</code> object which I show above.</p>
<p><img src="https://rehansaeed.com/a-simple-and-fast-object-mapper/images/Boxed.Mapping-Object-Benchmark-1024x1024.png" alt="Simple object to object mapping benchmark"></p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Runtime</th>
<th align="right">Mean</th>
<th align="right">Ratio</th>
<th align="right">Gen 0/1k Op</th>
<th align="right">Allocated Memory/Op</th>
</tr>
</thead>
<tbody><tr>
<td>Baseline</td>
<td>Clr</td>
<td align="right">7.877 ns</td>
<td align="right">1.00</td>
<td align="right">0.0178</td>
<td align="right">56 B</td>
</tr>
<tr>
<td>BoxedMapper</td>
<td>Clr</td>
<td align="right">25.431 ns</td>
<td align="right">3.07</td>
<td align="right">0.0178</td>
<td align="right">56 B</td>
</tr>
<tr>
<td>Automapper</td>
<td>Clr</td>
<td align="right">264.934 ns</td>
<td align="right">31.97</td>
<td align="right">0.0277</td>
<td align="right">88 B</td>
</tr>
<tr>
<td>Baseline</td>
<td>Core</td>
<td align="right">9.327 ns</td>
<td align="right">1.00</td>
<td align="right">0.0178</td>
<td align="right">56 B</td>
</tr>
<tr>
<td>BoxedMapper</td>
<td>Core</td>
<td align="right">17.174 ns</td>
<td align="right">1.84</td>
<td align="right">0.0178</td>
<td align="right">56 B</td>
</tr>
<tr>
<td>Automapper</td>
<td>Core</td>
<td align="right">158.218 ns</td>
<td align="right">16.97</td>
<td align="right">0.0279</td>
<td align="right">88 B</td>
</tr>
</tbody></table>
<h2 id="list-mapping-benchmark">List Mapping Benchmark</h2>
<p>This benchmark measures the time taken to map a List of <code>MapFrom</code> objects to a list of <code>MapTo</code> objects.</p>
<p><img src="https://rehansaeed.com/a-simple-and-fast-object-mapper/images/Boxed.Mapping-List-Benchmark-1024x1024.png" alt="List to list mapping benchmark"></p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Runtime</th>
<th align="right">Mean</th>
<th align="right">Ratio</th>
<th align="right">Gen 0/1k Op</th>
<th align="right">Allocated Memory/Op</th>
</tr>
</thead>
<tbody><tr>
<td>Baseline</td>
<td>Clr</td>
<td align="right">1.833 us</td>
<td align="right">1.00</td>
<td align="right">2.0542</td>
<td align="right">6.31 KB</td>
</tr>
<tr>
<td>BoxedMapper</td>
<td>Clr</td>
<td align="right">3.295 us</td>
<td align="right">1.80</td>
<td align="right">2.0523</td>
<td align="right">6.31 KB</td>
</tr>
<tr>
<td>Automapper</td>
<td>Clr</td>
<td align="right">10.569 us</td>
<td align="right">5.77</td>
<td align="right">2.4872</td>
<td align="right">7.65 KB</td>
</tr>
<tr>
<td>Baseline</td>
<td>Core</td>
<td align="right">1.735 us</td>
<td align="right">1.00</td>
<td align="right">2.0542</td>
<td align="right">6.31 KB</td>
</tr>
<tr>
<td>BoxedMapper</td>
<td>Core</td>
<td align="right">2.237 us</td>
<td align="right">1.29</td>
<td align="right">2.0523</td>
<td align="right">6.31 KB</td>
</tr>
<tr>
<td>Automapper</td>
<td>Core</td>
<td align="right">3.220 us</td>
<td align="right">1.86</td>
<td align="right">2.4872</td>
<td align="right">7.65 KB</td>
</tr>
</tbody></table>
<h2 id="speed">Speed</h2>
<p>It turns out that Automapper does a really good job on .NET Core in terms of speed but is quite a bit slower on .NET Framework. This is probably down to the intrinsic improvements in .NET Core itself. .NET Boxed is quite a bit faster than Automapper on .NET Framework but the difference on .NET Core is much less at around one and a half times. The .NET Boxed Mapper is also very close to the baseline but is a bit slower. I believe that this is due to the use of method calls on interfaces, whereas the baseline mapping code is only using method calls on concrete classes.</p>
<h2 id="zero-allocations">Zero Allocations</h2>
<p>.NET Boxed has zero allocations of memory while Automapper allocates a small amount per mapping. Since object mapping is a fairly common operation these small differences can add up over time and cause pauses in the app while the garbage collector cleans up the memory. There seems to be a trend I&#39;ve seen in .NET for having zero allocation code. If you care about that, then this might help.</p>
<h1 id="conclusions">Conclusions</h1>
<p>What I&#39;ve tried to do with the .NET Boxed Mapper is fill a niche which I thought that Automapper was not quite filling. A super simple and fast object mapper that&#39;s just a couple of interfaces and extension methods to help you along the way and provide a skeleton on which to hang your code. If Automapper fits your app better, go ahead and use that. If you think it&#39;s useful, you can use the <a href="https://www.nuget.org/packages/Boxed.Mapping/">Boxed.Mapping</a> NuGet package or look at the code at on GitHub in the <a href="https://github.com/Dotnet-Boxed/Framework">Dotnet-Boxed/Framework</a> project.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Is ASP.NET Core now a Mature Platform?]]></title>
        <id>https://rehansaeed.com/is-asp-net-core-now-a-mature-platform/</id>
        <link href="https://rehansaeed.com/is-asp-net-core-now-a-mature-platform/"/>
        <updated>2018-12-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ASP.NET Core a large developer base, a large number of GitHub projects, Stack Overflow questions, bloggers and companies who use it. It's a mature platform.]]></summary>
        <content type="html"><![CDATA[<p>::: tip Update (12 January 2019)
It seems that Damian Edwards (The ASP.NET Core Project Manager) likes this post and agrees with the points I&#39;ve made! It&#39;s great to hear that he&#39;s is in alignment with my thoughts and that&#39;s a great indication that the pain points of the platform will get solved in the future. Take a look at what he says in the ASP.NET Community Stand-up below:
:::</p>
<p><a href="https://www.youtube.com/watch?v=ho-VF2dAszI">https://www.youtube.com/watch?v=ho-VF2dAszI</a></p>
<h1 id="the-upgrade-train">The Upgrade Train</h1>
<p>I started using ASP.NET Core back when it was still called ASP.NET 5 and it was still in beta. In those early days every release introduced a sea change. The beta&#39;s were not beta&#39;s at all but more like alpha quality bits. I spent more time than I&#39;d like just updating things to the latest version with each release.</p>
<p>Compared to the past, updates are moving at a glacial pace. Compared to the full fat .NET Framework though, it&#39;s been like moving from a camel to an electric car. When releases do come there is still a lot in each release. If you have a number of micro services using ASP.NET Core, it&#39;s not quick to get them all updated. Also, it&#39;s not just ASP.NET Core but all of the satellite assemblies built on top of .NET Core that keep changing too, things like <a href="https://serilog.net/">Serilog</a> and <a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore">Swashbuckle</a>.</p>
<p>What about other platforms? Well, I&#39;m familiar with Node.js and the situation there is bordering on silly. Packages are very unstable and constantly being rev&#39;ed. Keeping up and staying on latest is a constant battle almost every day. Each time you upgrade a package, there is also a danger that you will break something. With .NET Core, there are fewer packages and they are much more stable.</p>
<p>Overall, things move fast in software development in general and for me that&#39;s what keeps it interesting. ASP.NET Core is no exception.</p>
<h1 id="show-me-the-apis">Show me the API&#39;s!</h1>
<p>.NET Core and ASP.NET Core started out very lightweight. There were few API&#39;s available. You often had to roll your own code, even for basic features that should exist.</p>
<p>In today&#39;s world, a lot of API&#39;s have been added and where there are gaps, the community has filled them in many places. The .NET Framework still has a lot of API&#39;s that have not been ported across yet. A lot of these gaps are Windows specific and I&#39;m sure a lot will be filled in the .NET Core 3.0 time frame.</p>
<p>When I make a comparison with Node.js and take wider community packages into consideration, I&#39;d say that .NET Core has fewer API&#39;s. Image compression API&#39;s don&#39;t even exist on .NET for example. We were late to the party with Brotli compression which was recently added to .NET Core and is soon going to be added to the ASP.NET Core compression middleware, so we&#39;ll get there eventually. We have <a href="https://github.com/graphql-dotnet/graphql-dotnet">GraphQL.NET</a> which is very feature rich but it still lags behind the JavaScript Apollo implementation slightly where it has first party support (Perhaps that comparison is a little unfair as GraphQL is native to Node.js). When I wanted to add Figlet font support to <a href="http://colorfulconsole.com/">Colorful.Console</a> (Figlet fonts let you draw characters using ASCII art), I had to base my implementation off of a JavaScript one. I&#39;m not the only one who translates JavaScript code to C# either.</p>
<p>With all this said, Node.js and JavaScript in general has it&#39;s own unique problems, otherwise I&#39;d be using it instead of being a mainly .NET Core developer.</p>
<h1 id="its-open-sauce">It&#39;s Open Sauce</h1>
<p>Making .NET Core and ASP.NET Core open source has made a huge difference. We&#39;d all occasionally visit the .NET Framework docs to understand how an API worked but today the place to go is GitHub where you can not only see the code but read other peoples issues and even raise issues of your own. There is often someone who has been there and done it all before you.</p>
<p>Not only that but a huge community has grown up with bloggers and new projects being more commonplace. It cannot be underestimated how much this change has improved a developers standard of living. Just take a look at the brilliant <a href="https://discoverdot.net/">discoverdot.net</a> site where you can see 634 GitHub .NET projects for all the evidence you need.</p>
<h1 id="feel-the-powa">Feel the Powa!</h1>
<p>ASP.NET Core&#39;s emphasis on performance is refreshing. It&#39;s doing well in the <a href="https://www.techempower.com/benchmarks/">TechEmpower benchmarks</a> with more improvements in sight. It&#39;s nice to get performance boosts from your applications every time you upgrade your application without having to do any work at all yourself.</p>
<p>While the platform is miles ahead of Node.js there are newer languages like Go that are also quite nice to write code for but blazing fast too. However, I&#39;m not sure you can be as productive writing Go as with .NET Core. Also, you&#39;ve got to use the write tool for the job. There are definitely cases where Go does a better job.</p>
<p>One interesting effort that I&#39;ve been keeping an eye on for some time now is .NET Native where C# code is compiled down to native code instead of an intermediate language. This means that the intermediate language does not need to be JIT&#39;ed and turned into machine code at runtime which speeds up execution the first time the application is run. A nice side effect of doing this is that you also end up with a single executable file. You get all the benefits of a low level language like Go or Rust with none of the major drawbacks! I&#39;ve been expecting this to hit for some time now but it&#39;s still not quite ready.</p>
<h1 id="security-is-boring-but-important">Security is Boring but Important</h1>
<p>This is a subject that most people have never thought about much. It&#39;s trivial for an evil doer to insert some rogue code into an update to a package and have that code running in applications soon after. In fact that&#39;s what happened with the <a href="https://github.com/dominictarr/event-stream/issues/116">event-stream NPM package</a> recently. I highly recommend reading Jake Archibald&#39;s post <a href="https://jakearchibald.com/2018/when-packages-go-bad/">&quot;What happens when packages go bad&quot;</a>.</p>
<p>What about .NET Core? Well, .NET is in fairly rare position of having a large number of official packages written by and maintained by Microsoft. This means that you need less third party packages and in fact you can sometimes get away with using no third party dependencies what so ever. What this also means, is that your third party dependencies that you do end up using also have fewer other dependencies in turn.</p>
<p>NuGet also recently added support for <a href="https://blog.nuget.org/20150203/package-signing.html">signed packages</a>, which stops packages from being tampered with between NuGet&#39;s server and your build machine.</p>
<p>Overall this is all about reducing risk. There will always be a chance that somebody will do something bad. I&#39;d argue that there is less of a risk of that happening on the .NET platform.</p>
<h1 id="who-is-using-it">Who is using it?</h1>
<p>Bing.com is <a href="https://blogs.msdn.microsoft.com/dotnet/2018/08/20/bing-com-runs-on-net-core-2-1/">running on ASP.NET Core</a> and a site doesn&#39;t get much bigger than that. Stack Overflow is <a href="https://nickcraver.com/blog/2018/11/29/stack-overflow-how-we-do-monitoring/">working on their transition</a> to .NET Core. The <a href="https://github.com/OrchardCMS/OrchardCore">Orchard CMS</a> uses .NET Core. Even WordPress and various PHP applications can be run on .NET Core these days using <a href="https://www.peachpie.io/">peachpie</a>.</p>
<h1 id="whats-still-missing">What&#39;s Still Missing?</h1>
<p>First of all, let me say that every platform has gaps that are sometimes filled by the community. There are several missing API&#39;s that seem obvious to me but have yet to be built or improved enough. Here are a few basic examples of things that could be improved and where maybe the small team of 20 ASP.NET Core developers (Yes, their team is that small and they&#39;ve done a tremendous job of building so much with so few resources, so they definitely deserve a pat on the back) could perhaps better direct their efforts.</p>
<h2 id="caching-could-be-better">Caching Could be Better</h2>
<p>The response caching still only supports in-memory caching. If you want to cache to Redis using the <code>IDistributedCache</code>, <a href="https://github.com/aspnet/AspNetCore/issues/2603">bad luck</a>. Even if you go with it and use the in-memory cache, if you&#39;re using cookies or the Authorization HTTP header, you&#39;ve only got more <a href="https://github.com/aspnet/AspNetCore/issues/2606">bad luck</a> as response caching turns itself off in those cases. Caching is an intrinsic part of the web, we need to do a better job of making it easier to work with.</p>
<h2 id="everyone-is-partying-with-lets-encrypt">Everyone is Partying with Lets Encrypt</h2>
<p>Security is hard! HTTPS is hard! Dealing with certificates is hard! What if you could use some middleware and supply it with a couple of lines of configuration and never have to think about any of it ever again? Isn&#39;t that something you&#39;d want? Well, it turns out that Nate McMaster has built a <a href="https://github.com/natemcmaster/LetsEncrypt">LetsEncrypt middleware</a> that does just that but he needs some help to <a href="https://github.com/natemcmaster/LetsEncrypt/issues/2#issuecomment-426501116">persuade his boss</a> to build the feature, so up-vote this <a href="https://github.com/aspnet/KestrelHttpServer/issues/2971">issue</a>.</p>
<p>Microsoft seems a bit late to the part, it&#39;s also one of the top voted feature requests on <a href="https://feedback.azure.com/forums/169385-web-apps/suggestions/15099342-add-support-for-let-s-encrypt-in-the-azure-portal">Azure&#39;s User Voice</a> too.</p>
<h2 id="http2-and-http3">HTTP/2 and HTTP/3</h2>
<p>HTTP/2 support in ASP.NET Core is available in 2.2 but it&#39;s not battle tested so you can&#39;t run it at the edge, wide open to the internet for fear of getting hacked.</p>
<p>HTTP/3 (<a href="https://www.zdnet.com/article/http-over-quic-to-be-renamed-http3/">formerly named QUIC</a>) support has been talked about and the ground work for it has already been done so that the Kestrel web server can support multiple protocols easily. Lets see hoq quickly we can get support.</p>
<p>One interesting thing about adding support for more protocols to ASP.NET Core is that most people can&#39;t make use of them or don&#39;t need to. ASP.NET Core applications are often hidden away behind a reverse proxy web server like IIS or NGINX who implement these protocols themselves. Even using something like Azure App Service means that you run behind a special fork of IIS. So I&#39;ve been thinking, what is the point? Well, you&#39;ve could use Kubernetes to expose your ASP.NET Core app over port 80 and get the performance boost of not having to use a reverse proxy web server as a man in the middle. Also, contrary to popular belief, Kubernetes can expose multiple ASP.NET Core applications over port 80 (at least <a href="https://stackoverflow.com/questions/53415487/what-are-the-advantages-of-using-kubernetes-ingress-in-azure-aks">Azure AKS can</a>).</p>
<h2 id="serving-static-files">Serving Static Files</h2>
<p>Serving static files is one of the most basic features. There are a few things that could make this a lot better. You <a href="https://github.com/aspnet/AspNetCore/issues/2457">can&#39;t use</a> the authorization middleware to limit access to static files but I believe that&#39;s changing in ASP.NET Core 3.0. Serving GZIP&#39;ed or Brotli&#39;ed content is a must today. Luckily dynamic Brotli compression will soon be available. What&#39;s <a href="https://github.com/aspnet/AspNetCore/issues/2458">not available</a> is serving pre-compressed static files.</p>
<h1 id="is-it-a-mature-platform">Is It A Mature Platform?</h1>
<p>There is a lot less churn. There are a lot of open source projects you can leverage. A large enough developer base has now grown up, so you see a lot more GitHub projects, Stack Overflow questions, bloggers like myself and companies who make their living from the platform.</p>
<p>There seems to be a trend at the moment where people are jumping ship from long standing platforms and languages to brand new ones. Android developers have jumped from Java to Kotlin (and have managed to delete half their code in the process, Java is so verbose!). The poor souls who wrote Objective C, have jumped to Swift. Where once applications would be written in C++, they are now written in Go or Rust. Where once people wrote JavaScript, they are still writing JavaScript (TypeScript has taken off but not completely)...ok that has not changed. .NET Core seems to be the only one that seems to have bucked the trend and tried to reinvent itself completely while not changing things too much and still succeeding in the process.</p>
<p>So yes, yes it is, is my answer.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PluralSight vs LinkedIn Learning vs FrontendMasters vs Egghead.io vs YouTube]]></title>
        <id>https://rehansaeed.com/pluralsight-vs-linkedin-learning-vs-frontendmasters-vs-egghead-io-vs-youtube/</id>
        <link href="https://rehansaeed.com/pluralsight-vs-linkedin-learning-vs-frontendmasters-vs-egghead-io-vs-youtube/"/>
        <updated>2018-11-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A comparison between PluralSight, LinkedIn Learning, Frontend Masters, Egghead.io, YouTube and other resources for software developers.]]></summary>
        <content type="html"><![CDATA[<p>I use a lot of video resources to keep up to date with .NET, JavaScript and other tech like Docker, Kubernetes etc. I&#39;ve compiled here a list of these resources and my impressions of using them and often paying for them out of my own pocket. There is something useful in all of them but I tend to find that some cater for certain technologies better than others.</p>
<h1 id="pluralsight">PluralSight</h1>
<p><a href="https://www.pluralsight.com/">PluralSight</a> is the service that tries to be all things for all people. It tended to be more .NET focused in the past but things are changing on that front. In more recent times, the breadth of topics covered has definitely gotten a lot wider. They&#39;ve added IT operations courses for example (I recently watched a really good course on Bash which is not something that&#39;s easily available on the internet strangely), as well as courses on Adobe products and like Photoshop and Illustrator which is handy.</p>
<p>In terms of software development, the courses are very high quality but they also take a lot of time for the authors to produce, so don&#39;t expect long in-depth courses on newer technologies e.g. the courses on Kubernetes and Vue.js have only recently been added and are certainly more on the &#39;Getting Started&#39; end of the spectrum. However, in time I expect the portfolio to fill out.</p>
<p>There is also definitely still a .NET bias to the site, there aren&#39;t as many in-depth frontend JavaScript courses as I would like for example. The ones that do exist are not from the well known frontend developers in the community. Also, some of the courses can be quite old (The tech world does move so fast). You&#39;d think you would find some decent courses on CSS for example but the courses available are pretty ancient.</p>
<p>They have apps for all the usual platforms that let you download video offline which is a must for me, for when I travel on the London underground. The monthly cost is not prohibitive for the quantity of courses available at $35 per month. I&#39;ve paid for it in the past but get it free right now as a Microsoft MVP.</p>
<p>I&#39;d recommend this as a primary source of information when learning some new technology.</p>
<h1 id="linkedin-learning">LinkedIn Learning</h1>
<p>I only discovered that <a href="https://www.linkedin.com/learning/">LinkedIn Learning</a> existed last year when I learned that Microsoft MVP&#39;s get it for free. Apparently LinkedIn Learning used to be called Lynda.com which I had heard of and trialled in the past. I&#39;ve always thought of Lynda as a &#39;How to use X software&#39; kind of resource. They&#39;ve literally got hours and hours worth of courses on Adobe Photoshop for example.</p>
<p>I was surprised at how much content they actually have. The ground is a bit thin when it comes to .NET content however and the courses that I have ended up watching are pretty short and to the point with not a huge amount of depth. However, I think this varies a lot, I&#39;ve seen Adobe illustrator courses that are 14 hours long!</p>
<p>In the end I&#39;ve used LinkedIn Learning for learning Kubernetes, due to PluralSight&#39;s library being a bit thin on that subject and also GraphQL.NET where LinkedIn Learning has the only course available on the internet.</p>
<p>It costs $25 per year to subscribe, so it&#39;s cheaper than the other offerings. Overall, I probably wouldn&#39;t pay for this service if I didn&#39;t get it for free. At best, I might subscribe for a month at $30 to view a particular course. I also feel like I should be spending more time exploring their content.</p>
<h1 id="frontend-masters">Frontend Masters</h1>
<p><a href="https://frontendmasters.com/">Frontend Masters</a> does exactly what it says on the tin. They get industry leading frontend professionals to present courses on HTML, CSS, and JavaScript mainly, although they also delve into the backend with Node.js, Mongo and GraphQL courses.</p>
<p>The quality and depth of these courses is extremely high. The format is unusual in that the expert is delivering the course to an actual audience of people and there are also question/answer sections at the end of each module. This means that the courses tend to be quite long. If you&#39;re like me and you want to know every gritty detail, then that&#39;s great.</p>
<p>The library of courses is not very large but I&#39;d definitely recommend this service to anyone interested in frontend or GraphQL Node.js development. The price is quite steep at $39 per month, considering the smaller number of targeted courses available. I&#39;m waiting to see if they have a sale at the end of the year to drop hard cash on this learning resource.</p>
<h1 id="eggheadio">Egghead.io</h1>
<p><a href="https://egghead.io">Egghead.io</a> is a unique learning resource. It&#39;s USP is that it serves a series of short two minute videos that make up a course. If you run the videos at 1.5x or 2x speed, you can be done learning something in 15 minutes! In the real world, I found that each video was so concise and full of useful information, I found myself having to go back and watch things again. This is definitely the fastest way to learn something.</p>
<p>The content is similar to Frontend Masters i.e. it&#39;s mainly focused on the frontend, with a few forays into Node.js, ElasticSearch, Mongo and Docker. Although, they tend to have a focus on JavaScript frameworks.</p>
<p>The cost of this service is $300 per year but if you wait until the sale at the end of the year like I did, you can bag a subscription for $100 which I think is more reasonable. I&#39;m coming up for renewal time and I&#39;m not sure I will renew because I&#39;ve pretty much watched all of the courses that I was interested in. Because the courses are very short and fairly limited in number, you can get through them pretty quickly. That said, it was definitely worth investing in a years subscription. I might purchase a subscription again in a year or two when they add more content.</p>
<h1 id="youtubevimeochannel9">YouTube/Vimeo/Channel9</h1>
<p>YouTube, Vimeo and Channel 9 have a wealth of videos that you should not ignore. Plus the best part is that it&#39;s all free. Here are some channels I find useful:</p>
<h2 id="ndc-conferences">NDC Conferences</h2>
<p>The NDC Conferences seem to never end. They take place three times a year (at last count) but they release videos all year round, so it&#39;s a never ending battle to keep up. For that reason, I&#39;ve been trying to avoid watching them lately. The best place to watch them is on <a href="https://vimeo.com/ndcconferences">Vimeo</a> where you can easily download them offline in high quality.</p>
<p>You have expert speakers who often repeat their talk multiple times, so you often end up wondering whether you&#39;ve seen a talk already. The talks are often very high level and often non-technical talks about design, management, managing your career or just telling stories about how some software was built.</p>
<p>Honestly, it can be fun to watch but I don&#39;t feel like I learn a lot watching these talks, so I&#39;ve been a lot more strict about what I do watch.</p>
<h2 id="google-developers">Google Developers</h2>
<p>The <a href="https://www.youtube.com/user/GoogleDevelopers">Google Developers</a> YouTube channel clogs up your feed with a lot of pointless two minute videos throughout the year. Then once a year, they hold their developer conference where the talks are actually interesting. The videos are Google focused, so think Chrome, JavaScript, Workbox and Android.</p>
<h2 id="microsoft-conferences">Microsoft Conferences</h2>
<p>Microsoft holds developer conferences like Build and Ignite all the time. You can watch them on <a href="https://channel9.msdn.com">Channel 9</a> or YouTube. Microsoft builds a lot of tech, so talks are fairly varied.</p>
<h2 id="azure-friday">Azure Friday</h2>
<p>Azure Friday is available on YouTube or <a href="https://channel9.msdn.com/Shows/Azure-Friday">Channel 9</a> and lets you keep up to date with Microsoft Azure&#39;s constantly evolving cloud platform. The videos are short and released once a week or so.</p>
<h2 id="css-day">CSS Day</h2>
<p><a href="https://vimeo.com/channels/cssday">CSS Day</a> is a conferences that runs every year where CSS experts stand up and deliver a talk on a particular subject. Often regarding some new CSS feature or some feature that has not yet been standardised. Well worth watching, none of the resources above do a good job of covering CSS in my opinion, except maybe Frontend Masters to some extent.</p>
<h2 id="net-foundation">.NET Foundation</h2>
<p>The <a href="https://www.youtube.com/channel/UCiaZbznpWV1o-KLxj8zqR6A">.NET Foundation</a> videos can be found on YouTube. It&#39;s really two channels combined. One for .NET in general and one for ASP.NET.</p>
<p>The .NET videos typically have very in depth discussions about what features to add to the .NET Framework. They also sometimes release a video explaining some new features of .NET. Not something I watch often but worth keeping an eye on occasionally.</p>
<p>The ASP.NET Community Stand-up releases a video on most Tuesday&#39;s discussing new features being added to ASP.NET Core or sometimes .NET Core in general. Always worth watching.</p>
<h2 id="heptio">Heptio</h2>
<p>The <a href="https://www.youtube.com/channel/UCjQU5ZI2mHswy7OOsii_URg">Heptio</a> YouTube channel is a bit like the ASP.NET Community Stand-up for Kubernetes. There are new videos every week but they vary a lot from beginner to extreme expert level and it&#39;s difficult to tell what the level is going to be. If you&#39;re interested in Kubernetes, it&#39;s worth watching the first 10 minutes of every show, so you can keep up to date with what&#39;s new in Kubernetes.</p>
<h1 id="grab-a-bargain">Grab a Bargain</h1>
<p>With the Christmas period approaching, most of the paid for services will offer some kind of sale. Now is the time to keep an eye out for that and grab a bargain.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Optimally Configuring ASP.NET Core HttpClientFactory]]></title>
        <id>https://rehansaeed.com/optimally-configuring-asp-net-core-httpclientfactory/</id>
        <link href="https://rehansaeed.com/optimally-configuring-asp-net-core-httpclientfactory/"/>
        <updated>2018-08-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to optimally configure a HttpClient using the new HttpClientFactory API in ASP.NET Core 2.1 for best performance, usability, resiliency and easy of use.]]></summary>
        <content type="html"><![CDATA[<p>::: warning Update (04 April 2021)
Updated all code for .NET 5 and mentioned Open Telemetry.
:::</p>
<p>::: warning Update (20 August 2018)
<a href="https://www.stevejgordon.co.uk/">Steve Gordon</a> kindly suggested a <a href="https://github.com/RehanSaeed/HttpClientSample/pull/1">further optimisation</a> to use <code>ConfigureHttpClient</code>. I&#39;ve updated the code below to reflect this.
:::</p>
<p>In this post, I&#39;m going to show how to optimally configure a <code>HttpClient</code> using the new <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-requests?view=aspnetcore-2.1">HttpClientFactory</a> API in ASP.NET Core 2.1. If you haven&#39;t already I recommend reading Steve Gordon&#39;s <a href="https://www.stevejgordon.co.uk/introduction-to-httpclientfactory-aspnetcore">series of blog posts</a> on the subject since this post builds on that knowledge. You should also read his post about <a href="https://www.stevejgordon.co.uk/asp-net-core-correlation-ids">Correlation ID&#39;s</a> as I&#39;m making use of that library in this post. The main aims of the code in this post are to:</p>
<ol>
<li>Use the <code>HttpClientFactory</code> typed client, I don&#39;t know why the ASP.NET team bothered to provide three ways to register a client, the typed client is the one to use. It provides type safety and removes the need for magic strings.</li>
<li>Enable GZIP decompression of responses for better performance. Interestingly, the <code>HttpClient</code> and ASP.NET Core does not support compression of GZIP requests, only responses. Doing some searching online some time ago suggests that this is an optimisation that is not very common at all, I thought this was pretty unbelievable at the time.</li>
<li>The <code>HttpClient</code> should time out after the server does not respond after a set amount of time.</li>
<li>The <code>HttpClient</code> should retry requests which fail due to transient errors.</li>
<li>The <code>HttpClient</code> should stop performing new requests for a period of time when a consecutive number of requests fail using the circuit breaker pattern. Failing fast in this way helps to protect an API or database that may be under high load and means the client gets a failed response quickly rather than waiting for a time-out.</li>
<li>The URL, time-out, retry and circuit breaker settings should be configurable from the <code>appsettings.json</code> file.</li>
<li>The <code>HttpClient</code> should send a <code>User-Agent</code> HTTP header telling the server the name and version of the calling application. If the server is logging this information, this can be useful for debugging purposes.</li>
<li>The <code>X-Correlation-ID</code> HTTP header from the response should be passed on to the request made using the <code>HttpClient</code>. This would make it easy to correlate a request across multiple applications.</li>
</ol>
<h1 id="usage-example">Usage Example</h1>
<p>It doesn&#39;t really matter what the typed client <code>HttpClient</code> looks like, that&#39;s not what we&#39;re talking about but I include it for context.</p>
<pre><code class="language-cs">public interface IRocketClient
{
    Task&lt;TakeoffStatus&gt; GetStatus(bool working);
}

public class RocketClient : IRocketClient
{
    private readonly HttpClient httpClient;

    public RocketClient(HttpClient httpClient) =&gt; this.httpClient = httpClient;

    public async Task&lt;TakeoffStatus&gt; GetStatus(bool working)
    {
        var response = await this.httpClient.GetAsync(working ? &quot;status-working&quot; : &quot;status-failing&quot;);
        response.EnsureSuccessStatusCode();
        return await response.Content.ReadFromJsonAsync&lt;TakeoffStatus&gt;();
    }
}
</code></pre>
<p>Here is how we register the typed client above with our dependency injection container. All of the meat lives in these three methods. <code>AddCorrelationId</code> adds a middleware written by Steve Gordon to handle <a href="https://www.stevejgordon.co.uk/asp-net-core-correlation-ids">Correlation ID&#39;s</a>. <code>AddPolicies</code> registers a policy registry and the policies themselves (A policy is <a href="https://github.com/App-vNext/Polly">Polly&#39;s</a> way of specifying how you want to deal with errors e.g. using retries, circuit breaker pattern etc.). Finally, we add the typed <code>HttpClient</code> but with configuration options, so we can configure it&#39;s settings from <code>appsettings.json</code>.</p>
<pre><code class="language-cs">public virtual void ConfigureServices(IServiceCollection services) =&gt;
    services
        .AddDefaultCorrelationId() // Add Correlation ID support to ASP.NET Core
        .AddControllers()
        .Services
        .AddPolicies(this.configuration) // Setup Polly policies.
        .AddHttpClient&lt;IRocketClient, RocketClient, RocketClientOptions&gt;(this.configuration, &quot;RocketClient&quot;)
        ...;
</code></pre>
<p>The <code>appsettings.json</code> file below contains the base address for the endpoint we want to connect to, a time-out value of thirty seconds is used if the server is taking too long to respond and policy settings for retries and the circuit breaker.</p>
<p>The retry settings state that after a first failed request, another three attempts will be made (this means you can get up to four requests). There will be an exponentially longer back-off or delay between each request. The first retry request will occur after two seconds, the second after another four seconds and the third occurs after another eight seconds.</p>
<p>The circuit breaker states that it will allow 12 consecutive failed requests before breaking the circuit and throwing <code>CircuitBrokenException</code> for every attempted request. The circuit will be broken for thirty seconds.</p>
<p>Generally, my advice is when allowing a high number of exceptions before breaking, use a longer duration of break. When allowing a lower number of exceptions before breaking, keep the duration of break small.</p>
<p>Another possibility I&#39;ve not tried is to combine these two scenarios, so you have two circuit breakers. The circuit breaker with the lower limit would kick in first but only break the circuit for a short time, if exceptions are no longer thrown, then things go back to normal quickly. If exceptions continue to be thrown, then the other circuit breaker with a longer duration of break would kick in and the circuit would be broken for a longer period of time. I leave implementing this particular scenario to the reader.</p>
<p>You can of course play with these numbers, what you set them to will depend on your application.</p>
<pre><code class="language-json">{
    &quot;RocketClient&quot;: {
        &quot;BaseAddress&quot;: &quot;http://example.com&quot;,
        &quot;Timeout&quot;: &quot;00:00:30&quot;
    },
    &quot;Policies&quot;: {
        &quot;HttpCircuitBreaker&quot;: {
            &quot;DurationOfBreak&quot;: &quot;00:00:30&quot;,
            &quot;ExceptionsAllowedBeforeBreaking&quot;: 12
        },
        &quot;HttpRetry&quot;: {
            &quot;BackoffPower&quot;: 2,
            &quot;Count&quot;: 3
        }
    }
}
</code></pre>
<h1 id="configuring-polly-policies">Configuring Polly Policies</h1>
<p>Below is the implementation for <code>AddPollyPolicies</code>. It starts by setting up and reading a configuration section in our <code>appsettings.json</code> file of type <code>PolicyOptions</code>. Then adds the <a href="https://github.com/App-vNext/Polly/wiki/PolicyRegistry">PolicyRegistry</a> which is where Polly stores it&#39;s policies. Finally, we add a retry and circuit breaker policy and configure them using the settings we&#39;ve read from the <code>PolicyOptions</code>.</p>
<pre><code class="language-cs">public static class ServiceCollectionExtensions
{
    private const string PoliciesConfigurationSectionName = &quot;Policies&quot;;

    public static IServiceCollection AddPolicies(
        this IServiceCollection services,
        IConfiguration configuration,
        string configurationSectionName = PoliciesConfigurationSectionName)
    {
        services.Configure&lt;PolicyOptions&gt;(configuration);
        var policyOptions = configuration.GetSection(configurationSectionName).Get&lt;PolicyOptions&gt;();

        var policyRegistry = services.AddPolicyRegistry();
        policyRegistry.Add(
            PolicyName.HttpRetry,
            HttpPolicyExtensions
                .HandleTransientHttpError()
                .WaitAndRetryAsync(
                    policyOptions.HttpRetry.Count,
                    retryAttempt =&gt; TimeSpan.FromSeconds(Math.Pow(policyOptions.HttpRetry.BackoffPower, retryAttempt))));
        policyRegistry.Add(
            PolicyName.HttpCircuitBreaker,
            HttpPolicyExtensions
                .HandleTransientHttpError()
                .CircuitBreakerAsync(
                    handledEventsAllowedBeforeBreaking: policyOptions.HttpCircuitBreaker.ExceptionsAllowedBeforeBreaking,
                    durationOfBreak: policyOptions.HttpCircuitBreaker.DurationOfBreak));

        return services;
    }
}

public static class PolicyName
{
    public const string HttpCircuitBreaker = nameof(HttpCircuitBreaker);
    public const string HttpRetry = nameof(HttpRetry);
}

public class PolicyOptions
{
    public CircuitBreakerPolicyOptions HttpCircuitBreaker { get; set; }
    public RetryPolicyOptions HttpRetry { get; set; }
}

public class CircuitBreakerPolicyOptions
{
    public TimeSpan DurationOfBreak { get; set; } = TimeSpan.FromSeconds(30);
    public int ExceptionsAllowedBeforeBreaking { get; set; } = 12;
}

public class RetryPolicyOptions
{
    public int Count { get; set; } = 3;
    public int BackoffPower { get; set; } = 2;
}
</code></pre>
<p>Notice that each policy is using the <code>HandleTransientHttpError</code> method which tells Polly when to apply the retry and circuit breakers. One important question is, what is a transient HTTP error according to Polly? Well, looking at the <a href="https://github.com/App-vNext/Polly.Extensions.Http/blob/808665304882fb921b1c38cbbd38fcc102229f84/src/Polly.Extensions.Http.Shared/HttpPolicyExtensions.cs">source code</a> in the <code>Polly.Extensions.Http</code> GitHub repository, it looks like they consider any of the below as transient errors:</p>
<ol>
<li>Any <code>HttpRequestException</code> thrown. This can happen when the server is down.</li>
<li>A response with a status code of <code>408 Request Timeout</code>.</li>
<li>A response with a status code of <code>500 Internal Server Error</code> or above.</li>
</ol>
<h1 id="configuring-httpclient">Configuring HttpClient</h1>
<p>Finally, we can get down to configuring our <code>HttpClient</code> itself. The <code>AddHttpClient</code> method starts by binding the <code>TClientOptions</code> type to a configuration section in <code>appsettings.json</code>. <code>TClientOptions</code> is a derived type of <code>HttpClientOptions</code> which just contains a base address and time-out value. I&#39;ll come back to <code>CorrelationIdDelegatingHandler</code> and <code>UserAgentDelegatingHandler</code> in a moment.</p>
<p>We set the <code>HttpClientHandler</code> to be <code>DefaultHttpClientHandler</code>. This type just enables Brotli, GZIP and Deflate compression. Finally, we add the retry and circuit breaker policies to the <code>HttpClient</code>.</p>
<pre><code class="language-cs">public static class ServiceCollectionExtensions
{
    public static IServiceCollection AddHttpClient&lt;TClient, TImplementation, TClientOptions&gt;(
        this IServiceCollection services,
        IConfiguration configuration,
        string configurationSectionName)
        where TClient : class
        where TImplementation : class, TClient
        where TClientOptions : HttpClientOptions, new() =&gt;
        services
            .Configure&lt;TClientOptions&gt;(configuration.GetSection(configurationSectionName))
            .AddSingleton&lt;CorrelationIdDelegatingHandler&gt;()
            .AddSingleton&lt;UserAgentDelegatingHandler&gt;()
            .AddHttpClient&lt;TClient, TImplementation&gt;()
            .ConfigureHttpClient(
                (serviceProvider, httpClient) =&gt;
                {
                    var httpClientOptions = serviceProvider
                        .GetRequiredService&lt;IOptions&lt;TClientOptions&gt;&gt;()
                        .Value;
                    httpClient.BaseAddress = httpClientOptions.BaseAddress;
                    httpClient.Timeout = httpClientOptions.Timeout;
                })
            .ConfigurePrimaryHttpMessageHandler(x =&gt; new DefaultHttpClientHandler())
            .AddPolicyHandlerFromRegistry(PolicyName.HttpRetry)
            .AddPolicyHandlerFromRegistry(PolicyName.HttpCircuitBreaker)
            .AddHttpMessageHandler&lt;CorrelationIdDelegatingHandler&gt;()
            .AddHttpMessageHandler&lt;UserAgentDelegatingHandler&gt;()
            .Services;
}

public class DefaultHttpClientHandler : HttpClientHandler
{
    public DefaultHttpClientHandler() =&gt; this.AutomaticDecompression =
        DecompressionMethods.Brotli |
        DecompressionMethods.Deflate |
        DecompressionMethods.GZip;
}

public class HttpClientOptions
{
    public Uri BaseAddress { get; set; }

    public TimeSpan Timeout { get; set; }
}
</code></pre>
<h1 id="correlationiddelegatinghandler">CorrelationIdDelegatingHandler</h1>
<p>When I&#39;m making a HTTP request from an API i.e. it&#39;s an API to API call and I control both sides, I use the <code>X-Correlation-ID</code> HTTP header to trace requests as they move down the stack. The <code>CorrelationIdDelegatingHandler</code> is used to take the correlation ID for the current HTTP request and pass it down to the request made in the API to API call. The implementation is pretty simple, it&#39;s just setting a HTTP header.</p>
<p>The power comes when you are using something like Application Insights, Kibana or Seq for logging. You can now take the correlation ID for a request and see the logs for it from multiple API&#39;s or services. This is really invaluable when you are dealing with a micro services architecture.</p>
<pre><code class="language-cs">public class CorrelationIdDelegatingHandler : DelegatingHandler
{
    private readonly ICorrelationContextAccessor correlationContextAccessor;
    private readonly IOptions&lt;CorrelationIdOptions&gt; options;

    public CorrelationIdDelegatingHandler(
        ICorrelationContextAccessor correlationContextAccessor,
        IOptions&lt;CorrelationIdOptions&gt; options)
    {
        this.correlationContextAccessor = correlationContextAccessor;
        this.options = options;
    }

    protected override Task&lt;HttpResponseMessage&gt; SendAsync(
        HttpRequestMessage request,
        CancellationToken cancellationToken)
    {
        if (!request.Headers.Contains(this.options.Value.RequestHeader))
        {
            request.Headers.Add(this.options.Value.RequestHeader, this.correlationContextAccessor.CorrelationContext.CorrelationId);
        }

        // Else the header has already been added due to a retry.

        return base.SendAsync(request, cancellationToken);
    }
}
</code></pre>
<h1 id="useragentdelegatinghandler">UserAgentDelegatingHandler</h1>
<p>It&#39;s often useful to know something about the client that is calling your API for logging and debugging purposes. You can use the <code>User-Agent</code> HTTP header for this purpose.</p>
<p>The <code>UserAgentDelegatingHandler</code> just sets the <code>User-Agent</code> HTTP header by taking the API&#39;s assembly name and version attributes. You need to set the <code>Version</code> and <code>Product</code> attributes in your <code>csproj</code> file for this to work. The name and version are then placed along with the current operating system into the User-Agent string.</p>
<p>Now the next time you get an error in your API, you&#39;ll know the client application that caused it (if it&#39;s under your control).</p>
<pre><code class="language-cs">public class UserAgentDelegatingHandler : DelegatingHandler
{
    public UserAgentDelegatingHandler()
        : this(Assembly.GetEntryAssembly())
    {
    }

    public UserAgentDelegatingHandler(Assembly assembly)
        : this(GetProduct(assembly), GetVersion(assembly))
    {
    }

    public UserAgentDelegatingHandler(string applicationName, string applicationVersion)
    {
        if (applicationName == null)
        {
            throw new ArgumentNullException(nameof(applicationName));
        }

        if (applicationVersion == null)
        {
            throw new ArgumentNullException(nameof(applicationVersion));
        }

        this.UserAgentValues = new List&lt;ProductInfoHeaderValue&gt;()
        {
            new ProductInfoHeaderValue(applicationName.Replace(&#39; &#39;, &#39;-&#39;), applicationVersion),
            new ProductInfoHeaderValue($&quot;({Environment.OSVersion})&quot;),
        };
    }

    public UserAgentDelegatingHandler(List&lt;ProductInfoHeaderValue&gt; userAgentValues) =&gt;
        this.UserAgentValues = userAgentValues ?? throw new ArgumentNullException(nameof(userAgentValues));

    public List&lt;ProductInfoHeaderValue&gt; UserAgentValues { get; set; }

    protected override Task&lt;HttpResponseMessage&gt; SendAsync(
        HttpRequestMessage request,
        CancellationToken cancellationToken)
    {
        if (!request.Headers.UserAgent.Any())
        {
            foreach (var userAgentValue in this.UserAgentValues)
            {
                request.Headers.UserAgent.Add(userAgentValue);
            }
        }

        // Else the header has already been added due to a retry.

        return base.SendAsync(request, cancellationToken);
    }

    private static string GetProduct(Assembly assembly) =&gt;
        assembly.GetCustomAttribute&lt;AssemblyProductAttribute&gt;().Product;

    private static string GetVersion(Assembly assembly) =&gt;
        assembly.GetCustomAttribute&lt;AssemblyFileVersionAttribute&gt;().Version;
}
</code></pre>
<pre><code class="language-xml">&lt;PropertyGroup Label=&quot;Package&quot;&gt;
  &lt;Version&gt;1.0.0&lt;/Version&gt;
  &lt;Product&gt;My Application&lt;/Product&gt;
  &lt;!-- ... --&gt;
&lt;/PropertyGroup&gt;
</code></pre>
<h1 id="open-telemetry">Open Telemetry</h1>
<p>Setting the <code>X-Correlation-ID</code> and <code>User-Agent</code> HTTP headers are useful things to do but there is a new set of HTTP headers which come under the Open Telemetry standard which not only replace them but also add additional functionality. You can read more about <a href="https://rehansaeed.com/deep-dive-into-open-telemetry-for-net/">Open Telemetry</a> in my <a href="https://rehansaeed.com/deep-dive-into-open-telemetry-for-net/">series of blog posts</a> on the subject.</p>
<h1 id="sample-github-project">Sample GitHub Project</h1>
<p>I realize that was a lot of boilerplate code to write. It was difficult to write this as more than one blog post. To aid in digestion, I&#39;ve created a <a href="https://github.com/RehanSaeed/HttpClientSample">GitHub sample project</a> with the full working code.</p>
<p>The sample project contains two API&#39;s. One makes a HTTP request to the other. You can pass a query argument to decide whether the callee API will fail or not and try out the retry and circuit breaker logic. Feel free to play with the configuration in <code>appsettings.json</code> and see what options work best for your application.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ASP.NET Core Hidden Gem - QueryHelpers]]></title>
        <id>https://rehansaeed.com/asp-net-core-hidden-gem-queryhelpers/</id>
        <link href="https://rehansaeed.com/asp-net-core-hidden-gem-queryhelpers/"/>
        <updated>2018-07-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to build a URL containing dynamic query arguments using the ASP.NET Core QueryHelpers.AddQueryString method. A hidden gem in ASP.NET Core.]]></summary>
        <content type="html"><![CDATA[<p>I discovered a hidden gem in ASP.NET Core a couple of weeks ago that can help to build up and parse URL&#39;s called <code>QueryHelpers</code>. Here&#39;s how you can use it to build a URL using the <code>AddQueryString</code> method:</p>
<pre><code class="language-cs">var queryArguments = new Dictionary&lt;string, string&gt;()
{
    { &quot;static-argument&quot;, &quot;foo&quot; },
};

if (someFlagIsEnabled)
{
    queryArguments.Add(&quot;dynamic-argument&quot;, &quot;bar&quot;);
}

string url = QueryHelpers.AddQueryString(&quot;/example/path&quot;, queryArguments);
</code></pre>
<p>Notice that there are no question marks or ampersands in sight. Where this really shines is when you want to add multiple arguments and then need to write code to work out whether to add a question mark or ampersand.</p>
<p>It&#39;s also worth noting that the values of the query arguments are URL encoded for you too. The type also has a <code>ParseQuery</code> method to parse query strings but that&#39;s less useful to us as ASP.NET Core controllers do that for you.</p>
<p>Finally, .NET also has a type called <code>UriBuilder</code> that you should know about. It&#39;s more geared towards building up a full URL, rather than a relative URL as I&#39;m doing above. It has a <code>Query</code> property that you can use to set the query string but it&#39;s only of type string, so much less useful than <code>QueryHelpers.AddQueryString</code>.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Optimally Configuring Entity Framework Core]]></title>
        <id>https://rehansaeed.com/optimally-configuring-entity-framework-core/</id>
        <link href="https://rehansaeed.com/optimally-configuring-entity-framework-core/"/>
        <updated>2018-07-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to optimally configure your Entity Framework Core DbContext for best performance, resiliency and easy debugging for the developer.]]></summary>
        <content type="html"><![CDATA[<p>Lets talk about configuring your Entity Framework Core <code>DbContext</code> for a moment. There are several options you might want to consider turning on. This is how I configure mine in most micro services:</p>
<pre><code class="language-cs">public virtual void ConfigureServices(IServiceCollection services) =&gt;
    services.AddDbContextPool&lt;MyDbContext&gt;(
        options =&gt; options
            .UseSqlServer(
                this.databaseSettings.ConnectionString,
                x =&gt; x.EnableRetryOnFailure())
            .ConfigureWarnings(x =&gt; x.Throw(RelationalEventId.QueryClientEvaluationWarning))
            .EnableSensitiveDataLogging(this.hostingEnvironment.IsDevelopment())
            .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking))
    ...
</code></pre>
<h1 id="enableretryonfailure">EnableRetryOnFailure</h1>
<p><a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/connection-resiliency">EnableRetryOnFailure</a> enables retries for transient exceptions. So what is a transient exception? Entity Framework Core has a <code>SqlServerTransientExceptionDetector</code> class that defines that. It turns out that any <code>SqlException</code> with a very specific list of SQL error codes or <code>TimeoutExceptions</code> are considered transient exceptions and thus, safe to retry.</p>
<h1 id="configurewarnings">ConfigureWarnings</h1>
<p>By default, Entity Framework Core will log warnings when it can&#39;t translate your C# LINQ code to SQL and it will evaluate parts of your LINQ query it does not understand in-memory. This is usually catastrophic for performance because this usually means that EF Core will retrieve a huge amount of data from the database and then filter it down in-memory.</p>
<p>Luckily in EF Core 2.1, they added support to translate the <code>GroupBy</code> LINQ method to SQL. However, I found out yesterday that you have to write Where clauses after <code>GroupBy</code> for this to work. If you write the Where clause before your <code>GroupBy</code>, EF Core will evaluate your <code>GroupBy</code> in-memory in the client instead of in SQL. The key is to know when this is happening.</p>
<p>One thing you can do is throw an exception when you are evaluating a query in-memory instead of in SQL. That is what Throw on <code>QueryClientEvaluationWarning</code> is doing.</p>
<h1 id="enablesensitivedatalogging">EnableSensitiveDataLogging</h1>
<p><a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.dbcontextoptionsbuilder.enablesensitivedatalogging?view=efcore-2.1">EnableSensitiveDataLogging</a> enables application data to be included in exception messages. This can include SQL, secrets and other sensitive information, so I am only doing it when running in the development environment. It&#39;s useful to see warnings and errors coming from Entity Framework Core in the console window when I am debugging my application using the Kestrel webserver directly, instead of with IIS Express.</p>
<h1 id="usequerytrackingbehavior">UseQueryTrackingBehavior</h1>
<p>If you are building an ASP.NET Core API, each request creates a new instance of your <code>DbContext</code> and then this is disposed at the end of the request. Query tracking keeps track of entities in memory for the lifetime of your <code>DbContext</code> so that if they are updated any changes can be saved, this is a waste of resources if you are just going to throw away the <code>DbContext</code> at the end of the request. By passing NoTracking to the <a href="https://docs.microsoft.com/en-us/ef/core/querying/tracking#no-tracking-queries">UseQueryTrackingBehavior</a> method, you can turn off this default behaviour. Note that if you are performing updates to your entities, don&#39;t use this option, this is only for API&#39;s that perform reads and/or inserts.</p>
<h1 id="connection-strings">Connection Strings</h1>
<p>You can also pass certain settings to connection strings. These are specific to the database you are using, here I&#39;m talking about SQL Server. Here is an example of a connection string:</p>
<pre><code>Data Source=localhost;Initial Catalog=MyDatabase;Integrated Security=True;Min Pool Size=3;Application Name=MyApplication
</code></pre>
<h2 id="application-name">Application Name</h2>
<p>SQL Server can log or profile queries that are running through it. If you set the application name, you can more easily identify the applications that may be causing problems in your database with slow or failing queries.</p>
<h2 id="min-pool-size">Min Pool Size</h2>
<p>Creating database connections is an expensive process that takes time. You can specify that you want a minimum pool of connections that should be created and kept open for the lifetime of the application. These are then reused for each database call. Ideally, you need to performance test with different values and see what works for you. Failing that you need to know how many concurrent connections you want to support at any one time.</p>
<h1 id="the-end">The End...</h1>
<p>It took me a while to craft this setup, I hope you find it useful. You can find out more by reading the excellent Entity Framework Core <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/configuring-dbcontext">docs</a>.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Migrating to Entity Framework Core Seed Data]]></title>
        <id>https://rehansaeed.com/migrating-to-entity-framework-core-seed-data/</id>
        <link href="https://rehansaeed.com/migrating-to-entity-framework-core-seed-data/"/>
        <updated>2018-07-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to migrate an existing database to use Entity Framework Core 2.1 Seed Data to insert static data into your tables while using migrations.]]></summary>
        <content type="html"><![CDATA[<p>I was already using Entity Framework Core 2.0 and had written some custom code to enter some static seed data to certain tables. Entity Framework 2.1 added support for <a href="https://docs.microsoft.com/en-us/ef/core/modeling/data-seeding">data seeding</a> which manages your seed data for you and adds them to your Entity Framework Core migrations.</p>
<p>The problem is that if you&#39;ve already got data in your tables, when you add a migration containing seed data, you will get exceptions thrown as Entity Framework tries to insert data that is already there. Entity Framework is naive, it assumes that it is the only thing editing the database.</p>
<p>Migrating to using data seeding requires a few extra steps that aren&#39;t documented anywhere and weren&#39;t obvious to me. Lets walk through an example. Assuming we have the following model and database context:</p>
<pre><code class="language-cs">public class Car
{
    public int CarId { get; set; }

    public string Make { get; set; }

    public string Model { get; set; }
}

public class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions options)
        : base(options)
    {
    }

    public DbSet&lt;Car&gt; Cars { get; set; }
}
</code></pre>
<p>We can add some seed data by overriding the <code>OnModelCreating</code> method on our database context class. You need to make sure your seed data matches the existing data in your database.</p>
<pre><code class="language-cs">protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity&lt;Car&gt;().HasData(
        new Car() { CarId = 1, Make = &quot;Ferrari&quot;, Model = &quot;F40&quot; },
        new Car() { CarId = 2, Make = &quot;Ferrari&quot;, Model = &quot;F50&quot; },
        new Car() { CarId = 3, Make = &quot;Lambourghini&quot;, Model = &quot;Countach&quot; });
}
</code></pre>
<p>If we run a command to add a database migration, the generated code looks like this:</p>
<pre><code class="language-powershell">dotnet ef migrations add AddSeedData
</code></pre>
<pre><code class="language-cs">public partial class AddSeedData : Migration
{
    protected override void Up(MigrationBuilder migrationBuilder)
    {
        migrationBuilder.InsertData(
            table: &quot;Cars&quot;,
            columns: new[] { &quot;CarId&quot;, &quot;Make&quot;, &quot;Model&quot; },
            values: new object[] { 1, &quot;Ferrari&quot;, &quot;F40&quot; });

        migrationBuilder.InsertData(
            table: &quot;Cars&quot;,
            columns: new[] { &quot;CarId&quot;, &quot;Make&quot;, &quot;Model&quot; },
            values: new object[] { 2, &quot;Ferrari&quot;, &quot;F50&quot; });

        migrationBuilder.InsertData(
            table: &quot;Cars&quot;,
            columns: new[] { &quot;CarId&quot;, &quot;Make&quot;, &quot;Model&quot; },
            values: new object[] { 3, &quot;Lambourghini&quot;, &quot;Countach&quot; });
    }

    protected override void Down(MigrationBuilder migrationBuilder)
    {
        migrationBuilder.DeleteData(
            table: &quot;Cars&quot;,
            keyColumn: &quot;CarId&quot;,
            keyValue: 1);

        migrationBuilder.DeleteData(
            table: &quot;Cars&quot;,
            keyColumn: &quot;CarId&quot;,
            keyValue: 2);

        migrationBuilder.DeleteData(
            table: &quot;Cars&quot;,
            keyColumn: &quot;CarId&quot;,
            keyValue: 3);
    }
}
</code></pre>
<p>This is what you need to do:</p>
<ol>
<li>Comment out all of the <code>InsertData</code> lines in the generated migration.</li>
<li>Run the migration on your database containing the existing seed data. This is effectively doing a null operation but records the fact that the <code>AddSeedData</code> migration has been run.</li>
<li>Uncomment the <code>InsertData</code> lines in the generated migration so that if you run the migrations on a fresh database, seed data still gets added. For your existing databases, since the migration has already been run on them, they will not add the seed data twice.</li>
</ol>
<p>That&#39;s it, hope that helps someone.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[.NET Boxed]]></title>
        <id>https://rehansaeed.com/net-boxed/</id>
        <link href="https://rehansaeed.com/net-boxed/"/>
        <updated>2018-05-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[.NET Boxed is a set of project templates with batteries included, providing the minimum amount of code required to get you going faster.]]></summary>
        <content type="html"><![CDATA[<p><a href="https://github.com/Dotnet-Boxed/Templates">.NET Boxed</a> is a set of project templates with batteries included, providing the minimum amount of code required to get you going faster. Right now it includes API and GraphQL project templates.</p>
<h1 id="aspnet-core-api-boxed">ASP.NET Core API Boxed</h1>
<p>The default <a href="https://github.com/Dotnet-Boxed/Templates/blob/main/Docs/API.md">ASP.NET Core API Boxed</a> options will give you an API with <a href="https://swagger.io/">Swagger</a>, ASP.NET Core versioning, HTTPS and much more enabled right out of the box. You can totally turn any of that off if you want to, the point is that it&#39;s up to you.</p>
<p><img src="https://rehansaeed.com/net-boxed/images/API-Preview.png" alt="ASP.NET Core API Boxed Preview"></p>
<h1 id="aspnet-core-graphql-boxed">ASP.NET Core GraphQL Boxed</h1>
<p>If you haven&#39;t read about or learned <a href="http://graphql.org/">GraphQL</a> yet, I really suggest you go and follow their short online tutorial. It&#39;s got some distinct advantages over standard REST&#39;ful API&#39;s (and some disadvantages but in my opinion the advantages carry more weight).</p>
<p>Once you&#39;ve done that, the next thing I suggest you do is to create a project from the <a href="https://github.com/Dotnet-Boxed/Templates/blob/main/Docs/GraphQL.md">ASP.NET Core GraphQL Boxed</a> project template. It implements the GraphQL specification using <a href="https://github.com/graphql-dotnet/graphql-dotnet">GraphQL.NET</a> and a few other NuGet packages. It also comes with a really cool GraphQL playground, so you can practice writing queries, mutations and subscriptions.</p>
<p><img src="https://rehansaeed.com/net-boxed/images/GraphQL-Preview.png" alt="ASP.NET Core GraphQL Boxed Preview"></p>
<p>This is the only GraphQL project template that I&#39;m aware of at the time of writing and it&#39;s pretty fully featured with sample queries, mutations and subscriptions.</p>
<h1 id="aspnet-core-boilerplate">ASP.NET Core Boilerplate</h1>
<p>.NET Boxed used to be called ASP.NET Core Boilerplate. That name was kind of forgettable and there was another great project that had a very similar name. I put off renaming for a long time because it was too much work but I finally relented and got it done.</p>
<p>In the end I think it was for the best. The new <a href="https://github.com/Dotnet-Boxed/Templates">.NET Boxed</a> branding and logo are much better and I&#39;ve opened it up to .NET project templates in general, instead of just ASP.NET Core project templates.</p>
<p>Thanks to <a href="https://twitter.com/jongalloway">Jon Galloway</a> and <a href="https://twitter.com/jfollas">Jason Follas</a> for helping to <a href="https://twitter.com/jongalloway/status/991342926067154945">work out the branding</a>.</p>
<h1 id="how-can-i-get-it">How can I get it?</h1>
<ol>
<li>Install the latest .NET Core SDK.</li>
<li>Run <code>dotnet new --install &quot;Boxed.Templates::*&quot;</code> to install the project template.</li>
<li>Run <code>dotnet new api --help</code> to see how to select the feature of the project.</li>
<li>Run <code>dotnet new api --name &quot;MyTemplate&quot;</code> along with any other custom options to create a project from the template.</li>
</ol>
<h1 id="boxed-updates">Boxed Updates</h1>
<p>There are new features and improvements planned on the GitHub <a href="https://github.com/Dotnet-Boxed/Templates/projects">projects</a> tab. ASP.NET Core 2.1 is coming out soon, so look out for updates which you can see in the GitHub <a href="https://github.com/Dotnet-Boxed/Templates/releases">releases</a> tab when they go live.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Dotnet Watch Tool Revisited]]></title>
        <id>https://rehansaeed.com/the-dotnet-watch-tool-revisited/</id>
        <link href="https://rehansaeed.com/the-dotnet-watch-tool-revisited/"/>
        <updated>2018-04-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The dotnet watch tool is a file watcher for dotnet that restarts the application when changes in the source code are detected. You can use dotnet watch in Visual Studio by using the launchSettings.json configuration file.]]></summary>
        <content type="html"><![CDATA[<p>I talked about using the <a href="https://rehansaeed.com/the-dotnet-watch-tool/">dotnet watch tool</a> with Visual Studio some time ago. Since then, a lot changed with the Visual Studio tooling and .NET Core 2.0 which broke the use of <code>dotnet watch</code> in Visual Studio, hence the reason for writing this post.</p>
<p>The <code>dotnet watch</code> tool is a file watcher for .NET that restarts the application when changes in the source code are detected. This is super useful when you just want to hack away at code and see the changes instantly when you refresh your browser. It increases productivity and reduces the magical inner-loop which reduces the time taken to write some code and then see it&#39;s effects. I also like using this tool because it opens a console window which lets you see all of your logs flashing by.</p>
<p><img src="https://rehansaeed.com/the-dotnet-watch-tool-revisited/images/Dotnet-Watch-Run-Console.png" alt="Dotnet Watch Run Console"></p>
<p>::: warning
In both cases you have to be careful to start the application by clicking <code>Debug -&gt; Start Without Debugging</code> or hitting the ||CTRL+F5|| keyboard shortcut.
:::</p>
<h1 id="net-core-20-vs-21">.NET Core 2.0 vs 2.1</h1>
<p>Setting up the &#39;dotnet watch&#39; tool is as easy as installing the <code>Microsoft.DotNet.Watcher.Tools</code> NuGet package if you are using .NET Core 2.0. If you are using .NET Core 2.1 or above, this tool comes pre-installed in the .NET Core SDK.</p>
<p>Now using powershell, you can navigate to your project folder and run the <code>dotnet watch run</code> command and your set. But using the command line is a bit lame if you are using Visual Studio, we can do one better.</p>
<h1 id="launchsettingsjson">launchSettings.json</h1>
<p>The <code>launchSettings.json</code> file is used by Visual Studio to launch your application and controls what happens when you hit ||F5||. It turns out you can add additional launch settings here to launch the application using the <code>dotnet watch</code> tool. You can do so by adding a new launch configuration as I&#39;ve done at the bottom of this file:</p>
<pre><code class="language-json">{
  &quot;iisSettings&quot;: {
    &quot;windowsAuthentication&quot;: false,
    &quot;anonymousAuthentication&quot;: true,
    &quot;iisExpress&quot;: {
      &quot;applicationUrl&quot;: &quot;http://localhost:5000/&quot;,
      &quot;sslPort&quot;: 44300
    }
  },
  &quot;profiles&quot;: {
    &quot;IIS Express&quot;: {
      &quot;commandName&quot;: &quot;IISExpress&quot;,
      &quot;launchBrowser&quot;: true,
      &quot;launchUrl&quot;: &quot;http://localhost:5000/&quot;,
      &quot;environmentVariables&quot;: {
        &quot;ASPNETCORE_ENVIRONMENT&quot;: &quot;Development&quot;,
        &quot;ASPNETCORE_HTTPS_PORT&quot;: &quot;44300&quot;
      }
    },
    &quot;dotnet run&quot;: {
      &quot;commandName&quot;: &quot;Project&quot;,
      &quot;launchBrowser&quot;: true,
      &quot;launchUrl&quot;: &quot;http://localhost:5000/&quot;,
      &quot;environmentVariables&quot;: {
        &quot;ASPNETCORE_ENVIRONMENT&quot;: &quot;Development&quot;,
        &quot;ASPNETCORE_HTTPS_PORT&quot;: &quot;44300&quot;
      }
    },
    // dotnet watch run must be run without the Visual Studio debugger using CTRL+F5.
    &quot;dotnet watch run&quot;: {
      &quot;commandName&quot;: &quot;Executable&quot;,
      &quot;executablePath&quot;: &quot;dotnet&quot;,
      &quot;workingDirectory&quot;: &quot;$(ProjectDir)&quot;,
      &quot;commandLineArgs&quot;: &quot;watch run&quot;,
      &quot;launchBrowser&quot;: true,
      &quot;launchUrl&quot;: &quot;http://localhost:5000/&quot;,
      &quot;environmentVariables&quot;: {
        &quot;ASPNETCORE_ENVIRONMENT&quot;: &quot;Development&quot;,
        &quot;ASPNETCORE_HTTPS_PORT&quot;: &quot;44300&quot;
      }
    }
  }
}
</code></pre>
<p>Notice that I renamed the second launch profile (which already exists in the default template) to <code>dotnet run</code> because that&#39;s actually the command it&#39;s running and makes more sense.</p>
<p>The <code>dotnet watch</code> launch profile is running the <code>dotnet watch run</code> command as an executable and using the current working directory of the project. Now we can see the new launch profile in the Visual Studio toolbar like so:</p>
<p><img src="https://rehansaeed.com/the-dotnet-watch-tool-revisited/images/Dotnet-Watch.png" alt="Dotnet Watch in the Visual Studio Toolbar"></p>
<h1 id="net-boxed-templates">.NET Boxed Templates</h1>
<p>I have updated the <a href="https://github.com/Dotnet-Boxed/Templates">.NET Boxed</a> family of project templates with this feature built in. Happy coding!</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Writing Code while Asleep]]></title>
        <id>https://rehansaeed.com/writing-code-asleep/</id>
        <link href="https://rehansaeed.com/writing-code-asleep/"/>
        <updated>2018-01-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to write code while you sleep using tools like Stack Overflow, GitHub and forums effectively.]]></summary>
        <content type="html"><![CDATA[<p>This is a quick post about something I tend to do quite often that has really helped me be more productive and I think has helped the wider developer community in some small way too. It&#39;s something that I haven&#39;t seen other developers I&#39;ve worked with do, so I thought I&#39;d call it out here.</p>
<h1 id="the-problem-statement">The Problem Statement</h1>
<p>When I come into work for a day of developing software, I generally get into the zone (if I don&#39;t have any distractions...) and am hacking away at something. Sometimes (quite often really but I&#39;m loath to admit it) I get stuck. I&#39;m probably working with some new language, framework or technology and I can&#39;t figure out how to do a thing.</p>
<p>At this point I might try a few things that pop into my head, go to definition on some code to read the comments, even read the documentation if there is any. These are all good strategies to solve a problem. At what point though do you throw your hands up in despair and give up? One hour later? Maybe four? Maybe a couple of days? I&#39;ve done all three in the past!</p>
<p>It might be chance, I don&#39;t know but usually when I get to this point, it&#39;s lunch time or time to go home and spend time with the family. What do you do now? You&#39;re stuck and you&#39;re going to have to come back to your desk at some point and bang your head against the problem for a second day. Maybe a clear and fresh mind can solve the problem? It&#39;s scary and maybe a bit sad how often I think of a solution to a problem I was having while walking home or lying in bed.</p>
<p>But what if even that does not help? The thought of having to go to work the next day where you will have to try again to solve a seemingly unsolvable problem can be quite depressing sometimes.</p>
<h1 id="the-hive-mind-can-help">The Hive Mind can Help</h1>
<p>The solution is to ask the kind people of the internet for help! Then go home and get some sleep. The chances are that come the morning, somebody has solved your problem for you! This is so obvious I feel kind of stupid for even writing this but in my experience when people hit a problem, they don&#39;t always ask for help, in fact I have a lot of anecdotal evidence for this:</p>
<h2 id="stack-overflow">Stack Overflow</h2>
<p>Ask your question on Stack Overflow. The undisputed number one resource for every developer.</p>
<p>I have reviewed a lot of CV&#39;s in the last two years and there is a growing trend to list your GitHub and Stack Overflow profiles on there. Even if your profile is not listed, I can sometimes find it anyway (the internet is a stalkers dream).</p>
<p>In all the Stack Overflow profiles I&#39;ve seen, there is a worrying trend. Very few people actually ask many Stack Overflow questions! The thing is, asking questions is the easiest way to get points and build a very nice Stack Overflow profile too, so it&#39;s silly not to do it.</p>
<p>In my three years <strong>actively</strong> using Stack Overflow (I was a lurker for a while), I&#39;ve asked 191 questions and answered 143. I&#39;m a bit behind in contributing but even my questions will help people as there will be others who had the same question and got an answer quickly because I had already asked it. In total, this has netted me almost 9,000 imaginary internet reputation, 7 gold badges, 86 silver ones and 152 bronze. Even if I had not answered any questions, and only asked them, I think I would have had a healthy reputation score of a few thousand.</p>
<p>It&#39;s amazing how quickly you can sometimes get answers to your questions using Stack Overflow too, the fastest I&#39;ve seen is literally 30 seconds! It&#39;s such an amazing resource, you literally have people sitting there waiting for you to ask a question so they can get imaginary internet points!</p>
<p>I get around 5,000 visitors to this blog every week at the moment, it&#39;s surprising to me how many people actually contact me directly asking for help. The emails are always the same, &quot;I read your blog post and I&#39;m working on project X, I need help urgently because I have some deadline&quot;. No supporting code, just a vague hint of what the problem might be, as if I can divine the solution through some kind of telekinesis. I help these people where I can but I&#39;ve started to feel I&#39;m hindering them by doing so, they need to learn to use Stack Overflow just like everybody else, so that&#39;s where I&#39;ve started pointing them lately.</p>
<h2 id="github-and-forums">GitHub and Forums</h2>
<p>If you&#39;re dealing with a project that uses GitHub or a forum of some kind, use it! Find an existing GitHub issue or forum post and add a comment to it or open a new issue if one cannot be found. One or more developers will get a notification of your problem and they might even point you in the right direction. Once again, it&#39;s amazing how quickly you can get a reply sometimes.</p>
<p>Once again, I&#39;ve seen a lot of GitHub profiles and very few people use the issues section to ask questions. You often have the developers who literally wrote the code that you&#39;re using, answer your question. What can be better than that?</p>
<h1 id="conclusions">Conclusions</h1>
<p>This post sounds silly but developers don&#39;t generally ask for help for some reason. I used to work with a great junior developer who started only with a little VB script knowledge and would ask for help whenever he needed it, which was a dozen or more times a day sometimes. It was hard sometimes to get work done but it was great because after a while he started to get really good and now we had two minds to get work done and come up with ideas instead of one. Ask for help when you need it!</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Writing your Webpack configuration in TypeScript]]></title>
        <id>https://rehansaeed.com/writing-your-webpack-configuration-in-typescript/</id>
        <link href="https://rehansaeed.com/writing-your-webpack-configuration-in-typescript/"/>
        <updated>2018-01-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn how to write your Webpack configuration file using TypeScript to get intellisense and how to exclude Webpack 1 syntax from your TypeScript typings.]]></summary>
        <content type="html"><![CDATA[<h1 id="webpack-configuration-is-a-mess">Webpack Configuration is a Mess</h1>
<p>::: warning
Before you get the wrong idea, let me say that Webpack is a super powerful, it&#39;s what you probably should be using these days to deal with static assets and I like its power...
:::</p>
<p>However, Webpack configuration files are write once software, they are a mess, a complete and utter mess. There, I said it. It has a steep learning curve and plenty of magic. What&#39;s worse is that Webpack makes it intentionally harder than it needs to be. If you look online at examples, even in the Webpack docs themselves, you&#39;ll see a dozen examples that look completely different, this is for two reasons:</p>
<ol>
<li>In its wisdom, Webpack decided it was a good idea to provide lots of different ways to configure it. There are four, yes four different ways to configure a rule and another four to configure a loader.</li>
<li>When Webpack 2 came out, they significantly changed the configuration syntax. They didn&#39;t want to make breaking changes, so they supported Webpack 1 and 2 syntax together.</li>
</ol>
<p>What you ended up with is eight ways to configure a rule or loader, which is insane.</p>
<h1 id="parceljs">ParcelJS</h1>
<p>I&#39;m going off on a tangent here but there is a new module bundler in development called <a href="https://parceljs.org/">ParcelJS</a> which has support for JavaScript, HTML, CSS, SASS and images built in from the start with zero configuration! Adding Babel, TypeScript or Autoprefixer is also much easier with no need to configure Parcel to work with them.</p>
<p>Unfortunately, it&#39;s not ready for prime time yet as it is lacking support for source maps, multiple entry points, code splitting and Vue components. I have high hopes for ParcelJS in the future!</p>
<h1 id="why-typescript">Why TypeScript?</h1>
<p>Happily, as I&#39;ll show below TypeScript can help you to completely avoid Webpack 1 syntax. Secondly, if you&#39;re already writing your application using TypeScript, then often the only JavaScript files you have left in your project end up being the Webpack configuration files. Converting Webpack configuration to TypeScript removes the need to switch context and switch between languages.</p>
<h1 id="how-is-it-done">How is it done?</h1>
<p>It turns out that Webpack <a href="https://webpack.js.org/configuration/configuration-languages/">supports</a> the use of TypeScript itself. However, the supported method requires you to add a couple of NPM packages as a dependency and you will not be able to use ES 2015 module syntax in your configuration file because it&#39;s not supported.</p>
<p>In my opinion, a much simpler and cleaner way is to use the TypeScript tsc command line tool to transpile TypeScript to JavaScript before running Webpack. You could add this command as a simple NPM script in your package.json file. Here are the commands you need to use:</p>
<pre><code class="language-powershell">tsc --lib es6 webpack.config.ts
webpack --config webpack.config.js
</code></pre>
<p>Webpack does not come with TypeScript typings, so you&#39;ll also need to install the <code>@types/webpack</code> NPM package. Finally, to remove all Webpack 1 syntax, you need to create some new types extending the Webpack types, which remove the Webpack 1 syntax, I stuck all of these typings in a <code>webpack.common.ts</code> file:</p>
<pre><code class="language-ts">import * as webpack from &quot;webpack&quot;;

// Remove the Old Webpack 1 types to ensure that we are only using Webpack 2 syntax.

export type INewLoader = string | webpack.NewLoader;

export interface INewLoaderRule extends webpack.NewLoaderRule {
  loader: INewLoader;
  oneOf?: INewRule[];
  rules?: INewRule[];
}

export interface INewUseRule extends webpack.NewUseRule {
  oneOf?: INewRule[];
  rules?: INewRule[];
  use: INewLoader | INewLoader[];
}

export interface INewRulesRule extends webpack.RulesRule {
  oneOf?: INewRule[];
  rules: INewRule[];
}

export interface INewOneOfRule extends webpack.OneOfRule {
  oneOf: INewRule[];
  rules?: INewRule[];
}

export type INewRule = INewLoaderRule | INewUseRule | INewRulesRule | INewOneOfRule;

export interface INewModule extends webpack.NewModule {
  rules: INewRule[];
}

export interface INewConfiguration extends webpack.Configuration {
  module?: INewModule;
}

export interface IArguments {
  prod: boolean;
}

export type INewConfigurationBuilder = (env: IArguments) =&gt; INewConfiguration;
</code></pre>
<p>You can then use these types in your Webpack configuration:</p>
<pre><code class="language-ts">import * as path from &quot;path&quot;;
import * as webpack from &quot;webpack&quot;;
import { INewConfiguration } from &quot;./webpack.common&quot;;

const configuration: INewConfiguration = {
  // ...
};
export default configuration;
</code></pre>
<p>Or you can also pass arguments to your webpack configuration file like so:</p>
<pre><code class="language-ts">import * as path from &quot;path&quot;;
import * as webpack from &quot;webpack&quot;;
import { IArguments, INewConfiguration, INewConfigurationBuilder } from &quot;./webpack.common&quot;;

const configurationBuilder: INewConfigurationBuilder = 
  (env: IArguments): INewConfiguration =&gt; {
    const isDevBuild = !(env &amp;&amp; env.prod);
    const configuration: INewConfiguration = {
      // ...
    };
    return configuration;
  };
export default configurationBuilder;
</code></pre>
<p>In this case, you can pass arguments to the webpack configuration file like so:</p>
<pre><code class="language-powershell">&gt; webpack --env.prod
</code></pre>
<h1 id="conclusion">Conclusion</h1>
<p>I think most people have huge trouble getting to grips with Webpack, once you understand that there are so many ways to supply the same config and how to translate between them, the learning curve gets shallower. You will be able to translate all of the examples you see online that inevitably are using a different syntax to you, so you can &#39;borrow&#39; (It&#39;s what us software developers do for much of the day) their code and get stuff done.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Useful Docker Images - Part 2]]></title>
        <id>https://rehansaeed.com/useful-docker-images-part2/</id>
        <link href="https://rehansaeed.com/useful-docker-images-part2/"/>
        <updated>2017-12-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to run the ELK-B Stack, made up of ElasticSearch, Kibana, Filebeat, Metricbeat and Heartbeat using Docker and Docker Swarm.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/useful-docker-images-part1/">Useful Docker Images - Administering Docker</a></li>
<li><a href="https://rehansaeed.com/useful-docker-images-part2/">Useful Docker Images - The EKL-B Stack</a></li>
</ol>
<h1 id="filebeat-metricbeat--hearbeat">Filebeat, Metricbeat &amp; Hearbeat</h1>
<p>Knowing what is happening in Docker and in your applications running on Docker is critical. To collect logs from my Swarm and monitor the health of it, I use the ELK-B stack which is made up of four pieces of software called <a href="https://www.elastic.co/products/elasticsearch">ElasticSearch</a>, <a href="https://www.elastic.co/products/logstash">LogStash</a> (I recommend that you use Beats instead of LogStash), <a href="https://www.elastic.co/products/kibana">Kibana</a> and various <a href="https://www.elastic.co/products/beats">Beats</a>.</p>
<p>ElasticSearch is basically a No-SQL database that is geared towards storing JSON documents and searching across them. Kibana is a visualization took that gives you a nice UI to view all of your data and produce nice visualizations and dashboards. There are several Beats which are used to ship data into ElasticSearch from various sources.</p>
<p><img src="https://rehansaeed.com/useful-docker-images-part2/images/Kibana.jpg" alt="Kibana"></p>
<p>While you could use Docker to host ElasticSearch and Kibana, I use the <a href="https://www.elastic.co/cloud">ElasticCloud</a> at work, you could also use instances hosted by AWS and Azure. Using a hosted version takes some of the pain out of maintaining ElasticSearch. I had a look at the ElasticSearch Docker container and if you really want to go down the Docker route and create an ElasticSearch cluster, it looks fairly straightforward but a bit unorthodox. There is a cost versus effort trade-off in this decision and it&#39;s up to you where you decide to go.</p>
<p>In terms of Beats, I use three of them which I&#39;ll talk about below:</p>
<h2 id="filebeat">Filebeat</h2>
<p><a href="https://www.elastic.co/products/beats/filebeat">Filebeat</a> is a tool used to ship Docker log files to ElasticSearch. The latest version 6.0 queries Docker APIs and enriches these logs with the container name, image, labels, and so on which is a great feature, because you can then filter and search your logs by these properties. You can then view these logs in a fully customizable Kibana dashboard. Filebeat ships with a sample Kibana dashboard that looks like this:</p>
<p><img src="https://rehansaeed.com/useful-docker-images-part2/images/Filebeat-Kibana-Dashboard.jpg" alt="Filebeat Kibana Dashboard"></p>
<p>As well as shipping Docker logs, I write the logs from my ASP.NET Core applications to disk (The best way to make sure you never lose log information) and then use Filebeat to ship these log files to ElasticSearch.</p>
<p>The <code>Dockerfile</code> below is used to add Filebeat configuration files to the base Filebeat image and nothing more. The configuration files are pretty lengthy and heavily commented so I&#39;ve omitted them:</p>
<pre><code class="language-dockerfile">FROM docker.elastic.co/beats/filebeat:6.0.0
COPY filebeat.yml filebeat.template.json /usr/share/filebeat/
USER root
RUN chown filebeat /usr/share/filebeat/filebeat.yml &amp;&amp; /
    chown filebeat /usr/share/filebeat/filebeat.template.json &amp;&amp; /
    chmod go-w /usr/share/filebeat/filebeat.yml &amp;&amp; /
    chmod go-w /usr/share/filebeat/filebeat.template.json
USER filebeat
</code></pre>
<p>In the Docker stack file below, I setup a shared volume called &#39;logs&#39; in which my website container stores all of it&#39;s log files. My custom Filebeat image then picks up logs from the &#39;logs&#39; volume and pushes them to ElasticSearch. Filebeat is also configured so that one instance of the container runs on every Docker node, so that it can pick up Docker logs from every node in my Swarm.</p>
<pre><code class="language-yaml">version: &#39;3.3&#39;

  filebeat:
    image: my-custom-filebeat-image:latest
    deploy:
      mode: global # One docker container per node
    networks:
      - defaultoverlay
    volumes:
      - logs:/var/log/my-company-name
      
  website-name:
    image: website-name:latest
    ports:
      - &quot;5000:80&quot;
    networks:
      - defaultoverlay
    volumes:
      - logs:/var/log/my-company-name
      
networks:
  defaultoverlay:
  
volumes:
  logs:
</code></pre>
<h2 id="metricbeat">Metricbeat</h2>
<p><a href="https://www.elastic.co/downloads/beats/metricbeat">Metricbeat</a> can be used to monitor the CPU, memory and disk usage on your Docker nodes and then ship those logs to your ElasticSearch cluster. Once again Metricbeat ships with a sample Kibana dashboard that looks like this:</p>
<p><img src="https://rehansaeed.com/useful-docker-images-part2/images/Metricbeat-Kibana-Dashboard.jpg" alt="Metricbeat Kibana Dashboard"></p>
<p>Here is an example of a custom Metricbeat <code>Dockerfile</code> which I use to configure Metricbeat:</p>
<pre><code class="language-dockerfile">FROM docker.elastic.co/beats/metricbeat:6.0.0
COPY metricbeat.yml metricbeat.template.json /usr/share/metricbeat/
USER root
RUN chown metricbeat /usr/share/metricbeat/metricbeat.yml &amp;&amp; /
    chown metricbeat /usr/share/metricbeat/metricbeat.template.json &amp;&amp; /
    chmod go-w /usr/share/metricbeat/metricbeat.yml &amp;&amp; /
    chmod go-w /usr/share/metricbeat/metricbeat.template.json
USER metricbeat
</code></pre>
<p>And here is the Docker stack file below. Once again it configures one instance of Metricbeat to run on each Docker node. It also needs access to the Docker socket and a bunch of other folders on the Docker node, so that explains all of the volume mounts.</p>
<pre><code class="language-yaml">version: &#39;3.3&#39;

services: 
  metricbeat:
    image: my-custom-metricbeat-image:latest
    command: metricbeat -e -system.hostfs=/hostfs
    deploy:
      mode: global # One docker container per node
    networks:
      - defaultoverlay
    volumes:
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock
      
networks:
  defaultoverlay:
</code></pre>
<h2 id="heartbeat">Heartbeat</h2>
<p><a href="https://www.elastic.co/products/beats/heartbeat">Heartbeat</a> is a ping monitor that can be pointed at any status endpoints in your API&#39;s or websites. Failures get logged in ElasticSearch which show up in a nice graph. You can also use Kibana to set up alerts, so you can be notified of any downtime. Here is an example of what a Kibana Dashboard containing Heartbeat data looks like:</p>
<p><img src="https://rehansaeed.com/useful-docker-images-part2/images/Heartbeat-Kibana-Dashboard.jpg" alt="Heartbeat Kibana Dashboard"></p>
<p>The Dockerfile is similar to the other Beats:</p>
<pre><code class="language-dockerfile">FROM docker.elastic.co/beats/heartbeat:6.0.0
COPY heartbeat.yml heartbeat.template.json /usr/share/heartbeat/
USER root
RUN chown heartbeat /usr/share/heartbeat/heartbeat.yml &amp;&amp; /
    chown heartbeat /usr/share/heartbeat/heartbeat.template.json &amp;&amp; /
    chmod go-w /usr/share/heartbeat/heartbeat.yml &amp;&amp; /
    chmod go-w /usr/share/heartbeat/heartbeat.template.json
USER heartbeat
</code></pre>
<p>This Docker stack file is extremely simple. There is only one instance of the image required.</p>
<pre><code class="language-yaml">version: &#39;3.3&#39;

services: 
  heartbeat:
    image: my-custom-heartbeat-image:latest
    networks:
      - defaultoverlay
      
networks:
  defaultoverlay:
</code></pre>
<p>Ping monitors on the internet are super <a href="https://www.pingdom.com/free">expensive</a> for what they are, this is because they send pings from various locations on the Earth. Heartbeat will not do that, so be aware of this difference. That said, there is nothing I can do if the pipe for the internet in Australia goes down, so in my opinion, Heartbeat reduces a lot of false positives.</p>
<h1 id="conclusions">Conclusions</h1>
<p>I have discovered that I have enough material for a third and final part to this series of blog posts. In the next part, you can expect to learn more about Redis and Metabase Docker images.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Useful Docker Images - Part 1]]></title>
        <id>https://rehansaeed.com/useful-docker-images-part1/</id>
        <link href="https://rehansaeed.com/useful-docker-images-part1/"/>
        <updated>2017-11-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A guide to using the Docker Visualizer, Portainer and Sonatype Nexus Docker images to help manage a Docker Swarm.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/useful-docker-images-part1/">Useful Docker Images - Administering Docker</a></li>
<li><a href="https://rehansaeed.com/useful-docker-images-part2/">Useful Docker Images - The EKL-B Stack</a></li>
</ol>
<p>I have been running Docker Swarm in production for a few API&#39;s and single page applications for a couple of months now. Here are some Docker images I&#39;ve found generally useful. Most of these images are not specific to Docker Swarm. For each image, I&#39;m also going to show a <code>docker-stack.yml</code> file that you can use to deploy the image and the settings I use for them. To deploy a Docker stack file, just run the following commands:</p>
<pre><code class="language-powershell"># To enable Docker Swarm mode on your local machine if you haven&#39;t already.
docker swarm init
# To deploy a Docker stack file to your Swarm.
docker stack deploy --compose-file docker-stack.yml
</code></pre>
<h1 id="docker-swarm-visualizer">Docker Swarm Visualizer</h1>
<p>The <a href="https://github.com/dockersamples/docker-swarm-visualizer">Docker Swarm Visualizer</a> image connects to the Docker socket and shows a really nice visualization showing all of the nodes in your Docker cluster (or just one on your development machine) and all of the containers running on it.</p>
<p><img src="https://rehansaeed.com/useful-docker-images-part1/images/Docker-Visualizer.png" alt="Docker Visualizer"></p>
<p>A word of warning about using this image. It has full unimpeded access to your Docker socket which lets it do basically anything that Docker can do (and that&#39;s a lot). This image is useful for development and testing purposes. If you want to use it in production, don&#39;t expose it to the internet, only run it in your local network if you trust the users in your local network that is. You don&#39;t want your Docker Swarm turning into a Bitcoin mining farm. Here is a Docker stack file you can use to deploy this image:</p>
<pre><code class="language-yaml">version: &#39;3.3&#39;

services: 
  visualizer:
    image: dockersamples/visualizer
    ports:
      - &quot;8080:8080&quot;
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        limits:
          cpus: &#39;0.1&#39;
          memory: 100M
    networks:
      - visualizeroverlay
    volumes:
      - &quot;/var/run/docker.sock:/var/run/docker.sock&quot;
      
networks:
  visualizeroverlay:
</code></pre>
<p>The container has to run on a manager node, so I&#39;ve added that constraint and also added access to the Docker socket using a volume mount. I&#39;ve also limited the resources the container can consume. Finally, I&#39;ve also given the service it&#39;s own dedicated overlay network, so it can&#39;t talk to my other containers.</p>
<h1 id="portainer">Portainer</h1>
<p><a href="https://portainer.readthedocs.io/en/latest/index.html">Portainer</a> is a free and open source Docker image you can use to administer your Docker cluster. It has full support for standalone Docker and Docker Swarm. It lets you do everything from seeing what&#39;s running on your nodes, starting containers, viewing logs and shelling into your running Docker containers. I find the last two particularly useful.</p>
<p><img src="https://rehansaeed.com/useful-docker-images-part1/images/Portainer.jpg" alt="Portainer"></p>
<p>Portainer also has a visualization similar to the Visualizer image I spoke about earlier but it&#39;s not nearly as nice and is buried in a few sub-menus which is why I prefer Visualizer. It&#39;s basically competing with Docker Enterprise Edition (EE) which is a seriously expensive piece of kit, while this is totally free!</p>
<p>Portainer has user and team management built into it, so it&#39;s not wide open to the internet if you expose a port. Interestingly, Portainer also exposes an API. It&#39;s a possibility I&#39;ve explored yet but you could use said API to deploy your Docker applications from your CI/CD process. Here is a Docker stack file you can use to deploy this image:</p>
<pre><code class="language-yaml">version: &#39;3.3&#39;

services: 
  portainer:
    image: portainer/portainer
    command: --host unix:///var/run/docker.sock
    deploy:
      placement:
        constraints: [node.role == manager]
    ports:
      - &quot;9000:9000&quot;
    networks:
      - portaineroverlay
    volumes:
      - portainer:/data
      - &quot;/var/run/docker.sock:/var/run/docker.sock&quot;
      
networks:
  portaineroverlay:
</code></pre>
<p>Once again, we are binding the image to the Docker socket using a volume mount but also giving Portainer another volume to store it&#39;s data. We also set a constraint, so that the container runs on a manager node.</p>
<h1 id="sonatype-nexus">Sonatype Nexus</h1>
<p>[<a href="https://hub.docker.com/r/sonatype/nexus3/%5D">https://hub.docker.com/r/sonatype/nexus3/]</a>(Sonatype Nexus) is an open source repository manager that can be used as a private Docker registry to store your images. In fact, it can also be used as a repository for NuGet, Maven, Ruby and NPM too. It&#39;s pretty powerful stuff and has user management built in too.</p>
<p><img src="https://rehansaeed.com/useful-docker-images-part1/images/Sonatype-Nexus.png" alt="Sonatype Nexus"></p>
<pre><code class="language-yaml">version: &#39;3.3&#39;

  nexus:
    image: sonatype/nexus3:3.6.1
    deploy:
      resources:
        reservations:
          cpus: &#39;2&#39;
          memory: 4GB
    healthcheck:
      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;--fail&quot;, &quot;http://localhost/service/metrics/healthcheck&quot;]
      interval: 60s
      timeout: 5s
      retries: 3
    ports:
      - &quot;8081:8081&quot;
      - &quot;8082:8082&quot;
      - &quot;8083:8083&quot;
    networks:
      - nexusoverlay
    volumes:
      - artefacts:/nexus-data

networks:
  nexusoverlay:
</code></pre>
<p>Sonatype Nexus has some pretty hefty minimum system requirements, so I&#39;ve reserved the necessary CPU and memory. I&#39;ve added three ports to support HTTP, HTTPS and a third port for my Docker registry, you can configure this in the admin menu when you add a Docker registry. Thankfully it&#39;s just a matter of a few clicks to setup and here are my registry settings:</p>
<p><img src="https://rehansaeed.com/useful-docker-images-part1/images/Sonatype-Nexus-Administration.png" alt="Sonatype Nexus Administration"></p>
<p>I have also gone to the effort of setting up a health check. Health checks are a wonderful feature of Docker. The container will not start and join the network until the health check has succeeded. This has stopped failed production releases for me in the past for my ASP.NET Core apps. Use health checks people!</p>
<h1 id="conclusions">Conclusions</h1>
<p>This blog post is getting a bit long, so I&#39;ll split it into two pieces. In the next part, expect to hear about how you can use the ELK-B stack which is made up of a few bits of software: ElasticSearch, Kibana, Filebeat, Metricbeat and Heartbeat. Also, be sure to read Andrew Lock&#39;s piece on <a href="https://andrewlock.net/home-home-on-the-range-installing-kubernetes-using-rancher-2-0/">Rancher</a>, which is a bit like Portainer. I&#39;d never heard of Rancher, it&#39;ll be interesting to do a comparison.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker Labels in Depth]]></title>
        <id>https://rehansaeed.com/docker-labels-depth/</id>
        <link href="https://rehansaeed.com/docker-labels-depth/"/>
        <updated>2017-11-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to use Docker Labels with Docker run, Docker compose and Docker Swarm. Also talk about naming conventions and the Open Containers Initiative (OCI) spec.]]></summary>
        <content type="html"><![CDATA[<h1 id="static-docker-labels">Static Docker Labels</h1>
<p>Docker image names are short and usually not very descriptive. You have the ability to label your Docker images to give them some extra metadata. You can add any information you like, labels are just key value pairs. Here I&#39;ve added an author label to my <code>Dockerfile</code>:</p>
<pre><code class="language-dockerfile">FROM microsoft/aspnetcore:2.0
LABEL &quot;author&quot;=&quot;Muhammad Rehan Saeed&quot;
LABEL &quot;company&quot;=&quot;Acme Co.&quot;
ARG source
WORKDIR /app
EXPOSE 80
COPY ${source:-obj/Docker/publish} .
ENTRYPOINT [&quot;dotnet&quot;, &quot;Bridge.Turtle.dll&quot;]
</code></pre>
<p>Note that prior to Docker <code>1.10</code>, it was recommended to combine all labels into a single <code>LABEL</code> instruction, to prevent extra layers from being created. This is no longer necessary, but combining labels is still supported.</p>
<h1 id="dynamic-docker-labels">Dynamic Docker Labels</h1>
<p>This is great for static data like the author but not so great for dynamic data like an automated build number or git changeset number that you might want to use. That way you&#39;ll know exactly which build built the image and the source code it was built from. This can be valuable information when you&#39;re in a pickle with a production issue.</p>
<p>To add dynamic labels you can pass them from the command line when you run the docker build command like so:</p>
<pre><code class="language-powershell">docker image build --tag foo:1.0.0 --label &quot;build&quot;=&quot;123&quot; --label &quot;changeset&quot;=&quot;0d9c7d3b77817caab3977b16d1d76bb3eb024837&quot; .
</code></pre>
<h1 id="open-containers-annotations-spec">Open Containers Annotations Spec</h1>
<p>The <a href="https://www.opencontainers.org/">Open Containers Initiative (OCI)</a> is a standards body defining open standards for container formats and runtimes. They&#39;ve already defined a <a href="https://github.com/opencontainers/image-spec/blob/master/annotations.md">standard set of labels</a> (they call them annotations) for you to use in your Docker images:</p>
<ul>
<li><strong>org.opencontainers.image.created</strong> - date and time on which the image was built (string, date-time as defined by <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339</a>).</li>
<li><strong>org.opencontainers.image.authors</strong> - Contact details of the people or organization responsible for the image (free-form string).</li>
<li><strong>org.opencontainers.image.url</strong> - URL to find more information on the image (string).</li>
<li><strong>org.opencontainers.image.documentation</strong> - URL to get documentation on the image (string).</li>
<li><strong>org.opencontainers.image.source</strong> - URL to get source code for building the image (string).</li>
<li><strong>org.opencontainers.image.version</strong> - Version of the packaged software.<ul>
<li>The version MAY match a label or tag in the source code repository.</li>
<li>Version MAY be <a href="http://semver.org/">Semantic versioning-compatible</a>.</li>
</ul>
</li>
<li><strong>org.opencontainers.image.revision</strong> - Source control revision identifier for the packaged software.</li>
<li><strong>org.opencontainers.image.vendor</strong> - Name of the distributing entity, organization or individual.</li>
<li><strong>org.opencontainers.image.licenses</strong> - License(s) under which contained software is distributed as an SPDX License Expression.</li>
<li><strong>org.opencontainers.image.ref.name</strong> - Name of the reference for a target (string).</li>
<li><strong>org.opencontainers.image.title</strong> - Human-readable title of the image (string).</li>
<li><strong>org.opencontainers.image.description</strong> - Human-readable description of the software packaged in the image (string).</li>
</ul>
<h1 id="naming-conventions">Naming Conventions</h1>
<p>The labels in the Open Containers Annotations specification and a few others I&#39;ve seen use a kind of dot separated namespace. The official Docker documentation suggests that this is only required if your image is a &quot;third party tool&quot; which I think means if the image will ever be used as a base for another image:</p>
<ul>
<li>Authors of third-party tools should prefix each label key with the reverse DNS notation of a domain they own, such as <code>com.example.some-label</code>.</li>
<li>Do not use a domain in your label key without the domain owner&#39;s permission.</li>
<li>The <code>com.docker.*</code>, <code>io.docker.*</code>, and <code>org.dockerproject.*</code> namespaces are reserved by Docker for internal use.</li>
<li>Label keys should begin and end with a lower-case letter and should only contain lower-case alphanumeric characters, the period character (<code>.</code>), and the hyphen character (<code>-</code>). Consecutive periods or hyphens are not allowed.</li>
<li>The period character (<code>.</code>) separates namespace &quot;fields&quot;. Label keys without namespaces are reserved for CLI use, allowing users of the CLI to interactively label Docker objects using shorter typing-friendly strings.</li>
</ul>
<p>For any other images, you can just use simple single word labels or at least, that&#39;s what I&#39;m doing.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker Read-Only File Systems]]></title>
        <id>https://rehansaeed.com/docker-read-file-systems/</id>
        <link href="https://rehansaeed.com/docker-read-file-systems/"/>
        <updated>2017-11-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to use a read-only file system in Docker to secure your Docker containers using the docker run CLI command and Docker compose or docker swarm.]]></summary>
        <content type="html"><![CDATA[<p>For a little bit of added security you can make the file system of your container read-only, excluding any volumes you may have created. If anyone hacks into your container, they will be unable to change any files.</p>
<h1 id="docker-run">Docker Run</h1>
<p>When using the docker run command using the CLI, you can simply use the following command:</p>
<pre><code class="language-powershell">docker run --read-only redis
</code></pre>
<h1 id="docker-composeswarm">Docker Compose/Swarm</h1>
<p>To set a read-only file system, you simply need to set the <code>read_only</code> flag to <code>true</code>, like so:</p>
<pre><code class="language-yaml">version: &#39;3.3&#39;

services:
  redis:
    image: redis:4.0.1-alpine
    networks:
      - myoverlay
    read_only: true
    
networks:
  myoverlay:
</code></pre>
<p>So above, I have a Docker stack file for use with Docker Swarm showing how to start Redis with a read-only file system.</p>
<h1 id="what-is-supported">What is Supported?</h1>
<p>Not all images support having them started with a read-only file system. Some require access to write temp files and the like. You can usually get away with using a volume in this case because volumes are still writeable even if you enable the read-only file system. In my research, I found it hard to determine if an image supported the feature, so I simply tried it out and found that most failed.</p>
<p>I discovered that Redis was the only image that I was running that had <a href="https://github.com/docker-library/redis/issues/109">full support</a>, several Elastic Stack containers failed to start and even my ASP.NET Core images failed to start. I since raised a GitHub issue <a href="https://github.com/Microsoft/aspnet-docker/issues/66">here</a>, trying to find out why the container fails to start and seeing if there is any workaround.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ASP.NET Core Caching in Practice]]></title>
        <id>https://rehansaeed.com/asp-net-core-caching-in-practice/</id>
        <link href="https://rehansaeed.com/asp-net-core-caching-in-practice/"/>
        <updated>2017-10-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to use and implement Cache-Control, Cache-Control Immutable, E-Tag, Last-Modified and If-Modified-Since Caching HTTP headers in ASP.NET Core.]]></summary>
        <content type="html"><![CDATA[<h1 id="cache-control-http-header">Cache-Control HTTP Header</h1>
<p>The <a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching">Cache-Control</a> HTTP header can be used to set how long your resource can be cached for. However, the problem with this HTTP header is that you need to be able to predict the future and know before hand when the cache will become invalid. For some use cases, like writing an API where someone could change the resource at any time that&#39;s just not feasible.</p>
<p>I recommend you read the response caching middleware <a href="https://docs.microsoft.com/en-us/aspnet/core/performance/caching/middleware">documentation</a>, it&#39;s not necessary as I do a quick overview next but the knowledge below builds upon it. The simple way to set the cache control header is directly on the action method like so:</p>
<pre><code class="language-cs">[HttpGet, ResponseCache(Duration = 3600, Location = ResponseCacheLocation.Any)]
public IActionResult GetCats()
</code></pre>
<p>Adding the <code>ResponseCache</code> attribute just adds the <code>Cache-Control</code> HTTP header but does not actually cache the response on the server. To do that you also need to add the response caching middleware like so:</p>
<pre><code class="language-cs">public void Configure(IApplicationBuilder application) =&gt;
    application.UseResponseCaching().UseMvc();
</code></pre>
<p>Instead of hard coding all of your cache settings in the <code>ResponseCache</code> attribute, it&#39;s possible to store them in the <code>appsettings.json</code> configuration file. To do so, you need to use a feature called cache profiles which look like this:</p>
<pre><code class="language-cs">[HttpGet, ResponseCache(CacheProfile=&quot;Cache1Hour&quot;)]
public IActionResult GetCats()

public class Startup
{    
    private readonly IConfiguration configuration;
    
    public Startup() =&gt; this.configuration = configuration;

    public void ConfigureServices(IServiceCollection services) =&gt;
        services
            .Configure&lt;Dictionary&lt;string, CacheProfile&gt;&gt;(configuration.GetSection(&quot;CacheProfiles&quot;))
            .AddMvc(options =&gt;
            {
                // Read cache profiles from appsettings.json configuration file
                var cacheProfiles = this.configuration.GetSection&lt;Dictionary&lt;string, CacheProfile&gt;&gt;();
                foreach (var keyValuePair in cacheProfiles)
                {
                    options.CacheProfiles.Add(keyValuePair);
                }
            });
            
    // Omitted
}
</code></pre>
<pre><code class="language-json">{
  &quot;CacheProfiles&quot;: {
    &quot;Cache1Hour&quot;: {
      &quot;Duration&quot;: 3600,
     &quot;Location&quot;: &quot;Any&quot;
    }
  },
  // Omitted...
}
</code></pre>
<p>Now all your caching can be configured from a single configuration file.</p>
<h2 id="cache-control-immutable-directive">Cache-Control Immutable Directive</h2>
<p><code>Cache-Control</code> also has a new draft directive called <code>immutable</code>. When you add this to the HTTP header value, you are basically telling the client that this resource never changes even if it has expired. You might be asking, why do we need this? Well, it turns out that when you refresh a page in a browser, it goes off to the server and checks to see if the resource has expired or not.</p>
<pre><code class="language-http">Cache-Control: max-age=365000000, immutable
</code></pre>
<p>It turns out that you get a massive reduction in requests to your server by implementing this directive. Read more about it in these links:</p>
<ul>
<li><a href="https://tools.ietf.org/html/draft-mcmanus-immutable-00">IETF Draft Spec</a></li>
<li><a href="https://hacks.mozilla.org/2017/01/using-immutable-caching-to-speed-up-the-web/">Using Immutable Caching To Speed Up The Web</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control">Cache-Control</a></li>
<li><a href="https://bitsup.blogspot.co.uk/2016/05/cache-control-immutable.html">Cache-Control: immutable</a></li>
<li><a href="https://code.facebook.com/posts/557147474482256">This browser tweak saved 60% of requests to Facebook</a></li>
</ul>
<p>This directive has not yet been implemented in ASP.NET Core but I&#39;ve raised an issue on GitHub <a href="https://github.com/aspnet/HttpAbstractions/issues/763">here</a> and there is also another issue <a href="https://github.com/aspnet/ResponseCaching/issues/97">here</a> to add the immutable directive to the static files middleware. If you really wanted to, it&#39;s really easy to add this directive today, as you just need to append the word <code>immutable</code> onto the end of your <code>Cache-Control</code> HTTP header.</p>
<p>A word of warning! You need to make sure that your resource really never changes. You can do this in Razor by using the <code>asp-append-version</code> attribute on your script tags:</p>
<pre><code class="language-html">&lt;script src=&quot;~/site.js&quot; asp-append-version=&quot;true&quot;&gt;&lt;/script&gt;
</code></pre>
<p>This will append a query string to the link to site.js which will contain a hash of the contents of the file. Each time the file changes, the hash is changed and thus you can safely mark the resource as immutable.</p>
<h1 id="e-tags">E-Tags</h1>
<p><a href="https://en.wikipedia.org/wiki/HTTP_ETag">E-tags</a> are typically generated in three ways (Read the link to understand what they are):</p>
<ol>
<li>Hashing the HTTP response body - You&#39;d want to use a very fast and collision resistant hash function like MD5 (MD5 is broken security wise and you should never use it but it&#39;s ok to use it for caching). Unfortunately, this method is slow because you have to load the entire response body into memory (which is not the default in ASP.NET Core which streams it straight to the client for better performance) to hash it. If you&#39;re still interested in implementing this <code>E-Tag</code>&#39;s using this method <a href="https://madskristensen.net/post/send-etag-headers-in-aspnet-core">Mads Kristensen</a> wrote a nice blog post showing how it can be done.</li>
<li>Last modification timestamp - The <code>E-Tag</code> can literally be the time the object was last modified which you can store in your database (I usually store created and modified timestamps for anything I store in a database anyway). This solves the performance problem above but now what is the difference between doing this and using the Last Modified HTTP header?</li>
<li>Revision Number - This could be some kind of integer stored in the database which gets incremented each time the data is modified. I don&#39;t see any advantage of doing this over using the last modification timestamp above, unless you have a naturally occurring revision number in your data that you could use.</li>
</ol>
<p>One additional thing you need to be careful of is the <code>Accept</code>, <code>Accept-Encoding</code> and <code>Accept-Language</code> HTTP headers. Any time you send a different response based on these HTTP headers, your <code>E-Tag</code> needs to be different e.g. a JSON non-gzip&#39;ed response in Mandarin needs to have a different <code>E-Tag</code> to an XML gzip&#39;ed response in Urdu.</p>
<p>For option one, this can be achieved by calculating the hash after the response body has gone through GZIP compression. For the second and third options, you would need to append the value of the Accept HTTP headers to the last modified date or revision number and then hash all of that.</p>
<h1 id="last-modified--if-modified-since">Last-Modified &amp; If-Modified-Since</h1>
<p>I&#39;m assuming you already know about the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified">Last-Modified</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since">If-Modified-Since</a> HTTP headers. If not, go ahead and read the links. Below is an example controller and action method that returns a list of cats.</p>
<pre><code class="language-cs">[Route(&quot;[controller]&quot;)]
public class CatsController : ControllerBase
{
    private readonly ICatRepository catRepository;
    private readonly ICatMapper catMapper;

    public CatsController(
        ICatRepository catRepository,
        ICatMapper catMapper)
    {
        this.catRepository = catRepository;
        this.catMapper = catMapper;
    }

    [HttpGet(&quot;&quot;)]
    public async Task&lt;IActionResult&gt; GetCats(CancellationToken cancellationToken)
    {
        var cats = await this.catRepository.GetAll(cancellationToken);
        var lastModified = cats.Count == 0 ? 
            (DateTimeOffset?)null : 
            cats.Max(x =&gt; x.ModifiedTimestamp);

        this.Response.GetTypedHeaders().LastModified = lastModified;

        var requestHeaders = this.Request.GetTypedHeaders();
        if (requestHeaders.IfModifiedSince.HasValue &amp;&amp;
            requestHeaders.IfModifiedSince.Value &gt;= lastModified)
        {
            return this.StatusCode(StatusCodes.Status304NotModified);
        }

        var catViewModels = this.catMapper.MapList(cats);
        return this.Ok(catViewModels);
    }
}
</code></pre>
<p>All of our cats have a ModifiedTimestamp, so we know when they were last changed. There are four scenarios that this action method handles:</p>
<ol>
<li>Our repository does not contain any cats, so just always return an empty list.</li>
<li>No <code>Last-Modified</code> HTTP header exists in the request, so we just return all cats.</li>
<li><code>Last-Modified</code> HTTP header exists and cats have been modified since that date, so return all cats.</li>
<li><code>Last-Modified</code> HTTP header exists but no cats have been modified since that date, so return a 304 Not Modified response.</li>
</ol>
<p>In all cases, except when we have no cats at all, we set the <code>Last-Modified</code> date to the latest date than any cat has been modified.</p>
<h1 id="conclusions">Conclusions</h1>
<p>Which caching HTTP headers you pick, depends on your data but at a minimum, I would add <code>E-Tag</code>&#39;s or <code>Last-Modified</code>. Add <code>Cache-Control</code> where possible, usually for static assets.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Very Generic .editorconfig File (Updated)]]></title>
        <id>https://rehansaeed.com/generic-editorconfig-file/</id>
        <link href="https://rehansaeed.com/generic-editorconfig-file/"/>
        <updated>2017-10-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An .editorconfig file helps define and maintain consistent coding styles between different editors and IDEs for files with different file extensions.]]></summary>
        <content type="html"><![CDATA[<h1 id="what-is-a-editorconfig-file">What is a .editorconfig File?</h1>
<p>An <code>.editorconfig</code> file helps developers define and maintain consistent coding styles between different editors and IDEs for files with different file extensions. These configuration files are easily readable and they work nicely with version control systems. An <code>.editorconfig</code> file defines various settings per file extension such as charsets and tabs vs spaces.</p>
<p><a href="https://www.hanselman.com/blog/TabsVsSpacesAPeacefulResolutionWithEditorConfigInVisualStudioPlusNETExtensions.aspx">Scott Hanselman</a> recently wrote a blog post about this file. You can also find out more from the official docs at <a href="http://editorconfig.org/">editorconfig.org</a> and the <a href="https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference">Visual Studio Docs</a> which I recommend you read.</p>
<h1 id="a-very-generic-editorconfig">A Very Generic .editorconfig</h1>
<p>I wrote a generic <a href="https://github.com/RehanSaeed/EditorConfig/blob/main/.editorconfig">.editorconfig</a> file supporting the following file types:</p>
<ul>
<li>C# - .cs, .csx, .cake</li>
<li>Visual Basic - .vb</li>
<li>Script - .sh, .ps1, .psm1, .bat, .cmd</li>
<li>XML - .xml, .config, .props, .targets, .nuspec, .resx, .ruleset</li>
<li>JSON - .json, .json5</li>
<li>YAML - .yml,  .yaml</li>
<li>HTML - .htm, .html</li>
<li>JavaScript - .js, .ts, .tsx, .vue</li>
<li>CSS - .css, .sass, .scss, .less</li>
<li>SVG - .svg</li>
<li>Markdown - .md</li>
<li>Visual Studio - .sln, .csproj, .vbproj, .vcxproj, .vcxproj.filters, .proj, .projitems, .shproj</li>
<li>Makefile</li>
</ul>
<p>Extensive code style settings for C# and VB.NET have been defined that require the latest C# features to be used. In addition, it sets various more advanced C# style settings. All C# related code styles are consistent with <a href="https://github.com/DotNetAnalyzers/StyleCopAnalyzers">StyleCop&#39;s</a> default styles. You can find our more about the C# code style settings from the official <a href="https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference">docs</a> and also in <a href="http://kent-boogaart.com/blog/editorconfig-reference-for-c-developers">Kent Boogaart&#39;s</a> blog post.</p>
<h1 id="how-do-i-use-it">How do I use It?</h1>
<p>All you have to do is drop it into the root of your project. Then any time you open a file in Visual Studio, the <code>.editorconfig</code> file settings will be used to help format the document and also raise warnings if your code style and formatting does not conform.</p>
<p>For Visual Studio Code, you can install the <a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig">EditorConfig for VS Code</a> extension to get support.</p>
<h1 id="exciting-july-2018-update">Exciting July 2018 Update</h1>
<p>I noticed that Microsoft silently released several new C# code style settings. I&#39;m not sure when they were released but they&#39;re available in the current Visual Studio 15.7 update. The majority of them are to enforce the use of newer C# 7.3 syntax. I updated my generic <code>.editorconfig</code> file to add these new settings with C# 7.3 as the default.</p>
<p>Microsoft also updated their documentation for <code>.editorconfig</code> settings pertaining to .NET, so I added links to the docs site, so it&#39;s easy to see what each setting does and change it, if it&#39;s not to your liking. I&#39;ve also included a undocumented dozen settings. There is an <a href="https://github.com/MicrosoftDocs/visualstudio-docs/issues/1070">open issue</a> on GitHub to get them documented, so it&#39;s easy to see what they do.</p>
<p>In addition, while I was working on this, I added support for a few more file extensions, including <code>yaml</code> (<code>yml</code> was already there), <code>json5</code> (If you haven&#39;t heard of <code>json5</code>, <a href="https://json5.org/">check it out</a>), <code>cmd</code> and <code>bat</code> (If you haven&#39;t switched to PowerShell yet, what are you waiting for).</p>
<p>Finally, Microsoft <a href="https://blogs.msdn.microsoft.com/visualstudio/2018/06/26/visual-studio-2017-version-15-8-preview-3/">announced last week</a> that the Visual Studio 15.8 update which is currently being released as preview 3 will automatically fix errors when you format the document using the ||CTRL+K|| followed by ||CTRL+D|| shortcut. This is huge! It means that you can drop a <code>.editorconfig</code> file in an existing codebase and with a few clicks or keyboard shortcuts (if that&#39;s how you roll) you can clean up your code base to use the latest C# 7.3 features and a code style that suits you.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Keeping Up With Software Development]]></title>
        <id>https://rehansaeed.com/keeping-software-development/</id>
        <link href="https://rehansaeed.com/keeping-software-development/"/>
        <updated>2017-08-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Keeping up with the changes in the software development industry always feels like a losing battle.]]></summary>
        <content type="html"><![CDATA[<p>Keeping up with the changes in the software development industry always feels like a losing battle. Just when I feel like I&#39;ve started to catch up and learn the things I need to know to do my job (and hobby), a new version of something is released or even worse, something totally revolutionary comes out which means we have to start learning from first principles again.</p>
<p><a href="https://twitter.com/RehanSaeedUK/status/895705722943660033">WebAssembly</a> is one such technology which is a game changer but still at the prototype stage. When it does hit, prepare for the whirlwind. Prepare to throw away most of what you knew and re-learn that which is now deemed the state of the art and the way to do things.</p>
<p>At some point in history it was possible for a single human being to learn all scientific knowledge known to mankind if they could somehow get hold of the information. We&#39;ve long since surpassed that point with a single technology like .NET, let alone software development in general.</p>
<p>Then you&#39;ve got the cross-functional developers out there. The ones that try to learn everything required to build a complete application. I try to do this but I have the constant feeling that I&#39;m behind, that I need to catch up. It&#39;s impossible to learn everything in any real depth, so you have to skim the surface of some technologies to get by. I wish I knew more about T-SQL, ElasticSearch, Webpack and pretty much all of the myriad of JavaScript frameworks.</p>
<p>I&#39;m not complaining of course, having to learn is what keeps it interesting and what keeps us coming back for more.</p>
<p>The list below is my personal list of RSS feeds that I follow to keep up to date. I&#39;ve put this list together over several years and use an RSS feed reader called <a href="https://feedly.com">Feedly</a> which keeps track of the articles I&#39;ve read. Hopefully, it helps you keep up to date.</p>
<h1 id="link-aggregators">Link Aggregators</h1>
<p>These are sites which aggregate articles from various sources.</p>
<ul>
<li><a href="https://www.asp.net">ASP.NET Community Spotlight</a> (<a href="http://www.asp.net/rss/spotlight">RSS</a>) - Quality blog posts from the ASP.NET community.</li>
<li><a href="https://css-tricks.com">CSS-Tricks</a> (<a href="http://feeds.feedburner.com/CassTricks">RSS</a>) - Learn about CSS mainly but also HTML and JavaScript tricks and browser features and differences.</li>
<li><a href="http://blog.cwa.me.uk">The Morning Brew</a> (<a href="http://feeds.feedburner.com/ReflectivePerspective">RSS</a>) - A great list of articles put together by Chris Alcock every day without fail. A great service to the community.</li>
</ul>
<h1 id="products">Products</h1>
<p>Keep up to date with product announcements and updates.</p>
<ul>
<li><a href="https://blogs.msdn.microsoft.com/visualstudio">The Visual Studio Blog</a> (<a href="http://blogs.msdn.com/b/visualstudio/rss.aspx">RSS</a>) - Various Visual Studio related official announcements.</li>
<li><a href="https://azure.microsoft.com/blog/">Microsoft Azure Blog</a> (<a href="https://azure.microsoft.com/en-gb/blog/feed/">RSS</a>) - Official announcements about new Azure services. The cloud is changing fast, keep up here.</li>
<li><a href="https://blogs.windows.com">Windows Blog</a> (<a href="http://blogs.windows.com/feed/">RSS</a>) - Find out about new features in Windows and Windows Phone.</li>
<li><a href="https://blogs.technet.microsoft.com/dataplatforminsider">SQL Server Blog</a> (<a href="https://blogs.technet.microsoft.com/dataplatforminsider/feed/">RSS</a>) - Keep up to date with the latest SQL Server announcements.</li>
<li><a href="http://docs.asp.net/en/latest">ASP.NET Docs</a> (<a href="https://docs.asp.net/en/latest/rss.xml">RSS</a>) - Read new articles in the ASP.NET Core docs.</li>
<li><a href="https://powerbi.microsoft.com/en-us/blog/">Microsoft Power BI Blog</a> (<a href="http://blogs.msdn.com/b/powerbi/rss.aspx">RSS</a>) - If you haven&#39;t used Power BI yet, think of it like Excel for your SQL or No-SQL database. You can produces tables and nice visualizations from your raw data.</li>
<li><a href="http://blog.getbootstrap.com/">Bootstrap Blog</a> (<a href="http://blog.getbootstrap.com/feed.xml">RSS</a>) - I use Bootstrap to build web UI&#39;s. I&#39;ve looked into Foundation and Material Design but so far I&#39;ve not changed my preference.</li>
<li><a href="null">Cake</a> (<a href="http://cakebuild.net/blog/feed/atom">RSS</a>) - If you are not yet using Cake Build to build your code, you&#39;re missing out on the simplicity as compared to PowerShell or Bash, plus it runs cross platform.</li>
<li><a href="https://octopus.com/blog">Octopus Deploy</a> (<a href="http://feeds.feedburner.com/OctopusDeploy">RSS</a>) - This is a great tool to manage the complexity of deploying your application, including versioning, rollbacks, multi-tenancy, secrets, etc.</li>
<li><a href="https://blog.docker.com">Docker Blog</a> (<a href="https://blog.docker.com/feed/">RSS</a>) - I&#39;ve recently started to use Docker Swarm, it&#39;s still early days but it has a lot of potential.</li>
<li><a href="https://developers.google.com/web/updates/?utm_source=feed&amp;utm_medium=feed&amp;utm_campaign=updates_feed">Google Developers</a> (<a href="https://developers.google.com/web/updates/rss.xml">RSS</a>) - Get updates on the Google Chrome browser and various web standards.</li>
<li><a href="http://projectnami.org">Project Nami News</a> (<a href="http://projectnami.org/category/news/feed/">RSS</a>) - This blog runs on WordPress using uses Project Nami which allows me to use SQL Server.</li>
</ul>
<h1 id="online-services">Online Services</h1>
<p>Find out how various online services are changing.</p>
<ul>
<li><a href="https://github.com/blog">The GitHub Blog</a> (<a href="https://github.com/blog.atom">RSS</a>) - I use GitHub daily, contributing to open source myself or for looking at source code. Find out what they are doing to improve the site.</li>
<li><a href="https://blog.cloudflare.com/">Cloudflare Blog</a> (<a href="http://blog.cloudflare.com/rss.xml">RSS</a>) - You should probably be using Cloudflare as your CDN for speed and cost savings, I use it for this site. They post product updates but also about major security vulnerabilities and hacking attempts.</li>
<li><a href="http://blog.nuget.org/">The NuGet Team Blog</a> (<a href="http://blog.nuget.org/feeds/atom.xml">RSS</a>) - Find out how NuGet is changing, they don&#39;t post too often but useful when they do.</li>
<li><a href="http://blog.schema.org/">Schema.org Blog</a> (<a href="http://blog.schema.org/feeds/posts/default">RSS</a>) - <a href="%22https://schema.org">Schema.org</a> defines a set of standard classes and their properties for objects and services in the real world. There are nearly 700 classes at the time of writing defined by schema.org. This machine readable format is a common standard used across the web for describing things. They produce blog posts when they add or change any schemas. I recently wrote about <a href="https://rehansaeed.com/structured-data-using-schema-net/">Schema.NET</a> which turns the 700 schemas into .NET POCO classes.</li>
</ul>
<h1 id="software-development-individuals">Software Development Individuals</h1>
<h2 id="aspnet-core">ASP.NET Core</h2>
<ul>
<li><a href="https://www.hanselman.com/blog/">Scott Hanselman&#39;s Blog</a> (<a href="http://feeds.feedburner.com/ScottHanselman">RSS</a>) - Microsoft developer on the ASP.NET team. The closest thing to a rock star developer.</li>
<li><a href="https://andrewlock.net/">Andrew Lock .NET Escapades</a> (<a href="http://andrewlock.net/rss/">RSS</a>) - Posts very frequently about ASP.NET Core.</li>
<li><a href="http://odetocode.com/">OdeToCode by K. Scott Allen</a> (<a href="http://feeds.feedburner.com/OdeToCode">RSS</a>) - PluralSight course author, covering various subjects Azure, .NET, Node.js and general web related technologies.</li>
<li><a href="https://www.strathweb.com">StrathWeb</a> (<a href="http://www.strathweb.com/feed/">RSS</a>) - ASP.NET blog posts.</li>
<li><a href="http://www.tpeczek.com/">Yet Another Developer Blog</a> (<a href="http://feeds.feedburner.com/YetAnotherDeveloperBlog">RSS</a>) - ASP.NET blog posts. Covers unusual topics in great depth.</li>
<li><a href="http://wildermuth.com/feed">Shawn Wildermuth&#39;s Blog</a> (<a href="http://feeds.feedburner.com/ShawnWildermuth">RSS</a>) - A PluralSight author covering ASP.NET and Bootstrap.</li>
<li><a href="http://aspnetmonsters.com/">ASP.NET Monsters</a> (<a href="http://aspnetmonsters.com/atom.xml">RSS</a>) - The ASP.NET Monsters are a group of three developers writing blog posts and posting videos.</li>
<li><a href="http://www.davepaquette.com/">Dave Paquette</a> (<a href="http://www.davepaquette.com/feed">RSS</a>) - One of the three ASP.NET Monsters who authors ASP.NET blog posts and videos.</li>
</ul>
<h2 id="web-technologies">Web Technologies</h2>
<ul>
<li><a href="https://blog.mariusschulz.com/">Marius Schulz</a> (<a href="http://blog.mariusschulz.com/posts.atom">RSS</a>) - Has written a great series of blog posts on TypeScript.</li>
<li><a href="http://addyosmani.com/blog">Addy Osmani</a> (<a href="http://feeds.feedburner.com/addyosmani">RSS</a>) - Google developer, I think he&#39;s on the Chrome team as blog posts feature new web standards built into the Chrome browser.</li>
<li><a href="http://jakearchibald.com/">Jake Archibald&#39;s Blog</a> (<a href="http://jakearchibald.com/posts.rss">RSS</a>) - A Google developer posting about new web standards and browser differences.</li>
</ul>
<h2 id="web-security">Web Security</h2>
<ul>
<li><a href="https://scotthelme.co.uk/">Scott Helme</a> (<a href="https://scotthelme.co.uk/feed/">RSS</a>) - Web security researcher and owner of <a href="https://securityheaders.io/">securityheaders.io</a>. Very in-depth, my number one resource on this subject.</li>
<li><a href="https://www.troyhunt.com/">Troy Hunt&#39;s Blog</a> (<a href="http://feeds.feedburner.com/TroyHunt">RSS</a>) - Another web security researcher, PluralSight author and owner of <a href="https://haveibeenpwned.com/">haveibeenpwned.com</a>.</li>
<li><a href="https://leastprivilege.com">Dominick Baier&#39;s leastprivilege.com</a> (<a href="http://leastprivilege.com/feed/">RSS</a>) - One of the two authors of IdentityServer. Taught me WCF a few years ago. A very good teacher.</li>
</ul>
<h2 id="windows">Windows</h2>
<p>I used to do a lot more Windows development with WPF, Silverlight and UWP etc. I don&#39;t really follow anyone from those days anymore except Mike Taulty</p>
<ul>
<li><a href="https://mtaulty.com">Mike Taulty</a> (<a href="http://feeds.feedburner.com/mtaulty">RSS</a>) - Microsoft evangelist. Writes Windows and Hololens blog posts.</li>
</ul>
<h2 id="other">Other</h2>
<p>These people don&#39;t really fit into any one category but are well worth reading:</p>
<ul>
<li><a href="http://blog.sixeyed.com/">Elton Stoneman</a> (<a href="http://blog.sixeyed.com/rss/">RSS</a>) - Works for Docker, also produced nice PluralSight courses on Docker.</li>
<li><a href="https://nblumhardt.com/">Nicholas Blumhardt</a> (<a href="http://nblumhardt.com/feed/">RSS</a>) - Started the excellent Serilog logging framework. Mostly Serilog updates.</li>
<li><a href="http://james.newtonking.com:80/">James Newton-King</a> (<a href="http://feeds.newtonking.com/jamesnewtonking">RSS</a>) - The author of JSON.NET. Find out about any updates to this important library.</li>
<li><a href="https://blog.codinghorror.com/">Coding Horror</a> (<a href="http://feeds.feedburner.com/codinghorror/">RSS</a>) - Founder of <a href="https://stackoverflow.com">Stack Overflow.com</a> and <a href="https://discourse.org">Discourse.org</a>.</li>
<li><a href="https://nickcraver.com/blog">Nick Craver</a> (<a href="http://nickcraver.com/blog/feed.xml">RSS</a>) - Developer at Stack Overflow. Blog posts are rare but very long and detailed when they come.</li>
<li><a href="https://rehansaeed.com">Muhammad Rehan Saeed</a> (<a href="https://rehansaeed.com/feed/">RSS</a>) - I do a lot of ASP.NET blog posts but some more general .NET posts too.</li>
<li><a href="http://www.natemcmaster.com/">Nate McMaster</a> (<a href="http://www.natemcmaster.com/feed.xml">RSS</a>) - Microsoft developer posting about MSBuild.</li>
</ul>
<h1 id="videos">Videos</h1>
<p>Videos are a great way to learn but they do suck up a lot of time so be selective.</p>
<ul>
<li><a href="https://vimeo.com/ndcconferences/videos">NDC Conferences&#39;s</a> (<a href="https://vimeo.com/ndcconferences/videos/rss">RSS</a>) - The NDC conferences happen in London, Oslo and Sydney every year. They post way too much content for me to handle. You have to be very selective about what you watch. Talks also get repeated quite a bit in different conferences. I&#39;m still watching videos from the last conference when the next one rolls up.</li>
<li><a href="https://vimeo.com/channels/cssday/videos">CSS Day</a> (<a href="https://vimeo.com/channels/cssday/videos/rss">RSS</a>) - CSS Day is an annual conference about CSS, posting a dozen videos a year that is well worth watching.</li>
<li><a href="https://s.ch9.ms/Shows/Azure-Friday">Azure Friday</a> (<a href="https://channel9.msdn.com/Shows/Azure-Friday/feed/mp4high">RSS</a>) - Find out about new features of Azure in these brief introductory videos.</li>
</ul>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Structured Data using Schema.NET]]></title>
        <id>https://rehansaeed.com/structured-data-using-schema-net/</id>
        <link href="https://rehansaeed.com/structured-data-using-schema-net/"/>
        <updated>2017-07-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Schema.NET is Schema.org objects turned into strongly typed C# POCO classes for use in .NET.]]></summary>
        <content type="html"><![CDATA[<h1 id="what-is-schemaorg">What is Schema.org?</h1>
<p><a href="https://schema.org">Schema.org</a> defines a set of standard classes and their properties for objects and services in the real world. There are nearly 700 classes at the time of writing defined by schema.org. This machine readable format is a common standard used across the web for describing things.</p>
<h1 id="where-is-schemaorg-used">Where is Schema.org Used?</h1>
<h3 id="websites">Websites</h3>
<p>Websites can define Structured Data in the head section of their html to enable search engines to show richer information in their search results. Here is an example of how <a href="https://developers.google.com/search/docs/guides/intro-structured-data">Google</a> can display extended metadata about your site in it&#39;s search results.</p>
<p><img src="https://rehansaeed.com/structured-data-using-schema-net/images/Google-Logo-Structured-Data-Example.png" alt="Google Logo Structured Data Example"></p>
<p>Using structured data in html requires the use of a script tag with a MIME type of <code>application/ld+json</code> like so:</p>
<pre><code class="language-html">&lt;script type=&quot;application/ld+json&quot;&gt;
{
  &quot;@context&quot;: &quot;http://schema.org&quot;,
  &quot;@type&quot;: &quot;Organization&quot;,
  &quot;url&quot;: &quot;http://www.example.com&quot;,
  &quot;name&quot;: &quot;Unlimited Ball Bearings Corp.&quot;,
  &quot;contactPoint&quot;: {
    &quot;@type&quot;: &quot;ContactPoint&quot;,
    &quot;telephone&quot;: &quot;+1-401-555-1212&quot;,
    &quot;contactType&quot;: &quot;Customer service&quot;
  }
}
&lt;/script&gt;
</code></pre>
<h3 id="windows-uwp-sharing">Windows UWP Sharing</h3>
<p>Windows UWP apps let you share data using schema.org classes. <a href="https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/appxmanifestschema/element-sharetarget">Here</a> is an example showing how to share metadata about a book.</p>
<h1 id="enter-schemanet">Enter Schema.NET</h1>
<p>Schema.NET is Schema.org objects turned into strongly typed C# POCO classes for use in .NET. All classes can be serialized into JSON/JSON-LD. Here is a simple Schema.NET example that defines the name and URL of a website:</p>
<pre><code class="language-cs">var website = new WebSite()
{
    AlternateName = &quot;An Alternative Name&quot;,
    Name = &quot;Your Site Name&quot;,
    Url = new Uri(&quot;https://example.com&quot;)
};
var jsonLd = website.ToString();
</code></pre>
<p>The code above outputs the following JSON-LD:</p>
<pre><code class="language-json">{
    &quot;@context&quot;:&quot;http://schema.org&quot;,
    &quot;@type&quot;:&quot;WebSite&quot;,
    &quot;alternateName&quot;:&quot;An Alternative Name&quot;,
    &quot;name&quot;:&quot;Your Site Name&quot;,
    &quot;url&quot;:&quot;https://example.com&quot;
}
</code></pre>
<p>There are dozens more examples based on Google&#39;s Structured Data documentation with links to the relevant page in the unit tests of the Schema.NET project.</p>
<h1 id="classes--properties">Classes &amp; Properties</h1>
<p>schema.org defines classes and properties, where each property can have a single value or an array of multiple values. Additionally, properties can have multiple types e.g. an <code>Address</code> property could have a type of <code>string</code> or a type of <code>PostalAddress</code> which has it&#39;s own properties such as <code>StreetAddress</code> or <code>PostalCode</code> which breaks up an address into it&#39;s constituent parts.</p>
<p>To facilitate this Schema.NET uses some clever C# generics and implicit type conversions so that setting a single or multiple values is possible and that setting a <code>string</code> or <code>PostalAddress</code> is also possible:</p>
<pre><code class="language-cs">// Single string address
var organization = new Organization()
{
    Address = &quot;123 Old Kent Road E10 6RL&quot;
};

// Multiple string addresses
var organization = new Organization()
{
    Address = new List&lt;string&gt;()
    { 
        &quot;123 Old Kent Road E10 6RL&quot;,
        &quot;456 Finsbury Park Road SW1 2JS&quot;
    }
};

// Single PostalAddress address
var organization = new Organization()
{
    Address = new PostalAddress()
    {
        StreetAddress = &quot;123 Old Kent Road&quot;,
        PostalCode = &quot;E10 6RL&quot;
    }
};

// Multiple PostalAddress addresses
var organization = new Organization()
{
    Address = new List&lt;PostalAddress&gt;()
    {
        new PostalAddress()
        {
            StreetAddress = &quot;123 Old Kent Road&quot;,
            PostalCode = &quot;E10 6RL&quot;
        },
        new PostalAddress()
        {
            StreetAddress = &quot;456 Finsbury Park Road&quot;,
            PostalCode = &quot;SW1 2JS&quot;
        }
    }
};
</code></pre>
<p>This magic is all carried out using the <code>Value&lt;T&gt;</code>, <code>Value&lt;T1, T2&gt;</code>, <code>Value&lt;T1, T2, T3&gt;</code> etc. types. These types are all <code>structs</code> for best performance too.</p>
<h1 id="where-to-get-it">Where to Get It?</h1>
<p>Download the Schema.NET <a href="https://www.nuget.org/packages/Schema.NET">NuGet package</a> or take a look at the code on <a href="https://github.com/RehanSaeed/Schema.NET">GitHub</a>. At some point I&#39;ll find the time to write a quick ASP.NET Core tag helper that wraps Schema.NET.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ASP.NET Core Lazy Command Pattern]]></title>
        <id>https://rehansaeed.com/asp-net-core-lazy-command-pattern/</id>
        <link href="https://rehansaeed.com/asp-net-core-lazy-command-pattern/"/>
        <updated>2017-04-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Move your ASP.NET Core MVC action method logic into lazily loaded commands using the command pattern, to reduce Controller complexity.]]></summary>
        <content type="html"><![CDATA[<p>::: tip TLDR
Move your ASP.NET Core MVC action method logic into lazily loaded commands using the command pattern.
:::</p>
<p>When writing your Controllers in ASP.NET Core, you can end up with a very long class if you&#39;re not careful. You may have written several action methods with a few lines of code in each, you may be injecting a few services into your controller and you may have commented your action methods to support Swagger. The point is it&#39;s very easy to do, here is an example:</p>
<pre><code class="language-cs">[Route(&quot;[controller]&quot;)]
public class RocketController : Controller
{
    private readonly IPlanetRepository planetRepository;
    private readonly IRocketRepository rocketRepository;

    public RocketController(
        IPlanetRepository planetRepository,
        IRocketRepository rocketRepository)
    {
        this.planetRepository = planetRepository;
        this.rocketRepository = rocketRepository;
    }
    
    [HttpGet(&quot;{rocketId}&quot;)]
    public async Task&lt;IActionResult&gt; GetRocket(int rocketId)
    {
        var rocket = await this.rocketRepository.GetRocket(rocketId);
        if (rocket == null)
        {
            return this.NotFound();
       }
        return this.Ok(rocket);
    }
    
    [HttpGet(&quot;{rocketId}/launch/{planetId}&quot;)]
    public async Task&lt;IActionResult&gt; LaunchRocket(int rocketId, int planetId)
    {
        var rocket = await this.rocketRepository.GetRocket(rocketId);
        if (rocket == null)
        {
            return this.NotFound();
        }
        var planet = await this.planetRepository.GetPlanet(planetId);
        if (planet == null)
        {
            return this.NotFound();
        }
        this.rocketRepository.VisitPlanet(rocket, planet);
        return this.Ok(rocket);
    }
}
</code></pre>
<h1 id="the-command-pattern">The Command Pattern</h1>
<p>This is where the command pattern can come in handy. The command pattern moves logic from each action method and injected dependencies into their own class like so:</p>
<pre><code class="language-cs">[Route(&quot;[controller]&quot;)]
public class RocketController : Controller
{
    private readonly Lazy&lt;IGetRocketCommand&gt; getRocketCommand;
    private readonly Lazy&lt;ILaunchRocketCommand&gt; launchRocketCommand;

    public RocketController(
        Lazy&lt;IGetRocketCommand&gt; getRocketCommand,
        Lazy&lt;ILaunchRocketCommand&gt; launchRocketCommand)
    {
        this.getRocketCommand = getRocketCommand;
        this.launchRocketCommand = launchRocketCommand;
    }

    [HttpGet(&quot;{rocketId}&quot;)]
    public Task&lt;IActionResult&gt; GetRocket(int rocketId) =&gt;
        this.getRocketCommand.Value.ExecuteAsync(rocketId);

    [HttpGet(&quot;{rocketId}/launch/{planetId}&quot;)]
    public Task&lt;IActionResult&gt; LaunchRocket(int rocketId, int planetId) =&gt;
        this.launchRocketCommand.Value.ExecuteAsync(rocketId, planetId);
}

public interface IGetRocketCommand : IAsyncCommand&lt;int&gt;
{
}

public class GetRocketCommand : IGetRocketCommand
{
    private readonly IRocketRepository rocketRepository;

    public GetRocketCommand(IRocketRepository rocketRepository) =&gt;
        this.rocketRepository = rocketRepository;

    public async Task&lt;IActionResult&gt; ExecuteAsync(int rocketId)
    {
        var rocket = await this.rocketRepository.GetRocket(rocketId);
        if (rocket == null)
        {
            return new NotFoundResult();
        }
        return new OkObjectResult(rocket);
    }
}
</code></pre>
<p>All the logic and dependencies in the controllers gets moved to the command which now has a single responsibility. The controller now has a different set of dependencies, it now lazily injects one command per action method.</p>
<p>You may have noticed the <code>IAsyncCommand</code> interface. I keep four of these handy to inherit from. They all outline an <code>ExecuteAsync</code> method to execute the command and return an <code>IActionResult</code> but they have a differing number of parameters. I personally feel if you are needing more than three parameters you should be using a class to represent your parameters, so I&#39;ve put the limit on three parameters.</p>
<pre><code class="language-cs">public interface IAsyncCommand
{
    Task&lt;IActionResult&gt; ExecuteAsync();
}
public interface IAsyncCommand&lt;T&gt;
{
    Task&lt;IActionResult&gt; ExecuteAsync(T parameter);
}
public interface IAsyncCommand&lt;T1, T2&gt;
{
    Task&lt;IActionResult&gt; ExecuteAsync(T1 parameter1, T2 parameter2);
}
public interface IAsyncCommand&lt;T1, T2, T3&gt;
{
    Task&lt;IActionResult&gt; ExecuteAsync(T1 parameter1, T2 parameter2, T3 parameter3);
}
</code></pre>
<h1 id="why-so-lazy">Why so Lazy?</h1>
<p>Why do we use <code>Lazy&lt;T&gt;</code>? Well the answer is that if we have multiple action methods on our controller, we don&#39;t want to instantiate the dependencies for every action method if we are only planning on using one action method. Registering our Lazy commands requires a bit of extra work in out <code>Startup.cs</code>. We can register lazy dependencies like so:</p>
<pre><code class="language-cs">public void ConfigureServices(IServiceCollection services)
{
    // ...Omitted
    services
        .AddScoped&lt;IGetRocketCommand, GetRocketCommand&gt;()
        .AddScoped(x =&gt; new Lazy&lt;IGetRocketCommand&gt;(
            () =&gt; x.GetRequiredService&lt;IGetRocketCommand&gt;()));
}
</code></pre>
<h1 id="httpcontext-and-actioncontext">HttpContext and ActionContext</h1>
<p>Now you might be thinking, how do I access the <code>HttpContext</code> or <code>ActionContext</code> if I want to set a HTTP header for example? Well, you can use the <code>IHttpContextAccessor</code> or <code>IActionContextAccessor</code> interfaces for this purpose. You can register them in your <code>Startup</code> class like so:</p>
<pre><code class="language-cs">public void ConfigureServices(IServiceCollection services)
{
    // ...Omitted
    services
        .AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;()
        .AddSingleton&lt;IActionContextAccessor, ActionContextAccessor&gt;();
}
</code></pre>
<p>Notice that they can be registered as singletons. You can then use them to get hold of the <code>HttpContext</code> or <code>ActionContext</code> objects for the current HTTP request. Here is a really simple example.</p>
<pre><code class="language-cs">public class SetHttpHeaderCommand : ISetHttpHeaderCommand
{
    private readonly IHttpContextAccessor httpContextAccessor;

    public GetRocketCommand(IHttpContextAccessor httpContextAccessor) =&gt;
        this.httpContextAccessor = httpContextAccessor;

    public async Task&lt;IActionResult&gt; ExecuteAsync()
    {
        this.httpContextAccessor.HttpContext.Response.Headers.Add(&quot;X-Rocket&quot;, &quot;Saturn V&quot;);
        return new OkResult();
    }
}
</code></pre>
<h1 id="unit-testing">Unit Testing</h1>
<p>Another upside to the command pattern is that testing each command becomes super simple. You don&#39;t need to setup a controller with lots of dependencies that you don&#39;t care about. You only need to write test code for that single feature.</p>
<h1 id="conclusions">Conclusions</h1>
<p>For a full working example, take a look at the <a href="https://github.com/Dotnet-Boxed/Templates/blob/main/Docs/API.md">.NET Boxed API</a> project template which makes full use of the Lazy Command Pattern.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[dotnet new Feature Selection]]></title>
        <id>https://rehansaeed.com/dotnet-new-feature-selection/</id>
        <link href="https://rehansaeed.com/dotnet-new-feature-selection/"/>
        <updated>2017-03-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to add feature selection to your dotnet new template using symbols (bool, string, choice, computed) and pre-processor directives.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/custom-project-templates-using-dotnet-new/">dotnet new - Custom Project Templates Using dotnet new</a></li>
<li><a href="https://rehansaeed.com/dotnet-new-feature-selection/">dotnet new - dotnet new Feature Selection</a></li>
<li><a href="https://rehansaeed.com/unit-testing-dotnet-new-templates/">dotnet new - Unit Testing dotnet new Templates</a></li>
</ol>
<p>In my last post I showed how to <a href="https://rehansaeed.com/custom-project-templates-using-dotnet-new/">get started</a> with using <code>dotnet new</code> to build project templates. In this post, I&#39;m going to build on that knowledge and show how to add feature selection to your project template so developers can choose to add or remove bits of your template. If you check out my <a href="https://github.com/Dotnet-Boxed/Templates">.NET Boxed API</a> project template, you&#39;ll see that I have 17 features for you to set. If you run the help command against my template you&#39;ll see a description of each and instructions on how you can set them (I&#39;ve cleaned up the CLI output, the current help commands output is pretty awful but this is being <a href="https://github.com/dotnet/templating/issues/348">addressed</a> in the next version of <code>dotnet new</code>).</p>
<pre><code>PS C:\Users\rehan.saeed&gt; dotnet new api --help
Template Instantiation Commands for .NET Core CLI.

Usage: dotnet new [arguments] [options]

Arguments:
  template  The template to instantiate.

Options:
  -l|--list         List templates containing the specified name.
  -lang|--language  Specifies the language of the template to create
  -n|--name         The name for the output being created. If no name is specified, the name of the current directory is
used.
  -o|--output       Location to place the generated output.
  -h|--help         Displays help for this command.
  -all|--show-all   Shows all templates

.NET Boxed API (C#)
Author: Muhammad Rehan Saeed (RehanSaeed.com)
Options:
  -Ti|--Title: The name of the project which determines the assembly product name. If the Swagger feature is enabled,
    shows the title on the Swagger UI.
    string - Optional
    Default: Project Title
  -D|--Description: A description of the project which determines the assembly description. If the Swagger feature is
    enabled, shows the description on the Swagger UI.
    string - Optional
    Default: Project Description
  -Au|--Author: The name of the author of the project which determines the assembly author, company and copyright
    information.
    string - Optional
    Default: Project Author
  -Sw|--Swagger: Swagger is a format for describing the endpoints in your API. Swashbuckle is used to generate a
    Swagger document and to generate beautiful API documentation, including a UI to explore and test operations,
    directly from your routes, controllers and models.
    bool - Optional
    Default: true
  -T|--TargetFramework: Decide which version of the .NET Framework to target.
    .NET Core         - Run cross platform (on Windows, Mac and Linux). The framework is made up of NuGet packages
                        which can be shipped with the application so it is fully stand-alone.
    .NET Framework    - Gives you access to the full breadth of libraries available in .NET instead of the subset
                        available in .NET Core but requires it to be pre-installed.
    Both              - Target both .NET Core and .NET Framework.
    Default: Both
  -P|--PrimaryWebServer: The primary web server you want to use to host the site.
    Kestrel        - A web server for ASP.NET Core that is not intended to be internet facing as it has not been
                     security tested. IIS or NGINX should be placed in front as reverse proxy web servers.
    WebListener    - A Windows only web server. It gives you the option to take advantage of Windows specific
                     features, like Windows authentication, port sharing, HTTPS with SNI, HTTP/2 over TLS
                     (Windows 10), direct file transmission, and response caching WebSockets (Windows 8).
    Default: Kestrel
  -Re|--ReverseProxyWebServer: The internet facing reverse proxy web server you want to use in front ofthe primary
    web server to host the site.
    Internet Information Services (IIS) - A flexible, secure and manageable Web server for hosting anything on the
                                          Web using Windows Server. Select this option if you are deploying your site
                                          to Azure web apps. IIS is preconfigured to set request limits for security.
    NGINX                               - A free, open-source, cross-platform high-performance HTTP server and
                                          reverse proxy, as well as an IMAP/POP3 proxy server. It does have a Windows
                                          version but its not very fast and IIS is better on that platform. If the
                                          HTTPS Everywhere feature is enabled, NGINX is pre-configured to enable the
                                          most secure TLS protocols and ciphers for security and to enable HTTP 2.0
                                          and SSL stapling for performance.
    Both                                - Support both reverse proxy web servers.
    Default: Both
  -C|--CloudProvider: Select which cloud provider you are using if any, to add cloud specific features.
    Azure    - The Microsoft Azure cloud. Adds logging features that let you see logs in the Azure portal.
    None     - No cloud provider is being used.
    Default: None
  -A|--Analytics: Monitor internal information about how your application is running, as well as external user
    information.
    Application Insights    - Monitor internal information about how your application is running, as well as
                              external user information using the Microsoft Azure cloud.
    None                    - Not using any analytics.
    Default: None
  -Ap|--ApplicationInsightsInstrumentationKey: Your Application Insights instrumentation key
    e.g. 11111111-2222-3333-4444-555555555555.
    string - Optional
    Default: APPLICATION-INSIGHTS-INSTRUMENTATION-KEY
  -H|--HttpsEverywhere: Use the HTTPS scheme and TLS security across the entire site, redirects HTTP to HTTPS and
    adds a Strict Transport Security (HSTS) HTTP header with preloading enabled. Configures the primary and reverse
    proxy web servers for best security and adds a development certificate file for use in your development environment.
    bool - Optional
    Default: true
  -Pu|--PublicKeyPinning: Adds the Public-Key-Pins (HPKP) HTTP header to responses. It stops man-in-the-middle
    attacks by telling browsers exactly which TLS certificate you expect. You must have two TLS certificates for this
    to work, if you get this wrong you will have performed a denial of service attack on yourself.
    bool - Optional
    Default: false
  -CO|--CORS: Browser security prevents a web page from making AJAX requests to another domain. This restriction is
    called the same-origin policy, and prevents a malicious site from reading sensitive data from another site.
    CORS is a W3C standard that allows a server to relax the same-origin policy. Using CORS, a server can explicitly
    allow some cross-origin requests while rejecting others.
    bool - Optional
    Default: true
  -X|--XmlFormatter: Choose whether to use the XML input/output formatter and which serializer to use.
    DataContractSerializer - The default XML serializer you should use. Requires the use of [DataContract] and
                             [DataMember] attributes.
    XmlSerializer          - The alternative XML serializer which is slower but gives more control. Uses the
                             [XmlRoot], [XmlElement] and [XmlAttribute] attributes.
    None                   - No XML formatter.
    Default: None
  -S|--StatusController: An endpoint that returns the status of this API and its dependencies, giving an indication
    of its health. This endpoint can be called by site monitoring tools which ping the site or by load balancers
    which can remove an instance of this API if it is not functioning correctly.
    bool - Optional
    Default: true
  -R|--RequestId: Require that all requests send the X-Request-ID HTTP header containing a GUID. This is useful where
    you have access to the client and server logs and want to correlate a request and response between the two.
    bool - Optional
    Default: false
  -U|--UserAgent: Require that all requests send the User-Agent HTTP header containing the application name and
    version of the caller.
    bool - Optional
    Default: false
  -Ro|--RobotsTxt: Adds a robots.txt file to tell search engines not to index this site.
    bool - Optional
    Default: true
  -Hu|--HumansTxt: Adds a humans.txt file where you can tell the world who wrote the application. This file is a good
    place to thank your developers.
    bool - Optional
    Default: true
</code></pre>
<p>As you can see from the output, there are a few different types of feature you can create. You can also choose to make a feature required or optional. An optional feature, if not specified by the user will fall-back to a default value. Here are the different types available:</p>
<ul>
<li><strong>bool</strong> - This feature can be turned on or off and has a default of true or false.</li>
<li><strong>string</strong> - This can be used to do a string replacement in your template. It has a default value which you can set to any arbitrary value.</li>
<li><strong>choice</strong> - This is a feature with two or more named choices. Each choice can have it&#39;s own description. The default value must be one of the choices.</li>
<li><strong>computed</strong> - These are features flags that can be computed based on other symbols.</li>
</ul>
<h1 id="bool-symbols">Bool Symbols</h1>
<p>You can create a boolean feature by adding symbols section to your <code>template.json</code> file. If you look at the example below, I&#39;ve specified an optional bool symbol, with a default value of true.</p>
<pre><code class="language-json">{
  ...
  &quot;symbols&quot;: {
    &quot;Swagger&quot;: {
      &quot;type&quot;: &quot;parameter&quot;,
      &quot;datatype&quot;: &quot;bool&quot;,
      &quot;isRequired&quot;: false,
      &quot;defaultValue&quot;: &quot;true&quot;,
      &quot;description&quot;: &quot;Your description...&quot;
    }
  }
}
</code></pre>
<p>In your code, you can then use the symbol name, in this case <code>Swagger</code> as a pre-processor directive in C# code:</p>
<pre><code class="language-cs">#if (Swagger)
Console.WriteLine(&quot;Swagger feature was selected&quot;);
#else
Console.WriteLine(&quot;Swagger feature was not selected&quot;);
#endif
</code></pre>
<p>This is really cool because you can still run the application as a template author and the project will still work. If you define a <code>Swagger</code> constant in your project properties, your feature will turn on or off too. This makes debugging your project template very easy as a template author.</p>
<p>If you want to use the symbol in files other than C# where pre-processor directives do not exist, you can use the comment syntax specific to that file extension, so in a JavaScript file would use the <code>//</code> syntax:</p>
<pre><code class="language-cs">//#if (Swagger)
console.log(&#39;Swagger feature was selected&#39;);
//#else
console.log(&#39;Swagger feature was not selected&#39;);
//#endif
</code></pre>
<p>Most file extensions that have their own comment syntax have been catered for. For text files where there is no comment syntax or for any file extension that the templating engine doesn&#39;t know about you can use the <code>#</code> character:</p>
<pre><code class="language-cs">#if (Swagger)
Swagger feature was selected
#else
Swagger feature was not selected
#endif
</code></pre>
<p>You can look at <a href="https://github.com/dotnet/templating/blob/cb9edbfe02c038a306fbcb6bbe162462d5fb59f0/src/Microsoft.TemplateEngine.Orchestrator.RunnableProjects/Config/ConditionalConfig.cs">this</a> code in the templating engine for a full list of supported file extensions and comment types.</p>
<h1 id="string-symbols">String Symbols</h1>
<p>String symbols can be used to do simple file replace operations.</p>
<pre><code class="language-json">{
  ...
  &quot;symbols&quot;: {
    &quot;Title&quot;: {
      &quot;type&quot;: &quot;parameter&quot;,
      &quot;datatype&quot;: &quot;string&quot;,
      &quot;isRequired&quot;: false,
      &quot;defaultValue&quot;: &quot;Default Project Title&quot;,
      &quot;replaces&quot;: &quot;PROJECT-TITLE&quot;,
      &quot;description&quot;: &quot;Your description...&quot;
    }
  }
}
</code></pre>
<p>The above symbol looks for a <code>PROJECT-TITLE</code> string and replaces it with whatever the user specifies or with the default value <code>Default Project Title</code> if the user doesn&#39;t set anything.</p>
<h1 id="choice-symbols">Choice Symbols</h1>
<p>A choice symbol is useful when you have more than two options and can&#39;t use bool.</p>
<pre><code class="language-json">{
  ...
  &quot;symbols&quot;: {
    &quot;TargetFramework&quot;: {
      &quot;type&quot;: &quot;parameter&quot;,
      &quot;datatype&quot;: &quot;choice&quot;,
      &quot;isRequired&quot;: false,
      &quot;choices&quot;: [
        {
          &quot;choice&quot;: &quot;.NET Core&quot;,
          &quot;description&quot;: &quot;Your description...&quot;
        },
        {
          &quot;choice&quot;: &quot;.NET Framework&quot;,
          &quot;description&quot;: &quot;Your description...&quot;
        },
        {
          &quot;choice&quot;: &quot;Both&quot;,
          &quot;description&quot;: &quot;Your description...&quot;
        }
      ],
      &quot;defaultValue&quot;: &quot;Both&quot;,
      &quot;description&quot;: &quot;Your description...&quot;
    }
}
</code></pre>
<p>In the example above, you have the choice of selecting a target framework, with a value of <code>.NET Core</code>, <code>.NET Framework</code> or <code>Both</code>. Each choice has it&#39;s own description and the overall symbol also has it&#39;s description.</p>
<h1 id="computed-symbols">Computed Symbols</h1>
<p>In the above example, you can&#39;t use the value &#39;.NET Core&#39; as a C# pre-processor variable because it contains a dot and a space. This is where a computed symbol comes in handy.</p>
<pre><code class="language-json">{
  ...
  &quot;symbols&quot;: {
   &quot;NETCore&quot;: {
      &quot;type&quot;: &quot;computed&quot;,
      &quot;value&quot;: &quot;(TargetFramework == \&quot;.NET Core\&quot; || TargetFramework == \&quot;Both\&quot;)&quot;
    },
    &quot;NETFramework&quot;: {
      &quot;type&quot;: &quot;computed&quot;,
      &quot;value&quot;: &quot;(TargetFramework == \&quot;.NET Framework\&quot; || TargetFramework == \&quot;Both\&quot;)&quot;
    }
  }
}
</code></pre>
<p>Here I have set up two computed symbols which determines whether &#39;.NET Core&#39; or &#39;.NET Framework&#39; was selected individually in the previous choice symbol. I have named these symbols without a dot or space i.e. <code>NETCore</code> and <code>NETFramework</code> so I can use these as C# pre-processor symbols, the same way I showed above.</p>
<h1 id="conditionally-deleting-files-or-folders">Conditionally Deleting Files or Folders</h1>
<p>You can also use symbols to delete certain files or folders. In this example, I&#39;ve extended my bool symbol example to additionally remove two files and a folder if the feature is deselected by the user.</p>
<pre><code class="language-json">{
  ...
  &quot;symbols&quot;: {
    &quot;Swagger&quot;: {
      &quot;type&quot;: &quot;parameter&quot;,
      &quot;datatype&quot;: &quot;bool&quot;,
      &quot;isRequired&quot;: false,
      &quot;defaultValue&quot;: &quot;true&quot;,
      &quot;description&quot;: &quot;Your description...&quot;
    }
  },
  &quot;sources&quot;: [
    {
      &quot;modifiers&quot;: [
        {
          &quot;condition&quot;: &quot;(!Swagger)&quot;,
          &quot;exclude&quot;: [
            &quot;Constants/HomeControllerRoute.cs&quot;,
            &quot;Controllers/HomeController.cs&quot;,
            &quot;ViewModelSchemaFilters/**/*&quot;
          ]
        }
      ]
    }
  ]
}
</code></pre>
<p>You do this by adding source modifiers. I&#39;ve added one here with a condition and three file and folder exclusions. The exclusions use a globbing pattern.</p>
<h1 id="whats-next">What&#39;s Next?</h1>
<p>There are several other useful features of the templating engine which I&#39;ll cover in a follow up post as this is starting to get quite long. Feel free to take a look at the <a href="https://github.com/Dotnet-Boxed/Templates">source code</a> for my API template to see a full example.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cleaning Up CSPROJ]]></title>
        <id>https://rehansaeed.com/cleaning-up-csproj/</id>
        <link href="https://rehansaeed.com/cleaning-up-csproj/"/>
        <updated>2017-03-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I show how to make the new Visual Studio 2017 .NET Core based csproj XML concise and pretty for hand editing.]]></summary>
        <content type="html"><![CDATA[<p>::: tip TLDR
I show how to make <code>csproj</code> XML concise and pretty for hand editing.
:::</p>
<p>I used <code>project.json</code> since Beta 7 and got used to hand editing it, I&#39;ve continues that practice with <code>.csproj</code> files and I think you should too. Recent version of Visual Studio have made a lot of performance improvements but it&#39;s still a lot slower than hand editing a text file.</p>
<p>The NuGet package screen in Visual Studio is achingly slow. Bulk editing takes seconds. I can update NuGet package references, package properties etc. all in one go, rather than visiting multiple disparate UI&#39;s in Visual Studio. Finally, I create new projects by copying and pasting an existing <code>csproj</code> and tweaking it. Much faster than Visual Studio&#39;s New Project dialogue.</p>
<h1 id="install-project-file-tools">Install Project File Tools</h1>
<p>The <a href="https://marketplace.visualstudio.com/items?itemName=ms-madsk.ProjectFileTools">Project File Tools</a> Visual Studio extension gives you intellisense for NuGet packages in the new <code>csproj</code> projects. Unfortunately, due to MSBuild being around for so long and being so complex, intellisense for the rest of the project XML consists of a massive list of possible properties so it becomes less useful than it was in <code>project.json</code>.</p>
<h1 id="dotnet-migrate---wow-thats-ugly">dotnet migrate - Wow that&#39;s ugly!</h1>
<p>After migrating my <code>project.json</code> projects to <code>csproj</code> using Visual Studio 2017 (You could also use the <code>dotnet migrate</code> command), I found that that the XML generated was pretty ugly and contained superfluous elements you just didn&#39;t need. Here is an example <code>csproj</code> library project straight after migration:</p>
<pre><code class="language-xml">&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;

  &lt;PropertyGroup&gt;
    &lt;Description&gt;...&lt;/Description&gt;
    &lt;Copyright&gt;Copyright © Muhammad Rehan Saeed. All rights Reserved&lt;/Copyright&gt;
    &lt;AssemblyTitle&gt;Dotnet Boxed Framework&lt;/AssemblyTitle&gt;
    &lt;VersionPrefix&gt;2.2.2&lt;/VersionPrefix&gt;
    &lt;Authors&gt;Muhammad Rehan Saeed (RehanSaeed.com)&lt;/Authors&gt;
    &lt;TargetFrameworks&gt;netstandard1.6;net461&lt;/TargetFrameworks&gt;
    &lt;TreatWarningsAsErrors&gt;true&lt;/TreatWarningsAsErrors&gt;
    &lt;GenerateDocumentationFile&gt;true&lt;/GenerateDocumentationFile&gt;
    &lt;AssemblyName&gt;Boxed.AspNetCore&lt;/AssemblyName&gt;
    &lt;AssemblyOriginatorKeyFile&gt;../../../Key.snk&lt;/AssemblyOriginatorKeyFile&gt;
    &lt;SignAssembly&gt;true&lt;/SignAssembly&gt;
    &lt;PublicSign Condition=&quot; &#39;$(OS)&#39; != &#39;Windows_NT&#39; &quot;&gt;true&lt;/PublicSign&gt;
    &lt;PackageId&gt;Boxed.AspNetCore&lt;/PackageId&gt;
    &lt;PackageTags&gt;ASP.NET;ASP.NET Core;MVC;Boxed;Muhammad Rehan Saeed;Framework&lt;/PackageTags&gt;
    &lt;PackageReleaseNotes&gt;Updated to ASP.NET Core 1.1.2.&lt;/PackageReleaseNotes&gt;
    &lt;PackageIconUrl&gt;https://raw.githubusercontent.com/Dotnet-Boxed/Framework/main/Images/Icon.png&lt;/PackageIconUrl&gt;
    &lt;PackageProjectUrl&gt;https://github.com/Dotnet-Boxed/Framework&lt;/PackageProjectUrl&gt;
    &lt;PackageLicenseUrl&gt;https://github.com/Dotnet-Boxed/Framework/blob/main/LICENSE&lt;/PackageLicenseUrl&gt;
    &lt;PackageRequireLicenseAcceptance&gt;true&lt;/PackageRequireLicenseAcceptance&gt;
    &lt;RepositoryType&gt;git&lt;/RepositoryType&gt;
    &lt;RepositoryUrl&gt;https://github.com/Dotnet-Boxed/Framework.git&lt;/RepositoryUrl&gt;
    &lt;GenerateAssemblyConfigurationAttribute&gt;false&lt;/GenerateAssemblyConfigurationAttribute&gt;
    &lt;GenerateAssemblyCompanyAttribute&gt;false&lt;/GenerateAssemblyCompanyAttribute&gt;
    &lt;GenerateAssemblyProductAttribute&gt;false&lt;/GenerateAssemblyProductAttribute&gt;
  &lt;/PropertyGroup&gt;

  &lt;ItemGroup&gt;
    &lt;ProjectReference Include=&quot;..\Framework\Framework.csproj&quot; /&gt;
  &lt;/ItemGroup&gt;

  &lt;ItemGroup&gt;
    &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Mvc.Abstractions&quot; Version=&quot;1.1.2&quot; /&gt;
    &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Mvc.Core&quot; Version=&quot;1.1.2&quot; /&gt;
    &lt;PackageReference Include=&quot;Microsoft.Extensions.Caching.Abstractions&quot; Version=&quot;1.1.1&quot; /&gt;
    &lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration.Binder&quot; Version=&quot;1.1.1&quot; /&gt;
    &lt;PackageReference Include=&quot;Newtonsoft.Json&quot; Version=&quot;9.0.1&quot; /&gt;
    &lt;PackageReference Include=&quot;StyleCop.Analyzers&quot; Version=&quot;1.0.0&quot;&gt;
      &lt;PrivateAssets&gt;All&lt;/PrivateAssets&gt;
    &lt;/PackageReference&gt;
  &lt;/ItemGroup&gt;

  &lt;ItemGroup Condition=&quot; &#39;$(TargetFramework)&#39; == &#39;netstandard1.6&#39; &quot;&gt;
    &lt;PackageReference Include=&quot;System.Xml.XDocument&quot; Version=&quot;4.3.0&quot; /&gt;
  &lt;/ItemGroup&gt;

  &lt;ItemGroup Condition=&quot; &#39;$(TargetFramework)&#39; == &#39;net461&#39; &quot;&gt;
    &lt;Reference Include=&quot;System.ServiceModel&quot; /&gt;
    &lt;Reference Include=&quot;System.Xml&quot; /&gt;
    &lt;Reference Include=&quot;System.Xml.Linq&quot; /&gt;
    &lt;Reference Include=&quot;System&quot; /&gt;
    &lt;Reference Include=&quot;Microsoft.CSharp&quot; /&gt;
  &lt;/ItemGroup&gt;

&lt;/Project&gt;
</code></pre>
<h2 id="understanding-new-csproj-projects">Understanding new csproj Projects</h2>
<p>The top of the project contains a new SDK property. This imports some MSBuild targets and props files in your <code>dotnet</code> installation folder shown below:</p>
<p><img src="https://rehansaeed.com/cleaning-up-csproj/images/Dotnet-SDKs.png" alt="dotnet SDK&#39;s"></p>
<p>If you root around in those files, you can find defaults for all kinds of settings. Here are some of the nuggets I discovered about the web projects:</p>
<ul>
<li>The <code>NETStandard.Library</code> version <code>1.6.1</code> NuGet package is referenced for you by default.</li>
<li>The <code>wwwroot</code> folder is excluded from compilation but included in the published output.</li>
<li><code>web.config</code>, <code>.cshtml</code> and <code>.json</code> files are published by default.</li>
<li>Server garbage collection is turned on by default using the <code>ServerGarbageCollection</code> setting.</li>
<li><code>PreserveCompilationContext</code> is set to true by default.</li>
<li><code>node_modules</code>, <code>jspm_packages</code> and <code>bower_components</code> are excluded by default.</li>
</ul>
<h2 id="assemblyinfocs-is-partially-dead">AssemblyInfo.cs is Partially Dead</h2>
<p>You don&#39;t need <code>AssemblyInfo.cs</code> anymore by default as the <code>csproj</code> Package settings also set many of the assembly attributes. In fact, you didn&#39;t really need it with <code>project.json</code> either but the default templates mostly included it for some reason. However, I still found I needed to resurrect it in some cases to use the <code>InternalsVisibleTo</code> attribute. <code>InternalsVisibleTo</code> allows my unit test projects to access internal members in my library project. After a <code>dotnet migrate</code>, you may see the following elements which stop certain assembly attributes from being generated. You can safely delete these.</p>
<pre><code class="language-xml">&lt;PropertyGroup&gt;
  &lt;!-- ...Omitted --&gt;
  &lt;GenerateAssemblyConfigurationAttribute&gt;false&lt;/GenerateAssemblyConfigurationAttribute&gt;
  &lt;GenerateAssemblyCompanyAttribute&gt;false&lt;/GenerateAssemblyCompanyAttribute&gt;
  &lt;GenerateAssemblyProductAttribute&gt;false&lt;/GenerateAssemblyProductAttribute&gt;
&lt;PropertyGroup&gt;
</code></pre>
<h2 id="remove-system-references">Remove System.* References</h2>
<p>You no longer need to explicitly reference <code>System.*</code> references in your <code>csproj</code>. David Fowler recommends that you always reference the <code>NETStandard.Library</code> meta NuGet package gives you most <code>System.*</code> references. You get <code>NETStandard.Library</code> by default if you use the SDK attribute at the top of the <code>csproj</code>:</p>
<pre><code class="language-xml">&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;
  &lt;!-- ...Omitted --&gt;
&lt;/Project&gt;
</code></pre>
<p>This meant that I could remove the entire code block below except <code>System.ServiceModel</code> because that reference is not given to you by the <code>NETStandard.Library</code> NuGet package.</p>
<pre><code class="language-xml">&lt;ItemGroup Condition=&quot; &#39;$(TargetFramework)&#39; == &#39;netstandard1.6&#39; &quot;&gt;
  &lt;PackageReference Include=&quot;System.Xml.XDocument&quot; Version=&quot;4.3.0&quot; /&gt;
&lt;/ItemGroup&gt;

&lt;ItemGroup Condition=&quot; &#39;$(TargetFramework)&#39; == &#39;net461&#39; &quot;&gt;
  &lt;Reference Include=&quot;System.ServiceModel&quot; /&gt;
  &lt;Reference Include=&quot;System.Xml&quot; /&gt;
  &lt;Reference Include=&quot;System.Xml.Linq&quot; /&gt;
  &lt;Reference Include=&quot;System&quot; /&gt;
  &lt;Reference Include=&quot;Microsoft.CSharp&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<h2 id="turn-elements-into-attributes">Turn Elements into Attributes</h2>
<p>For some reason dotnet migrate produces overly verbose XML in some cases by outputting XML elements instead of attributes. I have a NuGet reference to <code>StyleCop.Analyzers</code> which is a build time dependency and I don&#39;t want it to be output to my bin directory. You do this by setting the <code>PrivateAssets</code> property but you can turn this:</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;StyleCop.Analyzers&quot; Version=&quot;1.0.0&quot;&gt;
  &lt;PrivateAssets&gt;All&lt;/PrivateAssets&gt;
&lt;/PackageReference&gt;
</code></pre>
<p>Into this:</p>
<pre><code class="language-xml">&lt;PackageReference Include=&quot;StyleCop.Analyzers&quot; PrivateAssets=&quot;All&quot; Version=&quot;1.0.0&quot; /&gt;
</code></pre>
<h2 id="label-your-sections">Label your Sections</h2>
<p>You can label your <code>PropertyGroup</code> and <code>ItemGroup</code> elements using the <code>Label</code> attribute:</p>
<pre><code class="language-xml">&lt;PropertyGroup Label=&quot;Package&quot;&gt;
  &lt;!-- NuGet Packages Omitted --&gt;
&lt;/PropertyGroup&gt;
</code></pre>
<p>So the question becomes, how should we label them? Well, the convention I use is to use the same label names as the ones in Visual Studio&#39;s project properties screen:</p>
<p><img src="https://rehansaeed.com/cleaning-up-csproj/images/Project-Properties-Tabs.png" alt="Project Properties Tabs"></p>
<h1 id="the-end-result">The End Result</h1>
<p>This is what my <code>csproj</code> looks like at the end of all that. I&#39;ve removed all the extra fluff you don&#39;t need and labelled the properties in a way that makes navigating the file with your eye that much quicker.</p>
<pre><code class="language-xml">&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;

  &lt;PropertyGroup Label=&quot;Build&quot;&gt;
    &lt;TargetFrameworks&gt;netstandard1.6;net461&lt;/TargetFrameworks&gt;
    &lt;TreatWarningsAsErrors&gt;true&lt;/TreatWarningsAsErrors&gt;
    &lt;GenerateDocumentationFile&gt;true&lt;/GenerateDocumentationFile&gt;
    &lt;CodeAnalysisRuleSet&gt;../../../MinimumRecommendedRulesWithStyleCop.ruleset&lt;/CodeAnalysisRuleSet&gt;
  &lt;/PropertyGroup&gt;

  &lt;PropertyGroup Label=&quot;Package&quot;&gt;
    &lt;VersionPrefix&gt;2.2.2&lt;/VersionPrefix&gt;
    &lt;Authors&gt;Muhammad Rehan Saeed (RehanSaeed.com)&lt;/Authors&gt;
    &lt;Product&gt;Dotnet Boxed Framework&lt;/Product&gt;
    &lt;Description&gt;...&lt;/Description&gt;
    &lt;Copyright&gt;Copyright © Muhammad Rehan Saeed. All rights Reserved&lt;/Copyright&gt;
    &lt;PackageRequireLicenseAcceptance&gt;true&lt;/PackageRequireLicenseAcceptance&gt;
    &lt;PackageLicenseUrl&gt;https://github.com/Dotnet-Boxed/Framework/blob/main/LICENSE&lt;/PackageLicenseUrl&gt;
    &lt;PackageProjectUrl&gt;https://github.com/Dotnet-Boxed/Framework&lt;/PackageProjectUrl&gt;
    &lt;PackageIconUrl&gt;https://raw.githubusercontent.com/Dotnet-Boxed/Framework/main/Images/Icon.png&lt;/PackageIconUrl&gt;
    &lt;RepositoryUrl&gt;https://github.com/Dotnet-Boxed/Framework.git&lt;/RepositoryUrl&gt;
    &lt;RepositoryType&gt;git&lt;/RepositoryType&gt;
    &lt;PackageTags&gt;ASP.NET;ASP.NET Core;MVC;Boxed;Muhammad Rehan Saeed;Framework&lt;/PackageTags&gt;
    &lt;PackageReleaseNotes&gt;Updated to ASP.NET Core 1.1.2.&lt;/PackageReleaseNotes&gt;
  &lt;/PropertyGroup&gt;
  
  &lt;PropertyGroup Label=&quot;Signing&quot;&gt;
    &lt;SignAssembly&gt;true&lt;/SignAssembly&gt;
    &lt;AssemblyOriginatorKeyFile&gt;../../../Key.snk&lt;/AssemblyOriginatorKeyFile&gt;
    &lt;PublicSign Condition=&quot; &#39;$(OS)&#39; != &#39;Windows_NT&#39; &quot;&gt;true&lt;/PublicSign&gt;
  &lt;/PropertyGroup&gt;

  &lt;ItemGroup Label=&quot;Project References&quot;&gt;
    &lt;ProjectReference Include=&quot;..\Boilerplate\Boilerplate.csproj&quot; /&gt;
  &lt;/ItemGroup&gt;

  &lt;ItemGroup Label=&quot;Package References&quot;&gt;
    &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Mvc.Abstractions&quot; Version=&quot;1.1.2&quot; /&gt;
    &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Mvc.Core&quot; Version=&quot;1.1.2&quot; /&gt;
    &lt;PackageReference Include=&quot;Microsoft.Extensions.Caching.Abstractions&quot; Version=&quot;1.1.1&quot; /&gt;
    &lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration.Binder&quot; Version=&quot;1.1.1&quot; /&gt;
    &lt;PackageReference Include=&quot;Newtonsoft.Json&quot; Version=&quot;9.0.1&quot; /&gt;
    &lt;PackageReference Include=&quot;StyleCop.Analyzers&quot; PrivateAssets=&quot;All&quot; Version=&quot;1.0.0&quot; /&gt;
  &lt;/ItemGroup&gt;

  &lt;ItemGroup Condition=&quot; &#39;$(TargetFramework)&#39; == &#39;net461&#39; &quot; Label=&quot;.NET 4.6.1 Package References&quot;&gt;
    &lt;Reference Include=&quot;System.ServiceModel&quot; /&gt;
  &lt;/ItemGroup&gt;

&lt;/Project&gt;
</code></pre>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cross-Platform DevOps for .NET Core]]></title>
        <id>https://rehansaeed.com/cross-platform-devops-net-core/</id>
        <link href="https://rehansaeed.com/cross-platform-devops-net-core/"/>
        <updated>2017-01-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn how to use Cake, AppVeyor and Travis CI continuous integration build systems to perform cross-platform DevOps for .NET Core based projects.]]></summary>
        <content type="html"><![CDATA[<p>If you&#39;re a library author or writing a cross-platform application then .NET Core is great but it throws up the question, how do you test that your code works on all operating systems? Well the answer is simple, you build and test your code on each platform.</p>
<p>This post builds on <a href="http://andrewlock.net">Andrew Lock&#39;s</a> work where he shows in two blog posts how to build, test and deploy your .NET Core NuGet packages using <a href="http://andrewlock.net/publishing-your-first-nuget-package-with-appveyor-and-myget/">AppVeyor</a> (Windows) and <a href="http://andrewlock.net/adding-travis-ci-to-a-net-core-app/">Travis CI</a> (Mac and Linux) continuous integration build systems.</p>
<p>In Andrew&#39;s blog posts, he writes PowerShell (Windows) or Bash (Mac and Linux) scripts to build, test and deploy his code. There were two problems here.</p>
<ol>
<li>Code is duplicated because you have to write your shell scripts twice.</li>
<li>I&#39;ve already grudgingly learned how to write PowerShell and done a little Bash but found both languages pretty ugly and difficult to use for more complex scenarios.</li>
</ol>
<p>I only want to write my shell script once, I don&#39;t want to have to learn Bash in-depth and I don&#39;t want to write PowerShell if I can help it. Around the same time I was reading Andrew&#39;s blog posts, I read about <a href="http://cakebuild.net/">Cake</a> build.</p>
<h1 id="cake">Cake</h1>
<p>Cake lets you write your build, test and deployment script in C# and it provides lots of helper methods to get stuff done making your script very terse. You can get syntax highlighting and intellisense for your Cake scripts by installing the <a href="https://marketplace.visualstudio.com/items?itemName=vs-publisher-1392591.CakeforVisualStudio">Visual Studio</a> or <a href="https://marketplace.visualstudio.com/items?itemName=cake-build.cake-vscode">Visual Studio Code</a> extensions.</p>
<p>Building and testing your .NET Core code using Cake is dead dimple. Grab the <code>build.cake</code>, <code>build.ps1</code> and <code>build.sh</code> files from the Cake <a href="http://cakebuild.net/docs/tutorials/getting-started">Getting Started</a> guide and drop them at the root of your project. Here is an example of my project and the files we&#39;ll be dealing with in this post:</p>
<p><img src="https://rehansaeed.com/cross-platform-devops-net-core/images/CakeFiles.png" alt="Cake Files"></p>
<p>The <code>build.ps1</code> and <code>build.sh</code> files are shell scripts that download the Cake executable and execute the build.cake C# script. They also take any parameters that are passed to them and pass them onto your cake script. Now paste the following into your <code>build.cake</code> file:</p>
<pre><code class="language-cs">// Target - The task you want to start. Runs the Default task if not specified.
var target = Argument(&quot;Target&quot;, &quot;Default&quot;);
// Configuration - The build configuration (Debug/Release) to use.
// 1. If command line parameter parameter passed, use that.
// 2. Otherwise if an Environment variable exists, use that.
var configuration = 
    HasArgument(&quot;Configuration&quot;) ? Argument(&quot;Configuration&quot;) :
    EnvironmentVariable(&quot;Configuration&quot;) != null ? EnvironmentVariable(&quot;Configuration&quot;) : &quot;Release&quot;;
// The build number to use in the version number of the built NuGet packages.
// There are multiple ways this value can be passed, this is a common pattern.
// 1. If command line parameter parameter passed, use that.
// 2. Otherwise if running on AppVeyor, get it&#39;s build number.
// 3. Otherwise if running on Travis CI, get it&#39;s build number.
// 4. Otherwise if an Environment variable exists, use that.
// 5. Otherwise default the build number to 0.
var buildNumber =
    HasArgument(&quot;BuildNumber&quot;) ? Argument&lt;int&gt;(&quot;BuildNumber&quot;) :
    AppVeyor.IsRunningOnAppVeyor ? AppVeyor.Environment.Build.Number :
    TravisCI.IsRunningOnTravisCI ? TravisCI.Environment.Build.BuildNumber :
    EnvironmentVariable(&quot;BuildNumber&quot;) != null ? int.Parse(EnvironmentVariable(&quot;BuildNumber&quot;)) : 0;

// A directory path to an Artefacts directory.
var artefactsDirectory = Directory(&quot;./Artefacts&quot;);

// Deletes the contents of the Artefacts folder if it should contain anything from a previous build.
Task(&quot;Clean&quot;)
    .Does(() =&gt;
    {
        CleanDirectory(artefactsDirectory);
    });

// Run dotnet restore to restore all package references.
Task(&quot;Restore&quot;)
    .IsDependentOn(&quot;Clean&quot;)
    .Does(() =&gt;
    {
        DotNetCoreRestore();
    });

// Find all csproj projects and build them using the build configuration specified as an argument.
 Task(&quot;Build&quot;)
    .IsDependentOn(&quot;Restore&quot;)
    .Does(() =&gt;
    {
        var projects = GetFiles(&quot;./**/*.csproj&quot;);
        foreach(var project in projects)
        {
            DotNetCoreBuild(
                project.GetDirectory().FullPath,
                new DotNetCoreBuildSettings()
                {
                    Configuration = configuration
                });
        }
    });

// Look under a &#39;Tests&#39; folder and run dotnet test against all of those projects.
// Then drop the XML test results file in the Artefacts folder at the root.
Task(&quot;Test&quot;)
    .IsDependentOn(&quot;Build&quot;)
    .Does(() =&gt;
    {
        var projects = GetFiles(&quot;./Tests/**/*.csproj&quot;);
        foreach(var project in projects)
        {
            DotNetCoreTest(
                project.GetDirectory().FullPath,
                new DotNetCoreTestSettings()
                {
                    ArgumentCustomization = args =&gt; args
                        .Append(&quot;-xml&quot;)
                        .Append(artefactsDirectory.Path.CombineWithFilePath(project.GetFilenameWithoutExtension()).FullPath + &quot;.xml&quot;),
                    Configuration = configuration,
                    NoBuild = true
                });
        }
    });

// Run dotnet pack to produce NuGet packages from our projects. Versions the package
// using the build number argument on the script which is used as the revision number 
// (Last number in 1.0.0.0). The packages are dropped in the Artefacts directory.
Task(&quot;Pack&quot;)
    .IsDependentOn(&quot;Test&quot;)
    .Does(() =&gt;
    {
        var revision = buildNumber.ToString(&quot;D4&quot;);
        foreach (var project in GetFiles(&quot;./Source/**/*.csproj&quot;))
        {
            DotNetCorePack(
                project.GetDirectory().FullPath,
                new DotNetCorePackSettings()
                {
                    Configuration = configuration,
                    OutputDirectory = artefactsDirectory,
                    VersionSuffix = revision
                });
        }
    });

// The default task to run if none is explicitly specified. In this case, we want
// to run everything starting from Clean, all the way up to Pack.
Task(&quot;Default&quot;)
    .IsDependentOn(&quot;Pack&quot;);

// Executes the task specified in the target argument.
RunTarget(target);
</code></pre>
<p>At the top of the script some arguments are defined. Values for these arguments can be set by passing values to the shell scripts via command line, they can come from environment variables or they can come from continuous integration build systems that Cake knows about (It knows all the common ones including TFS, TeamCity, Jenkins and Bamboo). In the above script I show how to get a build number from AppVeyor or Travis CI if the script is currently being run using those systems. This makes the code very short, terse and to the point.</p>
<p>The rest of the script is made up of a series of chained tasks which execute one after the other, starting with the task with no dependencies. Alternatively you can pass in a Target argument which specifies which task you&#39;d like the script to start executing from. A key thing to note is that the script does not need to know about any file names or file paths, everything is done by convention.</p>
<p>One very important effect of using Cake is that your build script is easily testable. I&#39;ve used many continuous integration systems that have their own proprietary tasks and when a slower build fails, debugging it was a nightmare, since it could only be done on the build machine. Since Cake is just a script, you can run it on your local machine and test it to your hearts content which gives you a quicker tighter development loop.</p>
<h1 id="appveyor">AppVeyor</h1>
<p><a href="https://www.appveyor.com/docs/">AppVeyor</a> is my favourite CI system but only works if you are hosting your code with Git based repositories and it only runs builds on Windows. All you need to do is sign-up, enable AppVeyor for your git repository and add an <code>appveyor.yml</code> file which is in <a href="https://en.wikipedia.org/wiki/YAML">YAML</a> format. Here is one of my commented <code>appveyor.yml</code> files:</p>
<pre><code class="language-yaml">version: &#39;{build}&#39;

pull_requests:
  # Do not increment build number for pull requests
  do_not_increment_build_number: true

nuget:
  # Do not publish NuGet packages for pull requests
  disable_publish_on_pr: true

environment:
  # Set the DOTNET_SKIP_FIRST_TIME_EXPERIENCE environment variable to stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true

build_script:
- ps: .\build.ps1

test: off

artifacts:
# Store NuGet packages
- path: .\Artefacts\**\*.nupkg
  name: NuGet
# Store xUnit Test Results
- path: .\Artefacts\**\*.xml
  name: xUnit Test Results

deploy:

# Publish NuGet packages
- provider: NuGet
  name: production
  api_key:
    secure: 73eFUWSfho6pxCy1VRP1H0AYh/SFiyEREV+/ATcoj0I+sSH9dec/WXs6H2Jy5vlS
  on:
    # Only publish from the main branch
    branch: main
    # Only publish if the trigger was a Git tag
    # git tag v0.1.0-beta
    # git push origin --tags
    appveyor_repo_tag: true
</code></pre>
<p>It basically executes the <code>build.ps1</code> file at the root of my project and collects all the NuGet package and XML unit test result files in my artefacts folder. I also set some environment variables to turn off some lesser known .NET Core features for a faster build.</p>
<p>AppVeyor, knows about NuGet and I use AppVeyor as my primary build system to publish my NuGet packages (You don&#39;t want AppVeyor and Travis CI both publishing your NuGet packages). Now I could have created a task in my cake file to publish NuGet packages and only execute that task if I was running on AppVeyor but AppVeyor has a pretty easy to use configuration file that I&#39;ve chosen to do this step instead.</p>
<p>To publish packages to NuGet, you sign-up and receive an API key. Of course, you don&#39;t want to share that with the whole world by checking it into GitHub or Bitbucket, so AppVeyor lets you <a href="https://ci.appveyor.com/tools/encrypt">encrypt</a> it and paste the encrypted value into the <code>appveyor.yml</code> file.</p>
<h1 id="travis-ci">Travis CI</h1>
<p><a href="https://travis-ci.org/">Travis CI</a> is very similar to AppVeyor but it targets both Mac and Linux. All you have to do is sign-up, turn on Travis for your repository and stick a <code>.travis.yml</code> file in the root of your project. Here is mine:</p>
<pre><code class="language-yaml">language: csharp
os:
  - linux
  - osx

# .NET CLI require Ubuntu 14.04
sudo: required
dist: trusty
addons:
  apt:
    packages:
    - gettext
    - libcurl4-openssl-dev
    - libicu-dev
    - libssl-dev
    - libunwind8
    - zlib1g

# .NET CLI requires OSX 10.11
osx_image: xcode7.2

# Ensure that .NET Core is installed
dotnet: 1.0.0-preview2-1-003177
# Ensure Mono is installed
mono: latest

env:
    # Set the DOTNET_SKIP_FIRST_TIME_EXPERIENCE environment variable to stop wasting time caching packages
  - DOTNET_SKIP_FIRST_TIME_EXPERIENCE=true
    # Disable sending usage data to Microsoft
  - DOTNET_CLI_TELEMETRY_OPTOUT=true

# You must run this command to give Travis permissions to execute the build.sh shell script:
# git update-index --chmod=+x build.sh
script:
  - ./build.sh
</code></pre>
<p>You&#39;ll notice that we are specifying that we want to build our code on both Mac and Linux. Travis CI will actually run one build for each operating system. We then specify some details about the version of operating system we want to use and what we would like to install on them.</p>
<p>Once again, I set the .NET environment variables to make the build a bit quicker and finally we run the <code>build.sh</code> Bash script to kick things off. Note that you need to run the following command to give Travis permission to execute the build.sh file (This is Linux after all):</p>
<pre><code class="language-powershell">git update-index --chmod=+x build.sh
</code></pre>
<p>Another thing to note is that if you are still using the older <code>xproj</code> project system and your unit tests are using xUnit, then your tests will not run due to this <a href="https://github.com/dotnet/cli/issues/3073">bug</a>. There is a very nasty workaround in the link.</p>
<h1 id="conclusions">Conclusions</h1>
<p>If you want to learn how to add AppVeyor and Travis CI build status badges to your Git repository ReadMe or learn how to deploy to MyGet/NuGet using tags, I recommend going back to read Andrew&#39;s blog post which is still useful. If you&#39;re looking for more examples of Cake build scripts, you can take a look at the following Cake repositories:</p>
<ul>
<li><a href="https://github.com/cake-build/cake">Cake</a> - Cake builds itself with Cake! They have a very complicated build setup. This repository is great for learning about Cake helper methods that you can use in your scripts.</li>
<li><a href="https://github.com/RehanSaeed/Serilog.Exceptions">Serilog.Exceptions</a> - Builds, tests and deploys .NET Core NuGet packages.</li>
<li><a href="https://github.com/Dotnet-Boxed/Framework">.NET Boxed Framework</a> - Builds, tests and deploys .NET Core NuGet packages.</li>
<li><a href="https://github.com/Dotnet-Boxed/Templates">.NET Boxed Templates</a> - Builds, tests and deploys a <code>dotnet new</code> NuGet package.</li>
</ul>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Custom Project Templates Using dotnet new]]></title>
        <id>https://rehansaeed.com/custom-project-templates-using-dotnet-new/</id>
        <link href="https://rehansaeed.com/custom-project-templates-using-dotnet-new/"/>
        <updated>2017-01-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to create project templates using dotnet new and the template.json file. How to share project templates by creating NuGet packages.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/custom-project-templates-using-dotnet-new/">dotnet new - Custom Project Templates Using dotnet new</a></li>
<li><a href="https://rehansaeed.com/dotnet-new-feature-selection/">dotnet new - dotnet new Feature Selection</a></li>
<li><a href="https://rehansaeed.com/unit-testing-dotnet-new-templates/">dotnet new - Unit Testing dotnet new Templates</a></li>
</ol>
<h1 id="current-dotnet-new">Current dotnet new</h1>
<p>If you run <code>dotnet new</code> today, you can create a simple console app. The command has very few options, including selecting the language you want to use (C#, VB or F#). However, this is all about to change. <a href="https://twitter.com/sayedihashimi">Sayed I. Hashimi</a> and <a href="https://twitter.com/mlorbetske">Mike Lorbetske</a> who work at Microsoft in the .NET tooling team have been kind enough to show me what they&#39;ve been working on with the intention of getting some feedback.</p>
<p><img src="https://rehansaeed.com/custom-project-templates-using-dotnet-new/images/first-dotnet-new.png" alt="old dotnet new"></p>
<h1 id="dotnet-new3">dotnet new3</h1>
<p>Microsoft is working on a new version of the <code>dotnet new</code> command with support for installing custom project templates from NuGet packages, zip files or folders. If you head over to the <a href="https://github.com/dotnet/templating">dotnet/templating</a> GitHub repository you can follow the very simple instructions and try out a fairly complete version of this command which is temporarily called <code>dotnet new3</code>. The full <code>dotnet new</code> experience is due to be released in conjunction with Visual Studio 2017.</p>
<p><img src="https://rehansaeed.com/custom-project-templates-using-dotnet-new/images/dotnet-new3.png" alt="dotnet new3"></p>
<p>If you take a look at the screenshot above, you&#39;ll notice that there are a lot more options available. You can list all installed project templates and install new ones too.</p>
<h1 id="creating-new-templates">Creating New Templates</h1>
<p>Creating a new project template involves taking a folder containing your project (Mine is called Api-CSharp) and adding a .<code>template.config</code> folder to it containing two files.</p>
<p><img src="https://rehansaeed.com/custom-project-templates-using-dotnet-new/images/Custom-project-template-example-folder-structure.png" alt="Custom project template example folder structure"></p>
<h2 id="template-metadata">Template Metadata</h2>
<p>The <code>template.json</code> file is where you specify metadata about your project template. This metadata is displayed when someone lists their installed project templates. A really basic one looks like this:</p>
<pre><code class="language-json">{
  &quot;author&quot;: &quot;Muhammad Rehan Saeed (RehanSaeed.com)&quot;,
  &quot;classifications&quot;: [ &quot;WebAPI&quot;, &quot;Boxed&quot; ], // Tags used to search for the template.
  &quot;name&quot;: &quot;Dotnet Boxed API&quot;,
  &quot;identity&quot;: &quot;Dotnet.Boxed.Api.CSharp&quot;,    // A unique ID for the project template.
  &quot;shortName&quot;: &quot;api&quot;,                       // You can create the project using this short name instead of the one above.
  &quot;tags&quot;: {
    &quot;language&quot;: &quot;C#&quot;                        // Specify that this template is in C#.
  },
  &quot;sourceName&quot;: &quot;ApiTemplate&quot;,              // Name of the csproj file and namespace that will be replaced.
  &quot;guids&quot;: [                                // GUID&#39;s used in the project that will be replaced by new ones.
    &quot;837bc53e-0271-4e9c-b5b5-c60ea7a7c7b5&quot;,
    &quot;113f2d04-69f0-40c3-8797-ba3f356dd812&quot;
  ],
}
</code></pre>
<p>The templating repositories <a href="https://github.com/dotnet/templating/wiki/%22Runnable-Project%22-Templates">Wiki</a> page talks about what all of the properties mean in a lot more detail but I&#39;ve added some basic comments for your understanding.</p>
<h2 id="installing-templates">Installing Templates</h2>
<p>Installing the above template from a folder is as easy as using the install command. You can also install templates from zip files and NuGet packages the same way.</p>
<p><img src="https://rehansaeed.com/custom-project-templates-using-dotnet-new/images/dotnet-new3-install.png" alt="dotnet new3 install"></p>
<h2 id="template-nuget-packages">Template NuGet Packages</h2>
<p>So how do you create a NuGet package containing a project template that&#39;s compatible with <code>dotnet new</code>? I&#39;m assuming you are familiar with creating NuGet packages, if not take a look at the NuGet <a href="https://docs.microsoft.com/en-gb/nuget/quickstart/create-and-publish-a-package">documentation</a>. You can create NuGet packages of your project templates by creating a <code>Templates.nuspec</code> file like the one below and placing all of your templates in a content folder beside it. The content folder is a special folder which NuGet understands to contain static files. If you look at the nuspec file below, you&#39;ll notice the packageType element. This is a new way to tell NuGet that this NuGet package contains project templates.</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;package xmlns=&quot;http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd&quot;&gt;
  &lt;metadata&gt;
    &lt;id&gt;Boxed.Templates&lt;/id&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;description&gt;My project description.&lt;/description&gt;
    &lt;authors&gt;Muhammad Rehan Saeed (RehanSaeed.com)&lt;/authors&gt;
    &lt;packageTypes&gt;
      &lt;packageType name=&quot;Template&quot; /&gt;
    &lt;/packageTypes&gt;
  &lt;/metadata&gt;
&lt;/package&gt;
</code></pre>
<h2 id="there-is-more">There is More!</h2>
<p>What I&#39;ve not told you is that it&#39;s possible to add features to your project template that developers can turn on or off based on command line switches a bit like <a href="http://yeoman.io/">Yeoman</a> does for Node based NPM packages. As many of you will know I already do this in my <a href="https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d">ASP.NET Core Boilerplate</a> project template but I came up with my own custom method. <code>dotnet new</code> makes this all a lot easier and I&#39;ll cover how to do this in a later blog post.</p>
<h1 id="why-this-is-better">Why This is Better</h1>
<p>Traditionally, to create project templates, you could use Visual Studio to create zip files containing your project template or if you were brave you could create Visual Studio extensions (VSIX) to enable installing them directly into Visual Studio and share them on the <a href="https://marketplace.visualstudio.com/vs">Visual Studio Marketplace</a>.</p>
<p>This new method makes creating project templates about as easy as it&#39;s ever going to get and allows really easy sharing, versioning and personalization of project templates. At some point I envisage a website (Possible the Visual Studio Marketplace) where you could go and install these NuGet based project templates.</p>
<h1 id="net-boxed-api">.NET Boxed API</h1>
<p>I have been working on a brand new project template for building API&#39;s using <code>dotnet new</code> with a lot of help from the guys at Microsoft. My project templates are quite complex so it&#39;s a good test of the system. The API comes jam packed full of security, performance and best practice features and also implements Swagger right out of the box. You can try installing it with <code>dotnet new</code> from <a href="https://github.com/Dotnet-Boxed/Templates">NuGet</a>.</p>
<h1 id="conclusions">Conclusions</h1>
<p>Overall I&#39;m really impressed with where the new project templating system is headed. It&#39;s very easy to do something simple but also very powerful should you need to do something complicated. There is a few blog posts worth of material here, so expect a few more posts in the coming weeks.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactive Extensions (Rx) - Part 8 - Timeouts]]></title>
        <id>https://rehansaeed.com/reactive-extensions-rx-part-8-timeouts/</id>
        <link href="https://rehansaeed.com/reactive-extensions-rx-part-8-timeouts/"/>
        <updated>2017-01-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Should you use Reactive Extensions (Rx) to do timeouts in .NET? It turns out it's better to use CancellationTokenSource in the Task Parallel Library (TPL).]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/reactive-extensions-part1-replacing-events/">Reactive Extensions (Rx) - Replacing C# Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part2-wrapping-events/">Reactive Extensions (Rx) - Wrapping C# Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part3-naming-conventions/">Reactive Extensions (Rx) - Naming Conventions</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part4-replacing-timers/">Reactive Extensions (Rx) - Replacing Timers</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part5-awaiting-observables/">Reactive Extensions (Rx) - Awaiting Observables</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part6-task-toobservable/">Reactive Extensions (Rx) - Task ToObservable</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part7-sample-events/">Reactive Extensions (Rx) - Sample Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-rx-part-8-timeouts/">Reactive Extensions (Rx) - Timeouts</a></li>
</ol>
<p>In <a href="https://rehansaeed.com/reactive-extensions-part6-task-toobservable/">part six</a> of this series of blog posts I talked about using Reactive Extensions for adding timeout logic to asynchronous tasks. Something like this:</p>
<pre><code class="language-cs">public async Task&lt;string&gt; WaitForFirstResultWithTimeOut()
{
    Task&lt;string&gt; task = this.DownloadTheInternet();
 
    return await task
        .ToObservable()
        .Timeout(TimeSpan.FromMilliseconds(1000))
        .FirstAsync();
}
</code></pre>
<p>Last week I was working on a project and wanted to add a Timeout to my task but since it was an ASP.NET MVC project, I had no references to Reactive Extensions. After some thought I discovered another possible method of performing a timeout which may help in certain circumstances.</p>
<pre><code class="language-cs">using (var cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromMilliseconds(1000)))
{
    try
    {
        return await this.DownloadTheInternet(cancellationTokenSource.Token);
    }
    catch (OperationCanceledException exception)
    {
        Console.WriteLine(&quot;Timed Out&quot;);
    }
}
</code></pre>
<p>I&#39;m using an overload on <code>CancellationTokenSource</code> which takes a timeout value. Then passing the <code>CancellationToken</code> to <code>DownloadTheInternet</code>. This method should be periodically checking the <code>CancellationToken</code> to see if it has been cancelled and if so, throw an <code>OperationCanceledException</code>. In this example you&#39;d probably use <code>HttpClient</code> which handles this for you if you give it the CancellationToken.</p>
<p>The main reason why this method is better is that the task is actually being cancelled and stopped from doing any more work. In my above reactive extensions example, the task continues doing work but it&#39;s result is just ignored.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SEO Friendly URL's for ASP.NET Core]]></title>
        <id>https://rehansaeed.com/seo-friendly-urls-asp-net-core/</id>
        <link href="https://rehansaeed.com/seo-friendly-urls-asp-net-core/"/>
        <updated>2016-12-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An SEO friendly URL is human readable and gives your site a higher page rank. Learn how to implement SEO friendly URL's using ASP.NET Core.]]></summary>
        <content type="html"><![CDATA[<p>For some reason there are not a lot of Search Engine Optimization (SEO) blog posts or projects out there. Taking a few simple steps can make your site rank higher in Google or Bing search results so it&#39;s well worth doing. Here are a few other of my SEO related blog posts:</p>
<ul>
<li><a href="https://rehansaeed.com/canonical-urls-for-asp-net-mvc/">Canonical URL&#39;s for ASP.NET MVC</a></li>
<li><a href="https://rehansaeed.com/dynamically-generating-sitemap-xml-for-asp-net-mvc/">Dynamically Generating Sitemap.xml for ASP.NET MVC</a></li>
<li><a href="https://rehansaeed.com/dynamically-generating-robots-txt-using-asp-net-mvc/">Dynamically Generating Robots.txt Using ASP.NET MVC</a></li>
</ul>
<h1 id="what-is-an-seo-friendly-url">What is an SEO Friendly URL?</h1>
<p>This Mozilla blog post called &#39;<a href="https://moz.com/blog/15-seo-best-practices-for-structuring-urls">15 best practices for structuring URL&#39;s&#39;</a> is the best article on the subject of SEO friendly URL&#39;s I found and it&#39;s well worth a read.</p>
<p>Essentially you want a simple short URL that tells the user what they are clicking on at a glance. It should also contain keywords pertaining to what is on the page for better Search Engine Optimization (SEO). In short, a page will appear higher up in search results if the term a user searches for appears in the URL. Your URL should look like this:</p>
<p><img src="https://rehansaeed.com/seo-friendly-urls-asp-net-core/images/SEO-Friendly-URL.png" alt="SEO Friendly URL Example"></p>
<p>The URL contains an ID for a product and ends with a friendly title. The title contains alphanumeric characters with dashes instead of spaces. Note that the ID of the product is still included in the URL, to avoid having to deal with two friendly titles with the same name.</p>
<p>If you elect to omit the ID, then you have to do a lot of footwork to make things work. Firstly, you have to use the title as a kind of primary key to get the product data from your database and secondly, you also have to figure out what to do when there are two pages with the same title. Each time you want to create a new title, you have to scan your data store to see if the title already exists and if it does either error and force the creation of a different title or add make it unique by adding a number on the end. This is a lot of work but does produce a nicer URL, the choice is yours.</p>
<h1 id="how-to-build-one">How to Build One</h1>
<p>Take a look at the controller action below. It is a very simple example of how to use SEO friendly URL&#39;s. In our example we have a product class which has a ID and title properties, where the title is just the name of the product.</p>
<pre><code class="language-cs">[HttpGet(&quot;product/{id}/{title}&quot;, Name = &quot;GetProduct&quot;)]
public IActionResult GetProduct(int id, string title)
{
    // Get the product as indicated by the ID from a database or some repository.
    var product = this.productRepository.Find(id);

    // If a product with the specified ID was not found, return a 404 Not Found response.
    if (product == null)
    {
        return this.NotFound();
    }

    // Get the actual friendly version of the title.
    string friendlyTitle = FriendlyUrlHelper.GetFriendlyTitle(product.Title);

    // Compare the title with the friendly title.
    if (!string.Equals(friendlyTitle, title, StringComparison.Ordinal))
    {
        // If the title is null, empty or does not match the friendly title, return a 301 Permanent
        // Redirect to the correct friendly URL.
        return this.RedirectToRoutePermanent(&quot;GetProduct&quot;, new { id = id, title = friendlyTitle });
    }

    // The URL the client has browsed to is correct, show them the view containing the product.
    return this.View(product);
}
</code></pre>
<p>All the work is done by the <code>FriendlyUrlHelper</code> which turns the product title which may contain spaces, numbers or other special characters (which would not be allowed in a URL without escaping them) into a <code>lower-kebab-case</code> title.</p>
<p>This generated friendly title is compared with the one that is passed in and if it is different (Someone may have omitted the friendly title or mis-spelled it) we perform a permanent redirect to the product with the same ID but now with the friendly title. This is important for SEO purposes, we want search engines to only find one URL for each product. Finally, if the friendly title matches the one passed in we return the product view.</p>
<h1 id="the-friendlyurlhelper">The FriendlyUrlHelper</h1>
<p>The <code>FriendlyUrlHelper</code> was inspired by a famous Stack Overflow question &#39;<a href="https://stackoverflow.com/questions/25259/how-does-stack-overflow-generate-its-seo-friendly-urls/25486">How does Stack Overflow generate its SEO-friendly URLs?</a>&#39;. The full source code for it is shown below.</p>
<pre><code class="language-cs">/// &lt;summary&gt;
/// Helps convert &lt;see cref=&quot;string&quot;/&gt; title text to URL friendly &lt;see cref=&quot;string&quot;/&gt;&#39;s that can safely be
/// displayed in a URL.
/// &lt;/summary&gt;
public static class FriendlyUrlHelper
{
    /// &lt;summary&gt;
    /// Converts the specified title so that it is more human and search engine readable e.g.
    /// http://example.com/product/123/this-is-the-seo-and-human-friendly-product-title. Note that the ID of the
    /// product is still included in the URL, to avoid having to deal with two titles with the same name. Search
    /// Engine Optimization (SEO) friendly URL&#39;s gives your site a boost in search rankings by including keywords
    /// in your URL&#39;s. They are also easier to read by users and can give them an indication of what they are
    /// clicking on when they look at a URL. Refer to the code example below to see how this helper can be used.
    /// Go to definition on this method to see a code example. To learn more about friendly URL&#39;s see
    /// https://moz.com/blog/15-seo-best-practices-for-structuring-urls.
    /// To learn more about how this was implemented see
    /// http://stackoverflow.com/questions/25259/how-does-stack-overflow-generate-its-seo-friendly-urls/25486#25486
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;title&quot;&gt;The title of the URL.&lt;/param&gt;
    /// &lt;param name=&quot;remapToAscii&quot;&gt;if set to &lt;c&gt;true&lt;/c&gt;, remaps special UTF8 characters like &#39;è&#39; to their ASCII
    /// equivalent &#39;e&#39;. All modern browsers except Internet Explorer display the &#39;è&#39; correctly. Older browsers and
    /// Internet Explorer percent encode these international characters so they are displayed as&#39;%C3%A8&#39;. What you
    /// set this to depends on whether your target users are English speakers or not.&lt;/param&gt;
    /// &lt;param name=&quot;maxlength&quot;&gt;The maximum allowed length of the title.&lt;/param&gt;
    /// &lt;returns&gt;The SEO and human friendly title.&lt;/returns&gt;
    /// &lt;code&gt;
    /// [HttpGet(&quot;product/{id}/{title}&quot;, Name = &quot;GetDetails&quot;)]
    /// public IActionResult Product(int id, string title)
    /// {
    ///     // Get the product as indicated by the ID from a database or some repository.
    ///     var product = ProductRepository.Find(id);
    ///
    ///     // If a product with the specified ID was not found, return a 404 Not Found response.
    ///     if (product == null)
    ///     {
    ///         return this.HttpNotFound();
    ///     }
    ///
    ///     // Get the actual friendly version of the title.
    ///     var friendlyTitle = FriendlyUrlHelper.GetFriendlyTitle(product.Title);
    ///
    ///     // Compare the title with the friendly title.
    ///     if (!string.Equals(friendlyTitle, title, StringComparison.Ordinal))
    ///     {
    ///         // If the title is null, empty or does not match the friendly title, return a 301 Permanent
    ///         // Redirect to the correct friendly URL.
    ///         return this.RedirectToRoutePermanent(&quot;GetProduct&quot;, new { id = id, title = friendlyTitle });
    ///     }
    ///
    ///     // The URL the client has browsed to is correct, show them the view containing the product.
    ///     return this.View(product);
    /// }
    /// &lt;/code&gt;
    public static string GetFriendlyTitle(string title, bool remapToAscii = false, int maxlength = 80)
    {
        if (title == null)
        {
            return string.Empty;
        }

        int length = title.Length;
        bool prevdash = false;
        StringBuilder stringBuilder = new StringBuilder(length);
        char c;

        for (int i = 0; i &lt; length; ++i)
        {
            c = title[i];
            if ((c &gt;= &#39;a&#39; &amp;&amp; c &lt;= &#39;z&#39;) || (c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;))
            {
                stringBuilder.Append(c);
                prevdash = false;
            }
            else if (c &gt;= &#39;A&#39; &amp;&amp; c &lt;= &#39;Z&#39;)
            {
                // tricky way to convert to lower-case
                stringBuilder.Append((char)(c | 32));
                prevdash = false;
            }
            else if ((c == &#39; &#39;) || (c == &#39;,&#39;) || (c == &#39;.&#39;) || (c == &#39;/&#39;) ||
                (c == &#39;\\&#39;) || (c == &#39;-&#39;) || (c == &#39;_&#39;) || (c == &#39;=&#39;))
            {
                if (!prevdash &amp;&amp; (stringBuilder.Length &gt; 0))
                {
                    stringBuilder.Append(&#39;-&#39;);
                    prevdash = true;
                }
            }
            else if (c &gt;= 128)
            {
                int previousLength = stringBuilder.Length;

                if (remapToAscii)
                {
                    stringBuilder.Append(RemapInternationalCharToAscii(c));
                }
                else
                {
                    stringBuilder.Append(c);
                }

                if (previousLength != stringBuilder.Length)
                {
                    prevdash = false;
                }
            }

            if (i == maxlength)
            {
                break;
            }
        }

        if (prevdash)
        {
            return stringBuilder.ToString().Substring(0, stringBuilder.Length - 1);
        }
        else
        {
            return stringBuilder.ToString();
        }
    }

    /// &lt;summary&gt;
    /// Remaps the international character to their equivalent ASCII characters. See
    /// http://meta.stackexchange.com/questions/7435/non-us-ascii-characters-dropped-from-full-profile-url/7696#7696
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;character&quot;&gt;The character to remap to its ASCII equivalent.&lt;/param&gt;
    /// &lt;returns&gt;The remapped character&lt;/returns&gt;
    private static string RemapInternationalCharToAscii(char character)
    {
        string s = character.ToString().ToLowerInvariant();
        if (&quot;àåáâäãåąā&quot;.Contains(s))
        {
            return &quot;a&quot;;
        }
        else if (&quot;èéêëę&quot;.Contains(s))
        {
            return &quot;e&quot;;
        }
        else if (&quot;ìíîïı&quot;.Contains(s))
        {
            return &quot;i&quot;;
        }
        else if (&quot;òóôõöøőð&quot;.Contains(s))
        {
            return &quot;o&quot;;
        }
        else if (&quot;ùúûüŭů&quot;.Contains(s))
        {
            return &quot;u&quot;;
        }
        else if (&quot;çćčĉ&quot;.Contains(s))
        {
            return &quot;c&quot;;
        }
        else if (&quot;żźž&quot;.Contains(s))
        {
            return &quot;z&quot;;
        }
        else if (&quot;śşšŝ&quot;.Contains(s))
        {
            return &quot;s&quot;;
        }
        else if (&quot;ñń&quot;.Contains(s))
        {
            return &quot;n&quot;;
        }
        else if (&quot;ýÿ&quot;.Contains(s))
        {
            return &quot;y&quot;;
        }
        else if (&quot;ğĝ&quot;.Contains(s))
        {
            return &quot;g&quot;;
        }
        else if (character == &#39;ř&#39;)
        {
            return &quot;r&quot;;
        }
        else if (character == &#39;ł&#39;)
        {
            return &quot;l&quot;;
        }
        else if (character == &#39;đ&#39;)
        {
            return &quot;d&quot;;
        }
        else if (character == &#39;ß&#39;)
        {
            return &quot;ss&quot;;
        }
        else if (character == &#39;Þ&#39;)
        {
            return &quot;th&quot;;
        }
        else if (character == &#39;ĥ&#39;)
        {
            return &quot;h&quot;;
        }
        else if (character == &#39;ĵ&#39;)
        {
            return &quot;j&quot;;
        }
        else
        {
            return string.Empty;
        }
    }
}
</code></pre>
<p>The difference between my version and the one in the Stack Overflow answer is that mine optionally handles non-ASCII characters using the boolean remapToAscii parameter. This parameter remaps special UTF8 characters like <code>è</code> to their ASCII equivalent <code>e</code>. If there is no equivalent, then those characters are dropped. All modern browsers except Internet Explorer and Edge display the <code>è</code> correctly. Older browsers like Internet Explorer percent encode these international characters so they are displayed as <code>%C3%A8</code>. What you set this to depends on whether your target users are English speakers and if you care about supporting IE and Edge. I must say that I was hoping Edge would have added support so that <code>remapToAscii</code> could be turned off by default but I&#39;m sorely disappointed.</p>
<p>Using the third parameter you can specify a maximum length for the title with any additional characters being dropped. Finally, the last thing to say about this method is that it has been tuned for speed.</p>
<h1 id="where-can-i-get-it">Where Can I Get It?</h1>
<p>This is a great little snippet of code to make your URL&#39;s a human readable, while giving your site an SEO boost. It doesn&#39;t take much effort to use either. This helper class is available in the <a href="https://www.nuget.org/packages/Boxed.AspNetCore">Boxed.AspNetCore</a> NuGet package or you can look at the source code in the <a href="https://github.com/Dotnet-Boxed/Framework">.NET Boxed Framework</a> GitHub page.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Making Application Insights Fast & Secure]]></title>
        <id>https://rehansaeed.com/making-application-insights-fast-and-secure/</id>
        <link href="https://rehansaeed.com/making-application-insights-fast-and-secure/"/>
        <updated>2016-12-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Implementing Application Insights into your ASP.NET Core application with performance and security as a top priority in this advanced scenario.]]></summary>
        <content type="html"><![CDATA[<h1 id="what-is-application-insights">What is Application Insights?</h1>
<p>It&#39;s an application monitoring tool available on Microsoft&#39;s Azure cloud that you can use to detect errors and usage in your application. For ASP.NET Core apps, it can do this for both your C# and JavaScript code. It&#39;s main competitors are <a href="https://newrelic.com/">New Relic</a> and <a href="https://raygun.com/">RayGun</a>.</p>
<h1 id="implementing-application-insights">Implementing Application Insights</h1>
<p>Following the <a href="https://github.com/Microsoft/ApplicationInsights-aspnetcore/wiki/Getting-Started">Getting Started</a> guide for ASP.NET Core applications requires you to add the following HTML helper to your <code>_Layout.cshtml</code> file:</p>
<pre><code class="language-html">&lt;head&gt;
    @* ...Omitted *@

    @Html.ApplicationInsightsJavaScript(TelemetryConfiguration) 
&lt;/head&gt;
</code></pre>
<p>This HTML helper adds an inline script containing the minified JavaScript in <a href="https://github.com/Microsoft/ApplicationInsights-JS/blob/master/JavaScript/JavaScriptSDK/snippet.js">snippet.js</a>.</p>
<pre><code class="language-html">&lt;script type=&quot;text/javascript&quot;&gt;
    var appInsights=window.appInsights||function(config){{
        function i(config){{t[config]=function(){{var i=arguments;t.queue.push(function(){{t[config].apply(t,i)}})}}}}var t={{config:config}},u=document,e=window,o=&quot;script&quot;,s=&quot;AuthenticatedUserContext&quot;,h=&quot;start&quot;,c=&quot;stop&quot;,l=&quot;Track&quot;,a=l+&quot;Event&quot;,v=l+&quot;Page&quot;,y=u.createElement(o),r,f;y.src=config.url||&quot;https://az416426.vo.msecnd.net/scripts/a/ai.0.js&quot;;u.getElementsByTagName(o)[0].parentNode.appendChild(y);try{{t.cookie=u.cookie}}catch(p){{}}for(t.queue=[],t.version=&quot;1.0&quot;,r=[&quot;Event&quot;,&quot;Exception&quot;,&quot;Metric&quot;,&quot;PageView&quot;,&quot;Trace&quot;,&quot;Dependency&quot;];r.length;)i(&quot;track&quot;+r.pop());return i(&quot;set&quot;+s),i(&quot;clear&quot;+s),i(h+a),i(c+a),i(h+v),i(c+v),i(&quot;flush&quot;),config.disableExceptionTracking||(r=&quot;onerror&quot;,i(&quot;_&quot;+r),f=e[r],e[r]=function(config,i,u,e,o){{var s=f&amp;amp;&amp;amp;f(config,i,u,e,o);return s!==!0&amp;amp;&amp;amp;t[&quot;_&quot;+r](config,i,u,e,o),s}}),t
    }}({{
        instrumentationKey: &#39;{0}&#39;
    }});

    window.appInsights=appInsights;
    appInsights.trackPageView();
&lt;/script&gt;
</code></pre>
<p>This script is responsible for:</p>
<ol>
<li>Containing the users instrumentation key (The HTML helper adds this for you).</li>
<li>Downloading the full application insights script asynchronously which actually does all the work.</li>
<li>Recording any logs that occur while the full script is downloaded</li>
</ol>
<h1 id="the-problem">The Problem</h1>
<p>For most websites, this is fine and you can stop here. Here is what can be improved for the rest:</p>
<ol>
<li>The above adds 1KB to every HTML page. Moving this script into a separate file would mean that this script could be cached in the browser the first time it was downloaded. A separate file could also be distributed to a CDN and globally distributed very quickly.</li>
<li>If you are using a <a href="https://rehansaeed.com/content-security-policy-for-asp-net-mvc/">Content Security Policy (CSP)</a> to secure your site using inline scripts in your site is a big no no. You could use a nonce (A nonce means you can&#39;t cache the page as each page becomes unique) or even better a hash of the script contents but browser support for CSP 2.0 is not great. Using an external script would be the simplest option.</li>
</ol>
<h1 id="making-it-slightly-faster-and-more-secure">Making It Slightly Faster and More Secure</h1>
<p>So what does it take to move the above <code>snippet.js</code> file into a separate file? Well, it turns out that you can get <code>snippet.js</code> from the <a href="https://www.npmjs.com/package/applicationinsights-js">applicationinsights-js</a> NPM package which you can add to your <code>package.json</code> like so:</p>
<pre><code class="language-json">{
  &quot;dependencies&quot;: {
    &quot;applicationinsights-js&quot;: &quot;1.0.5&quot;
    // ...
  }
  // ...
}
</code></pre>
<p>The next step is to inject your instrumentation key into <code>snippet.js</code> and also the URL to the full application insights script which is missing from the <code>snippet.js</code> file in the NPM package. I do this using a gulp task like so:</p>
<pre><code class="language-js">var gulp = require(&#39;gulp&#39;),
    sourcemaps = require(&#39;gulp-sourcemaps&#39;),    // Creates source map files (https://www.npmjs.com/package/gulp-sourcemaps/)
    replace = require(&#39;gulp-replace-task&#39;),     // String replace (https://www.npmjs.com/package/gulp-replace-task/)
    uglify = require(&#39;gulp-uglify&#39;);            // Minifies JavaScript (https://www.npmjs.com/package/gulp-uglify/)

gulp.task(&#39;build-app-insights-js&#39;,
    function() {
        return gulp
            .src(&#39;./node_modules/ApplicationInsights-JS/JavaScript/JavaScriptSDK/snippet.js&#39;)
            .pipe(sourcemaps.init())               // Set up the generation of .map source files for the JavaScript.
            .pipe(
                replace({                          // Carry out the specified find and replace.
                    patterns: [
                        {
                            // match - The string or regular expression to find.
                            match: &#39;CDN_PATH&#39;,
                            // replacement - The string or function used to make the replacement.
                            replacement: &#39;https://az416426.vo.msecnd.net/scripts/a/ai.0.js&#39;
                        },
                        {
                           match: &#39;INSTRUMENTATION_KEY&#39;,
                           replacement: &#39;11111111-2222-3333-4444-555555555555&#39;
                        }
                    ],
                    usePrefix: false
                }))
            .pipe(uglify())                        // Minifies the JavaScript.
            .pipe(sourcemaps.write(&#39;.&#39;))           // Generates source .map files for the JavaScript.
            .pipe(gulp.dest(&#39;./wwwroot/js/&#39;));     // Saves the JavaScript file to the specified destination path.
});
</code></pre>
<p>Finally we can include the script in our HTML. Don&#39;t forget to include the <code>crossorigin</code> attribute on all your script tags, which allows full stack traces to be reported. You can read more about the <code>crossorigin</code> attribute <a href="https://raygun.com/blog/2015/05/fixing-script-errors/">here</a>.</p>
<pre><code class="language-html">&lt;script asp-append-version=&quot;true&quot;
        crossorigin=&quot;anonymous&quot;
        src=&quot;~/js/application-insights.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h1 id="conclusion">Conclusion</h1>
<p>As usual, all of the above is built in to the <a href="https://github.com/ASP-NET-MVC-Boilerplate/Templates">ASP.NET Core Boilerplate</a> project template, available as a <a href="https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d">Visual Studio extension</a> if you select the optional Application Insights feature.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Dotnet Watch Tool]]></title>
        <id>https://rehansaeed.com/the-dotnet-watch-tool/</id>
        <link href="https://rehansaeed.com/the-dotnet-watch-tool/"/>
        <updated>2016-09-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The dotnet watch tool is a file watcher for dotnet that restarts the application when changes in the source code are detected.]]></summary>
        <content type="html"><![CDATA[<p>The <code>dotnet watch</code> tool is a file watcher for .NET that restarts the application when changes in the source code are detected. If you are using IIS Express then, it actually does this restart for you already. The <code>dotnet watch</code> tool is only really useful if you like to run your app in the console. I personally like to do this over using IIS Express because I can see all my logs flashing by in the console like the movies which is occasionally useful if you get an exception.</p>
<p><img src="https://rehansaeed.com/the-dotnet-watch-tool/images/Dotnet-Watch-Run-Console.png" alt="Dotnet Watch Run Console"></p>
<p>::: warning
In both cases you have to be careful to start the application by clicking <code>Debug -&gt; Start Without Debugging</code> or hitting the ||CTRL+F5|| keyboard shortcut.
:::</p>
<h1 id="projectjson">project.json</h1>
<p>Setting up the <code>dotnet watch</code> tool is as easy as installing the <code>Microsoft.DotNet.Watcher.Tools</code> NuGet package into the tools section of your <code>project.json</code> file like so (You may need to manually restore packages as there is a bug in the tooling which doesn&#39;t restore packages if you only change the <code>tools</code> section):</p>
<pre><code class="language-json">{
  //...

  &quot;tools&quot;: {
    &quot;Microsoft.DotNet.Watcher.Tools&quot;: &quot;1.0.0-preview2-final&quot;
    //...
  },

  //...
}
</code></pre>
<p>Now using powershell, you can navigate to your project folder and run the <code>dotnet watch run</code> command and your set. But using the command line is a bit lame if you are using Visual Studio, we can do one better.</p>
<h1 id="launchsettingsjson">launchSettings.json</h1>
<p>The <code>launchSettings.json</code> file is used by Visual Studio to launch your application and controls what happens when you hit ||F5||. It turns out you can add additional launch settings here to launch the application using the <code>dotnet watch</code> tool. You can do so by adding a new launch configuration as I&#39;ve done at the bottom of this file:</p>
<pre><code class="language-json">{
  &quot;iisSettings&quot;: {
    &quot;windowsAuthentication&quot;: false,
    &quot;anonymousAuthentication&quot;: true,
    &quot;iisExpress&quot;: {
      &quot;applicationUrl&quot;: &quot;http://localhost:8080/&quot;,
      &quot;sslPort&quot;: 44300
    }
  },
  &quot;profiles&quot;: {
    // Run the app using IIS Express. Use CTRL+F5 or Debug -&gt; Start Without Debugging to edit code and refresh the browser 
    // to see your changes while the app is running.
    &quot;IIS Express&quot;: {
      &quot;commandName&quot;: &quot;IISExpress&quot;,
      &quot;launchBrowser&quot;: true,
      &quot;launchUrl&quot;: &quot;https://localhost:44300/&quot;,
      &quot;environmentVariables&quot;: {
        &quot;ASPNETCORE_ENVIRONMENT&quot;: &quot;Development&quot;
      }
    },
    // Run the app in console mode using &#39;dotnet run&#39;.
    &quot;dotnet run&quot;: {
      &quot;commandName&quot;: &quot;Project&quot;,
      &quot;commandLineArgs&quot;: &quot;--server.urls http://*:8080&quot;,
      &quot;launchBrowser&quot;: true,
      &quot;launchUrl&quot;: &quot;http://localhost:8080/&quot;,
      &quot;environmentVariables&quot;: {
        &quot;ASPNETCORE_ENVIRONMENT&quot;: &quot;Development&quot;
      }
    },
    // Use CTRL+F5 or Debug -&gt; Start Without Debugging to use this launch profile. Launches the app using &#39;dotnet watch&#39;, 
    // which allows you to edit code and refresh the browser to see your changes while the app is running.
    &quot;dotnet watch&quot;: {
      &quot;executablePath&quot;: &quot;C:\\Program Files\\dotnet\\dotnet.exe&quot;,
      &quot;commandLineArgs&quot;: &quot;watch run --server.urls http://*:8080&quot;,
      &quot;launchBrowser&quot;: true,
      &quot;launchUrl&quot;: &quot;http://localhost:8080/&quot;,
      &quot;environmentVariables&quot;: {
        &quot;ASPNETCORE_ENVIRONMENT&quot;: &quot;Development&quot;
      }
    }
  }
}
</code></pre>
<p>Notice that I renamed the second launch profile (which already exists in the default template) to <code>dotnet run</code> because that&#39;s actually the command it&#39;s running and makes more sense.</p>
<p>The <code>dotnet watch</code> launch profile is running <code>dotnet watch run</code> but it&#39;s also passing in the <code>server.urls</code> argument which lets us override the port number. Now we can see the new launch profile in the Visual Studio toolbar like so:</p>
<p><img src="https://rehansaeed.com/the-dotnet-watch-tool/images/Dotnet-Watch.png" alt="Dotnet Watch in the Visual Studio Toolbar"></p>
<h1 id="net-boxed">.NET Boxed</h1>
<p>If you read my blog posts, you&#39;ll be seeing a trend by now. I built the above feature into the <a href="https://github.com/Dotnet-Boxed/Templates">.NET Boxed</a> project templates by default so you can create a new project with this feature built-in, right out of the box. Happy coding!</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NGINX for ASP.NET Core In-Depth]]></title>
        <id>https://rehansaeed.com/nginx-asp-net-core-depth/</id>
        <link href="https://rehansaeed.com/nginx-asp-net-core-depth/"/>
        <updated>2016-08-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[NGINX is a popular open source web server. It can act as a reverse proxy server for ASP.NET Core web apps. How to configure NGINX for ASP.NET Core.]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>There are only two things a web server needs to be.....fast.....really fast.....and secure.</p>
<footer><cite>Muhammad Rehan Saeed</cite></footer>
</blockquote>
<h1 id="about-nginx">About NGINX</h1>
<p><a href="http://nginx.org/">NGINX</a> (Pronounced engine-x) is a popular open source web server. It can act as a reverse proxy server for TCP, UDP, HTTP, HTTPS, SMTP, POP3, and IMAP protocols, as well as a load balancer and a HTTP cache.</p>
<p>NGINX in fact <a href="https://w3techs.com/blog/entry/nginx_just_became_the_most_used_web_server_among_the_top_1000_websites">overtook Apache</a> as the most popular web server among the top 1000 websites. After playing with it for a while now, I have to say that I can see why.</p>
<p>There are two flavours of NGINX. The first is the open source version which is free, the other is called <a href="https://www.nginx.com/products/">NGINX Plus</a> and provides some more advanced features (all of which can be replicated with open source plugins but with a lot effort) and proper support but at the cost of a few thousand dollars.</p>
<p>There is a Windows version of NGINX but I wouldn&#39;t recommend using it for real as it doesn&#39;t perform as well as the Linux version and it&#39;s not as well tested. You can however use it to try out NGINX.</p>
<p>Alternatively, if you are running on Windows 10 Anniversary Update, you can install Bash for Windows and install the linux version. However the process is <a href="https://www.svennd.be/running-nginx-on-bash-for-windows-10/">not that straightforward</a>. Again, the caveat is that it can only be used for testing and not in production.</p>
<h1 id="iis-vs-nginx">IIS vs NGINX</h1>
<p>NGINX has no UI, it&#39;s all command line driven but don&#39;t let that put you off, the <a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/commandline/">CLI interface</a> only has three commands you actually need:</p>
<ol>
<li>Check my NGINX config (<code>nginx -t</code>).</li>
<li>Load my NGINX config (<code>nginx -s reload</code>).</li>
<li>By default the <code>nginx.conf</code> file is located in the NGINX installation folder. You can use that file or your own using (<code>nginx -c [nginx.conf File Path]</code>).</li>
</ol>
<p>IIS on the other hand does have a UI and what a travesty it is. It hasn&#39;t really changed for several years and really needs a usability study to hack it to pieces and start again.</p>
<p>The command line experience for IIS is another matter. It has very powerful IIS extensions you can install and the latest version of IIS even has an API that you can use to make simple HTTP calls to to update it.</p>
<p>Configuration is where NGINX shines. It has a single super simple <code>nginx.conf</code> file which is pretty well documented. IIS is also actually pretty simple to configure if you only rely on the <code>web.config</code> file.</p>
<h1 id="setting-up-nginx">Setting up NGINX</h1>
<p>The <a href="https://docs.asp.net/en/latest/publishing/linuxproduction.html">ASP.NET Core Documentation</a> site has some very good documentation on how to get started on Ubuntu. Unfortunately, it&#39;s not as simple as just installing NGINX using <code>apt-get install nginx</code>, there are a few moving parts to the process and a lot more moving parts if you want to install any additional modules.</p>
<p>If you&#39;re on Windows, as I mentioned earlier you have the options of installing NGINX using Bash for Windows 10 Anniversary Update but I couldn&#39;t get this working. Alternatively you can download the NGINX executable for Windows. If you do this, beware that NGINX tries to start on port 80 and there are a number of things that use that port already on Windows:</p>
<ol>
<li>Skype uses port 80 (Why?), turn it off in the advanced settings.</li>
<li>Turn off IIS.</li>
<li>Stop the SQL Server Reporting Services service.</li>
</ol>
<p>Once you have NGINX setup, you need to run your ASP.NET Core app using the Kestrel web server. Why does ASP.NET Core use two web servers? Well Kestrel is not security hardened enough to be exposed on the internet and it does not have all of the features that a full blown web server like IIS or NGINX has. NGINX takes the role of a <a href="https://en.wikipedia.org/wiki/Reverse_proxy">reverse proxy</a> and simply forwards requests to the Kestrel web server. One day this may change. Reliably keeping your ASP.NET Core app running in Linux is also described in the <a href="https://docs.asp.net/en/latest/publishing/linuxproduction.html">ASP.NET Core Documentation</a>.</p>
<h1 id="aiming-for-the-perfect-config-file">Aiming For The Perfect Config File</h1>
<p>You&#39;ve got NGINX running, all you need now is a <code>nginx.conf</code> file to forward requests from the internet to your ASP.NET Core app running using the Kestrel web server.</p>
<p>I have taken the time to combine the recommendations from the <a href="https://github.com/h5bp/server-configs-nginx/blob/master/nginx.conf">HTML5 Boilerplate</a> project, the <a href="https://docs.asp.net/en/latest/publishing/linuxproduction.html">ASP.NET Core NGINX Documentation</a>, the <a href="http://nginx.org/en/docs/">NGINX Docs</a> and my own experience to build the <code>nginx.config</code> (and <code>mime.types</code> file) file below specifically for the best performance and security and to target .NET Core apps.</p>
<p>Not only that but I&#39;ve gone to extreme lengths to find out what every setting actually does and have written short comments describing each and every setting. The config file is self describing, from this point forward it needs no explanation.</p>
<pre><code># Configure the Nginx web server to run your ASP.NET Core site efficiently.
# See https://docs.asp.net/en/latest/publishing/linuxproduction.html
# See http://nginx.org/en/docs/ and https://www.nginx.com/resources/wiki/

# Set another default user than root for security reasons.
# user                        xxx;

# The maximum number of connections for Nginx is calculated by:
# max_clients = worker_processes * worker_c
worker_processes            1;

# Maximum file descriptors that can be opened per process
# This should be &gt; worker_connections
worker_rlimit_nofile        8192;

# Log errors to the following location. Feel free to change these.
error_log                    logs/error.log;
# Log NXingx process errors to the following location. Feel free to change these.
pid                            logs/nginx.pid;

events {

    # When you need &gt; 8000 * cpu_cores connections, you start optimizing
    # your OS, and this is probably the point at where you hire people
    # who are smarter than you, this is *a lot* of requests.
    worker_connections        8000;

    # This sets up some smart queueing for accept(2)&#39;ing requests
    # Set it to &quot;on&quot; if you have &gt; worker_processes
    accept_mutex            off;

    # These settings are OS specific, by defualt Nginx uses select(2),
    # however, for a large number of requests epoll(2) and kqueue(2)
    # are generally faster than the default (select(2))
    # use epoll; # enable for Linux 2.6+
    # use kqueue; # enable for *BSD (FreeBSD, OS X, ..)

}

http {

    # Include MIME type to file extension mappings list.
    include                 mime.types;
    # The default fallback MIME type.
    default_type            application/octet-stream;

    # Format for our log files.
    log_format              main &#39;$remote_addr - $remote_user [$time_local]  $status &#39;
                                 &#39;&quot;$request&quot; $body_bytes_sent &quot;$http_referer&quot; &#39;
                                 &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;

    # Log requests to the following location. Feel free to change this.
    access_log              logs/access.log  main;

    # The number of seconds to keep a connection open.
    keepalive_timeout       29;
    # Defines a timeout for reading client request body.
    client_body_timeout     10;
    # Defines a timeout for reading client request header.
    client_header_timeout   10;
    # Sets a timeout for transmitting a response to the client.
    send_timeout            10;
    # Limit requests from an IP address to five requests per second.
    # See http://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req_zone
    limit_req_zone          $binary_remote_addr zone=one:10m rate=5r/s;

    # Disables emitting Nginx version in error messages and in the &#39;Server&#39; HTTP response header.
    server_tokens           off;

    # To serve static files using Nginx efficiently.
    sendfile                on;
    tcp_nopush              on;
    tcp_nodelay             off;

    # Enable GZIP compression.
    gzip                    on;
    # Enable GZIP maximum compression level. Ranges from 1 to 9.
    gzip_comp_level         9;
    # Enable GZIP over HTTP 1.0 (The default is HTTP 1.1).
    gzip_http_version       1.0;
    # Disable GZIP compression for IE 1 to 6.
    gzip_disable            &quot;MSIE [1-6]\.&quot;
    # Enable GZIP compression for the following MIME types (text/html is included by default).
    gzip_types              # Plain Text
                            text/plain
                            text/css
                            text/mathml
                            application/rtf
                            # JSON
                            application/javascript
                            application/json
                            application/manifest+json
                            application/x-web-app-manifest+json
                            text/cache-manifest
                            # XML
                            application/atom+xml
                            application/rss+xml
                            application/xslt+xml
                            application/xml
                            # Fonts
                            font/opentype
                            font/otf
                            font/truetype
                            application/font-woff
                            application/vnd.ms-fontobject
                            application/x-font-ttf
                            # Images
                            image/svg+xml
                            image/x-icon;
    # Enables inserting the &#39;Vary: Accept-Encoding&#39; response header.
    gzip_vary               on;

    # Sets configuration for a virtual server. You can have multiple virtual servers.
    # See http://nginx.org/en/docs/http/ngx_http_core_module.html#server
    server {

        # Listen for requests on specified port including support for HTTP 2.0.
        # See http://nginx.org/en/docs/http/ngx_http_core_module.html#listen
        listen                      80 http2 default;
        # Or, if using HTTPS, use this:
        # listen                      443 http2 ssl default;
        # Configure SSL/TLS
        # See http://nginx.org/en/docs/http/configuring_https_servers.html
        ssl_certificate             /etc/ssl/certs/testCert.crt;
        ssl_certificate_key         /etc/ssl/certs/testCert.key;
        ssl_protocols               TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers   on;
        ssl_ciphers                 &quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&quot;;
        ssl_ecdh_curve              secp384r1;
        ssl_session_cache           shared:SSL:10m;
        ssl_session_tickets         off;
        # Ensure your cert is capable before turning on SSL Stapling.
        ssl_stapling                on;
        ssl_stapling_verify         on;

        # The name of the virtual server where you can specify one or more domains that you own.
        server_name                    localhost;
        # server_name    example.com www.example.com *.example.com www.example.*;

        # Match incoming requests with the following path and forward them to the specified location.
        # See http://nginx.org/en/docs/http/ngx_http_core_module.html#location
        location / {

            proxy_pass              http://localhost:1025;

            # The default minimum configuration required for ASP.NET Core
            # See https://docs.asp.net/en/latest/publishing/linuxproduction.html?highlight=nginx#configure-a-reverse-proxy-server
            proxy_cache_bypass      $http_upgrade;
            # Turn off changing the URL&#39;s in headers like the &#39;Location&#39; HTTP header.
            proxy_redirect          off;
            # Forwards the Host HTTP header.
            proxy_set_header        Host $host;
            # The Kestrel web server we are forwarding requests to only speaks HTTP 1.1.
            proxy_http_version      1.1;
            proxy_set_header        Upgrade $http_upgrade;
            # Adds the &#39;Connection: keep-alive&#39; HTTP header.
            proxy_set_header        Connection keep-alive;

            # Sets the maximum allowed size of the client request body.
            client_max_body_size    10m;
            # Sets buffer size for reading client request body.
            client_body_buffer_size 128k;
            # Defines a timeout for establishing a connection with a proxied server.
            proxy_connect_timeout   90;
            # Sets a timeout for transmitting a request to the proxied server.
            proxy_send_timeout      90;
            # Defines a timeout for reading a response from the proxied server.
            proxy_read_timeout      90;
            # Sets the number and size of the buffers used for reading a response from the proxied server.
            proxy_buffers           32 4k;

        }

    }

}

types {

    # An expanded list of MIME type to file extension mappings for Nginx.

    # Data Interchange
    application/atom+xml                  atom;
    application/json                      json map topojson;
    application/ld+json                   jsonld;
    application/rss+xml                   rss;
    application/vnd.geo+json              geojson;
    application/xml                       rdf xml;

    # JavaScript
    application/javascript                js;

    # Manifest files
    application/manifest+json             webmanifest;
    application/x-web-app-manifest+json   webapp;
    text/cache-manifest                   appcache;

    # Media files
    audio/midi                            mid midi kar;
    audio/mp4                             aac f4a f4b m4a;
    audio/mpeg                            mp3;
    audio/ogg                             oga ogg opus;
    audio/x-realaudio                     ra;
    audio/x-wav                           wav;
    image/x-icon                          cur ico;
    image/bmp                             bmp;
    image/gif                             gif;
    image/jpeg                            jpeg jpg;
    image/png                             png;
    image/svg+xml                         svg svgz;
    image/tiff                            tif tiff;
    image/vnd.wap.wbmp                    wbmp;
    image/webp                            webp;
    image/x-jng                           jng;
    video/3gpp                            3gp 3gpp;
    video/mp4                             f4p f4v m4v mp4;
    video/mpeg                            mpeg mpg;
    video/ogg                             ogv;
    video/quicktime                       mov;
    video/webm                            webm;
    video/x-flv                           flv;
    video/x-mng                           mng;
    video/x-ms-asf                        asf asx;
    video/x-ms-wmv                        wmv;
    video/x-msvideo                       avi;

    # Microsoft Office
    application/msword                                                         doc;
    application/vnd.ms-excel                                                   xls;
    application/vnd.ms-powerpoint                                              ppt;
    application/vnd.openxmlformats-officedocument.wordprocessingml.document    docx;
    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet          xlsx;
    application/vnd.openxmlformats-officedocument.presentationml.presentation  pptx;

    # Web Fonts
    application/font-woff                 woff;
    application/font-woff2                woff2;
    application/vnd.ms-fontobject         eot;
    application/x-font-ttf                ttc ttf;
    font/opentype                         otf;

    # Other
    application/java-archive              ear jar war;
    application/mac-binhex40              hqx;
    application/octet-stream              bin deb dll dmg exe img iso msi msm msp safariextz;
    application/pdf                       pdf;
    application/postscript                ai eps ps;
    application/rtf                       rtf;
    application/vnd.google-earth.kml+xml  kml;
    application/vnd.google-earth.kmz      kmz;
    application/vnd.wap.wmlc              wmlc;
    application/x-7z-compressed           7z;
    application/x-bb-appworld             bbaw;
    application/x-bittorrent              torrent;
    application/x-chrome-extension        crx;
    application/x-cocoa                   cco;
    application/x-java-archive-diff       jardiff;
    application/x-java-jnlp-file          jnlp;
    application/x-makeself                run;
    application/x-opera-extension         oex;
    application/x-perl                    pl pm;
    application/x-pilot                   pdb prc;
    application/x-rar-compressed          rar;
    application/x-redhat-package-manager  rpm;
    application/x-sea                     sea;
    application/x-shockwave-flash         swf;
    application/x-stuffit                 sit;
    application/x-tcl                     tcl tk;
    application/x-x509-ca-cert            crt der pem;
    application/x-xpinstall               xpi;
    application/xhtml+xml                 xhtml;
    application/xslt+xml                  xsl;
    application/zip                       zip;
    text/css                              css;
    text/html                             htm html shtml;
    text/mathml                           mml;
    text/plain                            txt;
    text/vcard                            vcard vcf;
    text/vnd.rim.location.xloc            xloc;
    text/vnd.sun.j2me.app-descriptor      jad;
    text/vnd.wap.wml                      wml;
    text/vtt                              vtt;
    text/x-component                      htc;

}
</code></pre>
<h1 id="nginx-modules">NGINX Modules</h1>
<p>Like IIS, NGINX has modules that you can add to it, to provide extra features. There are a number of them out there. I&#39;ve listed two that I care about and you should too.</p>
<p>Installing modules is best done by downloading the NGINX source, as well as the modules you need and then compiling the application. There is a feature called <a href="https://www.nginx.com/blog/dynamic-modules-nginx-1-9-11/">dynamic modules</a> which lets you dynamically load additional separate modules after installing NGINX but the link suggests third party modules may not be supported so I didn&#39;t try it out.</p>
<h2 id="http-20">HTTP 2.0</h2>
<p>The <a href="http://nginx.org/en/docs/http/ngx_http_v2_module.html">ngx_http_v2_module</a> module lets you use <a href="https://en.wikipedia.org/wiki/HTTP/2">HTTP 2.0</a>. HTTP 2.0 gives your site a very rough ~3-5% performance boost and that&#39;s before using any of it&#39;s more advanced features which not many people are using yet.</p>
<h2 id="brotli-compression">Brotli Compression</h2>
<p>The <a href="http://ngx_brotli">ngx_brotli</a> module lets NGINX use the <a href="https://en.wikipedia.org/wiki/Brotli">Brotli</a> compression algorithm. If you haven&#39;t heard about Brotli, you should take note. Brotli is a compression algorithm built by Google and is perhaps set to take over from GZIP as the compression algorithm of the web. It&#39;s already <a href="http://caniuse.com/#search=brotli">fully supported</a> on Firefox, Chrome and Opera with only Edge lagging behind.</p>
<p>Depending on how much extra CPU power you are wanting to use (it can max out your CPU at the highest compression levels, which could DoS your site if someone makes too many requests, so be careful what compression level you choose), Brotli can compress files and save you around 10-20% bandwidth over what GZIP can do! Those are some significant savings.</p>
<h1 id="net-boxed">.NET Boxed</h1>
<p>I have updated the <a href="https://github.com/Dotnet-Boxed/Templates/">.NET Boxed</a> project template, so you can now choose the web server (IIS or NGINX) you want to use. If you choose to use NGINX, you can have it pre-configured just for you, right out of the box.</p>
<h1 id="conclusions">Conclusions</h1>
<p>The main reason, I&#39;ve been taking a serious look at NGINX is hard cash. Running Linux servers in the cloud can costs around half the price of a Windows server. Also, you can nab yourself some pretty big performance wins by using the modules I&#39;ve listed.</p>
<p>There are some interesting overlaps between ASP.NET Core and NGINX. Both can be used to serve static files, HTTP headers, GZIP files etc. I think ASP.NET Core is slowly going to take on more of the role that traditionally was the preserve of the web server.</p>
<p>The cool thing is that because ASP.NET Core is just C#, we&#39;ll have a lot of power to configure things using code. NGINX lets you do more advanced configuration using the Lua language and soon even in JavaScript but putting that logic in the app where it belongs and where you can do powerful things makes sense to me.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ASP.NET Core Fluent Interface Extensions]]></title>
        <id>https://rehansaeed.com/asp-net-core-fluent-interface-extensions/</id>
        <link href="https://rehansaeed.com/asp-net-core-fluent-interface-extensions/"/>
        <updated>2016-06-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Using the fluent interface style in with ASP.NET Core Fluent Interface Extension methods. Building on top of the work done by Khalid Abuhakmeh.]]></summary>
        <content type="html"><![CDATA[<p>Last week <a href="http://khalidabuhakmeh.com">Khalid Abuhakmeh</a> wrote a very interesting blog post called <a href="http://www.khalidabuhakmeh.com/middlewarebuilder-for-asp-net-core-1-0-rc2#disqus_thread">Middleware Builder for ASP.NET Core</a> which I highly recommend you read. In it, he attempts to write some extension methods to help with writing the Configure method in your ASP.NET Core Startup class with a <a href="https://en.wikipedia.org/wiki/Fluent_interface">fluent interface</a>. I&#39;ve taken his blog post to heart and gone on a mission to &#39;fluent all the things&#39; in ASP.NET Core.</p>
<h1 id="iapplicationbuilder-and-iloggerfactory">IApplicationBuilder and ILoggerFactory</h1>
<p>This is an example of what your current Configure method might look like in a typical ASP.NET Core <code>Startup</code> class:</p>
<pre><code class="language-cs">public void Configure(
    IApplicationBuilder application, 
    IHostingEnvironment environment, 
    ILoggerFactory loggerFactory)
{
    if (environment.IsDevelopment())
    {
        // Do stuff on your local machine.
        loggerFactory
            .AddConsole(...)
            .AddDebug();
        application.UseDeveloperExceptionPage();
    }
    else
    {
        // Do stuff on when running in your production environment.
        loggerFactory.AddSerilog(...);
        application.UseStatusCodePagesWithReExecute(&quot;/error/{0}/&quot;);
    }

    if (environment.IsStaging())
    {
        // Do stuff in the staging environment.
        application.UseStagingSpecificMiddleware(); 
    }

    application
        .UseStaticFiles()
        .UseMvc();
}
</code></pre>
<p>And this is the same code using the shorter, and prettier fluent interface style:</p>
<pre><code class="language-cs">public void Configure(
    IApplicationBuilder application, 
    IHostingEnvironment environment, 
    ILoggerFactory loggerFactory)
{
    loggerfactory
        .AddIfElse(
            hostingEnvironment.IsDevelopment(),
            x =&gt; x.AddConsole(...).AddDebug(),
            x =&gt; x.AddSerilog(...));

    application
        .UseIfElse(
            environment.IsDevelopment(),
            x =&gt; x.UseDeveloperExceptionPage(),
            x =&gt; x.UseStatusCodePagesWithReExecute(&quot;/error/{0}/&quot;))
        .UseIf(
            environment.IsStaging(),
            x =&gt; x.UseStagingSpecificMiddleware())
        .UseStaticFiles()
        .UseMvc();
}
</code></pre>
<p>In the above code, you can see that I&#39;ve added <code>UseIf</code> and <code>UseIfElse</code> extension methods to the <code>IApplicationBuilder</code>  which lets us use the fluent interface. What you&#39;ll also notice is that <code>ILoggerFactory</code> also has <code>AddIf</code> and <code>AddIfElse</code> extension methods.</p>
<h1 id="iconfigurationbuilder">IConfigurationBuilder</h1>
<p>I didn&#39;t just stop there, I added similar <code>AddIf</code> and <code>AddIfElse</code> extension methods for <code>IConfigurationBuilder</code>:</p>
<pre><code class="language-cs">public Startup(IHostingEnvironment hostingEnvironment)
{
    this.hostingEnvironment = hostingEnvironment;
    var configurationBuilder = new ConfigurationBuilder()
        .SetBasePath(hostingEnvironment.ContentRootPath)
        .AddJsonFile(&quot;config.json&quot;)
        .AddJsonFile($&quot;config.{hostingEnvironment.EnvironmentName}.json&quot;, optional: true);

        if (hostingEnvironment.IsDevelopment())
        {
            configurationBuilder.AddUserSecrets();
        }

        this.configuration = configurationBuilder
            .AddEnvironmentVariables()
            .AddApplicationInsightsSettings(developerMode: !hostingEnvironment.IsProduction())
            .Build();
}

public Startup(IHostingEnvironment hostingEnvironment)
{
    this.hostingEnvironment = hostingEnvironment;
    this.configuration = new ConfigurationBuilder()
        .SetBasePath(hostingEnvironment.ContentRootPath)
        .AddJsonFile(&quot;config.json&quot;)
        .AddJsonFile($&quot;config.{hostingEnvironment.EnvironmentName}.json&quot;, optional: true)
        .AddIf(
            hostingEnvironment.IsDevelopment(),
            x =&gt; x.AddUserSecrets())
        .AddEnvironmentVariables()
        .AddApplicationInsightsSettings(developerMode: !hostingEnvironment.IsProduction())
        .Build();
}
</code></pre>
<h1 id="iservicecollection">IServiceCollection</h1>
<p>As if that wasn&#39;t enough I also did the same with <code>IServiceCollection</code> with the same <code>AddIf</code> and <code>AddIfElse</code> extension methods. In my experience, these would be used less often but I&#39;ve added them for completeness.</p>
<h1 id="fluent-me-up">Fluent me up!</h1>
<p>You can get these extension methods and much more by installing the <a href="https://www.nuget.org/packages/Boxed.AspNetCore">Boxed.AspNetCore</a> NuGet package or create a project using the <a href="https://github.com/Dotnet-Boxed/Templates">.NET Boxed</a> project templates. Finally, if you are so inclined, you can also take a look at the code for these extension methods in the <a href="https://github.com/Dotnet-Boxed/Framework">.NET Boxed Framework</a> project.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Azure Active Directory Versus Identity Server]]></title>
        <id>https://rehansaeed.com/azure-active-directory-versus-identity-server/</id>
        <link href="https://rehansaeed.com/azure-active-directory-versus-identity-server/"/>
        <updated>2016-05-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A comparison between Azure Active Directory and Identity Server covering the advantages and disadvantages of both.]]></summary>
        <content type="html"><![CDATA[<p>::: warning Disclaimer
I looked into this subject for use by the company I work for, who had existing infrastructure I had to cater to, so the solution I chose is skewed in that direction. Even so I&#39;ve tried to give an impartial summary of my own thoughts during my research. I originally asked this question on an Identity Server GitHub <a href="https://github.com/IdentityServer/IdentityServer3/issues/2116">issue</a>.
:::</p>
<h1 id="azure-active-directory">Azure Active Directory</h1>
<p>Azure Active Directory is a hosted identity solution, so there is far less setup (especially if like me, you discover that to your surprise, you are already using it for Office 365). Out of the box, it provides some very nice features that can get you started very quickly.</p>
<h2 id="on-premises-active-directory">On-Premises Active Directory</h2>
<p>Azure Active Directory can connect to an on-premises Active Directory server very easily using something called <a href="https://azure.microsoft.com/en-gb/documentation/articles/active-directory-aadconnect/">Azure AD Connect</a>. Most companies are not running everything in the cloud and have an on-premises AD server, so this is a pretty big killer feature.</p>
<p>Syncing the two directories happens transparently but there are a bunch of things that can be configured like the way passwords are synced. I&#39;m not a system administrator so I&#39;ve not set this up personally but most IT admins can do this pretty painlessly.</p>
<h2 id="connect-health">Connect Health</h2>
<p>The premium edition of Azure Active Directory has a monitoring and reporting capability called <a href="https://azure.microsoft.com/en-gb/documentation/articles/active-directory-aadconnect-health/">Connect Health</a> so you can see who is logging into your system and when. You can also get alerts for any seemingly nefarious activity, like a report on the top 50 users with failed username and password attempts, as well as a report on whether Azure AD is syncing correctly with any on-premises AD server you might have. It&#39;s a pretty nice feature for IT Admins, while others might not care too much about it.</p>
<p><img src="https://rehansaeed.com/azure-active-directory-versus-identity-server/images/Azure-Active-Directory-Connect-Health.png" alt="Azure Active Directory Connect Health"></p>
<h2 id="two-factor-authentication">Two-Factor Authentication</h2>
<p>The premium edition has two factor authentication built in right out of the box, so no having to setup a text message provider, plus the costs of sending those messages are included out of the box.</p>
<h2 id="cloudflare-for-identity">Cloudflare for Identity</h2>
<p>Microsoft is monitoring all logins and actively blocks activity from known attackers (a bit like cloudflare for identity), so it should in theory provide some added security. There is not much detail about this though.</p>
<h2 id="managing-users">Managing Users</h2>
<p>You can manage users from the Azure portal but the UI is just about passable. If you are using Office 365, you&#39;re in a better position as it provides a better UI to manage users.</p>
<h2 id="ui-customization">UI Customization</h2>
<p>Customization of the UI is very basic. You can provide a company logo and background image, which get displayed on the login screens but that&#39;s about it.</p>
<h2 id="developer-experience">Developer Experience</h2>
<p>The overall developer experience is pretty slick. Creating a new project in Visual Studio lets you enable integration with Azure AD by just logging in using your Azure credentials and selecting your Azure AD account. It doesn&#39;t get any easier than that for simple scenarios.</p>
<p>For more complex scenarios, you will inevitably have to log into the Azure Portal and configure things a bit more. You often end up having to download and edit an XML configuration file from the Azure Portal. This is not the best experience in the world.</p>
<h2 id="overall">Overall</h2>
<p>You have to pay for the premium features and using the Azure Portal to do identity management is kind of a pain. Out of the box though this is ridiculously fast to setup and can get you up to speed very quickly, while giving you a secure platform.</p>
<p>The documentation is pretty good and there are samples on GitHub with Microsoft developers actively monitoring the issues which was helpful. Some links I found useful:</p>
<ul>
<li><a href="https://azure.microsoft.com/en-gb/documentation/articles/active-directory-whatis/">Documentation home page.</a></li>
<li><a href="https://azure.microsoft.com/en-gb/documentation/articles/active-directory-authentication-scenarios/">Documentation for each type of authentication flow.</a></li>
<li><a href="https://azure.microsoft.com/en-gb/documentation/articles/active-directory-code-samples/#server-or-daemon-application-to-web-api">Samples covering every authentication flow.</a></li>
<li>Introduction <a href="https://channel9.msdn.com/Shows/Azure-Friday/Azure-Identity-101-Vittorio-explains-Federation-and-the-basics-of-Azure-Active-Directory">video 1 (Channel 9)</a> and <a href="https://channel9.msdn.com/Shows/Azure-Friday/Azure-Identity-102-Vittorio-creates-a-Windows-Azure-Active-Directory-in-Azure">video 2 (Channel 9)</a>.</li>
<li>Build 2016 videos:<ul>
<li><a href="https://channel9.msdn.com/Events/Build/2016/P423">Business-to-Consumer Identity Management with Azure Active Directory B2C</a></li>
</ul>
</li>
<li>Build 2015 videos:<ul>
<li><a href="https://azure.microsoft.com/en-gb/documentation/videos/build-2015-azure-active-directory-identity-management-as-a-service-for-modern-applications/">Azure Active Directory Identity Management as a Service for Modern Applications</a></li>
<li><a href="https://azure.microsoft.com/en-gb/documentation/videos/build-2015-develop-modern-web-applications-with-azure-active-directory/">Develop Modern Web Applications with Azure Active Directory</a></li>
<li><a href="https://azure.microsoft.com/en-gb/documentation/videos/build-2015-develop-modern-native-applications-with-azure-active-directory/">Develop Modern Native Applications with Azure Active Directory</a></li>
</ul>
</li>
</ul>
<h1 id="identityserver">IdentityServer</h1>
<p>IdentityServer is the Swiss Army knife of Identity management. It can do everything but does require a small amount of setup and a little more knowledge of the identity space. It can do most things that I listed above and a lot more beyond.</p>
<h2 id="multiple-identity-sources">Multiple Identity Sources</h2>
<p>IdentityServer can connect to one or more identity sources. It has to be noted that even if you are using Azure Active Directory, there may still be reasons for choosing IdentityServer which I had not initially considered. For example, if you have more than one source of user data e.g. You are using AD and also a SQL database of users, then IdentityServer can be used to point to both of these sources of user information. In theory it should also make it easier to switch from AD to something else entirely as it decouples things.</p>
<h2 id="application-insights">Application Insights</h2>
<p>It&#39;s possible to integrate Application Insights yourself and record things like logins and password resets. You could build a dashboard of graphs which looks like Connect Health. In fact, you can make it look exactly like Connect Health with very little effort.</p>
<h2 id="two-factor-authentication-1">Two-Factor Authentication</h2>
<p>Two-Factor Authentication requires a third party provider to send text messages and of course this means that there will be a monetary cost. In addition there is a small amount of code you have to write to get things connected.</p>
<h2 id="use-cloudflare">Use Cloudflare</h2>
<p>Azure Active Directory provides some built in support for blocking malicious activity, a bit like Cloudflare but for identity. With IdentityServer, you could use the real Cloudflare and get some added protection for very little effort.</p>
<h2 id="ui-customization-1">UI Customization</h2>
<p>UI customization is where IdentityServer shines. You have full access to the HTML and CSS and can fully customize the look and feel to your hearts content.</p>
<h2 id="developer-experience-1">Developer Experience</h2>
<p>IdentityServer is built by <a href="https://leastprivilege.com/">Dominick Baier</a>, <a href="https://brockallen.com/">Brock Allen</a> and the open source community. I actually did a WCF course under the instruction of Dominick many years ago and I can tell you that IdentityServer is in capable hands.</p>
<p>Any questions or issues you have would be posted on the relevant <a href="https://github.com/IdentityServer">IdentityServer GitHub</a> project. Dominick, Brock and other community members often answer questions. Overall, it&#39;s run as a healthy open source project.</p>
<h2 id="microsoft-backing">Microsoft Backing</h2>
<p>Microsoft has attempted to build their own identity provider in the past but the solution wasn&#39;t the best. Having embraced open source, they now recommend IdentityServer themselves.</p>
<h2 id="overall-1">Overall</h2>
<p>The project is actively developed on GitHub and it has well known developers at the helm. There are code samples for all the authentication flows and you can get answers from the community. Some links I found useful:</p>
<ul>
<li><a href="https://github.com/IdentityServer/IdentityServer4">IdentityServer4 GitHub home page.</a></li>
<li><a href="https://github.com/IdentityServer/IdentityServer4.Samples">Samples covering every authentication flow.</a></li>
<li><a href="https://github.com/IdentityManager/IdentityManager">IdentityManager GitHub home page</a> (A separate application for handling users, groups and roles).</li>
<li><a href="https://github.com/IdentityServer/IdentityServer3.Admin">IdentityServer Admin GitHub home page</a> (A tool for managing clients and scopes).</li>
<li><a href="https://vimeo.com/154172925">Introduction video at NDC 2016 (Vimeo).</a></li>
</ul>
<h1 id="authentication-flows">Authentication Flows</h1>
<p><strong>Fact</strong>: Security is really really hard. There are lots of different ways of doing authentication called &#39;flows&#39;. I put <a href="https://azure.microsoft.com/en-gb/documentation/articles/active-directory-authentication-scenarios/">this link</a> here because I found it very useful for understanding them. Also, the following diagram is key to understanding this entire topic.</p>
<p><img src="https://rehansaeed.com/azure-active-directory-versus-identity-server/images/Authentication-Flows.png" alt="Authentication Flows"></p>
<h1 id="summary">Summary</h1>
<p>What you decide to choose depends entirely on the problem you have. Which should you choose? Well, it depends on the number of developers, time, money and effort you can expend setting everything up. There is no one size fits all solution. Really, the differences in the two products above are the differences between a SaaS and PaaS solution.</p>
<p>Which did I choose? While I was doing this research, I discovered to my surprise that the company I work for already had an Azure Active Directory linked to an on-premises Active Directory server because we were using Office 365. That made the choice much easier for us.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Social TagHelpers for ASP.NET Core]]></title>
        <id>https://rehansaeed.com/social-taghelpers-for-asp-net-core/</id>
        <link href="https://rehansaeed.com/social-taghelpers-for-asp-net-core/"/>
        <updated>2016-03-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Enhance the experience of sharing a page from your site through the use of social media meta tags implemented with ASP.NET Core TagHelpers.]]></summary>
        <content type="html"><![CDATA[<p>Social media websites like Facebook, Twitter, Google+, Pintrest etc. provide ways to enhance the experience of sharing a page from your site through the use of meta tags. These provide metadata about what is on your page in a standardized format that these sites can use to better display your content. Here are two quick examples of the enhanced content that Twitter and Facebook display when you add these meta tags to your page:</p>
<p><img src="https://rehansaeed.com/social-taghelpers-for-asp-net-core/images/Facebook-Open-Graph-Share.png" alt="Facebook Open Graph Share"></p>
<p><img src="https://rehansaeed.com/social-taghelpers-for-asp-net-core/images/Twitter-Player-Card.png" alt="Twitter Player Card"></p>
<p>It turns out that most of the social media sites use only two standard sets of meta tags, namely Open Graph (Facebook) and Twitter Cards. I have built ASP.NET Core TagHelpers and ASP.NET 4.6 HTML Helpers which make it easy to add these meta tags to your site.</p>
<h1 id="author-meta-tag">Author Meta Tag</h1>
<p>This is nothing to do with social media meta tags but worth mentioning. The author meta tag has been around for many years and is a standard but very basic way of telling search engines and others, who authored your page. It&#39;s unclear where if anywhere this tag is used but as it&#39;s a standard I like to put it in anyway as it doesn&#39;t hurt to do so.</p>
<pre><code class="language-html">&lt;meta name=&quot;author&quot; content=&quot;Muhammad Rehan Saeed&quot;&gt;
</code></pre>
<h1 id="open-graph-facebook">Open Graph (Facebook)</h1>
<p><a href="http://ogp.me/">Open Graph</a> is an open standard (it&#39;s set by Facebook and doesn&#39;t seem so open to me as I&#39;ll explain),  containing several sets of meta tags which represent various things, such as:</p>
<ul>
<li><p>Website</p>
</li>
<li><p>Music Album</p>
</li>
<li><p>Music Song</p>
</li>
<li><p>Music Playlist</p>
</li>
<li><p>Video Movie</p>
</li>
<li><p>Video Episode</p>
</li>
<li><p>Video TV Show</p>
</li>
<li><p>Video Other</p>
</li>
<li><p>Article</p>
</li>
<li><p>Book</p>
</li>
<li><p>Profile</p>
</li>
</ul>
<p>Here is an example of what the meta tags for a page looks like for the <code>Website</code> set. Note the <code>type</code> tag which determines the name of the set used:</p>
<pre><code class="language-html">&lt;meta property=&quot;og:type&quot; content=&quot;website&quot;&gt;
&lt;meta property=&quot;og:title&quot; content=&quot;.NET Boxed&quot;&gt;
&lt;meta property=&quot;og:url&quot; content=&quot;http://example.com/&quot;&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;http://example.com/1200x630.png&quot;&gt;
&lt;meta property=&quot;og:image:type&quot; content=&quot;image/png&quot;&gt;
&lt;meta property=&quot;og:image:width&quot; content=&quot;1200&quot;&gt;
&lt;meta property=&quot;og:image:height&quot; content=&quot;630&quot;&gt;
&lt;meta property=&quot;og:site_name&quot; content=&quot;.NET Boxed&quot;&gt;
</code></pre>
<p>What I find perplexing is that Facebook also have their <a href="https://developers.facebook.com/docs/reference/opengraph">own</a> custom sets of meta tags over and above the ones in Open Graph. These are:</p>
<ul>
<li><p>Article</p>
</li>
<li><p>Books Author</p>
</li>
<li><p>Books Book</p>
</li>
<li><p>Books Genre</p>
</li>
<li><p>Business</p>
</li>
<li><p>Fitness Course</p>
</li>
<li><p>Game Achievement</p>
</li>
<li><p>Music Album</p>
</li>
<li><p>Music Playlist</p>
</li>
<li><p>Music Radio Station</p>
</li>
<li><p>Music Song</p>
</li>
<li><p>Place</p>
</li>
<li><p>Product</p>
</li>
<li><p>Product Group</p>
</li>
<li><p>Product Item</p>
</li>
<li><p>Profile</p>
</li>
<li><p>Restaurant Menu</p>
</li>
<li><p>Restaurant Menu Item</p>
</li>
<li><p>Restaurant Menu Section</p>
</li>
<li><p>Restaurant</p>
</li>
<li><p>Video Episode</p>
</li>
<li><p>Video Movie</p>
</li>
<li><p>Video Other</p>
</li>
<li><p>Video TV Show</p>
</li>
</ul>
<p>As you can see there is a lot more choice and detail here. What&#39;s confusing is that there is overlap between the Open Graph and Facebook meta tags. Both have sets covering music, video and books, with the Facebook sets requiring you to add far more detailed metadata. The Open Graph tags may play nicer with other social media sites that use these tags while the Facebook ones will obviously give the best experience for the user on Facebook. The above meta tags can be set using my tag helpers or HTML helpers depending on the version of ASP.NET you are using like so:</p>
<pre><code class="language-html">&lt;open-graph-website site-name=&quot;My Website&quot;
                    title=&quot;Page Title&quot;
                    main-image=&quot;@(new OpenGraphImage(
                        Url.AbsoluteContent(&quot;~/img/1200x630.png&quot;),
                        ContentType.Png,
                        1200,
                        630))&quot;
                    determiner=&quot;OpenGraphDeterminer.Blank&quot;&gt;
</code></pre>
<pre><code class="language-cs">@Html.OpenGraph(new OpenGraphWebsite(
    &quot;Page Title&quot;,
    new OpenGraphImage(
        Url.AbsoluteContent(&quot;~/1200x630.png&quot;))
        {
            Height = 630, 
            Type = ContentType.Png, 
            Width = 1200 
        })
    {
        Determiner = OpenGraphDeterminer.Blank,
        SiteName = &quot;My Site&quot;
    });
</code></pre>
<p>Of course there are tag helpers and HTML helpers for all of the above meta tag sets.</p>
<h1 id="twitter-cards">Twitter Cards</h1>
<p><a href="https://dev.twitter.com/cards/getting-started">Twitter cards</a> require meta tags representing one of several &#39;cards&#39; which can represent different things:</p>
<ul>
<li>App - A phone app.</li>
<li>Gallery - A photo gallery.</li>
<li>Photo - A single photo.</li>
<li>Player - A video.</li>
<li>Product - A product you want to sell.</li>
<li>Summary - A summary of the current page. This is usually the default choice for any page.</li>
<li>Summary Large Image - The same as summary but with a large image.</li>
</ul>
<p>If you have already added Open Graph meta tags, then Twitter can make use of them and you can omit some of the meta tags that Twitter requires. This makes adding a Twitter Card very easy and in fact, most of the time all you need to do is include a Twitter username and the card type. Here is an example of what Twitter card meta tags look like given that you already have Open Graph meta tags:</p>
<pre><code class="language-html">&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@RehanSaeedUK&quot;&gt;
</code></pre>
<p>Below, is an example of how to generate the above code using my tag helpers or HTML helpers. I have used the <code>Summary Large Image</code> card (Notice the double <code>@</code> sign in the tag helper, this is because <code>@</code> is a special character in Razor and a double <code>@@</code> escapes the character):</p>
<pre><code class="language-html">&lt;twitter-card-summary-large-image username=&quot;@@RehanSaeedUK&quot;&gt;
</code></pre>
<pre><code class="language-cs">@Html.TwitterCard(new SummaryLargeImageTwitterCard(&quot;@RehanSaeedUK&quot;));
</code></pre>
<p>There are also tag helpers and HTML helpers for all of the above Twitter cards. The other cards are a little more complicated than the summary card I have shown in my example above.</p>
<h1 id="google-pintrest--others">Google+, Pintrest &amp; Others</h1>
<p>Due to the proliferation of Facebook&#39;s Open Graph and Twitters card meta tags, other social media sites, search engines and other sites also use them. By implementing the above meta tags, you can cover most of the ground with very little effort.</p>
<h1 id="validating-meta-tags">Validating Meta Tags</h1>
<p>Due to the difficulty of getting these meta tags correct, there are several validator tools that the various social media companies provide which let you confirm that you have not made any mistakes. Now, if you&#39;ve used my tag helpers or HTML helpers you should be ahead of the game and things should just work but it&#39;s worth checking out:</p>
<ul>
<li><a href="https://developers.facebook.com/tools/debug">Facebook Debugger</a></li>
<li><a href="https://dev.twitter.com/docs/cards/validation/validator">Twitter Validation Tool</a></li>
<li><a href="http://www.google.com/webmasters/tools/richsnippets">Google Structured Data Testing Tool</a></li>
<li><a href="http://developers.pinterest.com/rich_pins/validator">Pinterest Rich Pins Validator</a></li>
</ul>
<h1 id="performance">Performance</h1>
<p>When I was looking into implementing these tag helpers and HTML helpers, I looked at a few other efforts on GitHub. However, for some strange reason all of them used reflection behind the scenes. At this point I&#39;d like to go on a short rant against using reflection. I&#39;ve seen a lot of &#39;clever&#39; code use reflection over the years and I&#39;ve seen a far too many developers hammer far too many nails using it. It&#39;s a very powerful tool but gets abused far too often. Now, back to resuming normal service. This made these libraries pretty slow for generating a few meta tags, not to mention that they don&#39;t support ASP.NET Core. My implementation uses a single <code>StringBuilder</code> and should be fairly fast. At some point I will even use <a href="https://stackoverflow.com/questions/2510975/c-sharp-object-pooling-pattern-implementation">object pooling</a> to reuse copies of <code>StringBuilder</code>.</p>
<h1 id="where-can-i-get-it">Where Can I Get It?</h1>
<p>This tag or HTML helper is available in a few ways:</p>
<ol>
<li>The <a href="https://www.nuget.org/packages/Boxed.AspNetCore.TagHelpers/">.NET Boxed Boxed.AspNetCore.TagHelpers</a> NuGet package.</li>
<li>Check out source code in the <a href="https://github.com/Dotnet-Boxed/Framework">.NET Boxed Framework</a> GitHub repository.</li>
</ol>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Subresource Integrity TagHelper Using ASP.NET Core - Part 2]]></title>
        <id>https://rehansaeed.com/subresource-integrity-taghelper-using-asp-net-core-part-2/</id>
        <link href="https://rehansaeed.com/subresource-integrity-taghelper-using-asp-net-core-part-2/"/>
        <updated>2016-03-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Use an ASP.NET Core TagHelper to implement Subresource Integrity (SRI) to ensure that external resources have not been tampered with. With is part 2.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/subresource-integrity-taghelper-using-asp-net-core/">Subresource Integrity TagHelper Using ASP.NET Core - Part 1</a></li>
<li><a href="https://rehansaeed.com/subresource-integrity-taghelper-using-asp-net-core-part-2/">Subresource Integrity TagHelper Using ASP.NET Core - Part 2</a></li>
</ol>
<p>Last week I wrote part one of a blog post discussing a Subresource Integrity (SRI) tag helper I wrote for ASP.NET Core. It turns out the post was featured on the ASP.NET Community Standup and discussed at length by <a href="http://twitter.com/shanselman">Scott Hanselman</a>, <a href="http://twitter.com/damianedwards">Damian Edwards</a> and <a href="http://twitter.com/jongalloway">Jon Galloway</a>. Here is the discussion:</p>
<p><a href="https://www.youtube.com/watch?v=Mu2jol8EmVo">https://www.youtube.com/watch?v=Mu2jol8EmVo</a></p>
<p>The overall impression from the standup was that the SRI tag helper I wrote was a good first step but there was more work to be done. It was however, still more secure than &quot;the rest of the internet&quot; according to Jon Galloway. The main issue raised during the standup was that the first call made to get the resource could retrieve a version of it that was compromised.</p>
<p>My initial thinking was that you could check the files at deployment time when the tag helper first runs. Then the tag helper would have calculated the hash and cached it without any expiration time, so you are good from then on. In hindsight checking the files on every deployment is not great for the developer.</p>
<h1 id="the-2nd-iteration">The 2nd Iteration</h1>
<p>So for the next iteration I have added a new alternative source attribute, basically a local file from which the SRI is calculated. Now the tag helper looks like this when in use:</p>
<pre><code class="language-html">&lt;script
  src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js&quot;
  asp-subresource-integrity-src=&quot;~/js/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>You can also customize the hashing algorithm used in your SRI. You can choose between SHA256, SHA384 and SHA512, by default the tag helper uses the most secure option SHA512 which seems to be supported by all browsers. Should you choose to use a different hashing algorithm or even use more than one algorithm, you can set the <code>asp-subresource-integrity-hash-algorithms</code> attribute which is just a flagged enumeration (Note that I am using ASP.NET Core RC2 syntax, where the name of the enumeration can be omitted):</p>
<pre><code class="language-html">&lt;script
  src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js&quot;
  asp-subresource-integrity-src=&quot;~/js/jquery.min.js&quot;
  asp-subresource-integrity-hash-algorithms=&quot;SHA256 | SHA384 | SHA512&quot;&gt;&lt;/script&gt;
</code></pre>
<p>What is it doing behind the scenes?</p>
<ol>
<li>Reads the local file specified using the asp-subresource-integrity-src  attribute.</li>
<li>Calculates a SHA512 hash (or your custom selection) for the file.</li>
<li>Adds the <code>integrity</code> and <code>crossorigin</code> attributes to the script tag.</li>
<li>Adds the hash value to the distributed cache (<code>IDistributedCache</code>) built in to ASP.NET Core with no expiry date. If you are using a distributed cache like <a href="http://redis.io/">Redis</a> (Which you should for the pure speed of it) then the hash will be remembered.</li>
<li>The next time the page loads, the hash is retrieved from the cache, so there is very little performance impact of this tag helper.</li>
</ol>
<h1 id="microsoft-cdn-still-broken-for-sri">Microsoft CDN Still Broken for SRI</h1>
<p>In my last post I noted that SRI requires that the resource has a valid <code>Access-Control-Allow-Origin</code> HTTP header (usually with a <code>*</code> value). Microsoft&#39;s CDN does not supply this header for all it&#39;s resources. I did reach out to Microsoft to see if this could be fixed. I&#39;ve not heard back yet. I would imagine that with a CDN of that size, fixing this issue is a non-trivial thing so it might take time but I&#39;ll do some more chasing.</p>
<h1 id="browser-extensions-and-sri">Browser Extensions and SRI</h1>
<p>Last week, I noted that leaving out the scheme in the URL for your CDN resource e.g. <code>//example.com/jquery.js</code> caused Firefox to error and fail to load the resource completely and I recommended that you always include the <code>https://</code> scheme. It turns out that this was not Firefox causing the issue at all but a Firefox browser extension. I&#39;ve yet to figure out which one yet as I have quite a few installed (most of them security related because I&#39;m paranoid) but it&#39;s probably an extension called HTTPS Everywhere which attempts to use HTTPS if it is available. To be on the safe side and avoid this problem, always specify the <code>https://</code> scheme.</p>
<h1 id="cdn-fallbacks">CDN Fallbacks</h1>
<p>So what happens when a CDN script is maliciously edited or (much more likely) you messed up and your local copy of the CDN script is different from the one in the CDN? Well, this is where CDN script fallbacks come in. There is already a tag helper provided by ASP.NET Core that does this:</p>
<pre><code class="language-html">&lt;script
  src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js&quot;
  asp-subresource-integrity-src=&quot;~/js/jquery.min.js&quot;
  asp-fallback-src=&quot;~/js/jquery.min.js&quot;
  asp-fallback-test=&quot;window.jQuery&quot;&gt;&lt;/script&gt;
</code></pre>
<p>I should also mention that although the fallback tag helper is cool and very simple to use, it adds inline script which is not compatible with the <a href="https://rehansaeed.com/content-security-policy-for-asp-net-mvc/">Content Security Policy (CSP)</a> HTTP header. If you care about security and you probably do if you are reading this, that means using the fallback tag helper is not possible. I myself prefer to move all my fallback checks to a separate JavaScript file.</p>
<h1 id="where-can-i-get-it">Where Can I Get It?</h1>
<p>This tag helper is available in a few ways:</p>
<ol>
<li>The <a href="https://www.nuget.org/packages/Boxed.AspNetCore.TagHelpers/">.NET Boxed Boxed.AspNetCore.TagHelpers</a> NuGet package.</li>
<li>Check out source code in the <a href="https://github.com/Dotnet-Boxed/Framework">.NET Boxed Framework</a> GitHub repository.</li>
</ol>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Subresource Integrity TagHelper Using ASP.NET Core - Part 1]]></title>
        <id>https://rehansaeed.com/subresource-integrity-taghelper-using-asp-net-core/</id>
        <link href="https://rehansaeed.com/subresource-integrity-taghelper-using-asp-net-core/"/>
        <updated>2016-03-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Use an ASP.NET Core TagHelper to implement Subresource Integrity (SRI) to ensure that external resources have not been tampered with.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/subresource-integrity-taghelper-using-asp-net-core/">Subresource Integrity TagHelper Using ASP.NET Core - Part 1</a></li>
<li><a href="https://rehansaeed.com/subresource-integrity-taghelper-using-asp-net-core-part-2/">Subresource Integrity TagHelper Using ASP.NET Core - Part 2</a></li>
</ol>
<h1 id="what-is-subresource-integrity-sri">What is Subresource Integrity (SRI)</h1>
<p>Can you trust your CDN provider? What if they get hacked and the copy of jQuery you are using hosted by them has some malicious script added to it? You would have no idea this was happening! This is where Subresource Integrity (SRI) comes in.</p>
<p>It works by taking a cryptographic hash of the file hosted on the CDN and adding that to your script or link tags. So in our case if we are using jQuery, we would add an integrity and <code>crossorigin</code> attribute to our script tag like so:</p>
<pre><code class="language-html">&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js&quot; 
        integrity=&quot;sha256-ivk71nXhz9nsyFDoYoGf2sbjrR9ddh+XDkCcfZxjvcM=&quot; 
        crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
</code></pre>
<p>The cryptographic hashing algorithm used can be SHA256, SHA384 or SHA512 at the time of writing. In fact, you can use more than one at a time and browsers will pick the most secure one to check the file against.</p>
<p>The current official standard <a href="http://www.w3.org/TR/SRI/">document</a> states that currently only script or link tags are supported for your JavaScript or CSS. However, it also states that this is likely to be expanded to pretty much any tag with a <code>src</code> or <code>href</code> attribute such as images, objects etc.</p>
<p>Scott Helme has a great <a href="https://scotthelme.co.uk/subresource-integrity/">post</a> on the subject which I highly recommend you read (It&#39;s where I learned about it).</p>
<h1 id="the-aspnet-core-tag-helper">The ASP.NET Core Tag Helper</h1>
<p>I implemented a tag helper for ASP.NET Core which is as simple to use as this:</p>
<pre><code class="language-html">&lt;script asp-subresource-integrity
        src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>Don&#39;t you love it when security is so easy! I&#39;m a big believer in making security as easy as having a big red button that says &#39;on&#39; and turning it on by default so people don&#39;t have to. It&#39;s the only way these things will get used! What is it doing behind the scenes?</p>
<ol>
<li>Downloads the file from the CDN.</li>
<li>Calculates a SHA512 hash for the file.</li>
<li>Adds the <code>integrity</code> and <code>crossorigin</code> attributes to the script tag.</li>
<li>Adds the SHA512 hash value to the distributed cache (IDistributedCache) built in to ASP.NET Core with no expiry date. If you are using a distributed cache like <a href="http://redis.io/">Redis</a> (Which you should for the pure speed of it) then the hash will be remembered.</li>
<li>The next time the page loads, the hash is retrieved from the cache, so there is very little performance impact of this tag helper.</li>
</ol>
<p>There are actually two tag helpers, one supports any tag with a <code>src</code> attribute and another supports any tag with a <code>href</code> element. This is in preparation for when subresource integrity is opened up to tags other than script and link.</p>
<h1 id="gotchas">Gotchas</h1>
<p>In the past, I have often omitted the scheme from the CDN URL like so:</p>
<pre><code class="language-html">&lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>However, I have noticed that Firefox, does not like it when you use SRI and omit the scheme. It stops the file from loading completely. When you think about it, this makes sense. We are trying to confirm that the resource has not been changed, one of the ways to do this is to use HTTPS. It does not make sense to use SRI over HTTP.</p>
<p>The other gotcha I found is that the resource must have the <code>Access-Control-Allow-Origin</code> HTTP header. It can be set to <code>*</code> or your individual domain name. Now, I have been using CDN resources provided by <a href="http://ajax.googleapis.com">Google</a> (for jQuery), <a href="http://www.asp.net/ajax/cdn">Microsoft</a> (for Bootstrap, jQuery Validation etc.) and <a href="https://www.maxcdn.com/">MaxCDN</a> (for Font Awesome) because they are free, most browsers have probably already got a copy of the files from there and because they have very fast global exit nodes.</p>
<p>However, I have discovered that all provide the <code>Access-Control-Allow-Origin</code> HTTP header except Microsoft on some of their resources. Strangely, they return the header for Bootstrap but not for the jQuery Validation scripts. I have reached out to them through my capacity as an MVP and hope to get the issue solved. In the mean time, if you are using Microsoft&#39;s CDN you can switch to another CDN or wait for them to fix the issue.</p>
<h1 id="where-can-i-get-it">Where Can I Get It?</h1>
<p>This tag helper is available in a few ways:</p>
<ol>
<li>The <a href="https://www.nuget.org/packages/Boxed.AspNetCore.TagHelpers/">.NET Boxed Boxed.AspNetCore.TagHelpers</a> NuGet package.</li>
<li>Check out source code in the <a href="https://github.com/Dotnet-Boxed/Framework">.NET Boxed Framework</a> GitHub repository.</li>
</ol>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Colorful.Console]]></title>
        <id>https://rehansaeed.com/colorful-console/</id>
        <link href="https://rehansaeed.com/colorful-console/"/>
        <updated>2016-02-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Colorful.Console is a C# library that wraps around the System.Console class, making your console apps more colourful. Write ASCII art using Figlet fonts.]]></summary>
        <content type="html"><![CDATA[<p>I needed to write a console application a while back and was investigating the best way to do this using the available NuGet packages. I&#39;d seen the DNVM command line tool that Microsoft built for ASP.NET Core and really liked it and wanted something similar.</p>
<p><img src="https://rehansaeed.com/colorful-console/images/DNVM.png" alt="DNVM"></p>
<p>I really like the old school ASCII art title and the use of colour. The .NET Framework does contain an enum called ConsoleColor which contains a very limited set of hard coded colours you can use but it has some major omissions like the colour orange for example.</p>
<p>In my hunt for a C# ASCII art generator, I discovered <a href="http://patorjk.com">patorjk.com</a> which is great for generating text using various <a href="http://www.figlet.org/">Figlet</a> fonts. Figlet fonts are basically .flf text files which contain instructions on how each letter in the ASCII character table can be printed out. It turns out these fonts are pretty ancient and there are libraries in every language writing out text using Figlet fonts.</p>
<h1 id="colorfulconsole">Colorful.Console</h1>
<p>I was just about to give up and write my own open source library when I discovered <a href="http://colorfulconsole.com/">Colorful.Console</a>, available on <a href="https://github.com/tomakita/Colorful.Console">GitHub</a>.  Using this library you can very easily write console apps which look like this:</p>
<p><img src="https://rehansaeed.com/colorful-console/images/Colorful.Console.Example-1.png" alt="Colorful.Console Example 1"></p>
<p>Or this:</p>
<p><img src="https://rehansaeed.com/colorful-console/images/Colorful.Console.Example-2.png" alt="Colorful.Console Example 2"></p>
<p>The only thing missing was a method to write ASCII text using Figlet fonts, so I contributed some code to the project to get this done. The output, combined with the fade that Colorful.Console is capable of created a pretty cool effect. Unbelievably this is a couple of lines of code to write!</p>
<p><img src="https://rehansaeed.com/colorful-console/images/Colorful.Console-Example-3.png" alt="Colorful.Console Example 3"></p>
<p>The title image of this post is also generated using Colorful.Console but was a bit more complicated as it transitions through several colours. By default Colorful.Console includes a single Figlet font but there are dozens of others available which you can download and use yourself.  They aren&#39;t all included by default because they would bloat the library quite a bit.</p>
<h1 id="command-line-parsers">Command Line Parsers</h1>
<p>Now the only thing missing in my quest was a command line parser which could let me easily create commands, switches and flags so users could use my command line tool. The best tool I found was <a href="https://github.com/gsscoder/commandline">Command Line Parser</a> available on GitHub. It&#39;s a pretty powerful and fully features library that makes writing a command line interface very easy. Unfortunately, its output is pretty ugly and it does not let you customize the &#39;look and feel&#39; of what is output to the console.</p>
<p>At some point, I&#39;d like to make another contribution to Colorful.Console, so that it offers command line parsing too but take inspiration from several command line parsing libraries to make something that&#39;s fully customizable and of course very colourful.</p>
<p>Command line tools have been around for decades, it&#39;s a wonder that a NuGet package that does all of these things does not exist yet.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Make Certificate]]></title>
        <id>https://rehansaeed.com/make-certificate/</id>
        <link href="https://rehansaeed.com/make-certificate/"/>
        <updated>2016-02-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Make certificate files by answering a few simple questions instead of using makecert.exe and pvk2pfx.exe, passing in some pretty cryptic arguments.]]></summary>
        <content type="html"><![CDATA[<p>Making your own certificate files is quite hard work. You have to use <code>makecert.exe</code> and <code>pvk2pfx.exe</code>, passing in some pretty cryptic arguments which you always have to go back and research.</p>
<p>Learning how to make a certificate and the different types of certificate is pretty important. I highly recommend reading <a href="http://www.jayway.com/2014/09/03/creating-self-signed-certificates-with-makecert-exe-for-development/">this</a> blog post from Jayway.com which has some very detailed instructions and is the basis of MakeCertificate.</p>
<p>To make things easier I made a PowerShell script called <code>MakeCertificate.ps1</code> which you can get on the <a href="https://github.com/RehanSaeed/MakeCertificate">MakeCertificate</a> GitHub page. It asks you to pick the type of certificate you want to create, there are a few different types of certificates that MakeCertificate helps to make: Certificate Authority (CA) Certificates, SSL/TLS Server Certificates and Client Certificates. You are then asked a series of questions which when answered outputs three files</p>
<ul>
<li>.cer - A public key file that can be shared.</li>
<li>.pvk - A private key file that should be kept secret.</li>
<li>.pfx - A combined public and private key file that should be kept secret.</li>
</ul>
<p>It also outputs the command you need to execute using <code>makecert.exe</code> and <code>pvk2pfx.exe</code> to recreate the certificate.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Logging with Serilog.Exceptions]]></title>
        <id>https://rehansaeed.com/logging-with-serilog-exceptions/</id>
        <link href="https://rehansaeed.com/logging-with-serilog-exceptions/"/>
        <updated>2016-01-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Log exception details and custom properties that are not output in Exception.ToString() using Serilog.Exceptions for .NET.]]></summary>
        <content type="html"><![CDATA[<p>Picking a logging framework for your new .NET project? I&#39;ve tried all the best known ones, including <a href="https://logging.apache.org/log4net/">log4net</a>, <a href="http://nlog-project.org/">NLog</a> and Microsoft&#39;s <a href="https://msdn.microsoft.com/en-us/library/ff647183.aspx">Logging Application Block</a>. All of these logging frameworks basically output plain text but recently I tried <a href="http://serilog.net/">Serilog</a> and was literally blown away by what you could do with it.</p>
<h1 id="logging-in-json-format">Logging in JSON Format</h1>
<p>Take a look at the code below which makes use of the Serilog logger to log a geo-coordinate and an integer:</p>
<pre><code class="language-cs">var position = new { Latitude = 25, Longitude = 134 };
var elapsedMs = 34;

log.Information(&quot;Processed {@Position} in {Elapsed:000} ms.&quot;, position, elapsedMs);
</code></pre>
<p>If you configure Serilog correctly, you can get it to output it&#39;s logs to JSON format, so the above line would log the following:</p>
<pre><code class="language-json">{
  &quot;Timestamp&quot;: &quot;2015-12-07T12:26:24.0557671+00:00&quot;,
  &quot;Level&quot;: &quot;Information&quot;,
  &quot;MessageTemplate&quot;: &quot;Processed {@Position} in {Elapsed:000} ms.&quot;,
  &quot;RenderedMessage&quot;: &quot;Processed { Latitude: 25, Longitude: 134 } in 034 ms.&quot;,
  &quot;Properties&quot;: {
    &quot;Position&quot;: 
    { 
        &quot;Latitude&quot;: 25,
        &quot;Longitude&quot;: 134
    }, 
    &quot;Elapsed&quot;: 34,
    &quot;ProcessId&quot;: 123,
    &quot;ThreadId&quot;: 123,
    &quot;User&quot;: &quot;Domain\\Username&quot;,
    &quot;Machine&quot;: &quot;Machine-Name&quot;,
    &quot;Source&quot;: &quot;My Application Name&quot;
  }
}
</code></pre>
<h1 id="why-json">Why JSON?</h1>
<p>What can you do with JSON formatted logs that you can&#39;t do with plain text? Well, if you store all your logs in something like <a href="https://www.elastic.co/webinars/get-started-with-elasticsearch?elektra=home&amp;storm=banner">Elastic Search</a>, you can query your logs and ask it questions. So if we take the above example further we could find all log messages from a particular machine or user with an elapsed time of more than 10 milliseconds and a distance of 10 Km away from the specific location.</p>
<p>Not only that but if you set up something like <a href="https://www.elastic.co/products/kibana">Kibana</a>, then you can create visualisations for your logs which could grow to be gigabytes in size over time. You can create dashboards with cool charts and maps that look something like this:</p>
<p><img src="https://rehansaeed.com/logging-with-serilog-exceptions/images/Kibana-Screenshot.png" alt="Kibana Dashboard Screenshot"></p>
<h1 id="logging-exceptions">Logging Exceptions</h1>
<p>One major problem with all exceptions is that they do not log all the properties of an exception and throw away vital information. Take the <code>DbEntityValidationException</code> from EntityFramework as an example. This exception contains vital information buried not in the message but in a custom property called <code>EntityValidationErrors</code>. The problem is that when you do an <code>exception.ToString()</code> call, this vital information is not included in the resulting string. Even worse, it&#39;s not included in the debugger either. This is a pretty major failing in the .NET framework but alas we have to work around it.</p>
<p>There are literally dozens of questions on <a href="https://stackoverflow.com/questions/15820505/dbentityvalidationexception-how-can-i-easily-tell-what-caused-the-error">Stack Overflow</a> asking how to deal with this problem and all the major logging frameworks fail in this regard. All of them call <code>exception.ToString()</code> and fail to log the <code>EntityValidationErrors</code> collection.</p>
<p><code>DbEntityValidationException</code> is not the only culprit, half the exceptions in the .NET framework contain custom properties that are not logged. The <code>Exception</code> base class itself has a <code>Data</code> dictionary collection which is never logged either.</p>
<h1 id="serilogexceptions">Serilog.Exceptions</h1>
<p>I wrote <a href="https://github.com/RehanSaeed/Serilog.Exceptions">Serilog.Exceptions</a> to solve this problem. So what happens when you log a <code>DbEntityValidationException</code> using this NuGet package added to Serilog itself? Well take a look yourself:</p>
<pre><code class="language-json">{
  &quot;Timestamp&quot;: &quot;2015-12-07T12:26:24.0557671+00:00&quot;,
  &quot;Level&quot;: &quot;Error&quot;,
  &quot;MessageTemplate&quot;: &quot;Hello World&quot;,
  &quot;RenderedMessage&quot;: &quot;Hello World&quot;,
  &quot;Exception&quot;: &quot;System.Data.Entity.Validation.DbEntityValidationException: Message&quot;,
  &quot;Properties&quot;: {
    &quot;ExceptionDetail&quot;: {
      &quot;EntityValidationErrors&quot;: [
        {
          &quot;Entry&quot;: null,
          &quot;ValidationErrors&quot;: [
            {
              &quot;PropertyName&quot;: &quot;PropertyName&quot;,
              &quot;ErrorMessage&quot;: &quot;PropertyName is Required.&quot;,
              &quot;Type&quot;: &quot;System.Data.Entity.Validation.DbValidationError&quot;
            }
          ],
          &quot;IsValid&quot;: false,
          &quot;Type&quot;: &quot;System.Data.Entity.Validation.DbEntityValidationResult&quot;
        }
      ],
      &quot;Message&quot;: &quot;Validation failed for one or more entities. See &#39;EntityValidationErrors&#39; property for more details.&quot;,
      &quot;Data&quot;: {},
      &quot;InnerException&quot;: null,
      &quot;TargetSite&quot;: null,
      &quot;StackTrace&quot;: null,
      &quot;HelpLink&quot;: null,
      &quot;Source&quot;: null,
      &quot;HResult&quot;: -2146232032,
      &quot;Type&quot;: &quot;System.Data.Entity.Validation.DbEntityValidationException&quot;
    },
    &quot;ProcessId&quot;: 123,
    &quot;ThreadId&quot;: 123,
    &quot;User&quot;: &quot;Domain\\Username&quot;,
    &quot;Machine&quot;: &quot;Machine-Name&quot;,
    &quot;Source&quot;: &quot;My Application Name&quot;
  }
}
</code></pre>
<p>It logs every single property of the exception and not only that but it drills down even further into the object hierarchy and logs that information too.</p>
<p>You&#39;re probably thinking it uses reflection right? Well...sometimes. This library has custom code to deal with extra properties on most common exception types and only falls back to using reflection to get the extra information if the exception is not supported by Serilog.Exceptions internally.</p>
<h1 id="getting-started-with-serilogexceptions">Getting Started with Serilog.Exceptions</h1>
<p>Add the Serilog.Exceptions NuGet package to your project using the NuGet Package Manager or run the following command in the Package Console Window:</p>
<pre><code class="language-powershell">Install-Package Serilog.Exceptions
</code></pre>
<p>When setting up your logger, add the <code>WithExceptionDetails</code> line like so:</p>
<pre><code class="language-cs">using Serilog;
using Serilog.Exceptions;

ILogger logger = new LoggerConfiguration()
    .Enrich.WithExceptionDetails()
    .WriteTo.Sink(new RollingFileSink(
        @&quot;C:\logs&quot;,
        new JsonFormatter(renderMessage: true))
    .CreateLogger();
</code></pre>
<p>That&#39;s it, it&#39;s one line of code!</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[.NET Big-O Algorithm Complexity Cheat Sheet]]></title>
        <id>https://rehansaeed.com/net-big-o-algorithm-complexity-cheat-sheet/</id>
        <link href="https://rehansaeed.com/net-big-o-algorithm-complexity-cheat-sheet/"/>
        <updated>2015-10-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Shows Big-O time and space complexities of common algorithms used in Computer Science and the.NET Framework to write the most efficient code.]]></summary>
        <content type="html"><![CDATA[<h1 id="credits">Credits</h1>
<p>All credit goes to the creator of the Big-O Algorithm Complexity Cheat Sheet <a href="https://twitter.com/ericdrowell">Eric Rowell</a> and the many contributors to it. You can find the original <a href="http://bigocheatsheet.com/">here</a>. I simply added .NET specific bits to it and posted it on GitHub <a href="https://github.com/RehanSaeed/.NET-Big-O-Algorithm-Complexity-Cheat-Sheet">here</a>.</p>
<h1 id="what-is-it">What is it?</h1>
<p>It covers the space and time <a href="https://en.wikipedia.org/wiki/Big_O_notation">Big-O</a> notation complexities of common algorithms used in Computer Science and specifically the .NET framework.</p>
<h1 id="why-is-it-useful">Why is it useful?</h1>
<p>You can see which collection type or sorting algorithm to use at a glance to write the most efficient code.</p>
<p>This is also useful for those studying Computer Science in University or for technical interview tests where Big-O notation questions can be fairly common depending on the type of company you are apply to.</p>
<h1 id="let-me-have-it">Let me have it!</h1>
<p>You can download the cheat sheet in three different formats:</p>
<ul>
<li><a href="https://rawgit.com/RehanSaeed/.NET-Big-O-Algorithm-Complexity-Cheat-Sheet/main/Cheat%20Sheet.html">HTML</a></li>
<li><a href="https://github.com/RehanSaeed/.NET-Big-O-Algorithm-Complexity-Cheat-Sheet/blob/main/Cheat%20Sheet.pdf">PDF</a></li>
<li><a href="https://github.com/RehanSaeed/.NET-Big-O-Algorithm-Complexity-Cheat-Sheet/blob/main/Cheat%20Sheet.png">PNG</a></li>
</ul>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[So I've Been Awarded Microsoft MVP Status!]]></title>
        <id>https://rehansaeed.com/so-ive-been-awarded-microsoft-mvp-status/</id>
        <link href="https://rehansaeed.com/so-ive-been-awarded-microsoft-mvp-status/"/>
        <updated>2015-10-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Muhammad Rehan Saeed has been awarded Microsoft MVP (Most Valuable Professional) status.]]></summary>
        <content type="html"><![CDATA[<p><a href="http://blogs.msdn.com/b/lucian/">Lucian Wischik</a> contacted me out of the blue one day to update and test one of my NuGet packages using NuGet 3.0. We had a pleasant email exchange and he suggested I nominate myself for becoming a Microsoft MVP...so I did.</p>
<p>It actually takes a fair amount of time to apply, you have to give details of all your online accounts and open source projects. Not only that but for each one you have to specify how many downloads or page views you have got. Only after doing this, did I realize how much of an online presence I really have.</p>
<p>A few months later and lo and behold I get another email out of the blue telling me I&#39;m one of 4000 people being awarded Microsoft MVP status. So what does this mean, I thought to myself? Well it turns out you get a few freebies:</p>
<ol>
<li>Free Software - I already had an MSDN license from work but it&#39;s nice to get a free MSDN license of my own. You can pretty much download whatever Microsoft software you want.</li>
<li>Free Azure - As part of the MSDN license you get £100 of  Azure credits per month. Last I checked, I only use about £30 to £40 a month to run this blog and a few other sites and services.</li>
<li>The Gift Pack - This is a nice trophy and certificate to hang on your wall, as well as a badge, just to make it official.</li>
<li>MVP Insider Mailing List Access - Getting added to this email distribution list is pretty cool. You can ask questions and find out about bugs and new releases before everyone else.</li>
<li>Access to Pre-Release Software - You get access to Beta or RTM builds before they are publicly released. Microsoft uses this as a way to make sure there are no last minute bugs.</li>
</ol>
<p>I hadn&#39;t realized but you have to reapply to become an MVP every year. I&#39;m not sure how that works but I guess I&#39;ll find out a year later.</p>
<p>Thanks to Lucian for suggesting I apply, my wife who has had to put up with me messing around with code all the time and all the people who downloaded some of my code and found it useful. I get a warm fuzzy feeling every time I see a new website pop-up using my project template or the download numbers for my various projects grow.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dynamically Generating Sitemap.xml for ASP.NET MVC]]></title>
        <id>https://rehansaeed.com/dynamically-generating-sitemap-xml-for-asp-net-mvc/</id>
        <link href="https://rehansaeed.com/dynamically-generating-sitemap-xml-for-asp-net-mvc/"/>
        <updated>2015-09-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to dynamically generate a sitemap.xml file using ASP.NET MVC to improve the Search Engine Optimization (SEO) of your site and get better search rankings.]]></summary>
        <content type="html"><![CDATA[<h1 id="what-is-a-sitemapxml-file">What is a sitemap.xml File</h1>
<p>What is a <code>sitemap.xml</code> file used for? The official <a href="http://www.sitemaps.org/">sitemaps.org</a> site really does says it best:</p>
<blockquote>
<p>Sitemaps are an easy way for webmasters to inform search engines about pages on their sites that are available for crawling. In its simplest form, a Sitemap is an XML file that lists URL&#39;s for a site along with additional metadata about each URL (when it was last updated, how often it usually changes, and how important it is, relative to other URL&#39;s in the site) so that search engines can more intelligently crawl the site.</p>
<p>Web crawlers usually discover pages from links within the site and from other sites. Sitemaps supplement this data to allow crawlers that support Sitemaps to pick up all URL&#39;s in the Sitemap and learn about those URL&#39;s using the associated metadata. Using the Sitemap protocol does not guarantee that web pages are included in search engines, but provides hints for web crawlers to do a better job of crawling your site.</p>
</blockquote>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;urlset xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt;
   &lt;url&gt;
      &lt;loc&gt;http://www.example.com/&lt;/loc&gt;
      &lt;lastmod&gt;2005-01-01&lt;/lastmod&gt;
      &lt;changefreq&gt;monthly&lt;/changefreq&gt;
      &lt;priority&gt;0.8&lt;/priority&gt;
   &lt;/url&gt;
   &lt;!-- ... --&gt;
&lt;/urlset&gt;
</code></pre>
<p>As you can see each URL in a sitemap contains four pieces of metadata:</p>
<ul>
<li><code>url</code> - The URL itself.</li>
<li><code>lastmod</code> (Optional) - A last modified timestamp. This tells search engines whether or not they should re-index the page to reflect any changes that have been made.</li>
<li><code>changefreq</code> (Optional) - A change frequency indicator (This can take the values: always, hourly, daily, weekly, monthly, yearly, never). This gives search engines an indication of how often they should come back and re-index the page.</li>
<li><code>priority</code> (Optional) - A number from zero to one indicating the importance of the page compared to other pages on the site.</li>
</ul>
<p>The latter three values only give search engines an indication of when they can or should index or even re-index a page. It is not a guarantee that it will happen, although it makes it more likely.</p>
<h1 id="is-it-worth-the-effort">Is it Worth the Effort?</h1>
<p>Search engines are black boxes. We only know what goes into them (Our sitemap) and what comes out the other end (The search results). I can make no promises that adding a sitemap will increase your sites search rankings but <strong>Google</strong> says:</p>
<blockquote>
<p>Using a sitemap doesn&#39;t guarantee that all the items in your sitemap will be crawled and indexed, as Google processes rely on complex algorithms to schedule crawling. However, <strong>in most cases, your site will benefit from having a sitemap</strong>, and you&#39;ll never be penalized for having one.</p>
<footer><cite>[Google](https://support.google.com/webmasters/answer/156184?hl=en)</cite></footer>
</blockquote>
<h1 id="generating-a-static-sitemapxml-file">Generating a Static sitemap.xml File</h1>
<p>There are tools online you can use to generate a static <code>sitemap.xml</code> file, which you can dump at the root of your site but you have to manually update these every time your site changes. This may be fine if your site does not change much but adding a dynamically generated <code>sitemap.xml</code> file is fairly simple process and worth the effort.</p>
<h1 id="dynamically-generating-sitemapxml-for-aspnet-mvc">Dynamically Generating Sitemap.xml for ASP.NET MVC</h1>
<p>Dynamically generating a simple <code>sitemap.xml</code> file for ASP.NET MVC is really simple but adding all the bells and whistles requires a bit more work. We start with a SitemapNode and frequency enumeration which represents a single URL in our sitemap:</p>
<pre><code class="language-cs">public class SitemapNode
{
    public SitemapFrequency? Frequency { get; set; }
    public DateTime? LastModified { get; set; }
    public double? Priority { get; set; }
    public string Url { get; set; }
}

public enum SitemapFrequency
{
    Never,
    Yearly,
    Monthly,
    Weekly,
    Daily,
    Hourly,
    Always
}
</code></pre>
<p>Now we need to create a collection of <code>SitemapNode</code>&#39;s. In my example below, I add the three main pages of my site, Home, About and Contact. I then go on to add a collection of product pages. I am getting every product ID from my database and using that to generate a product URL. Note that I&#39;m not using every property on the <code>SitemapNode</code> class since in my case I don&#39;t have an easy way to figure out a last changed date but I do specify a priority and frequency for my products.</p>
<p>Please note that the URL&#39;s must be absolute and I am using an extension method I wrote called <code>AbsoluteRouteUrl</code> to generate absolute URL&#39;s instead of relative ones. I have included that below too.</p>
<pre><code class="language-cs">public IReadOnlyCollection&lt;SitemapNode&gt; GetSitemapNodes(UrlHelper urlHelper)
{
    List&lt;SitemapNode&gt; nodes = new List&lt;SitemapNode&gt;();

    nodes.Add(
        new SitemapNode()
        {
            Url = urlHelper.AbsoluteRouteUrl(&quot;HomeGetIndex&quot;),
            Priority = 1
        });
    nodes.Add(
       new SitemapNode()
       {
           Url = urlHelper.AbsoluteRouteUrl(&quot;HomeGetAbout&quot;),
           Priority = 0.9
       });
    nodes.Add(
       new SitemapNode()
       {
           Url = urlHelper.AbsoluteRouteUrl(&quot;HomeGetContact&quot;),
           Priority = 0.9
       });

    foreach (int productId in productRepository.GetProductIds())
    {
        nodes.Add(
           new SitemapNode()
           {
               Url = urlHelper.AbsoluteRouteUrl(&quot;ProductGetProduct&quot;, new { id = productId }),
               Frequency = SitemapFrequency.Weekly,
               Priority = 0.8
           });
    }

    return nodes;
}

public class UrlHelperExtensions
{
    public static string AbsoluteRouteUrl(
        this UrlHelper urlHelper,
        string routeName,
        object routeValues = null)
    {
        string scheme = urlHelper.RequestContext.HttpContext.Request.Url.Scheme;
        return urlHelper.RouteUrl(routeName, routeValues, scheme);
    }
}
</code></pre>
<p>Now all we have to do is turn our collection of <code>SitemapNode</code>&#39;s into XML:</p>
<pre><code class="language-cs">public string GetSitemapDocument(IEnumerable&lt;SitemapNode&gt; sitemapNodes)
{
    XNamespace xmlns = &quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;;
    XElement root = new XElement(xmlns + &quot;urlset&quot;);

    foreach (SitemapNode sitemapNode in sitemapNodes)
    {
        XElement urlElement = new XElement(
            xmlns + &quot;url&quot;,
            new XElement(xmlns + &quot;loc&quot;, Uri.EscapeUriString(sitemapNode.Url)),
            sitemapNode.LastModified == null ? null : new XElement(
                xmlns + &quot;lastmod&quot;, 
                sitemapNode.LastModified.Value.ToLocalTime().ToString(&quot;yyyy-MM-ddTHH:mm:sszzz&quot;)),
            sitemapNode.Frequency == null ? null : new XElement(
                xmlns + &quot;changefreq&quot;, 
                sitemapNode.Frequency.Value.ToString().ToLowerInvariant()),
            sitemapNode.Priority == null ? null : new XElement(
                xmlns + &quot;priority&quot;, 
                sitemapNode.Priority.Value.ToString(&quot;F1&quot;, CultureInfo.InvariantCulture)));
        root.Add(urlElement);
    }

    XDocument document = new XDocument(root);
    return document.ToString();
}
</code></pre>
<p>Now we add an action method to our <code>HomeController</code> to get to our sitemap. Note the route to get to the sitemap. It is <a href="http://www.sitemaps.org/faq.html">recommended</a> to place your sitemap at the root of your site at <code>sitemap.xml</code>. Also note that creating a route with a file extension at the end (<code>.xml</code>) is not allowed in MVC 5 and below (ASP.NET Core is fine), so you need to add the line below in your <code>Web.config</code> file.</p>
<pre><code class="language-cs">[RoutePrefix(&quot;&quot;)]
public class HomeController : Controller
{
    [Route(&quot;sitemap.xml&quot;)]
    public ActionResult SitemapXml()
    {
        var sitemapNodes = GetSitemapNodes(this.Url);
        string xml = GetSitemapDocument(sitemapNodes);
        return this.Content(xml, ContentType.Xml, Encoding.UTF8);
    }
}
</code></pre>
<pre><code class="language-xml">&lt;configuration&gt;
  &lt;system.webServer&gt;
    &lt;handlers&gt;
      &lt;add name=&quot;SitemapXml&quot; path=&quot;sitemap.xml&quot; verb=&quot;GET&quot; type=&quot;System.Web.Handlers.TransferRequestHandler&quot; preCondition=&quot;integratedMode,runtimeVersionv4.0&quot; /&gt;
    &lt;/handlers&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;
</code></pre>
<h1 id="sitemap-index-files">Sitemap Index Files</h1>
<p>For most people the above code will be enough. You can only have a maximum of 50,000 URL&#39;s in your sitemap and it must not exceed 10MB in size. I did some testing and if your URL&#39;s are fairly long and you supply all of the metadata for each URL, you can easily hit the 10MB mark with 25,000 URL&#39;s.</p>
<p>It&#39;s not clear what happens if search engines come across a file that breaches these limits. I would have thought that the likes of Google or Bing would have a margin of error but it&#39;s better to be well under the limits than over. Not many sites have that many pages but you&#39;d be surprised at how easy it is to hit these limits.</p>
<p>This is where sitemap index files come in. The idea is that you break up your sitemap into pages and list all of these in an index file. When a search engine visits your <code>sitemap.xml</code> file, they retrieve the index file and visit each page in turn. Here is an example of an index file:</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;sitemapindex xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt;
   &lt;sitemap&gt;
      &lt;loc&gt;http://www.example.com/sitemap1.xml&lt;/loc&gt;
      &lt;lastmod&gt;2004-10-01T18:23:17+00:00&lt;/lastmod&gt;
   &lt;/sitemap&gt;
   &lt;sitemap&gt;
      &lt;loc&gt;http://www.example.com/sitemap2.xml.gz&lt;/loc&gt;
      &lt;lastmod&gt;2005-01-01&lt;/lastmod&gt;
   &lt;/sitemap&gt;
&lt;/sitemapindex&gt;
</code></pre>
<p>As you can see you can optionally add a last modified date to each sitemap URL to tell search engines when a sitemap file has changed. This last modified date can be calculated from it&#39;s contents, you just need to take the latest last modified date from that particular page.</p>
<p>This blog post has started to get a little long and I haven&#39;t even covered sitemap pinging yet, so I will not go into too much detail but I will refer you to where you can get at the full source code and worked example. Luckily, all of the code above and the code to generate a sitemap index file is available here:</p>
<ul>
<li>ASP.NET Core Boilerplate Framework NuGet packages for <a href="https://www.nuget.org/packages/Boilerplate.Web.Mvc5/">MVC 5</a> and <a href="https://www.nuget.org/packages/Boilerplate.Web.Mvc6/">ASP.NET Core</a>.</li>
<li>You can also generate a project using the <a href="https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d">ASP.NET Core Boilerplate</a> project template to see the full code in action.</li>
</ul>
<h1 id="conclusions">Conclusions</h1>
<p>Adding a sitemap is a great Search Engine Optimization (SEO) technique to improve your sites search rankings. With my NuGet package, it makes it a really simple feature to add to your site. In my next blog post, I&#39;ll talk about sitemap pinging which can be used to pro-actively notify search engines of a change in your sitemap.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Whats New in ASP.NET Core Boilerplate]]></title>
        <id>https://rehansaeed.com/whats-new-in-asp-net-5-mvc-6-boilerplate/</id>
        <link href="https://rehansaeed.com/whats-new-in-asp-net-5-mvc-6-boilerplate/"/>
        <updated>2015-08-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[With the release of ASP.NET Core Boilerplate, this post discusses what's new and what is currently missing due to ASP.NET Core still being in beta.]]></summary>
        <content type="html"><![CDATA[<p>I have just updated the <a href="https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d">ASP.NET Core Boilerplate</a> Visual Studio extension with a new project template targeting ASP.NET Core. This post is just a quick one to talk about what&#39;s new and different about this version of the template compared to the ASP.NET 4.6 MVC 5 version.</p>
<h1 id="whats-new">What&#39;s New</h1>
<p>Well, the obvious thing is that this template targets ASP.NET Core which is currently still in beta. In particular I am targeting Beta 6 which is the current stable version. I will be regularly updating the template with each new beta until ASP.NET Core is released sometime in November according to Microsoft.</p>
<p>There are not too many new improved features over the ASP.NET 4.6 MVC 5 version but here is a quick description:</p>
<ol>
<li>Performance improvements derived from using ASP.NET Core. ASP.NET Core is much improved and no longer uses <code>System.Web</code>, so it uses a lot less memory.</li>
<li>Using <a href="https://www.npmjs.com/">NPM</a> and <a href="http://bower.io/">Bower</a> to get CSS and JavaScript scripts rather than NuGet. This means you have a lot more choice and get the latest versions straight from the source.</li>
<li>Switched from <a href="http://lesscss.org/">LESS</a> to <a href="http://sass-lang.com/">SASS</a> for CSS. This decision was made because SASS seems to be more popular and the upcoming Bootstrap 4 has also made the same decision.</li>
<li><a href="http://gulpjs.com/">Gulp</a> is used instead of the standard ASP.NET 4.6 bundling and minification feature. Not only that but Gulp is also configured to optimize images, rebuild CSS and JavaScript on file change, lint the CSS and JavaScript for common errors and warnings and measure the speed of your site using Google Page Speed.</li>
<li>The default ASP.NET Core project template uses <a href="https://github.com/ixisio/bootstrap-touch-carousel">Bootstrap-Touch-Carousel</a> and <a href="https://hammerjs.github.io/">Hammer.js</a> for a nice touch friendly carousel control on the home screen.</li>
<li>There is now a single controller action responsible for displaying errors. This is a lot simpler and a great improvement over MVC 5.</li>
<li>The logging and caching services are now built into ASP.NET Core, so we use them instead.</li>
</ol>
<h1 id="whats-missing">What&#39;s Missing</h1>
<p>ASP.NET Core is still in beta and there are a lot of third party libraries that don&#39;t yet support it. Support will be added as soon as it becomes available. I have contacted all three project owners and can confirm that support will be added soon.</p>
<ul>
<li><a href="https://github.com/NWebsec/NWebsec">NWebSec</a></li>
<li><a href="https://code.google.com/p/elmah/">Elmah</a></li>
<li><a href="http://getglimpse.com/">Glimpse</a></li>
</ul>
<p>The new .NET Core runtime does not currently support the <code>System.ServiceModel.Syndication</code> namespace which is used to build an Atom feed. The .NET Core runtime is still being targeted but the Atom feed will not work and is excluded using <code>#if</code> pre-processor directives. I have raised this issue on the .NET teams GitHub page <a href="https://github.com/dotnet/wcf/issues/76#issuecomment-133461504">here</a>. Please do go ahead and show your support for the feature.</p>
<p>There are other issues around ASP.NET Core missing features from MVC 5 including no support for <code>HttpException</code> which I will be looking into adding soon. I am also looking into submitting any improvements I make to the ASP.NET Core GitHub project, so far, I&#39;ve had one pull request accepted and a few suggestions acted on.</p>
<h1 id="conclusions">Conclusions</h1>
<p>ASP.NET Core is still in beta but hopefully this project will give an understanding of what can be done with it. There are still missing features but it&#39;s surprisingly usable at the moment.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Minifying HTML for ASP.NET MVC]]></title>
        <id>https://rehansaeed.com/minifying-html-for-asp-net-mvc/</id>
        <link href="https://rehansaeed.com/minifying-html-for-asp-net-mvc/"/>
        <updated>2015-08-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How much bandwidth does minifying HTML save. Minifying HTML in ASP.NET MVC 5 is hard work. Minifying HTML should be a built in feature of ASP.NET Core.]]></summary>
        <content type="html"><![CDATA[<p>Using Razor comments or blocks of code can cause extra carriage returns to appear in the generated HTML. This has been a problem in all versions if ASP.NET MVC for a while now.</p>
<pre><code class="language-html">&lt;p&gt;Paragraph 1&lt;/p&gt;
@* Razor Comment *@
&lt;p&gt;Paragraph 2&lt;/p&gt;
</code></pre>
<p>The above code generates the following HTML. You can imagine that with a lot of comments or code blocks you get a lot of ugly blank lines appearing in your mark-up.</p>
<pre><code class="language-html">&lt;p&gt;Paragraph 1&lt;/p&gt;

&lt;p&gt;Paragraph 2&lt;/p&gt;
</code></pre>
<p>Ideally it should generate the HTML below without any blank lines. If you really wanted a blank line to appear, you could add one yourself before the comment.</p>
<pre><code class="language-html">&lt;p&gt;Paragraph 1&lt;/p&gt;
&lt;p&gt;Paragraph 2&lt;/p&gt;
</code></pre>
<p>The main problem with the above is that it makes your HTML look ugly and hard to follow. You often end up with several blank lines, which breaks up the flow of the mark-up.</p>
<p>Also, given that every ASP.NET MVC site on the internet has this problem and probably contains at least two Razor comments and maybe a for-loop in the code somewhere, that is a lot of wasted extra bandwidth.</p>
<p>So I made <a href="https://github.com/aspnet/Razor/issues/428">this</a> suggestion for the next version of ASP.NET Core, to change the behaviour to the expected one above and it got accepted!</p>
<h1 id="how-much-bandwidth-was-saved">How Much Bandwidth Was Saved</h1>
<p>So how much bandwidth has this single change saved the internet? That&#39;s the question I asked myself. According to the <a href="http://httparchive.org/trends.php">httparchive.org</a>, the average request is made up of around 57KB of HTML. If we assume that each page contains two comments and maybe a for-loop, that&#39;s six carriage returns (Two sets of), twelve characters or twelve bytes of wasted bandwidth. If we assume that all sites are using GZip compression, then we can make a conservative estimate of around six bytes of wasted bandwidth per request.</p>
<p><img src="https://rehansaeed.com/minifying-html-for-asp-net-mvc/images/Average-HTML-Transfer-Size-Over-a-Request-Chart.png" alt="Average HTML Transfer Size Over a Request Chart"></p>
<p><a href="http://www.cisco.com/c/en/us/solutions/collateral/service-provider/visual-networking-index-vni/VNI_Hyperconnectivity_WP.html">Cisco</a> forecasts that global IP traffic will pass the Zettabyte (1000 Exabytes) threshold by the end of 2016. If the the average transfer size per request is <a href="http://httparchive.org/trends.php#numurls">2162 KB</a>; and only 57 KB is HTML, we can work out that 257465 Terabytes of of the worlds internet traffic per year is HTML.</p>
<p><img src="https://rehansaeed.com/minifying-html-for-asp-net-mvc/images/Average-Total-Transfer-Size-Over-a-Request-Chart.png" alt="Average Total Transfer Size Over a Request Chart"></p>
<p>According to <a href="http://w3techs.com/technologies/history_overview/programming_language">w3techs.com</a>, 16.7% of all sites on the internet use ASP.NET as of 1st August 2015, lets assume half of those (8.35%) will use ASP.NET Core in a few years time. So, we can say that very roughly 21498 Terabytes of the worlds bandwidth is consumed on ASP.NET HTML requests per year.</p>
<p>If the average wasted bandwidth is six bytes out of a total of 57 KB per HTML request, then we come to a grand total of around 2.3 Terabytes of bandwidth saved per year. I must admit, that&#39;s a lot of bandwidth but I still thought it would be a lot more than that.</p>
<h1 id="html-minification">HTML Minification</h1>
<p>An even better solution would be to minify the HTML. There are solutions like <a href="http://webmarkupmin.codeplex.com/">Web Markup Min</a> for ASP.NET Core but it works at runtime and is a little involved to set up, so all but the most determined developers use this feature.</p>
<p>Then there is <a href="http://www.deanhume.com/Home/BlogPost/a-simple-html-minifier-for-asp-net/2097">Dean Hume&#39;s</a> compile time minifier which sounded perfect. In Dean&#39;s post he gets savings of around 20-30% by minifying his HTML. If we applied a conservative 20% saving to all ASP.NET Core HTML requests, that would work out to be a 4300 Terabyte saving in global bandwidth per year!</p>
<p>So far, I&#39;ve only mentioned the bandwidth saving but downloading smaller HTML files will also mean quicker page load times. HTML is the first thing a browser downloads before it can go off and download all the other CSS, JavaScript, fonts and images a site needs to display a page. Making this download smaller, is a small but effective way to get pages up quicker.</p>
<p>These days, MVC has things like CSS and JavaScript minification built in as standard. To squeeze out even more performance, HTML minification is the next logical step.</p>
<p>So I made <a href="https://github.com/aspnet/Razor/issues/423">this</a> suggestion for ASP.NET Core to implement Dean&#39;s compile time minification of Razor views by default. So far, it&#39;s not been taken up but I live in hope and write this blog post to show how cool a feature it is.</p>
<p>Please do go and post your support for this feature. We don&#39;t necessarily need to use Dean&#39;s technique, minifying HTML could just as easily be a Grunt or Gulp task.</p>
<h1 id="conclusions">Conclusions</h1>
<p>This post contains huge leaps of guess work and estimation. I hope my maths is up to scratch but I would not be surprised if I was off by a decimal point or two. Still, we are talking huge numbers here and I hope I&#39;ve convinced you that minifying HTML is worth the effort.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dynamically Generating Robots.txt Using ASP.NET MVC]]></title>
        <id>https://rehansaeed.com/dynamically-generating-robots-txt-using-asp-net-mvc/</id>
        <link href="https://rehansaeed.com/dynamically-generating-robots-txt-using-asp-net-mvc/"/>
        <updated>2015-07-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to dynamically generate a robots.txt file using a simple ASP.NET MVC action method and only a few lines of code.]]></summary>
        <content type="html"><![CDATA[<ul>
<li><a href="https://rehansaeed.com/asp-net-mvc-boilerplate/">ASP.NET Core Boilerplate</a></li>
<li>Security<ul>
<li><a href="https://rehansaeed.com/securing-the-aspnet-mvc-web-config/">Securing the ASP.NET MVC Web.config (Updated)</a></li>
<li><a href="https://rehansaeed.com/nwebsec-asp-net-mvc-security-through-http-headers/">NWebSec ASP.NET MVC Security Through HTTP Headers</a></li>
<li><a href="https://rehansaeed.com/content-security-policy-for-asp-net-mvc/">Content Security Policy (CSP) for ASP.NET MVC</a></li>
</ul>
</li>
<li>Search Engine Optimization (SEO)<ul>
<li><a href="https://rehansaeed.com/canonical-urls-for-asp-net-mvc/">Canonical URL&#39;s for ASP.NET MVC</a></li>
<li><a href="https://rehansaeed.com/dynamically-generating-robots-txt-using-asp-net-mvc">Dynamically Generating Robots.txt Using ASP.NET MVC</a></li>
</ul>
</li>
<li><a href="https://rehansaeed.com/internet-favicon-madness/">Internet Favicon Madness (Updated)</a></li>
<li><a href="https://rehansaeed.com/building-rssatom-feeds-for-asp-net-mvc/">Building RSS/Atom Feeds for ASP.NET MVC</a></li>
</ul>
<p>A <code>robots.txt</code> file is a simple text file you can place at the root of your site at <code>http://example.com/robots.txt</code> to tell search engine robots (also known as web crawlers) how to index your site. The robots know to look for this file at the root of every site before they start indexing the site. If you do not have this file in your site, you will be getting a lot of 404 Not Found errors in your logs.</p>
<p>The <code>robots.txt</code> uses the <a href="http://en.wikipedia.org/wiki/Robots_exclusion_standard">Robots Exclusion Standard</a> which is a very simple format that can give robots instructions on what to index and what to skip. A very basic <code>robots.txt</code> file looks like this:</p>
<pre><code># Allow all robots to index this site.
user-agent: *

# Tell all robots not to index any of the pages under the /error path.
disallow: /error/

# Tell all robots to index the under the error/foo path.
allow: /error/foo/

# Add a link to the site-map. Unfortunately this must be an absolute URL.
sitemap: http://example.com/sitemap.xml
</code></pre>
<p>In the above code, all comments start with the hash character. It tells all robots that they can index everything on the site except pages under the <code>/error</code> path because we don&#39;t want our error pages showing up in peoples search results. The only exception to that rule is to allow the resources under the <code>/error/foo</code> path to be indexed.</p>
<p>The last line is interesting and tells robots where to find an XML file called a site-map. A site-map contains a list of URL&#39;s to all the pages in the site and is used to give search engines a list of URL&#39;s they can go through to index the entire site. It&#39;s a great SEO (Search Engine Optimization) technique to give your site a boost in it&#39;s search rankings.</p>
<p>I will discuss creating a dynamic <code>sitemap.xml</code> file for ASP.NET Core in a future post. For now, all you need to know is that the site-map URL has to be an absolute URL according to the specification. This is a pretty terrible decision by whoever created the robots exclusion standard. It&#39;s really annoying that when you&#39;re creating a site, you have to remember to manually update this URL. If the URL was relative we would not have this problem.</p>
<h1 id="dynamically-generating-a-robotstxt-file">Dynamically Generating a robots.txt File</h1>
<p>Fortunately, it&#39;s really easy to dynamically create a <code>robots.txt</code> file, which auto-generates the site-map URL using the MVC <code>UrlHelper</code>. Take a look at the code below:</p>
<pre><code class="language-cs">public class HomeController : Controller
{
    [Route(&quot;robots.txt&quot;, Name = &quot;GetRobotsText&quot;), OutputCache(Duration = 86400)]
    public ContentResult RobotsText()
    {
        StringBuilder stringBuilder = new StringBuilder();
        
        stringBuilder.AppendLine(&quot;user-agent: *&quot;);
        stringBuilder.AppendLine(&quot;disallow: /error/&quot;);
        stringBuilder.AppendLine(&quot;allow: /error/foo&quot;);
        stringBuilder.Append(&quot;sitemap: &quot;);
        stringBuilder.AppendLine(this.Url.RouteUrl(&quot;GetSitemapXml&quot;, null, this.Request.Url.Scheme).TrimEnd(&#39;/&#39;));
        
        return this.Content(stringBuilder.ToString(), &quot;text/plain&quot;, Encoding.UTF8);
    }
    
    [Route(&quot;sitemap.xml&quot;, Name = &quot;GetSitemapXml&quot;), OutputCache(Duration = 86400)]
    public ContentResult SitemapXml()
    {
        // I&#39;ll talk about this in a later blog post.
    }
}
</code></pre>
<p>I set up a route to the <code>robots.txt</code> path at the root of the site in my main <code>HomeController</code> and cached the response for a day for better performance (You can and should probably specify a much longer period of time if you know yours won&#39;t change).</p>
<p>I then go on to append my commands to the StringBuilder. The great thing is that I can easily use the <code>UrlHelper</code> to generate a complete absolute URL to the <code>sitemap.xml</code> path which is also dynamically generated in much the same way. Finally, I just return the string as plain text using the UTF-8 encoding.</p>
<p>Creating a route ending with a file extension is not allowed by default in ASP.NET Core. To get around this security restriction, you need to add the following to the <code>Web.config</code> file:</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;configuration&gt;
  &lt;!-- ...Omitted --&gt;
  &lt;system.webServer&gt;
    &lt;!-- ...Omitted --&gt;
    &lt;handlers&gt;
      &lt;!-- ...Omitted --&gt;
      &lt;add name=&quot;RobotsText&quot; 
           path=&quot;robots.txt&quot; 
           verb=&quot;GET&quot; 
           type=&quot;System.Web.Handlers.TransferRequestHandler&quot; 
           preCondition=&quot;integratedMode,runtimeVersionv4.0&quot; /&gt;
    &lt;/handlers&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;
</code></pre>
<h1 id="conclusion">Conclusion</h1>
<p>Dynamically generating your <code>robots.txt</code> file is pretty easy and only takes as many lines of code as you need to write your <code>robots.txt</code> file anyway. It also means that you don&#39;t need to pollute your project structure with yet another file at the root of it (This problem is fixed in MVC Core, where all static files must be added to the wwwroot folder). You can also dynamically generate your site-map URL so you don&#39;t need to remember to update it every time you change the domain.</p>
<p>You could argue that performance is an issue when compared to a static <code>robots.txt</code> text file but its a matter of a few bytes and if you cache the response with a sufficient time limit then I think that even that problem goes away.</p>
<p>Once again, you can find a working example of this and much more using the <a href="https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d">ASP.NET Core Boilerplate</a> project template.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Canonical URL's for ASP.NET MVC]]></title>
        <id>https://rehansaeed.com/canonical-urls-for-asp-net-mvc/</id>
        <link href="https://rehansaeed.com/canonical-urls-for-asp-net-mvc/"/>
        <updated>2015-07-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Use canonical URL's in ASP.NET MVC for better Search Engine Optimization (SEO) using ASP.NET Core Boilerplate and the RedirectToCanonicalUrlAttribute.]]></summary>
        <content type="html"><![CDATA[<ul>
<li><a href="https://rehansaeed.com/asp-net-mvc-boilerplate/">ASP.NET Core Boilerplate</a></li>
<li>Security<ul>
<li><a href="https://rehansaeed.com/securing-the-aspnet-mvc-web-config/">Securing the ASP.NET MVC Web.config (Updated)</a></li>
<li><a href="https://rehansaeed.com/nwebsec-asp-net-mvc-security-through-http-headers/">NWebSec ASP.NET MVC Security Through HTTP Headers</a></li>
<li><a href="https://rehansaeed.com/content-security-policy-for-asp-net-mvc/">Content Security Policy (CSP) for ASP.NET MVC</a></li>
</ul>
</li>
<li>Search Engine Optimization (SEO)<ul>
<li><a href="https://rehansaeed.com/canonical-urls-for-asp-net-mvc/">Canonical URL&#39;s for ASP.NET MVC</a></li>
<li><a href="https://rehansaeed.com/dynamically-generating-robots-txt-using-asp-net-mvc">Dynamically Generating Robots.txt Using ASP.NET MVC</a></li>
</ul>
</li>
<li><a href="https://rehansaeed.com/internet-favicon-madness/">Internet Favicon Madness (Updated)</a></li>
<li><a href="https://rehansaeed.com/building-rssatom-feeds-for-asp-net-mvc/">Building RSS/Atom Feeds for ASP.NET MVC</a></li>
</ul>
<p>The aim of this post is to give your site better search engine rankings using special <a href="https://en.wikipedia.org/wiki/Search_engine_optimization">Search Engine Optimization (SEO)</a> techniques. Take a look at the URL&#39;s below and see if you can spot the differences between them:</p>
<ol>
<li><a href="http://example.com/one/two/">http://example.com/one/two/</a></li>
<li><a href="https://example.com/one/two/">https://example.com/one/two/</a></li>
<li><a href="http://example.com/one/two">http://example.com/one/two</a></li>
<li><a href="http://example.com/One/Two">http://example.com/One/Two</a></li>
</ol>
<p>The second one has a HTTPS scheme, the third omits the trailing slash and the fourth has mixed case characters. All of the URL&#39;s point to the same resource but it turns out that search engines treat every one of these URL&#39;s as unique and different. Search engines give each URL a page rank, which determines where the resource will show up in the search results. Another term you will also hear quite often is &#39;link juice&#39;. The link juice conceptualizes how page rank flows between pages and websites.</p>
<p>If your site exposes the above four different URL&#39;s to the single resource, your link juice is being spread against each one and as a result, that will be having a detrimental impact on your page rank.</p>
<h1 id="the-canonical-link-tag">The Canonical Link Tag</h1>
<p>One way to solve this problem is to add a canonical link tag to the head of your HTML page. This tells search engines what the canonical (actual) URL to the page is. The link tag contains a URL to your preferred URL for the page.</p>
<link rel="canonical" href="http://example.com/one/two/">

<p>One thing you must decide early on is your preferred URL for every page. You must ask yourself the following questions and use the resulting URL in your canonical link tag.</p>
<ol>
<li>Do I prefer this page to be HTTP or HTTPS? This is yet another reason to go with HTTPS across your entire site.</li>
<li>Should the URL end with a trailing slash? This is often preferred over omitting it but it&#39;s a matter of preference.</li>
<li>Should I allow a mix of upper-case and lower-case characters? Most sites choose to go with all lower-case characters.</li>
</ol>
<p>When search engines follow a link to your page, regardless of which URL they followed to get to your page, all of the link juice will be given to the URL specified in your canonical link tag. Google goes into a lot more depth about this tag <a href="http://googlewebmastercentral.blogspot.co.uk/2009/02/specify-your-canonical.html">here</a>.</p>
<h1 id="301-permanent-redirects">301 Permanent Redirects</h1>
<p>Unfortunately, using the canonical link tag is not the recommended approach. The intention is that it should only be used to retrofit older websites, so they can become optimized for search engines.</p>
<p>According to both <a href="http://googlewebmastercentral.blogspot.co.uk/2010/04/to-slash-or-not-to-slash.html">Google</a> and <a href="http://blogs.bing.com/webmaster/2012/01/26/moving-content-think-301-not-relcanonical">Bing</a>, the recommended approach if you visit a non-preferred format of your pages URL is to perform a <a href="https://moz.com/learn/seo/redirection">301 permanent redirect</a> to the preferred canonical URL. According to them, you only lose a tiny amount of link juice by doing a 301 permanent redirect.</p>
<h1 id="canonical-urls-in-mvc">Canonical URL&#39;s in MVC</h1>
<p>ASP.NET MVC 5 and ASP.NET Core have two settings you can use to automatically create canonical URL&#39;s every time you generate URL&#39;s.</p>
<pre><code class="language-cs">// Append a trailing slash to all URL&#39;s.
RouteTable.Routes.AppendTrailingSlash = true;
// Ensure that all URL&#39;s are lower-case.
RouteTable.Routes.LowercaseUrls = true;
</code></pre>
<pre><code class="language-cs">services.ConfigureRouting(
    routeOptions =&gt; 
    { 
        // Append a trailing slash to all URL&#39;s.
        routeOptions.AppendTrailingSlash = true;
        // Ensure that all URL&#39;s are lower-case.
        routeOptions.LowercaseUrls = true;
    });
</code></pre>
<p>Once you apply these settings and are using the <code>UrlHelper</code> to generate all your URL&#39;s, you will see that across your site all URL&#39;s are lower-case and all end with a trailing slash (This is just my personal preference you may not like trailing slashes).</p>
<p>This means that within your site, no 301 permanent redirects to canonical URL&#39;s are required because the URL&#39;s are already canonical. However, this just solves part of the problem. What about external links to your site? What happens when people copy and paste your site and delete or add a trailing slash? What happens when someone types in a link to your site and puts in an upper-case character? The fact is you have no control over external links and when search engine crawlers follow those non-canonical links you will be losing valuable link juice.</p>
<h1 id="301-permanent-redirects-in-mvc">301 Permanent Redirects in MVC</h1>
<p>Enter the <code>RedirectToCanonicalUrlAttribute</code>. This is an MVC filter you can apply, which will check that the URL from each request is canonical. If it is, it does nothing and MVC returns the view in its response as normal. If the URL is not canonical, it generates the canonical URL based on the above MVC settings and returns a 301 permanent redirect response to the client. The client can then make another request to the correct canonical URL.</p>
<p>You can take a look at the source code for the <code>RedirectToCanonicalUrlAttribute</code>, <code>NoTrailingSlashAttribute</code> and <code>NoLowercaseQueryStringAttribute</code>&#39;s (I shall explain in a minute) for MVC 5 below or the ASP.NET Core version <a href="https://github.com/Dotnet-Boxed/Framework">here</a>.</p>
<pre><code class="language-cs">/// &lt;summary&gt;
/// To improve Search Engine Optimization SEO, there should only be a single URL for each resource. Case 
/// differences and/or URL&#39;s with/without trailing slashes are treated as different URL&#39;s by search engines. This 
/// filter redirects all non-canonical URL&#39;s based on the settings specified to their canonical equivalent. 
/// Note: Non-canonical URL&#39;s are not generated by this site template, it is usually external sites which are 
/// linking to your site but have changed the URL case or added/removed trailing slashes.
/// (See Google&#39;s comments at http://googlewebmastercentral.blogspot.co.uk/2010/04/to-slash-or-not-to-slash.html
/// and Bing&#39;s at http://blogs.bing.com/webmaster/2012/01/26/moving-content-think-301-not-relcanonical).
/// &lt;/summary&gt;
[AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, Inherited = true, AllowMultiple = false)]
public class RedirectToCanonicalUrlAttribute : FilterAttribute, IAuthorizationFilter
{
    private const char QueryCharacter = &#39;?&#39;;
    private const char SlashCharacter = &#39;/&#39;;

    private readonly bool appendTrailingSlash;
    private readonly bool lowercaseUrls;

    /// &lt;summary&gt;
    /// Initializes a new instance of the &lt;see cref=&quot;RedirectToCanonicalUrlAttribute&quot; /&gt; class.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;appendTrailingSlash&quot;&gt;If set to &lt;c&gt;true&lt;/c&gt; append trailing slashes, otherwise strip trailing 
    /// slashes.&lt;/param&gt;
    /// &lt;param name=&quot;lowercaseUrls&quot;&gt;If set to &lt;c&gt;true&lt;/c&gt; lower-case all URL&#39;s.&lt;/param&gt;
    public RedirectToCanonicalUrlAttribute(
        bool appendTrailingSlash, 
        bool lowercaseUrls)
    {
        this.appendTrailingSlash = appendTrailingSlash;
        this.lowercaseUrls = lowercaseUrls;
    } 

    /// &lt;summary&gt;
    /// Gets a value indicating whether to append trailing slashes.
    /// &lt;/summary&gt;
    /// &lt;value&gt;
    /// &lt;c&gt;true&lt;/c&gt; if appending trailing slashes; otherwise, strip trailing slashes.
    /// &lt;/value&gt;
    public bool AppendTrailingSlash
    {
        get { return this.appendTrailingSlash; }
    }

    /// &lt;summary&gt;
    /// Gets a value indicating whether to lower-case all URL&#39;s.
    /// &lt;/summary&gt;
    /// &lt;value&gt;
    /// &lt;c&gt;true&lt;/c&gt; if lower-casing URL&#39;s; otherwise, &lt;c&gt;false&lt;/c&gt;.
    /// &lt;/value&gt;
    public bool LowercaseUrls
    {
        get { return this.lowercaseUrls; }
    }

    /// &lt;summary&gt;
    /// Determines whether the HTTP request contains a non-canonical URL using &lt;see cref=&quot;TryGetCanonicalUrl&quot;/&gt;, 
    /// if it doesn&#39;t calls the &lt;see cref=&quot;HandleNonCanonicalRequest&quot;/&gt; method.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;filterContext&quot;&gt;An object that encapsulates information that is required in order to use the 
    /// &lt;see cref=&quot;RedirectToCanonicalUrlAttribute&quot;/&gt; attribute.&lt;/param&gt;
    /// &lt;exception cref=&quot;ArgumentNullException&quot;&gt;The &lt;paramref name=&quot;filterContext&quot;/&gt; parameter is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;
    public virtual void OnAuthorization(AuthorizationContext filterContext)
    {
        if (filterContext == null)
        {
            throw new ArgumentNullException(nameof(filterContext));
        }

        if (string.Equals(filterContext.HttpContext.Request.HttpMethod, &quot;GET&quot;, StringComparison.Ordinal))
        {
            string canonicalUrl;
            if (!this.TryGetCanonicalUrl(filterContext, out canonicalUrl))
            {
                this.HandleNonCanonicalRequest(filterContext, canonicalUrl);
            }
        }
    }

    /// &lt;summary&gt;
    /// Determines whether the specified URl is canonical and if it is not, outputs the canonical URL.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;filterContext&quot;&gt;An object that encapsulates information that is required in order to use the 
    /// &lt;see cref=&quot;RedirectToCanonicalUrlAttribute&quot; /&gt; attribute.&lt;/param&gt;
    /// &lt;param name=&quot;canonicalUrl&quot;&gt;The canonical URL.&lt;/param&gt;
    /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the URL is canonical, otherwise &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt;
    protected virtual bool TryGetCanonicalUrl(AuthorizationContext filterContext, out string canonicalUrl)
    {
        bool isCanonical = true;

        Uri url = filterContext.HttpContext.Request.Url;
        canonicalUrl = url.ToString();
        int queryIndex = canonicalUrl.IndexOf(QueryCharacter);

        // If we are not dealing with the home page. Note, the home page is a special case and it doesn&#39;t matter
        // if there is a trailing slash or not. Both will be treated as the same by search engines.
        if (url.AbsolutePath.Length &gt; 1)
        {
            if (queryIndex == -1)
            {
                bool hasTrailingSlash = canonicalUrl[canonicalUrl.Length - 1] == SlashCharacter;

                if (this.appendTrailingSlash)
                {
                    // Append a trailing slash to the end of the URL.
                    if (!hasTrailingSlash &amp;&amp; !this.HasNoTrailingSlashAttribute(filterContext))
                    {
                        canonicalUrl += SlashCharacter;
                        isCanonical = false;
                    }
                }
                else
                {
                    // Trim a trailing slash from the end of the URL.
                    if (hasTrailingSlash)
                    {
                        canonicalUrl = canonicalUrl.TrimEnd(SlashCharacter);
                        isCanonical = false;
                    }
                }
            }
            else
            {
                bool hasTrailingSlash = canonicalUrl[queryIndex - 1] == SlashCharacter;

                if (this.appendTrailingSlash)
                {
                    // Append a trailing slash to the end of the URL but before the query string.
                    if (!hasTrailingSlash &amp;&amp; !this.HasNoTrailingSlashAttribute(filterContext))
                    {
                        canonicalUrl = canonicalUrl.Insert(queryIndex, SlashCharacter.ToString());
                        isCanonical = false;
                    }
                }
                else
                {
                    // Trim a trailing slash to the end of the URL but before the query string.
                    if (hasTrailingSlash)
                    {
                        canonicalUrl = canonicalUrl.Remove(queryIndex - 1, 1);
                        isCanonical = false;
                    }
                }
            }
        }

        if (this.lowercaseUrls)
        {
            foreach (char character in canonicalUrl)
            {
                if (this.HasNoLowercaseQueryStringAttribute(filterContext) &amp;&amp; queryIndex != -1)
                {
                    if (character == QueryCharacter)
                    {
                        break;
                    }

                    if (char.IsUpper(character) &amp;&amp; !this.HasNoTrailingSlashAttribute(filterContext))
                    {
                        canonicalUrl = canonicalUrl.Substring(0, queryIndex).ToLower() +
                            canonicalUrl.Substring(queryIndex, canonicalUrl.Length - queryIndex);
                        isCanonical = false;
                        break;
                    }
                }
                else
                {
                    if (char.IsUpper(character) &amp;&amp; !this.HasNoTrailingSlashAttribute(filterContext))
                    {
                        canonicalUrl = canonicalUrl.ToLower();
                        isCanonical = false;
                        break;
                    }
                }
            }
        }

        return isCanonical;
    }

    /// &lt;summary&gt;
    /// Handles HTTP requests for URL&#39;s that are not canonical. Performs a 301 Permanent Redirect to the canonical URL.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;filterContext&quot;&gt;An object that encapsulates information that is required in order to use the 
    /// &lt;see cref=&quot;RedirectToCanonicalUrlAttribute&quot; /&gt; attribute.&lt;/param&gt;
    /// &lt;param name=&quot;canonicalUrl&quot;&gt;The canonical URL.&lt;/param&gt;
    protected virtual void HandleNonCanonicalRequest(AuthorizationContext filterContext, string canonicalUrl)
    {
        filterContext.Result = new RedirectResult(canonicalUrl, true);
    }

    /// &lt;summary&gt;
    /// Determines whether the specified action or its controller has the &lt;see cref=&quot;NoTrailingSlashAttribute&quot;/&gt; 
    /// attribute specified.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;filterContext&quot;&gt;The filter context.&lt;/param&gt;
    /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if a &lt;see cref=&quot;NoTrailingSlashAttribute&quot;/&gt; attribute is specified, otherwise 
    /// &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt;
    protected virtual bool HasNoTrailingSlashAttribute(AuthorizationContext filterContext)
    {
        return filterContext.ActionDescriptor.IsDefined(typeof(NoTrailingSlashAttribute), false) ||
            filterContext.ActionDescriptor.ControllerDescriptor.IsDefined(typeof(NoTrailingSlashAttribute), false);
    }

    /// &lt;summary&gt;
    /// Determines whether the specified action or its controller has the &lt;see cref=&quot;NoLowercaseQueryStringAttribute&quot;/&gt; 
    /// attribute specified.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;filterContext&quot;&gt;The filter context.&lt;/param&gt;
    /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if a &lt;see cref=&quot;NoLowercaseQueryStringAttribute&quot;/&gt; attribute is specified, otherwise 
    /// &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt;
    protected virtual bool HasNoLowercaseQueryStringAttribute(AuthorizationContext filterContext)
    {
        return filterContext.ActionDescriptor.IsDefined(typeof(NoLowercaseQueryStringAttribute), false) ||
            filterContext.ActionDescriptor.ControllerDescriptor.IsDefined(typeof(NoLowercaseQueryStringAttribute), false);
    }
}

/// &lt;summary&gt;
/// Requires that a HTTP request does not contain a trailing slash. If it does, return a 404 Not Found. This is 
/// useful if you are dynamically generating something which acts like it&#39;s a file on the web server. 
/// E.g. /Robots.txt/ should not have a trailing slash and should be /Robots.txt. Note, that we also don&#39;t care if 
/// it is upper-case or lower-case in this instance.
/// &lt;/summary&gt;
[AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, Inherited = true, AllowMultiple = false)]
public class NoTrailingSlashAttribute : FilterAttribute, IAuthorizationFilter
{
    private const char QueryCharacter = &#39;?&#39;;
    private const char SlashCharacter = &#39;/&#39;;

    /// &lt;summary&gt;
    /// Determines whether a request contains a trailing slash and, if it does, calls the 
    /// &lt;see cref=&quot;HandleTrailingSlashRequest&quot;/&gt; method.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;filterContext&quot;&gt;An object that encapsulates information that is required in order to use the 
    /// &lt;see cref=&quot;RequireHttpsAttribute&quot;/&gt; attribute.&lt;/param&gt;
    /// &lt;exception cref=&quot;ArgumentNullException&quot;&gt;The &lt;paramref name=&quot;filterContext&quot;/&gt; parameter is null.&lt;/exception&gt;
    public virtual void OnAuthorization(AuthorizationContext filterContext)
    {
        if (filterContext == null)
        {
            throw new ArgumentNullException(nameof(filterContext));
        }

        string canonicalUrl = filterContext.HttpContext.Request.Url.ToString();
        int queryIndex = canonicalUrl.IndexOf(QueryCharacter);

        if (queryIndex == -1)
        {
            if (canonicalUrl[canonicalUrl.Length - 1] == SlashCharacter)
            {
                this.HandleTrailingSlashRequest(filterContext);
            }
        }
        else
        {
            if (canonicalUrl[queryIndex - 1] == SlashCharacter)
            {
                this.HandleTrailingSlashRequest(filterContext);
            }
        }
    }

    /// &lt;summary&gt;
    /// Handles HTTP requests that have a trailing slash but are not meant to.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;filterContext&quot;&gt;An object that encapsulates information that is required in order to use the 
    /// &lt;see cref=&quot;RequireHttpsAttribute&quot;/&gt; attribute.&lt;/param&gt;
    protected virtual void HandleTrailingSlashRequest(AuthorizationContext filterContext)
    {
        filterContext.Result = new HttpNotFoundResult();
    }
}

/// &lt;summary&gt;
/// Ensures that a HTTP request URL can contain query string parameters with both upper-case and lower-case 
/// characters.
/// &lt;/summary&gt;
[AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, Inherited = true, AllowMultiple = false)]
public class NoLowercaseQueryStringAttribute : FilterAttribute
{
}
</code></pre>
<p>Adding the <code>RedirectToCanonicalUrlAttribute</code> filter is easy. You can add it to the global filters collection so all requests will be handled by it like so:</p>
<pre><code class="language-cs">GlobalFilters.Filters.Add(new RedirectToCanonicalUrlAttribute(
    RouteTable.Routes.AppendTrailingSlash, 
    RouteTable.Routes.LowercaseUrls));
</code></pre>
<p>That&#39;s it! It&#39;s as simple as that! Now there are two special cases, which is where the <code>NoTrailingSlashAttribute</code> and <code>NoLowercaseQueryStringAttribute</code> filters comes in.</p>
<h2 id="special-case-1">Special Case 1</h2>
<p>Say you want to have the following action method where visiting <code>http://example.com/robots.txt</code> returns a text result. We want the client to think it&#39;s just visiting a static <code>robots.txt</code> file but in reality we are dynamically generating it (One reason for doing this is that a <code>robots.txt</code> file must contain an absolute URL and you want to use the <code>UrlHelper</code> to just handle that, no matter what domain the site is running under).</p>
<pre><code class="language-cs">[NoTrailingSlash]
[Route(&quot;robots.txt&quot;)]
public ContentResult RobotsText()
{
    string content = this.robotsService.GetRobotsText();
    return this.Content(content, ContentType.Text, Encoding.UTF8);
}
</code></pre>
<p>Adding a trailing slash to <code>robots.txt</code> would just be weird. Also, the last thing you want to do when search engines try to visit <code>http://example.com/robots.txt</code> is 301 permanent redirect them to <code>http://example.com/robots.txt/</code>. So we add the <code>NoTrailingSlashAttribute</code> filter.</p>
<p>The <code>RedirectToCanonicalUrlAttribute</code> knows about the <code>NoTrailingSlashAttribute</code> filter and when it sees it and we make a request to the above action, it ignores the <code>AppendTrailingSlash</code> setting and it works just like requesting a static <code>robots.txt</code> file from the file system.</p>
<h2 id="special-case-2">Special Case 2</h2>
<p>Sometimes you want your query string parameters to be a mix of upper-case and lower-case. When you want to do this, simply add the <code>NoLowercaseQueryStringAttribute</code> attribute to the action method like so:</p>
<pre><code class="language-cs">[NoLowercaseQueryString]
[Route(&quot;action&quot;)]
public void Action(string mixedCaseParameter)
{
    // mixedCaseParameter can contain upper and lower case characters.
}
</code></pre>
<p>If you are using the ASP.NET Identity NuGet package for authentication, then take note, you need to apply the <code>NoLowercaseQueryStringAttribute</code> to the <code>AccountController</code>.</p>
<h1 id="conclusions">Conclusions</h1>
<p>Once again, you can find a working example of this and much more using the <a href="https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d">ASP.NET Core Boilerplate</a> project template or view the source code directly on <a href="https://github.com/Dotnet-Boxed/Framework">GitHub</a>.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building RSS/Atom Feeds for ASP.NET MVC]]></title>
        <id>https://rehansaeed.com/building-rssatom-feeds-for-asp-net-mvc/</id>
        <link href="https://rehansaeed.com/building-rssatom-feeds-for-asp-net-mvc/"/>
        <updated>2015-06-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to build a fully featured RSS/Atom feed for ASP.NET MVC, including Google's PubSubHubbub and the 'Subscribe to this feed' button.]]></summary>
        <content type="html"><![CDATA[<ul>
<li><a href="https://rehansaeed.com/asp-net-mvc-boilerplate/">ASP.NET Core Boilerplate</a></li>
<li>Security<ul>
<li><a href="https://rehansaeed.com/securing-the-aspnet-mvc-web-config/">Securing the ASP.NET MVC Web.config (Updated)</a></li>
<li><a href="https://rehansaeed.com/nwebsec-asp-net-mvc-security-through-http-headers/">NWebSec ASP.NET MVC Security Through HTTP Headers</a></li>
<li><a href="https://rehansaeed.com/content-security-policy-for-asp-net-mvc/">Content Security Policy (CSP) for ASP.NET MVC</a></li>
</ul>
</li>
<li>Search Engine Optimization (SEO)<ul>
<li><a href="https://rehansaeed.com/canonical-urls-for-asp-net-mvc/">Canonical URL&#39;s for ASP.NET MVC</a></li>
<li><a href="https://rehansaeed.com/dynamically-generating-robots-txt-using-asp-net-mvc">Dynamically Generating Robots.txt Using ASP.NET MVC</a></li>
</ul>
</li>
<li><a href="https://rehansaeed.com/internet-favicon-madness/">Internet Favicon Madness (Updated)</a></li>
<li><a href="https://rehansaeed.com/building-rssatom-feeds-for-asp-net-mvc/">Building RSS/Atom Feeds for ASP.NET MVC</a></li>
</ul>
<h1 id="what-is-an-rssatom-feed">What is an RSS/Atom Feed</h1>
<p>An <a href="https://en.wikipedia.org/wiki/RSS">RSS</a> or <a href="https://en.wikipedia.org/wiki/Atom_%28standard%29">Atom</a> feed is a great way to push site updates to users. Essentially, it&#39;s just an XML document which is constantly updated with fresh content and links.</p>
<p>There are numerous feed readers out there that all work in different ways but most just aggregate feeds from several sites into a single reading list. When a user subscribes to your sites feed and adds it to their list of subscriptions, each time you update your feed the fresh content will appear in their reading list.</p>
<p>Feed readers come in all shapes and sizes, even browsers have basic feed reading abilities. Here is a screen-shot of Firefox&#39;s bookmarks side-bar, after adding the <a href="https://visualstudiomagazine.com/rss-feeds/blogs.aspx">Visual Studio Magazine</a> feed (Go ahead and try it yourself in Firefox). The bookmarks under the Blogs folder updates each time the feed updates.</p>
<p><img src="https://rehansaeed.com/building-rssatom-feeds-for-asp-net-mvc/images/Firefox-Live-Bookmarks-Feed.png" alt="Firefox Live Bookmarks Feed"></p>
<p>Feed reading websites like <a href="http://feedly.com/i/welcome">Feedly</a> and <a href="http://www.newsblur.com/">NewsBlur</a> are fairly popular. Increasingly though, feed readers are actually just apps running on phones or tablets and these can even raise notifications when the feed changes and there is fresh content to read. Services like Feedly and NewsBlur also have their own apps too.</p>
<h1 id="rss-vs-atom">RSS vs Atom</h1>
<p>The latest versions of RSS is 2.0, while Atom is 1.0. Atom 1.0 is a web standard and you can read the official IETF Atom 1.0 specification <a href="www.ietf.org/rfc/rfc4287.txt">here</a>. RSS is not a web standard and is actually owned by Harvard University.</p>
<p>Atom was created specifically to address problems in RSS 2.0 and is the newer and more well defined format. Both of these formats are now pretty ancient by web standards and enjoy widespread support. If you have a choice of format, go with Atom 1.0.</p>
<h1 id="atom-10-xml">Atom 1.0 XML</h1>
<p>So what does an Atom feed look like, well you can look at the official specification <a href="https://tools.ietf.org/html/rfc4287">here</a> or there is a simple but fully featured example below.</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;feed xml:lang=&quot;en-GB&quot; xmlns:media=&quot;http://search.yahoo.com/mrss/&quot; xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
  &lt;title type=&quot;text&quot;&gt;ASP.NET Core Boilerplate&lt;/title&gt;
  &lt;subtitle type=&quot;text&quot;&gt;This is the ASP.NET Core Boilerplate feed description.&lt;/subtitle&gt;
  &lt;id&gt;3D797739-1DED-4DB8-B60B-1CA52D0AA1A4&lt;/id&gt;
  &lt;rights type=&quot;text&quot;&gt;© 2015 - Rehan Saeed&lt;/rights&gt;
  &lt;updated&gt;2015-06-24T15:54:21+01:00&lt;/updated&gt;
  &lt;category term=&quot;Blog&quot; /&gt;
  &lt;logo&gt;http://example.com/icons/atom-logo-96x48.png&lt;/logo&gt;
  &lt;author&gt;
    &lt;name&gt;Rehan Saeed&lt;/name&gt;
    &lt;uri&gt;https://rehansaeed.com&lt;/uri&gt;
    &lt;email&gt;example@email.com&lt;/email&gt;
  &lt;/author&gt;
  &lt;contributor&gt;
    &lt;name&gt;Rehan Saeed&lt;/name&gt;
    &lt;uri&gt;https://rehansaeed.com&lt;/uri&gt;
    &lt;email&gt;example@email.com&lt;/email&gt;
  &lt;/contributor&gt;
  &lt;link rel=&quot;self&quot; type=&quot;application/atom+xml&quot; href=&quot;http://example.com/feed/&quot; /&gt;
  &lt;link rel=&quot;alternate&quot; type=&quot;text/html&quot; href=&quot;http://example.com/&quot; /&gt;
  &lt;link rel=&quot;hub&quot; href=&quot;https://pubsubhubbub.appspot.com/&quot; /&gt;
  &lt;icon&gt;http://example.com/icons/atom-icon-48x48.png&lt;/icon&gt;
  &lt;entry&gt;
    &lt;id&gt;6139F098-2E59-4405-9BC7-0AAB4CF78E23&lt;/id&gt;
    &lt;title type=&quot;text&quot;&gt;Item 1&lt;/title&gt;
    &lt;summary type=&quot;text&quot;&gt;A summary of item 1&lt;/summary&gt;
    &lt;published&gt;2015-06-24T15:54:21+01:00&lt;/published&gt;
    &lt;updated&gt;2015-06-24T15:54:21+01:00&lt;/updated&gt;
    &lt;author&gt;
      &lt;name&gt;Rehan Saeed&lt;/name&gt;
      &lt;uri&gt;https://rehansaeed.com&lt;/uri&gt;
      &lt;email&gt;example@email.com&lt;/email&gt;
    &lt;/author&gt;
    &lt;contributor&gt;
      &lt;name&gt;Rehan Saeed&lt;/name&gt;
      &lt;uri&gt;https://rehansaeed.com&lt;/uri&gt;
      &lt;email&gt;example@email.com&lt;/email&gt;
    &lt;/contributor&gt;
    &lt;link rel=&quot;alternate&quot; type=&quot;text/html&quot; href=&quot;http://example.com/item1/&quot; /&gt;
    &lt;link rel=&quot;enclosure&quot; type=&quot;image/png&quot; href=&quot;http://example.com/item1/atom-icon-48x48.png&quot; /&gt;
    &lt;category term=&quot;Category 1&quot; /&gt;
    &lt;rights type=&quot;text&quot;&gt;© 2015 - Rehan Saeed&lt;/rights&gt;
    &lt;media:thumbnail url=&quot;http://example.com/item1/atom-icon-48x48.png&quot; width=&quot;48&quot; height=&quot;48&quot; /&gt;
  &lt;/entry&gt;
  &lt;entry&gt;
    &lt;id&gt;927406DD-E8DC-41ED-8154-30DE91B0877A&lt;/id&gt;
    &lt;title type=&quot;text&quot;&gt;Item 2&lt;/title&gt;
    &lt;summary type=&quot;text&quot;&gt;A summary of item 2&lt;/summary&gt;
    &lt;published&gt;2015-06-24T15:54:21+01:00&lt;/published&gt;
    &lt;updated&gt;2015-06-24T15:54:21+01:00&lt;/updated&gt;
    &lt;author&gt;
      &lt;name&gt;Rehan Saeed&lt;/name&gt;
      &lt;uri&gt;https://rehansaeed.com&lt;/uri&gt;
      &lt;email&gt;example@email.com&lt;/email&gt;
    &lt;/author&gt;
    &lt;contributor&gt;
      &lt;name&gt;Rehan Saeed&lt;/name&gt;
      &lt;uri&gt;https://rehansaeed.com&lt;/uri&gt;
      &lt;email&gt;example@email.com&lt;/email&gt;
    &lt;/contributor&gt;
    &lt;link rel=&quot;alternate&quot; type=&quot;text/html&quot; href=&quot;http://example.com/item2/&quot; /&gt;
    &lt;link rel=&quot;enclosure&quot; type=&quot;image/png&quot; href=&quot;http://example.com/item2/atom-icon-48x48.png&quot; /&gt;
    &lt;category term=&quot;Category 2&quot; /&gt;
    &lt;rights type=&quot;text&quot;&gt;© 2015 - Rehan Saeed&lt;/rights&gt;
    &lt;media:thumbnail url=&quot;http://example.com/item2/atom-icon-48x48.png&quot; width=&quot;48&quot; height=&quot;48&quot; /&gt;
  &lt;/entry&gt;
&lt;/feed&gt;
</code></pre>
<p>At the root of the XML we have the feed element which represents the Atom Feed. Within that, there is various meta-data about the feed at the top, including:</p>
<ul>
<li><code>title</code> - The title of the feed.</li>
<li><code>subtitle</code> - A short description or subtitle of the feed.</li>
<li><code>id</code> - A unique ID for the feed. No other feed on the internet should have the same ID.</li>
<li><code>rights</code> - Copyright information.</li>
<li><code>updated</code> - When the feed was last updated.</li>
<li><code>category</code> - Zero or more categories the feed belongs to.</li>
<li><code>logo</code> - A wide 2:1 ratio image representing the feed.</li>
<li><code>author</code> - Zero or more authors of the feed.</li>
<li><code>contributor</code> - Zero or more contributors of the feed.</li>
<li><code>link rel=&quot;self&quot;</code> - A link to the feed itself.</li>
<li><code>link rel=&quot;alternate&quot;</code> - A link to an alternative representation of the feed.</li>
<li><code>link rel=&quot;hub&quot;</code> - A link to the <a href="https://pubsubhubbub.googlecode.com/git/pubsubhubbub-core-0.4.html">PubSubHubbub</a> hub. I&#39;ll talk more about this further on.</li>
<li><code>icon</code> - A square 1:1 ratio image representing the feed.</li>
</ul>
<p>The entry elements are where it gets interesting, these are the actual &#39;things&#39; in your feed you are describing. Each entry has meta-data which looks very similar to the meta-data we used to describe the feed itself.</p>
<ul>
<li><code>id</code> - A unique identifier to the entry. This can be a database row ID, it doesn&#39;t have to be a GUID.</li>
<li><code>title</code> - The title of the entry.</li>
<li><code>summary</code> - A short summary for what the entry is about.</li>
<li><code>published</code> - When the entry was published.</li>
<li><code>updated</code> - When the entry was last changed.</li>
<li><code>author</code> - Zero or more authors of the entry.</li>
<li><code>contributor</code> - Zero or more contributors of the entry.</li>
<li><code>link rel=&quot;alternate&quot;</code> - A link to an alternative representation of the entry.</li>
<li><code>link rel=&quot;enclosure&quot;</code> - An image representing the entry.</li>
<li><code>category</code> - The category of the entry.</li>
<li><code>rights</code> - Some copyright information.</li>
<li><code>media:thumbnail</code> - A thumbnail representing the entry. This is a non-standard extension to the Atom 1.0 specification created by Yahoo but is common enough to be used here.</li>
</ul>
<p>One thing to note is that all of the links are full absolute URL&#39;s. Relative URL&#39;s are allowed but you have to specify a single base URI which is added to the start of all URL&#39;s. Unfortunately, this feature is <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=480600">buggy</a> in Firefox and so should not be used.</p>
<h1 id="implementing-an-atom-feed">Implementing an Atom Feed</h1>
<p>The <a href="https://msdn.microsoft.com/en-us/library/ms731082%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396">Windows Communication Foundation (WCF)</a> team at Microsoft has kindly implemented the <a href="https://msdn.microsoft.com/en-us/library/system.servicemodel.syndication.syndicationfeed%28v=vs.110%29.aspx">SyndicationFeed</a> class, giving us a nice API with which to generate the above Atom 1.0 XML (In actual fact this class also represents an RSS 2.0 feed and can be used to generate RSS 2.0 XML too). Since it was the WCF team at Microsoft who built it, they put it in the <code>System.ServiceModel</code> namespace. It doesn&#39;t quite feel right there and will probably be split out into it&#39;s own namespace (Indeed, I&#39;ve raised <a href="https://github.com/dotnet/wcf/issues/76">this</a> very question for the new <a href="http://docs.asp.net/en/latest/dnx/overview.html">DNX Core</a> version of the .NET Framework which is currently missing SyndicationFeed). Creating a new feed is as simple as this:</p>
<pre><code class="language-cs">SyndicationFeed feed = new SyndicationFeed()
{
    // id (Required) - The feed universally unique identifier.
    Id = &quot;3D797739-1DED-4DB8-B60B-1CA52D0AA1A4&quot;,
    // title (Required) - Contains a human readable title for the feed. Often the same as the title of the 
    //                    associated website. This value should not be blank.
    Title = SyndicationContent.CreatePlaintextContent(&quot;ASP.NET Core Boilerplate&quot;),
    // items (Required) - The entries to add to the feed. I&#39;ll cover how to do this further on.
    Items = this.GetItems(),
    // subtitle (Recommended) - Contains a human-readable description or subtitle for the feed.
    Description = SyndicationContent.CreatePlaintextContent(
        &quot;This is the ASP.NET Core Boilerplate feed description.&quot;),
    // updated (Optional) - Indicates the last time the feed was modified in a significant way.
    LastUpdatedTime = DateTimeOffset.Now,
    // logo (Optional) - Identifies a larger image which provides visual identification for the feed. 
    //                   Images should be twice as wide as they are tall.
    ImageUrl = new Uri(&quot;http://example.com/icons/atom-logo-96x48.png&quot;),
    // rights (Optional) - Conveys information about rights, e.g. copyrights, held in and over the feed.
    Copyright = SyndicationContent.CreatePlaintextContent(
        string.Format(&quot;© {0} - {1}&quot;, DateTime.Now.Year, &quot;Rehan Saeed&quot;)),
    // lang (Optional) - The language of the feed.
    Language = &quot;en-GB&quot;,
    // generator (Optional) - Identifies the software used to generate the feed, for debugging and other 
    //                        purposes. Do not put in anything that identifies the technology you are using.
    // Generator = &quot;Sample Code&quot;,
    // base (Buggy) - Add the full base URL to the site so that all other links can be relative. This is 
    //                great, except some feed readers are buggy with it, INCLUDING FIREFOX!!! 
    //                (See https://bugzilla.mozilla.org/show_bug.cgi?id=480600).
    // BaseUri = new Uri(&quot;http://example.com&quot;)
};

// self link (Required) - The URL for the syndication feed.
feed.Links.Add(SyndicationLink.CreateSelfLink(
    new Uri(&quot;http://example.com/feed/&quot;), 
    ContentType.Atom));

// alternate link (Recommended) - The URL for the web page showing the same data as the syndication feed.
feed.Links.Add(SyndicationLink.CreateAlternateLink(
    new Uri(&quot;http://example.com&quot;), 
    ContentType.Html));

// hub link (Recommended) - The URL for the PubSubHubbub hub. Used to push new entries to subscribers 
//                          instead of making them poll the feed. See feed updated method below.
feed.Links.Add(new SyndicationLink(new Uri(&quot;https://pubsubhubbub.appspot.com/&quot;), &quot;hub&quot;, null, null, 0));

// author (Recommended) - Names one author of the feed. A feed may have multiple author elements. A feed 
//                        must contain at least one author element unless all of the entry elements contain 
//                        at least one author element.
feed.Authors.Add(
    new SyndicationPerson()
    {
        // name (Required) - conveys a human-readable name for the person.
        Name = &quot;Rehan Saeed&quot;,
        // uri (Optional) - contains a home page for the person.
        Uri = &quot;https://rehansaeed.com&quot;,
        // email (Optional) - contains an email address for the person.
        Email = &quot;example@email.com&quot;
    });

// category (Optional) - Specifies a category that the feed belongs to. A feed may have multiple category 
//                       elements.
feed.Categories.Add(new SyndicationCategory(&quot;CategoryName&quot;));

// contributor (Optional) - Names one contributor to the feed. An feed may have multiple contributor 
//                          elements.
feed.Contributors.Add(
    new SyndicationPerson()
    {
        Name = &quot;Rehan Saeed&quot;,
        Uri = &quot;https://rehansaeed.com&quot;,
        Email = &quot;example@email.com&quot;
    });

// icon (Optional) - Identifies a small image which provides iconic visual identification for the feed. 
//                   Icons should be square.
feed.SetIcon(this.urlHelper.AbsoluteContent(&quot;http://example.com/icons/atom-icon-48x48.png&quot;));

// Add the Yahoo Media namespace (xmlns:media=&quot;http://search.yahoo.com/mrss/&quot;) to the Atom feed. 
// This gives us extra abilities, like the ability to give thumbnail images to entries. 
// See http://www.rssboard.org/media-rss for more information.
feed.AddYahooMediaNamespace();
</code></pre>
<p>Unfortunately, the property to set the icon does not exist on the <code>SyndicationFeed</code>, even though it is part of the official specification. Luckily for you I have created a quick extension method (Usage shown above) which allows us to set the icon.</p>
<p>I have also created an extension method to add a Yahoo media thumbnail to an Atom entry. This is a non-standard extension but worth the effort. To use non-standard extensions, requires adding a namespace to the feed element in the XML, that is what the <code>AddYahooMediaNamespace</code> method does towards the bottom.</p>
<p>The extension methods are shown below. They use extensibility points on the <code>SyndicationFeed</code>, that allows us to augment its functionality.</p>
<pre><code class="language-cs">/// &lt;summary&gt;
/// &lt;see cref=&quot;SyndicationFeed&quot;/&gt; extension methods.
/// &lt;/summary&gt;
public static class SyndicationFeedExtensions
{
    private const string YahooMediaNamespacePrefix = &quot;media&quot;;
    private const string YahooMediaNamespace = &quot;http://search.yahoo.com/mrss/&quot;;

    /// &lt;summary&gt;
    /// Adds a namespace to the specified feed.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;feed&quot;&gt;The syndication feed.&lt;/param&gt;
    /// &lt;param name=&quot;namespacePrefix&quot;&gt;The namespace prefix.&lt;/param&gt;
    /// &lt;param name=&quot;xmlNamespace&quot;&gt;The XML namespace.&lt;/param&gt;
    public static void AddNamespace(this SyndicationFeed feed, string namespacePrefix, string xmlNamespace)
    {
        feed.AttributeExtensions.Add(
            new XmlQualifiedName(namespacePrefix, XNamespace.Xmlns.ToString()), 
            xmlNamespace);
    }

    /// &lt;summary&gt;
    /// Adds the yahoo media namespace to the specified feed.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;feed&quot;&gt;The syndication feed.&lt;/param&gt;
    public static void AddYahooMediaNamespace(this SyndicationFeed feed)
    {
        AddNamespace(feed, YahooMediaNamespacePrefix, YahooMediaNamespace);
    }

    /// &lt;summary&gt;
    /// Gets the icon URL for the feed.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;feed&quot;&gt;The syndication feed.&lt;/param&gt;
    /// &lt;returns&gt;The icon URL.&lt;/returns&gt;
    public static string GetIcon(this SyndicationFeed feed)
    {
        SyndicationElementExtension iconExtension = feed.ElementExtensions.FirstOrDefault(
            x =&gt; string.Equals(x.OuterName, &quot;icon&quot;, StringComparison.OrdinalIgnoreCase));
        return iconExtension.GetObject&lt;string&gt;();
    }

    /// &lt;summary&gt;
    /// Sets the icon URL for the feed.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;feed&quot;&gt;The syndication feed.&lt;/param&gt;
    /// &lt;param name=&quot;iconUrl&quot;&gt;The icon URL.&lt;/param&gt;
    public static void SetIcon(this SyndicationFeed feed, string iconUrl)
    {
        feed.ElementExtensions.Add(new SyndicationElementExtension(&quot;icon&quot;, null, iconUrl));
    }

    /// &lt;summary&gt;
    /// Sets the Yahoo Media thumbnail for the feed entry.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;item&quot;&gt;The feed entry.&lt;/param&gt;
    /// &lt;param name=&quot;url&quot;&gt;The thumbnail URL.&lt;/param&gt;
    /// &lt;param name=&quot;width&quot;&gt;The optional width of the thumbnail image.&lt;/param&gt;
    /// &lt;param name=&quot;height&quot;&gt;The optional height of the thumbnail image.&lt;/param&gt;
    public static void SetThumbnail(this SyndicationItem item, string url, int? width, int? height)
    {
        XNamespace ns = YahooMediaNamespace;
        item.ElementExtensions.Add(new SyndicationElementExtension(
            new XElement(
                ns + &quot;thumbnail&quot;,
                new XAttribute(&quot;url&quot;, url),
                width.HasValue ? new XAttribute(&quot;width&quot;, width) : null,
                height.HasValue ? new XAttribute(&quot;height&quot;, height) : null)));
    }
}
</code></pre>
<p>Creating feed entries is just as simple and is done using the <a href="https://msdn.microsoft.com/en-us/library/system.servicemodel.syndication.syndicationitem%28v=vs.110%29.aspx">SyndicationItem</a> class. An example of creating the first entry is shown below.</p>
<pre><code class="language-cs">SyndicationItem item = new SyndicationItem()
{
    // id (Required) - Identifies the entry using a universally unique and permanent URI. Two entries 
    //                 in a feed can have the same value for id if they represent the same entry at 
    //                 different points in time.
    Id = &quot;6139F098-2E59-4405-9BC7-0AAB4CF78E23&quot;,
    // title (Required) - Contains a human readable title for the entry. This value should not be blank.
    Title = SyndicationContent.CreatePlaintextContent(&quot;Item 1&quot;),
    // description (Recommended) - A summary of the entry.
    Summary = SyndicationContent.CreatePlaintextContent(&quot;A summary of item 1&quot;),
    // updated (Optional) - Indicates the last time the entry was modified in a significant way. This 
    //                      value need not change after a typo is fixed, only after a substantial 
    //                      modification. Generally, different entries in a feed will have different 
    //                      updated timestamps.
    LastUpdatedTime = DateTimeOffset.Now,
    // published (Optional) - Contains the time of the initial creation or first availability of the entry.
    PublishDate = DateTimeOffset.Now,
    // rights (Optional) - Conveys information about rights, e.g. copyrights, held in and over the entry.
    Copyright = new TextSyndicationContent(
        string.Format(&quot;© {0} - {1}&quot;, DateTime.Now.Year, &quot;Rehan Saeed&quot;)),
};

// link (Recommended) - Identifies a related Web page. An entry must contain an alternate link if there 
//                      is no content element.
item.Links.Add(SyndicationLink.CreateAlternateLink(
    new Uri(&quot;http://example.com/item1&quot;), 
    ContentType.Html));
// AND/OR
// Text content  (Optional) - Contains or links to the complete content of the entry. Content must be 
//                            provided if there is no alternate link.
// item.Content = SyndicationContent.CreatePlaintextContent(&quot;The actual plain text content of the entry&quot;);
// HTML content (Optional) - Content can be plain text or HTML. Here is a HTML example.
// item.Content = SyndicationContent.CreateHtmlContent(&quot;The actual HTML content of the entry&quot;);

// author (Optional) - Names one author of the entry. An entry may have multiple authors. An entry must 
//                     contain at least one author element unless there is an author element in the 
//                     enclosing feed, or there is an author element in the enclosed source element.
item.Authors.Add(this.GetPerson());

// contributor (Optional) - Names one contributor to the entry. An entry may have multiple contributor elements.
item.Contributors.Add(this.GetPerson());

// category (Optional) - Specifies a category that the entry belongs to. A entry may have multiple 
//                       category elements.
item.Categories.Add(new SyndicationCategory(&quot;Category 1&quot;));

// link - Add additional links to related images, audio or video like so.
item.Links.Add(SyndicationLink.CreateMediaEnclosureLink(
    new Uri(&quot;http://example.com/item1/atom-icon-48x48.png&quot;), 
    ContentType.Png, 
    0));

// media:thumbnail - Add a Yahoo Media thumbnail for the entry. See http://www.rssboard.org/media-rss 
//                   for more information.
item.SetThumbnail(&quot;http://example.com/item1/atom-icon-48x48.png&quot;, 48, 48);

items.Add(item);
</code></pre>
<p>Now it&#39;s actually possible to include a full HTML page inside a feed entry. Alternatively, you can provide plain text content or as I have done, provide a link to the full content. I have shown how to do all three in the comments above.</p>
<p>The next step is to actually reply to the client with a HTTP response containing the Atom 1.0 XML. Although Atom is just XML, it has it&#39;s own specific schema and has it&#39;s own MIME type <code>application/atom+xml</code>. Furthermore, the XML must actually be returned using the UTF-8 character encoding as per the standard. So here is our controllers action returning the feed:</p>
<pre><code class="language-cs">[OutputCache(Duration = 86400)]
[Route(&quot;feed&quot;, Name = &quot;GetFeed&quot;)]
public ActionResult Feed()
{
    SyndicationFeed feed = this.feedService.GetFeed();
    return new AtomActionResult(feed);
}
</code></pre>
<p>The above controller action is super simple, we take our <code>SyndicationFeed</code> and return it in a new <code>AtomActionResult</code> which is where all the magic happens. We also cache the response for a day, this is great for performance if your feed does not change very often. So what is <code>AtomActionResult</code>, well here is the code:</p>
<pre><code class="language-cs">/// &lt;summary&gt;
/// Represents a class that is used to render an Atom 1.0 feed by using an &lt;see cref=&quot;SyndicationFeed&quot;/&gt; instance 
/// representing the feed.
/// &lt;/summary&gt;
public sealed class AtomActionResult : ActionResult
{
    private readonly SyndicationFeed syndicationFeed;

    /// &lt;summary&gt;
    /// Initializes a new instance of the &lt;see cref=&quot;AtomActionResult&quot;/&gt; class.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;syndicationFeed&quot;&gt;The Atom 1.0 &lt;see cref=&quot;SyndicationFeed&quot; /&gt;.&lt;/param&gt;
    public AtomActionResult(SyndicationFeed syndicationFeed)
    {
        this.syndicationFeed = syndicationFeed;
    }

    /// &lt;summary&gt;
    /// Executes the call to the ActionResult method and returns the created feed to the output response.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;context&quot;&gt;The context in which the result is executed. The context information includes the 
    /// controller, HTTP content, request context, and route data.&lt;/param&gt;
    public override void ExecuteResult(ControllerContext context)
    {
        context.HttpContext.Response.ContentType = &quot;application/atom+xml&quot;;
        Atom10FeedFormatter feedFormatter = new Atom10FeedFormatter(this.syndicationFeed);
        XmlWriterSettings xmlWriterSettings = new XmlWriterSettings();
        xmlWriterSettings.Encoding = Encoding.UTF8;

        if (HttpContext.Current.IsDebuggingEnabled)
        {
            // Indent the XML for easier viewing but only in Debug mode. In Release mode, everything is output on 
            // one line for best performance.
            xmlWriterSettings.Indent = true;
        }

        using (XmlWriter xmlWriter = XmlWriter.Create(context.HttpContext.Response.Output, xmlWriterSettings))
        {
            feedFormatter.WriteTo(xmlWriter);
        }
    }
}
</code></pre>
<p>The above code is writing out the XML to the HTTP response in UTF-8 encoding and with the <code>application/atom+xml</code> MIME type. By default the XML is written out all in one line which is good for performance but not very good for legibility, so we also detect whether the application is being debugged and if so, indent the XML for better legibility.</p>
<p>After all our hard work, we can now navigate to the controller action and view our feed. Here is Internet Explorer&#39;s view of our Atom feed:</p>
<p><img src="https://rehansaeed.com/building-rssatom-feeds-for-asp-net-mvc/images/Atom-Feed-Example-in-Internet-Explorer.png" alt="Atom Feed Example in Internet Explorer"></p>
<h1 id="images">Images</h1>
<p>RSS and Atom have been around for over a decade now and there is precious little information out there on how to create a feed. One of the areas that lacked information was the logo and icon images. All the specification says is that the ratios of the images should be a 2:1 rectangle and a 1:1 square respectively.</p>
<p>My advice to you and what I ended up doing is looking at various examples on the internet of feeds and copy the image sizes they were using. I ended up with images of size 48x48 and 96x48 which seemed a common size.</p>
<h1 id="adding-a-subscribe-to-this-page-button">Adding a &#39;Subscribe to this page&#39; Button</h1>
<p>Firefox has a feature called &#39;Subscribe to this page&#39; which is a button that users can add to their toolbar (The button is enabled by default on older versions of Firefox). The button detects whether the current page links to an RSS/Atom feed and if it does, the user can click on it to subscribe to the feed directly. Here is a quick screen-shot of the button:</p>
<p><img src="https://rehansaeed.com/building-rssatom-feeds-for-asp-net-mvc/images/FireFox-Subscribe-to-this-Page-Button.png" alt="FireFox Subscribe to this Page Button"></p>
<p>To add this feature, we need to place a meta tag in the head of our page with a link to the Atom feed like so:</p>
<pre><code class="language-xml">&lt;link href=&quot;http://localhost/feed&quot; rel=&quot;alternate&quot; title=&quot;ASP.NET Core Boilerplate Feed&quot; type=&quot;application/atom+xml&quot;&gt;
</code></pre>
<p>This is a pretty minor feature I admit but it has potential. By doing this, we are linking our page to the Atom feed. This can be read by search engines too, so potentially there could be some benefit in terms of Search Engine Optimization (SEO). Of course this is impossible to prove as search engines jealously guard how they manage their search rankings.</p>
<h1 id="pubsubhubbub">PubSubHubbub</h1>
<p>The problem with feeds is that you have to pull the information from them. You are never notified of new changes to the feed, so clients have to constantly poll the feed to check for any new feed entries.</p>
<p>This is the problem that <a href="https://github.com/pubsubhubbub">PubSubHubbub</a> (I know, it has a terrible name!) solves. It&#39;s been developed by Google and it&#39;s actually an <a href="https://pubsubhubbub.googlecode.com/git/pubsubhubbub-core-0.4.html">open standard</a>, with the latest version of the standard being 0.4 at the time of writing.</p>
<p>There are already major platforms supporting it. Mostly they are Google products as you would expect but WordPress which powers a third of the worlds websites also supports it.</p>
<p>At the heart of it, you now have a hub that knows how to speak the PubSubHubbub standard language. When a feed is updated with a new entry, the website sends a message to the hub to tell it that the feed has been updated. Clients can then register for updates with the hub and get notified instantly when there is an update.</p>
<p>The coolest thing though is that all of this is super easy to implement, since Google provides us with a <a href="http://pubsubhubbub.appspot.com/">hub</a> that we can use and we don&#39;t need to write our own. We just need to add a line of XML in our Atom feed telling clients that we support PubSubHubbub and the URL to the hub we want to use:</p>
<pre><code class="language-xml">&lt;link rel=&quot;hub&quot; href=&quot;https://pubsubhubbub.appspot.com/&quot; /&gt;
</code></pre>
<p>Now when there is an update to the feed, we need to publish that update to the hub linked to above. We do that by calling the simple method below:</p>
<pre><code class="language-cs">/// &lt;summary&gt;
/// Publishes the fact that the feed has updated to subscribers using the PubSubHubbub v0.4 protocol.
/// &lt;/summary&gt;
public Task PublishUpdate()
{
    HttpClient httpClient = new HttpClient();
    return httpClient.PostAsync(
        &quot;https://pubsubhubbub.appspot.com/&quot;, 
        new FormUrlEncodedContent(
            new KeyValuePair&lt;string, string&gt;()
            {
                new KeyValuePair&lt;string, string&gt;(&quot;hub.mode&quot;, &quot;publish&quot;),
                new KeyValuePair&lt;string, string&gt;(
                    &quot;hub.url&quot;, 
                    &quot;http://localhost/feed&quot;)
            }));
}
</code></pre>
<p>It&#39;s as simple as that from the publishers side. On the client side, subscribing to the changes in the feed is only a little more complicated than this. I won&#39;t cover that but you can find out more by reading the <a href="https://pubsubhubbub.googlecode.com/git/pubsubhubbub-core-0.4.html">official specification</a>.</p>
<h1 id="feed-paging">Feed Paging</h1>
<p>The Atom specification actually outlines how you can add paging to your feed. This is a great way to split up your feed if you are worried that it consumes too much bandwidth. Adding paging involves inserting the following links into the top of your feed. The links are the first, last, next and previous pages of your feed. Obviously, if you don&#39;t have a next or previous page, those links can be omitted.</p>
<pre><code class="language-xml">&lt;link rel=&quot;first&quot; href=&quot;http://example.com/feed&quot;/&gt;
&lt;link rel=&quot;next&quot; href=&quot;http://example.com/feed?page=4&quot;/&gt;
&lt;link rel=&quot;previous&quot; href=&quot;http://example.com/feed?page=2&quot;/&gt;
&lt;link rel=&quot;last&quot; href=&quot;http://example.com/feed?page=10&quot;/&gt;
</code></pre>
<p>Here is the corresponding code to add the above links:</p>
<pre><code class="language-cs">feed.Links.Add(new SyndicationLink(new Uri(&quot;http://example.com/feed&quot;), &quot;first&quot;, null, null, 0));
feed.Links.Add(new SyndicationLink(new Uri(&quot;http://example.com/feed?page=10&quot;), &quot;last&quot;, null, null, 0));

if (hasPreviousPage)
{
    feed.Links.Add(new SyndicationLink(new Uri(&quot;http://example.com/feed?page=2&quot;)), &quot;previous&quot;, null, null, 0));
}

if (hasNextPage)
{
    feed.Links.Add(new SyndicationLink(new Uri(&quot;http://example.com/feed?page=4&quot;), &quot;next&quot;, null, null, 0));
}
</code></pre>
<h1 id="feed-validation">Feed Validation</h1>
<p>Once you are done building your feed and have published it online, don&#39;t forget to check <a href="http://feedvalidator.org/">FeedValidator.org</a> to ensure that your feed conforms to the Atom 1.0 specification.</p>
<h1 id="conclusion">Conclusion</h1>
<p>As always, you can look at a full working example of all of this code on the <a href="https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d">ASP.NET Core Boilerplate</a> <a href="https://github.com/Dotnet-Boxed/Templates">GitHub page</a>.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[C# 6.0 - Saving Developers From Themselves]]></title>
        <id>https://rehansaeed.com/c-6-0-saving-developers-from-themselves/</id>
        <link href="https://rehansaeed.com/c-6-0-saving-developers-from-themselves/"/>
        <updated>2015-05-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[C# 6.0 helps reduce human error and save developers from themselves using the nameof operator, string interpolation and the null-conditional operator.]]></summary>
        <content type="html"><![CDATA[<h1 id="whats-new-in-c-60">What&#39;s New in C# 6.0</h1>
<p>If you haven&#39;t already taken a look at what&#39;s new in C# 6.0, you should certainly read <a href="https://msdn.microsoft.com/en-us/magazine/dn802602.aspx">this</a> article. This blog post is going to cover how C# 6.0 can help reduce the number of bugs in your code by giving you the tools to avoid common developer mistakes.</p>
<p>In my opinion, the changes introduced in C# 6.0 can be split into two separate groups. The first group of changes seems to be a declaration of war on curly braces (<code>{}</code>), you can now omit them in many cases. I personally am not too sure about this set of features, it reduces the lines of code you have to write a little and may save a few seconds but at the cost of having to learn a new set of syntax. If you cast your mind back to being a newbie developer (or if you are one), lots of syntax to remember can be difficult to deal with.</p>
<p>This is a problem that C++ developers know well, C++ is a pretty old language now but is still undergoing rapid development with C++ 11, 14 and beyond. It&#39;s got to the stage where there are so many ways to skin a cat in C++, even experienced developers can be slowed down when looking at code using older patterns and paradigms. The C# caretakers need to be careful that each new feature is genuinely worth the effort and not just bloat.</p>
<p>The second set of features is what I am really interested in. These are features which will genuinely save you from yourself. They will stop developers making many common mistakes.</p>
<h1 id="the-nameof-operator">The nameof Operator</h1>
<p>The <code>nameof</code> operator simply gives you the name of any type you pass into it. You can take a look at the simple example below:</p>
<pre><code class="language-cs">string obiwan;  
Console.WriteLine(nameof(obiwan));
// Prints obiwan
  
int kenobi = 2;
Console.WriteLine(nameof(kenobi));
// Prints kenobi
</code></pre>
<h2 id="argument-exceptions">Argument Exceptions</h2>
<p>So where can this help us? Well, I can think of a few examples, the first being throwing argument exceptions. Argument exceptions all take a parameter, which represents the name of the invalid parameter. In the past, we had to pass this as a string. The problem was that the parameter might get renamed and you might forget to update the string to reflect that.</p>
<pre><code class="language-cs">public void FightCrime(string hero)  
{
    if (hero == null)  
    {
        throw new ArgumentNullException(&quot;hero&quot;);
    }

    // Omitted crime fighting code...  
}
</code></pre>
<pre><code class="language-cs">public void FightCrime(string hero)  
{
    if (hero == null)  
    {
        throw new ArgumentNullException(nameof(hero));
    }

    // Omitted crime fighting code...  
}
</code></pre>
<p>With the second example, if you used Visual Studio to rename the hero parameter, then the hero in the <code>nameof</code> operator will also be updated.</p>
<h2 id="inotifypropertychanged">INotifyPropertyChanged</h2>
<p>This interface is notorious if you are doing any WPF/Silverlight/WinRT/XAML development, for requiring strings to be passed to it. With the <code>nameof</code> operator, this becomes a thing of the past.</p>
<pre><code class="language-cs">public class Ship : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler PropertyChanged;    
    
    private string name;
    
    public string Name
    {
        get { return this.name; }
        set
        {
            this.name = value;
            this.OnPropertyChanged(nameof(this.Name));
        }
    }
    
    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChangedEventHandler eventHandler = this.PropertyChanged;
        if (eventHandler != null)
        {
            eventHandler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
</code></pre>
<h2 id="aspnet-mvc">ASP.NET MVC</h2>
<p>ASP.NET MVC makes massive use of strings everywhere. This is a massive problem when you want to rename something. In fact, I&#39;ve taken to using constants everywhere. It&#39;s more work to setup but in the long run its much easier to maintain. Here is an example of how we can use <code>nameof</code> to create a link and do away with strings and constants:</p>
<pre><code class="language-cs">@Html.ActionLink(&quot;Home&quot;, &quot;Index&quot;, &quot;Home&quot;)

@Html.ActionLink2(&quot;Home&quot;, nameof(HomeController.Index), nameof(HomeController))

public static MvcHtmlString ActionLink2(this HtmlHelper htmlHelper, string linkText, string actionName, string controllerName)
{
    htmlHelper.ActionLink(linkText, actionName, controllerName.Substring(0, controllerName.Length - 10));
}
</code></pre>
<p>The above example is a little contrived. In the real world, I would never use <code>ActionLink</code> and use <code>RouteLink</code> instead. Naming your routes has better performance and is just easier to understand when you have multiple routes with the same name (for GET and POST requests).</p>
<h1 id="string-interpolation">String Interpolation</h1>
<p>I think we&#39;ve all used <code>string.Format</code> and got our arguments in the wrong positions or entered the index numbers incorrectly at some point in time. Well, that bug is now a thing of the past.</p>
<pre><code class="language-cs">// Before C# 6.0 String Interpolation
string nameAndAge = string.Format(&quot;Name:{0}, Age:{1}&quot;, name, age);
// After C# 6.0 String Interpolation
string nameAndAge = $&quot;Name:{name}, Age:{age}&quot;;
</code></pre>
<p>As you can see, you can now use your parameters directly in the strings with full syntax highlighting and renaming support too. In fact the C# 6.0 code actually compiles down to doing a <code>string.Format</code> behind the scenes.</p>
<h1 id="the-null-conditional-operator">The Null-Conditional Operator</h1>
<p>Every C# developer has at some point stared at the text from a <code>NullReferenceException</code> and thought in their head, this is a really rubbish message and leaves out vital information. In fact there is <a href="https://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/2371587-better-nullpointerexception-error-message">this</a> post on UserVoice, asking Microsoft to improve their <code>NullReferenceException</code> messages. It turns out that Microsoft has thought of this, they haven&#39;t improved the message (They still should, please up-vote the UserVoice post) but they have introduced the Null-Conditional operator.</p>
<pre><code class="language-cs">public string Truncate(string value, int length)
{
    string result = value;
    if (value != null)
    {
        result = value.Substring(0, Math.Min(value.Length, length));
    }
    return result;
}
</code></pre>
<pre><code class="language-cs">public string Truncate(string value, int length)
{          
    return value?.Substring(0, Math.Min(value.Length, length));

    // Wow, look at all this code I didn&#39;t have to write!
}
</code></pre>
<h1 id="conclusions">Conclusions</h1>
<p>As you can see there is a common theme with two of the three C# 6.0 features I&#39;ve picked above. They give us tools to better deal with strings which have terrible IDE and language support. Making a typo in a string gives us no compile time errors and Visual Studio doesn&#39;t help either. Each of these features has allowed us to deal with strongly typed objects instead, which have full language and IDE support.</p>
<p>The Null-Conditional operator is another great tool to help mitigate really common but minor bugs that catch even the most experienced developers out. These are great features, and should help stop silly mistakes that all of us developers make. We are after all, human.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Content Security Policy (CSP) for ASP.NET MVC]]></title>
        <id>https://rehansaeed.com/content-security-policy-for-asp-net-mvc/</id>
        <link href="https://rehansaeed.com/content-security-policy-for-asp-net-mvc/"/>
        <updated>2015-03-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Content Security Policy (CSP) is a HTTP header which white-lists content the browser is allowed to load. This post discusses its application in ASP.NET MVC.]]></summary>
        <content type="html"><![CDATA[<ul>
<li><a href="https://rehansaeed.com/asp-net-mvc-boilerplate/">ASP.NET Core Boilerplate</a></li>
<li>Security<ul>
<li><a href="https://rehansaeed.com/securing-the-aspnet-mvc-web-config/">Securing the ASP.NET MVC Web.config (Updated)</a></li>
<li><a href="https://rehansaeed.com/nwebsec-asp-net-mvc-security-through-http-headers/">NWebSec ASP.NET MVC Security Through HTTP Headers</a></li>
<li><a href="https://rehansaeed.com/content-security-policy-for-asp-net-mvc/">Content Security Policy (CSP) for ASP.NET MVC</a></li>
</ul>
</li>
<li>Search Engine Optimization (SEO)<ul>
<li><a href="https://rehansaeed.com/canonical-urls-for-asp-net-mvc/">Canonical URL&#39;s for ASP.NET MVC</a></li>
<li><a href="https://rehansaeed.com/dynamically-generating-robots-txt-using-asp-net-mvc">Dynamically Generating Robots.txt Using ASP.NET MVC</a></li>
</ul>
</li>
<li><a href="https://rehansaeed.com/internet-favicon-madness/">Internet Favicon Madness (Updated)</a></li>
<li><a href="https://rehansaeed.com/building-rssatom-feeds-for-asp-net-mvc/">Building RSS/Atom Feeds for ASP.NET MVC</a></li>
</ul>
<p>This series of blog posts goes through the additions made to the default ASP.NET MVC template to build the ASP.NET Core Boilerplate project template. You can create a new project using this template by installing the Visual Studio template extension or visit the GitHub site to view the source code.</p>
<h1 id="what-is-csp">What is CSP?</h1>
<p>For a true in-depth look into CSP, I highly recommend reading <a href="https://developer.mozilla.org/en-US/docs/Web/Security/CSP">Mozilla</a>&#39;s documentation on the subject. It really is the best resource on the web. I will assume that you&#39;ve read the documentation and will be going through a few examples below.</p>
<p>Content Security Policy or CSP is a great new HTTP header that controls where a web browser is allowed to load content from and the type of content it is allowed to load. It uses a white-list of allowed content and blocks anything not in the allowed list. It gives us very fine grained control and allows us to run our site in a sandbox in the users browser.</p>
<p>CSP is all about adding an extra layer of security to your site using a <a href="http://en.wikipedia.org/wiki/Defense_in_depth_%28computing%29">Defence in Depth</a> strategy. It helps detect and mitigate <a href="https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29">Cross Site Scripting (XSS)</a> and various data injection attacks, such as <a href="https://www.owasp.org/index.php/SQL_Injection">SQL Injection</a>.</p>
<h2 id="real-world-example">Real World Example</h2>
<p>So what does this look like in a web browser. Well, here is an example of a <code>Content-Security-Policy</code> HTTP header shown in Chrome. I used the <a href="https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d">ASP.NET Core Boilerplate</a> Visual Studio project template to create a ASP.NET MVC project that has CSP applied, right out of the box.</p>
<p><img src="https://rehansaeed.com/content-security-policy-for-asp-net-mvc/images/Content-Security-Policy-HTTP-Header.png" alt="Content Security Policy HTTP Header"></p>
<p>This is the HTTP header in the screenshot above. We&#39;ll discuss it in a lot more detail later in this post. Essentially it says, block everything, except scripts, images, fonts, Ajax requests and forms to or from my domain and also allow scripts from the Google and Microsoft CDN&#39;s.</p>
<pre><code class="language-http">Content-Security-Policy: default-src &#39;none&#39;;
                         script-src &#39;self&#39; ajax.googleapis.com ajax.aspnetcdn.com;
                         style-src &#39;self&#39; &#39;unsafe-inline&#39;;
                         img-src &#39;self&#39;;
                         font-src &#39;self&#39;;
                         connect-src &#39;self&#39;;
                         form-action &#39;self&#39;;
                         report-uri /WebResource.axd?cspReport=true
</code></pre>
<p>So for example, you may only want to load CSS, JavaScript and Images from your own trusted domain(s) and block everything else. You also might want to block any use of third party plug-ins (Flash or Silverlight) or frames. Using this type of policy, the only way an attacker could compromise your site using an XSS attack, would be to somehow get a malicious script from your own domain served up on your pages in <strong>separate script files</strong> as in-line styles and scripts are not blocked by CSP by default (You can turn this off but I will go on to tell you why this is a bad idea later on).</p>
<pre><code class="language-xml">&lt;script src=&quot;http://evil.com/Script.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>With the above CSP HTTP header in place if an attacker did manage to inject the script above, browsers would throw CSP violation errors and the evil script would not be executed or even downloaded. You can see what that looks like in Chrome below.</p>
<p><img src="https://rehansaeed.com/content-security-policy-for-asp-net-mvc/images/Content-Security-Policy-Violation.png" alt="Content Security Policy Violation"></p>
<p>Even better, the browser never even downloads the evil script in the first place. You can compare the two screen-shots of Fiddler below. The left side shows that the evil Script.js file was never even requested but a Content Security Policy violation was logged to the URL highlighted (I&#39;ll talk more about this later). The right side shows the site with no CSP policy in effect. The browser tries to download the evil Script.js file and as this is just demo and I haven&#39;t gone to the trouble of setting up an evil website, it can&#39;t be found and returns a 404 Not Found.</p>
<p><img src="https://rehansaeed.com/content-security-policy-for-asp-net-mvc/images/Fiddler-Content-Security-Policy-Violation.png" alt="Fiddler Content Security Policy Violation"></p>
<p><img src="https://rehansaeed.com/content-security-policy-for-asp-net-mvc/images/Fiddler-No-Content-Security-Policy-Applied.png" alt="Fiddler No Content Security Policy Applied">
 </p>
<h2 id="content-security-policy-directives">Content Security Policy Directives</h2>
<p>There are a number of &#39;directives&#39; that are used in the policy above. Mozilla has the full list of directives and how each is used <a href="https://developer.mozilla.org/en-US/docs/Web/Security/CSP/CSP_policy_directives">here</a>. Each directive controls access to a particular function in a web browser. I will not cover each one in details as they all work in the same way but I will cover the most important and unique directives below.</p>
<h3 id="the-default-src-directive">The default-src Directive</h3>
<p>The <code>default-src</code> directive lets us apply some default restrictions. For example if I specified the following CSP policy, it would allow all types of content from my sites domain, as well as TrustedSite.com.</p>
<pre><code class="language-http">Content-Security-Policy: default-src &#39;self&#39; TrustedSite.com
</code></pre>
<p>Now the above policy is pretty loose, it tells a browser it can load frames, Ajax requests, Web Sockets, fonts, images, audio, video, plug-ins, scripts and styles from both of those domains. It may well be that you don&#39;t use most of the things on that list. A much better policy would be to block everything by default and then only allow certain resources that you actually use as shown below.</p>
<pre><code class="language-http">Content-Security-Policy: default-src &#39;none&#39;; 
                         script-src TrustedSite.com; 
                         style-src &#39;self&#39;; 
                         img-src &#39;self&#39;; 
                         font-src &#39;self&#39;; 
                         connect-src &#39;self&#39;; 
                         form-action &#39;self&#39;
</code></pre>
<p>You can see that <code>default-src</code> has been set to <code>none</code> which blocks everything by default. Then we add other directives that allow, scripts from TrustedSite.com and styles, images, fonts, Ajax request and form submissions to my sites domain. This is a lot more secure and restrictive but it does require you to think more carefully about your policy.</p>
<h3 id="the-report-uri-directive">The report-uri Directive</h3>
<p>The <code>report-uri</code> directive is another special instruction. It gives the web browser a URL where it can post details of any violations to a CSP policy in JSON format. This is vitally important and allows us to find out about anyone trying to hack our site but probably much more likely, it allows us to find out about any resources that we have accidentally blocked because our policy was too restrictive and we did not do enough testing. In the example below, we are telling the browser to post CSP violation errors in JSON format to <code>WebResource.axd?cspReport=true</code>.</p>
<pre><code class="language-http">Content-Security-Policy: default-src &#39;self&#39;; report-uri /WebResource.axd?cspReport=true
</code></pre>
<p>If we take the evil script above and try to add it to our page with the above CSP policy, we get a CSP violation error and you can see the JSON sent to us by the Chrome browser below. Please do note that different browsers do sent errors which are slightly different. Some browsers and indeed versions of browsers give more information than others.</p>
<pre><code class="language-json">{
    &quot;csp-report&quot;: {
        &quot;document-uri&quot;: &quot;http://localhost:8080/&quot;,
        &quot;referrer&quot;: &quot;&quot;,
        &quot;violated-directive&quot;: &quot;default-src &#39;self&#39;&quot;,
        &quot;effective-directive&quot;: &quot;script-src&quot;,
        &quot;original-policy&quot;: &quot;default-src &#39;self&#39;;report-uri /WebResource.axd?cspReport=true&quot;,
        &quot;blocked-uri&quot;: &quot;http://evil.com&quot;,
        &quot;status-code&quot;: 200
    }
}
</code></pre>
<h3 id="the-style-src-directive">The style-src Directive</h3>
<p>As I&#39;ve mentioned before in-line styles are not allowed when using CSP because there is a risk that an attacker could inject in-line styles into a compromised page. All styles must be referenced from external CSS files as shown below.</p>
<pre><code class="language-xml">&lt;link href=&quot;/Site.css&quot; rel=&quot;stylesheet&quot;/&gt;
</code></pre>
<pre><code class="language-xml">&lt;style&gt;
    p {
        font-size:12pt;
    }
&lt;/style&gt;
</code></pre>
<p>There is an extension to this directive which allows inline styles but you should avoid it as it is unsafe. Indeed the setting you have to pass to the <code>style-src</code> directive is called <code>unsafe-inline</code>.</p>
<pre><code class="language-http">style-src &#39;self&#39; &#39;unsafe-inline&#39;
</code></pre>
<h3 id="the-script-src-directive">The script-src Directive</h3>
<p>Just like the <code>style-src</code> directive, <code>script-src</code> directive causes inline scripts to be blocked by default due to the risk of XSS attacks. Apart from inline scripts the JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval">eval()</a> function is also blocked by default.</p>
<p>Also just like the <code>script-src</code> directive, there is a way to enable inline scripts too which is also called <code>unsafe-inline</code>. There is also another extension called <code>unsafe-eval</code>, which allows access to the <code>eval</code> function. Once again these should be avoided and I have covered them here only because you should be wary of those who tell you to use them.</p>
<pre><code class="language-http">script-src &#39;self&#39; &#39;unsafe-inline&#39; &#39;unsafe-eval&#39;
</code></pre>
<h2 id="the-content-security-policy-report-only-http-header">The Content-Security-Policy-Report-Only HTTP Header</h2>
<p>CSP can be a pretty dangerous HTTP header if you have misconfigured it. Imagine a user visiting a site and wanting to view a YouTube video on your site but your CSP policy has blocked the video and all they see is a blank space where the video should be and no indication that something is wrong, unless they are clever enough to use the browser developer tools. That&#39;s a pretty poor user experience.</p>
<p>To combat this problem the W3C created the <code>Content-Security-Policy-Report-Only</code> HTTP header. This works just the same as <code>Content-Security-Policy</code> but it only reports violations of your policy and does not cause the browser to actually block anything.</p>
<h1 id="csp-for-aspnet-mvc">CSP for ASP.NET MVC</h1>
<p>So you&#39;re sold on CSP and want to know how you can implement this great new HTTP header on your ASP.NET MVC website. Well, to get started all you need to do is install the <a href="https://www.nuget.org/packages/NWebsec.Mvc/">NWebsec.Mvc</a> NuGet package.</p>
<p><a href="https://github.com/NWebsec/NWebsec">NWebsec</a> is a great collection of MVC filters which can be applied globally to all requests or to individual controllers or actions. NWebSec contains a series of MVC filters to support CSP but includes several other filters which I&#39;ve already blogged about <a href="https://rehansaeed.com/nwebsec-asp-net-mvc-security-through-http-headers/">here</a>.</p>
<p>Here is the CSP policy I have applied to the <a href="https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d">ASP.NET Core Boilerplate</a> site and the code which is used to create it. This policy is applied to all responses from the site.</p>
<pre><code class="language-http">Content-Security-Policy: default-src &#39;none&#39;;
                         script-src &#39;self&#39; ajax.googleapis.com ajax.aspnetcdn.com;
                         style-src &#39;self&#39; &#39;unsafe-inline&#39;;
                         img-src &#39;self&#39;;
                         font-src &#39;self&#39;;
                         connect-src &#39;self&#39;;
                         form-action &#39;self&#39;;
                         report-uri /WebResource.axd?cspReport=true
</code></pre>
<pre><code class="language-cs">// Content-Security-Policy - Add the Content-Security-Policy HTTP header to enable Content-Security-Policy.
GlobalFilters.Filters.Add(new CspAttribute());
// OR
// Content-Security-Policy-Report-Only - Add the Content-Security-Policy-Report-Only HTTP header to enable logging of 
//      violations without blocking them. This is good for testing CSP without enabling it.
//      To make use of this attribute, rename all the attributes below to their ReportOnlyAttribute versions e.g. CspDefaultSrcAttribute 
//      becomes CspDefaultSrcReportOnlyAttribute.
// GlobalFilters.Filters.Add(new CspReportOnlyAttribute());

// default-src - Sets a default source list for a number of directives. If the other directives below are not used 
//               then this is the default setting.
filters.Add(
    new CspDefaultSrcAttribute()
    {
        // Disallow everything from the same domain by default.
        None = true,
        // Allow everything from the same domain by default.
        // Self = true
    });

// connect-src - This directive restricts which URIs the protected resource can load using script interfaces 
//               (Ajax Calls and Web Sockets).
filters.Add(
    new CspConnectSrcAttribute()
    {
        // Allow AJAX and Web Sockets to example.com.
        // CustomSources = &quot;example.com&quot;,
        // Allow all AJAX and Web Sockets calls from the same domain.
        Self = true
    });
// font-src - This directive restricts from where the protected resource can load fonts.
filters.Add(
    new CspFontSrcAttribute()
    {
        // Allow fonts from example.com.
        // CustomSources = &quot;example.com&quot;,
        // Allow all fonts from the same domain.
        Self = true
    });
// form-action - This directive restricts which URLs can be used as the action of HTML form elements.
filters.Add(
    new CspFormActionAttribute()
    {
        // Allow forms to post back to example.com.
        // CustomSources = &quot;example.com&quot;,
        // Allow forms to post back to the same domain.
        Self = true
    });
// img-src - This directive restricts from where the protected resource can load images.
filters.Add(
    new CspImgSrcAttribute()
    {
        // Allow images from example.com.
        // CustomSources = &quot;example.com&quot;,
        // Allow images from the same domain.
        Self = true,
    });
// script-src - This directive restricts which scripts the protected resource can execute. 
//              The directive also controls other resources, such as XSLT style sheets, which can cause the user agent to execute script.
filters.Add(
    new CspScriptSrcAttribute()
    {
        // Allow scripts from the CDN&#39;s.
        CustomSources = string.Format(&quot;ajax.googleapis.com ajax.aspnetcdn.com&quot;),
        // Allow scripts from the same domain.
        Self = true,
        // Allow the use of the eval() method to create code from strings. This is unsafe and can open your site up to XSS vulnerabilities.
        // UnsafeEval = true,
        // Allow inline JavaScript, this is unsafe and can open your site up to XSS vulnerabilities.
        // UnsafeInline = true
    });
// style-src - This directive restricts which styles the user applies to the protected resource.
filters.Add(
    new CspStyleSrcAttribute()
    {
        // Allow CSS from example.com
        // CustomSources = &quot;example.com&quot;,
        // Allow CSS from the same domain.
        Self = true,
        // Allow inline CSS, this is unsafe and can open your site up to XSS vulnerabilities.
        // Note: This is currently enable because Modernizr does not support CSP and includes inline styles
        // in its JavaScript files. This is a security hold. If you don&#39;t want to use Modernizr, 
        // be sure to disable unsafe inline styles. For more information see:
        // http://stackoverflow.com/questions/26532234/modernizr-causes-content-security-policy-csp-violation-errors
        // https://github.com/Modernizr/Modernizr/pull/1263
        UnsafeInline = true
    });
</code></pre>
<p>Notice how there is one MVC filter for each CSP directive. This is actually a very elegant solution. Consider the fact that you may want the actions in a particular controller to be able to display YouTube videos, note that YouTube makes use of iFrames to embed videos and it&#39;s embed mark-up is shown below.</p>
<pre><code class="language-html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/PGM_uBy99GA&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
</code></pre>
<p>With the above CSP policy, the Chrome browser throws the following error.</p>
<p><img src="https://rehansaeed.com/content-security-policy-for-asp-net-mvc/images/Content-Security-Policy-Violation-by-YouTube-iFrame.png" alt="Content Security Policy Violation by YouTube iFrame"></p>
<p>We need to add the <code>frame-src</code> and <code>child-src</code> directive which can be added to the specific controller. Note that the <code>child-src</code> directive is a CSP 2.0 directive and <code>frame-src</code> is deprecated in CSP 2.0 but we still need to add it for older browsers.</p>
<pre><code class="language-cs">[CspChildSrc(CustomSources = &quot;*.youtube.com&quot;)]
[CspFrameSrcAttribute(CustomSources = &quot;*.youtube.com&quot;)]
public class HomeController : Controller
{
    // Action methods ommitted.
}
</code></pre>
<p>But what if we only want to allow a YouTube video to display for a single action rather, than all of the actions in a controller. Well its as simple as moving the attributes to the action, rather than the controller.</p>
<pre><code class="language-cs">public class HomeController : Controller
{
    [CspChildSrc(CustomSources = &quot;*.youtube.com&quot;)]
    [CspFrameSrcAttribute(CustomSources = &quot;*.youtube.com&quot;)]
    public ActionResult Index()
    {
        // This view displays a YouTube Video.
        return this.View();
    }
}
</code></pre>
<p>Setting up the reporting of CSP violations is a bit more complicated. You need to add the <code>CspReportUriAttribute</code> MVC filter and add a special function in your <code>Global.asax.cs</code> file to actually handle a violation as shown below.</p>
<pre><code class="language-cs">filters.Add(new CspReportUriAttribute() { EnableBuiltinHandler = true });

// Added to Global.asax.cs
protected void NWebsecHttpHeaderSecurityModule_CspViolationReported(object sender, CspViolationReportEventArgs e)
{
    CspViolationReport violationReport = e.ViolationReport;
    // Log the CSP violation here.
}
</code></pre>
<p>The <code>CspViolationReport</code> is a representation of the JSON CSP violation that the browser sends you. It contains several properties, which can tell you about the blocked URL, the violated directive, the user agent and a lot more. This is your opportunity to log this data in your preferred logging framework.</p>
<p>One final note, all of this code is available to view on GitHub <a href="https://github.com/Dotnet-Boxed/Templates">here</a> and is part of the ASP.NET Core Boilerplate project template.</p>
<h1 id="browser-support">Browser Support</h1>
<p>CSP is a proper standard, you can read the W3C documentation <a href="http://www.w3.org/TR/CSP/">here</a>. According to the W3C at the time of writing, CSP is at <a href="http://en.wikipedia.org/wiki/World_Wide_Web_Consortium#Candidate_Recommendation_.28CR.29">Candidate Recommentation</a>, which is &quot;a version of the standard that is more firm than the Working Draft&quot; and &quot;The standard document may change further, but at this point, significant features are mostly locked&quot;.</p>
<p>If you take a look at <a href="http://caniuse.com/#search=CSP">CanIUse.com</a>, you can see that FireFox 23+, Chrome 25+, Safari 7+ and Opera 15+ already support the official <code>Content-Security-Policy</code> HTTP header, while the next version of IE (Spartan or IE12, who knows what they&#39;ll name it?) will come with full support too.</p>
<p>A number of older browser versions supported CSP using the <code>X-Content-Security-Policy</code> or <code>X-WebKit-CSP</code> HTTP header (The <code>X-</code> is commonly used to add features to browsers which are not yet finalised) but these older implementations are buggy (Their use can mean content on your site gets blocked, even though you allowed it!) and should not be used.</p>
<h1 id="content-security-policy-csp-20">Content Security Policy (CSP) 2.0</h1>
<p>There is currently an &#39;Editors Draft&#39; of <a href="https://w3c.github.io/webappsec/specs/content-security-policy/">CSP 2.0</a>, written by the W3C standards body. It was published on 13 November 2014.</p>
<p>The intention of this version is to fill a few gaps and add a few new directives which allow control over web workers, embedded frames, application manifests, the HTML documents base URL, where forms can be posted and the types of plug-ins the browser can load. <a href="https://github.com/NWebsec/NWebsec">NWebsec</a> supports most of these new directives already (except notably the plug-in types) and you can start using them today.</p>
<p>As well as these changes, CSP 2.0 also tries to address the pain points in using CSP and perhaps the reason for its slow take-up so far i.e. the inability to safely use in-line CSS and JavaScript using the style and script tags in your HTML.</p>
<p>So why would you want to use in-line styles and scripts in the first place? Well, do you use <a href="http://modernizr.com/">Modernizr</a>? Yes, well Modernizr does not work with CSP (I discuss this below). It makes use of in-line styles to test for various web browser capabilities and so requires the <code>unsafe-inline</code> directive to function. There are other libraries that also have a similar requirement. Other reasons for using in-line styles and scripts are to use CSP on an existing web application, where you don&#39;t want to spend time moving to separate script files.</p>
<p>CSP 1.0 had the <code>unsafe-inline</code> directive which allowed the use of in-line style and script tags but it is pretty dangerous and makes CSP <strong>partially</strong> pointless. It gives attackers the ability to inject code into your site (Using another vulnerability in your site if there is one) and to pull off a Cross Site Scripting (XSS) attack. Using CSP 1.0 meant loading styles and scripts from separate CSS and JavaScript files. CSP 2.0 introduces two new ways to use in-line styles and scripts.</p>
<h2 id="nonces">Nonces</h2>
<p>Nonces work a little like the <a href="http://www.asp.net/web-api/overview/security/preventing-cross-site-request-forgery-%28csrf%29-attacks">Anti-Forgery Token</a> in ASP.NET MVC. A cryptographically random string is generated and sent to the client in the CSP HTTP header, as well as in the HTML with the style or script tag like so:</p>
<pre><code class="language-http">Content-Security-Policy: default-src &#39;self&#39;; 
                         script-src &#39;self&#39; https://example.com &#39;nonce-Nc3n83cnSAd3wc3Sasdfn939hc3&#39;
</code></pre>
<pre><code class="language-xml">&lt;script&gt;
alert(&quot;Blocked because the policy doesn&#39;t have &#39;unsafe-inline&#39;.&quot;)
&lt;/script&gt;
&lt;script nonce=&quot;EDNnf03nceIOfn39fn3e9h3sdfa&quot;&gt;
alert(&quot;Still blocked because nonce is wrong.&quot;)
&lt;/script&gt;
&lt;script nonce=&quot;Nc3n83cnSAd3wc3Sasdfn939hc3&quot;&gt;
alert(&quot;Allowed because nonce is valid.&quot;)
&lt;/script&gt;
</code></pre>
<p>There is a problem however, web browsers that only support CSP 1.0, will not understand the nonce directive and will block the in-line script above. To resolve this issue, we combine the nonce with the <code>unsafe-inline</code> directive. CSP 1.0 web browsers will execute the in-line script as before (insecure but backwards compatible), but CSP 2.0 browsers will disregard &#39;unsafe-inline&#39; when they see the nonce and only execute in-line scripts with the nonce set. This gives an upgrade path for existing sites and they can benefit from CSP 2.0 without requiring a massive rewrite to get rid of in-line styles and scripts.</p>
<p>Nonces can be easily implemented by using the HTML helper provided by <a href="https://github.com/NWebsec/NWebsec">NWebSec</a>. You can find out more about how this feature is implemented in NWebSec <a href="https://github.com/NWebsec/NWebsec/wiki/Configuring-Content-Security-Policy#script-and-style-nonces-through-htmlhelpers">here</a>.</p>
<pre><code class="language-xml">&lt;script @Html.CspScriptNonce()&gt;document.write(&quot;Hello world&quot;)&lt;/script&gt;
&lt;style @Html.CspStyleNonce()&gt;
   h1 {
          font-size: 10em;
        }
&lt;/style&gt;
</code></pre>
<p>The big disadvantage with this approach is that the nonce is different for each response sent to the client. This means that you cannot cache any page using nonces. If your page is specific to a user, then you probably don&#39;t want to cache that page anyway and it doesn&#39;t matter but otherwise using nonces is not possible.</p>
<h2 id="hashes">Hashes</h2>
<p>Using hashes solves the caching problem we have with nonces. The server computes the hash of a particular style or script tags contents, and includes the base64 encoding of that value in the <code>Content-Security-Policy</code> header like so:</p>
<pre><code class="language-http">Content-Security-Policy: script-src &#39;sha512-YWIzOWNiNzJjNDRlYzc4MTgwMDhmZDlkOWI0NTAyMjgyY2MyMWJlMWUyNjc1ODJlYWJhNjU5MGU4NmZmNGU3OAo=&#39;
</code></pre>
<pre><code class="language-xml">&lt;script&gt;
&quot;alert(&#39;Hello, world.&#39;);&quot;
&lt;/script&gt;
</code></pre>
<p>As you can see, the script itself remains unchanged and only the HTTP header changes. We can now, happily cache the page with the in-line script in it. Unfortunately, at the time of writing <a href="https://github.com/NWebsec/NWebsec">NWebSec</a> does not support hashes at all. If you feel this feature is worthwhile as I do, then you can raise an issue on NWebSec&#39;s <a href="https://github.com/NWebsec/NWebsec/issues">issue list</a>.</p>
<h1 id="other-csp-support">Other CSP Support</h1>
<p>So for the reasons you&#39;ve learned above, using in-line styles and scripts is not the way to go. Apart from the fact that CSP will block them, you also cannot minify and obfuscate in-line scripts very easily using ASP.NET MVC (There are ways I have looked into but they aren&#39;t very good). So moving scripts to external CSS and JavaScript files will mean you can use CSP and you might get a small performance boost. So what&#39;s the problem? Well, CSP is not currently supported in a few major libraries.</p>
<h2 id="modernizr-support-for-csp">Modernizr Support for CSP</h2>
<p>As I&#39;ve said above <a href="http://modernizr.com">Modernizr</a> makes use of in-line styles to test for various web browser capabilities and so requires the insecure &#39;unsafe-inline&#39; directive to function. There is a <a href="https://github.com/Modernizr/Modernizr/pull/1263">fix</a> for the problem but its very old and can no longer be merged into the current branch of the Modernizr code. I would fix it myself but I&#39;m not enough of a JavaScript guru to do so. What I have done is raise <a href="http://stackoverflow.com/questions/26532234/modernizr-causes-content-security-policy-csp-violation-errors">this</a> Stack Overflow question which seeks to ask for a workaround or fix and to generally raise awareness.</p>
<p>So far, I&#39;ve received no responses from GitHub or Stack Overflow but there is hope. <a href="https://angularjs.org">AngularJS</a> (Another popular JavaScript library) has a <a href="https://docs.angularjs.org/api/ng/directive/ngCsp">CSP compatible mode</a> which makes use of an external CSS file but is very easy to set up. There is no reason why Modernizr could not have something similar. Another alternative is if NWebSec supports hashes, we can add work out the hashes of any scripts that Modernizr is using and include these in our CSP HTTP header.</p>
<h2 id="browser-link-support-for-csp">Browser Link Support for CSP</h2>
<p><a href="http://www.asp.net/visual-studio/overview/2013/using-browser-link">Browser Link</a> is a very cool Visual Studio feature that allows you to update an MVC view while debugging and hit a refresh button to refresh any browsers using that page. Unfortunately, this handy feature is not compatible with CSP because Visual Studio adds in-line scripts to the bottom of the page you are debugging. This of course, causes CSP violation errors. A simple workaround is to either introduce the <code>unsafe-inline</code> directive while debugging or turn off browser link altogether.</p>
<p>I have raised <a href="https://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/7389853-browser-link-support-for-content-security-policy">this</a> suggestion on Visual Studio&#39;s User Voice page to get the problem fixed. I understand that this area has been changed significantly in ASP.NET Core, so it may not be needed by the time we all upgrade.</p>
<h1 id="mainstream-csp-adoption">Mainstream CSP Adoption</h1>
<p>So far, not many websites in the wild have implemented CSP. I think there are a few reasons:</p>
<ol>
<li>Lack of browser support (Until now).</li>
<li>Lack of awareness by developers (Until this blog post I hope).</li>
<li>Framework providers such as Microsoft and its ASP.NET MVC have not given developers a way to implement CSP (NWebSec has stepped in here to fill this gap).</li>
<li>Prevalence of the use of in-line styles and scripts and unwillingness to switch to separate files (This is up to you).</li>
<li>Lack of support for CSP from popular CSS/JavaScript libraries due to the reason above (This is the biggest problem).</li>
<li>CSP gives us an extra layer of protection using a <a href="http://en.wikipedia.org/wiki/Defense_in_depth_%28computing%29">Defence in Depth</a> strategy. Some developers don&#39;t take web security seriously enough until they get hacked.</li>
<li>The older CSP HTTP headers (<code>X-Content-Security-Policy</code> or <code>X-WebKit-CSP</code>) were buggy or had unexpected behaviour (The <code>Content-Security-Policy</code> HTTP header no longer has this problem).</li>
<li>Developers are not making good use of the ability to report violations to their CSP policy using the <code>report-uri</code> directive. If you find a violation, you can quickly discover if someone is attacking your site, your CSP policy is not valid or you have a bug in your site.</li>
<li>Developers are scared of breaking their site because their CSP policy is too strict (This is often because CSP is being retrofitted to an existing spiders web of a site. If you start with CSP from the ground up, you will not have this problem).</li>
</ol>
<h1 id="csp-in-the-real-world">CSP in the Real World</h1>
<p>There is a really interesting white paper written in 2014 and titled &#39;<a href="http://mweissbacher.com/publications/csp_raid.pdf">Why is CSP Failing? Trends and Challenges in CSP Adoption</a>&#39; which goes over these issues I listed above in a lot more depth.</p>
<h2 id="who-is-using-csp">Who is using CSP</h2>
<p>According to the white paper, CSP is deployed in enforcement mode on only 1% of the Alexa Top 100 sites. I believe things are about to change. All major browsers now support the CSP HTTP header, <a href="https://github.com/NWebsec/NWebsec">NWebSec</a> makes it easy to add to an MVC project, this blog post tells you exactly how it works and the <a href="https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d">ASP.NET Core Boilerplate</a> project template gives you a project template that enables CSP by default, right out of the box.</p>
<p>There are big names using CSP right now. Go ahead and check the HTTP response headers from sites like Facebook, CNN, BBC, Google, Huffington Post, YouTube, Twitter and GitHub. Things have moved on from when the white-paper was written and CSP adoption is starting to gain traction. Read <a href="https://blog.twitter.com/2011/improving-browser-security-csp">Twitter</a>&#39;s case study, on adopting CSP.</p>
<h2 id="browser-extensions-and-isps">Browser Extensions and ISP&#39;s</h2>
<p>Another interesting finding from the white-paper was that browser extensions and even ISP&#39;s were injecting scripts into pages, that caused CSP violation reports. CSP may break some browser extensions that inject code into the page. You may consider this a good or bad thing. From a security point of view, what you need to ask is, do you really trust any browser extension to modify your code? I don&#39;t know about you but I don&#39;t want any extensions and especially any ISP&#39;s dirty fingers in my source code.</p>
<p>You can use SSL/TLS which will stop most ISP&#39;s from fiddling with your code but some governments get around even this! So CSP gives us some extra protection from man in the middle attacks from browser extensions and ISP&#39;s.</p>
<h2 id="csp-and-advertising">CSP and Advertising</h2>
<p>Advertising can be a problem for CSP. Some ad providers are better than others. Some providers use resources whose locations are constantly changing which can cause CSP violation errors if your policy is too strict. CNN has adopted a novel workaround for this problem. It embeds all of its adverts into frames which show pages with no CSP restrictions or at least very liberal ones.</p>
<h2 id="csp-policy-generation">CSP Policy Generation</h2>
<p>There are special web crawlers that have been created to crawl all of the links on your domain, in an attempt to generate a valid CSP policy automatically. <a href="https://github.com/Kennysan/CSPTools">CSP Tools</a> is one such project on GitHub, which given a list of URL&#39;s can crawl the web pages and generate a CSP policy. Another approach the tool uses is to look at your CSP violation error reports and come up with rules based on these.</p>
<p>Be careful using this approach however, it may not catch everything. The best approach is to build up your CSP policy as you build your site from the ground up and then carry out some testing to make sure you have got it right. You can set the CSP policy to report only mode, so that browsers don&#39;t actually block anything but do report CSP violation errors, once you are happy that no violations are being reported, you can apply your policy. Finally, you need to keep an eye out for CSP violation errors if they do occur and get them fixed as soon as you see them.</p>
<h2 id="testing-csp-policies">Testing CSP Policies</h2>
<p>The <a href="https://chrome.google.com/webstore/detail/csp-tester/ehmipebdmhlmikaopdfoinmcjhhfadlf">CSP Tester</a> Chrome extension is an example of a tool you can use to apply CSP policies to your site and view the effects in the browser console window.</p>
<p>As I&#39;ve mentioned before, the best way is to build CSP into your site as you build your site. You can use the <code>report-uri</code> directive to log any violations and get them fixed. You can also use the <code>Content-Security-Policy-Report-Only</code> HTTP header instead of <code>Content-Security-Policy</code>, to stop the browser from actually blocking anything if you are not confident in the level of testing you have done.</p>
<h1 id="conclusions">Conclusions</h1>
<p>Wow, that was a long blog post. I wanted it to be as comprehensive as possible. I hope I&#39;ve shown that now is the time to invest in implementing CSP and if you are developing a new site, then integrating CSP into it at an early stage will mean that you reap the benefits of a much greater level of security. The <a href="https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d">ASP.NET Core Boilerplate</a> project template is a great place to start and will give you a working code example which tells a thousand words on its own.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NWebSec ASP.NET MVC Security Through HTTP Headers]]></title>
        <id>https://rehansaeed.com/nwebsec-asp-net-mvc-security-through-http-headers/</id>
        <link href="https://rehansaeed.com/nwebsec-asp-net-mvc-security-through-http-headers/"/>
        <updated>2015-02-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The NWebSec NuGet packages help secure your ASP.NET MVC site using HTTP headers. The ASP.NET Core Boilerplate project template configures them our of the box.]]></summary>
        <content type="html"><![CDATA[<ul>
<li><a href="https://rehansaeed.com/asp-net-mvc-boilerplate/">ASP.NET Core Boilerplate</a></li>
<li>Security<ul>
<li><a href="https://rehansaeed.com/securing-the-aspnet-mvc-web-config/">Securing the ASP.NET MVC Web.config (Updated)</a></li>
<li><a href="https://rehansaeed.com/nwebsec-asp-net-mvc-security-through-http-headers/">NWebSec ASP.NET MVC Security Through HTTP Headers</a></li>
<li><a href="https://rehansaeed.com/content-security-policy-for-asp-net-mvc/">Content Security Policy (CSP) for ASP.NET MVC</a></li>
</ul>
</li>
<li>Search Engine Optimization (SEO)<ul>
<li><a href="https://rehansaeed.com/canonical-urls-for-asp-net-mvc/">Canonical URL&#39;s for ASP.NET MVC</a></li>
<li><a href="https://rehansaeed.com/dynamically-generating-robots-txt-using-asp-net-mvc">Dynamically Generating Robots.txt Using ASP.NET MVC</a></li>
</ul>
</li>
<li><a href="https://rehansaeed.com/internet-favicon-madness/">Internet Favicon Madness (Updated)</a></li>
<li><a href="https://rehansaeed.com/building-rssatom-feeds-for-asp-net-mvc/">Building RSS/Atom Feeds for ASP.NET MVC</a></li>
</ul>
<p>This series of blog posts goes through the additions made to the default ASP.NET MVC project template to build the <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> project template. You can create a new project using this template by installing the <a href="https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d">Visual Studio extension</a> or visit the <a href="https://github.com/Dotnet-Boxed/Templates">GitHub</a> site to view the source code.</p>
<h1 id="web-security-is-hard">Web Security is Hard</h1>
<p>Security is hard at the best of times. Web security...well...it takes things to a whole new level of difficulty. It is ridiculously easy to slip up and leave holes in your sites defences.</p>
<p>This blog post as well as the <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> project are not a replacement for your own knowledge but it does help in setting up some defaults to be more secure and giving you a few more tools out of the box to help secure your site.</p>
<p>If you have some time and want to learn more about web security I highly recommend <a href="http://www.troyhunt.com">Troy Hunt</a>&#39;s Pluralsight course called <a href="http://www.pluralsight.com/courses/hack-yourself-first">Hack yourself first</a>. Note that Pluralsight requires a paid subscription (I&#39;m quite against posting links to paid content but this course is pretty good. You can also get a trial subscription if you&#39;re interested). <a href="https://www.youtube.com/watch?v=rdHD6pVG66Q">Here</a> is a free video by Troy which covers the same topic but in a little less depth.</p>
<p>I would also, highly recommend reading up on <a href="http://www.troyhunt.com">Troy Hunt</a>&#39;s blog which has extensive examples of real life websites in the wild, written by <strong>major</strong> companies getting web security <strong>horribly</strong> wrong.</p>
<h1 id="nwebsec">NWebSec</h1>
<p>The <a href="https://github.com/NWebsec/NWebsec">NWebSec</a> NuGet packages written by <a href="http://www.dotnetnoob.com/">André N. Klingsheim</a> are a great way to add additional security to your ASP.NET MVC site. The <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> project template includes them by default.</p>
<p>Everything is preconfigured and commented as much as possible out of the box but remember this is a project template to get you started. You still need to put the effort in to customize the site security to your own requirements and put in some time learning about what each of the security features does and how best to use it.</p>
<h1 id="http-headers">HTTP Headers</h1>
<p>HTTP has been around for a very long time and so, a fairly large number of HTTP headers have been accumulated over time. Some are more useful than others but many of them are aimed at making the web more secure.</p>
<p><a href="http://www.dotnetnoob.com">André N. Klingsheim</a> has a brilliant blog post called <a href="http://www.dotnetnoob.com/2012/09/security-through-http-response-headers.html">Security through HTTP response headers</a> which is a must read and fairly comprehensive. Go on, I&#39;ll wait for you to finish reading. NWebSec provides a host of <a href="http://www.asp.net/mvc/overview/older-versions-1/controllers-and-routing/understanding-action-filters-cs">ActionFilterAttribute</a>&#39;s (The rest of this post expects you to know what these are) which can be applied in three different ways:</p>
<ol>
<li>Applied globally, so that they apply to all HTTP request/response messages.</li>
<li>Applied to individual controllers.</li>
<li>Applied to individual controller actions.</li>
</ol>
<p>NWebSec&#39;s <a href="http://www.asp.net/mvc/overview/older-versions-1/controllers-and-routing/understanding-action-filters-cs">ActionFilterAttribute</a>&#39;s add and configure specific HTTP headers. Most of them are preconfigured in <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> for you to apply globally but some require you to take action.</p>
<h2 id="x-frame-options">X-Frame-Options</h2>
<p>The <code>X-Frame-Options</code> HTTP header stops click-jacking by stopping the page from opening in an iframe or only allowing it from the same origin (your domain). There are three options to choose from:</p>
<ul>
<li><strong>SameOrigin</strong> - Specifies that the <code>X-Frame-Options</code> header should be set in the HTTP response, instructing the browser to display the page when it is loaded in an <code>iframe</code> - but only if the <code>iframe</code> is from the same origin as the page.</li>
<li><strong>Deny</strong> - Specifies that the <code>X-Frame-Options</code> header should be set in the HTTP response, instructing the browser to not display the page when it is loaded in an <code>iframe</code>.</li>
<li><strong>Disabled</strong> - Specifies that the <code>X-Frame-Options</code> header should not be set in the HTTP response.</li>
</ul>
<p>We can use NWebSec to set it to block all <code>iframe</code>&#39;s from loading the site which is the most secure option and the default option set in <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a>.</p>
<pre><code class="language-cs">// Filters is the GlobalFilterCollection from GlobalFilters.Filters
filters.Add(
    new XFrameOptionsAttribute()
    {
        Policy = XFrameOptionsPolicy.Deny
    });
</code></pre>
<p>You should note that for newer browsers, this HTTP header has become superseded by the <code>Content-Security-Policy</code> HTTP header which I will be covering in my next blog post. However, it should still be used for older browsers.</p>
<h2 id="strict-transport-security">Strict-Transport-Security</h2>
<p>This HTTP header is only relevant if you are using <a href="http://en.wikipedia.org/wiki/Transport_Layer_Security">TLS</a>. It ensures that content is loaded over HTTPS and refuses to connect in case of certificate errors and warnings. You can read a complete guide to setting up your site to run with a <strong>free</strong> TLS certificate <a href="http://www.troyhunt.com/2013/09/the-complete-guide-to-loading-free-ssl.html">here</a>.</p>
<p>NWebSec currently does not support an MVC filter that can be applied globally. Instead we can use the Owin (Using the added <code>NWebSec.Owin</code> NuGet package) extension to apply it.</p>
<pre><code class="language-cs">app.UseHsts(options =&gt; options.MaxAge(days:30).IncludeSubdomains());
</code></pre>
<p>As well as this header, MVC ships with the <a href="https://msdn.microsoft.com/en-us/library/system.web.mvc.requirehttpsattribute%28v=vs.118%29.aspx">RequireHttpsAttribute</a>. This forces an unsecured HTTP request to be re-sent over HTTPS. It does so without requiring any extra HTTP headers. Instead, this is a function of the MVC framework itself, which checks requests and simply redirects users if they send a normal HTTP request to a HTTPS URL. This attribute can be set globally (Using HTTPS throughout your site is a good idea these days) as shown below:</p>
<pre><code class="language-cs">filters.Add(new RequireHttpsAttribute());
</code></pre>
<p>Both of these lines of code have an overlapping purpose but work in different ways. The <code>RequireHttpsAttribute</code> uses the MVC framework, while the NWebSec option relies on browsers responding to the Strict-Transport-Security HTTP header. Security should be applied in thick layers, so it&#39;s worth using both features. <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> assumes you are not using TLS by default but does include the above lines of code commented out with a liberal sprinkling of comments to make it easy to add back in.</p>
<h2 id="x-content-type-options">X-Content-Type-Options</h2>
<p>This HTTP header stops IE9 and below from sniffing files and overriding the <code>Content-Type</code> header (MIME type) of a HTTP response. This filter is added by default in <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a>.</p>
<pre><code class="language-cs">filters.Add(new XContentTypeOptionsAttribute());
</code></pre>
<h2 id="x-download-options">X-Download-Options</h2>
<p>This HTTP header stops the automatic downloading and opening of your HTML pages by browsers which then go on to run the page as if it were part of your site. It and forces the user to save the page and manually open the HTML document. This filter is added by default in <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a>.</p>
<pre><code class="language-cs">filters.Add(new XDownloadOptionsAttribute());
</code></pre>
<h2 id="other-http-headers">Other HTTP Headers</h2>
<p><a href="https://github.com/NWebsec/NWebsec">NWebSec</a> provides a number of other useful HTTP headers. The <code>SetNoCacheHttpHeadersAttribute</code> helps turn off caching by applying the <code>Cache-Control</code>, Expires and Pragma HTTP headers (Expires and Pragma have been superseded by Cache-Control but still need to be applied for backward compatibility).</p>
<p>Another useful filter provided is <code>XRobotsTagAttribute</code>. This adds the <code>X-Robots-Tag</code> HTTP header, which tells robots (Google or Bing) not to index any action or controller this attribute is applied to. Note, that <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> includes a <a href="http://en.wikipedia.org/wiki/Robots_exclusion_standard">robots.txt</a> file which you should use instead of this filter but I&#39;ve added this here for completeness.</p>
<p>A good place to use these attributes would be on a page where you want to post back credit card information because caching credit card information could be a security risk and you probably don&#39;t want search engines indexing your checkout pages either.</p>
<pre><code class="language-cs">public class CheckoutController : Controller
{
    [SetNoCacheHttpHeadersAttribute, XRobotsTagAttribute(NoIndex = true, NoFollow = true)]
    public ActionResult Checkout(CardDetails cardDetails)
    {
        // Checkout customers purchases securely.
    }
}
</code></pre>
<p>The <code>CspAttribute</code> filter adds valuable support for the new <code>Content-Security-Policy</code> (CSP) HTTP header. I will be covering this extensively in my next blog post so I&#39;ve only mentioned it here. There are other HTTP headers but they turn off browser security features and I&#39;m not really sure why you would use those.</p>
<h1 id="conclusions">Conclusions</h1>
<p>In the image below, you can see the <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> site in action. I&#39;ve taken a screenshot of the HTTP response headers. You will see the ones listed in this email among them.</p>
<p><img src="https://rehansaeed.com/nwebsec-asp-net-mvc-security-through-http-headers/images/ASP.NET-MVC-Boilerplate-HTTP-Response-Headers.png" alt="ASP.NET Core Boilerplate HTTP Response Headers"></p>
<p>Using HTTP headers for security is just one extra tool in your arsenal to secure your site. As you will see in my next post about the new <a href="https://developer.mozilla.org/en-US/docs/Web/Security/CSP">Content-Security-Policy (CSP)</a> HTTP header, it can be a very powerful tool but not one to be used in isolation. You need to think about security across the whole spectrum of your site to catch all the glaring holes you may have missed.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactive Extensions (Rx) - Part 7 - Sample Events]]></title>
        <id>https://rehansaeed.com/reactive-extensions-part7-sample-events/</id>
        <link href="https://rehansaeed.com/reactive-extensions-part7-sample-events/"/>
        <updated>2014-12-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Shows how to use the Reactive Extensions (Rx) Sample method to reduce the number of subscribed events by taking a sample from them over a given time period.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/reactive-extensions-part1-replacing-events/">Reactive Extensions (Rx) - Replacing C# Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part2-wrapping-events/">Reactive Extensions (Rx) - Wrapping C# Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part3-naming-conventions/">Reactive Extensions (Rx) - Naming Conventions</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part4-replacing-timers/">Reactive Extensions (Rx) - Replacing Timers</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part5-awaiting-observables/">Reactive Extensions (Rx) - Awaiting Observables</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part6-task-toobservable/">Reactive Extensions (Rx) - Task ToObservable</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part7-sample-events/">Reactive Extensions (Rx) - Sample Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-rx-part-8-timeouts/">Reactive Extensions (Rx) - Timeouts</a></li>
</ol>
<p>Its been a while since I&#39;ve done another Rx post. They&#39;ve been pretty popular and thanks to the community for all the positive feedback. I was talking to a colleague yesterday who had been using standard C# events in WPF (The principals learned in this post can apply anywhere). He had subscribed to the <code>TextChanged</code> event in C# and was updating the user interface on the fly, whenever the user typed in a character of text. He was getting way too many events being fired and his user interface couldn&#39;t keep up with all the work it was being asked to do.</p>
<pre><code class="language-cs">this.TextBox.TextChanged += this.OnTextBoxTextChanged;

private void OnTextBoxTextChanged(object sender, TextChangedEventArgs e)
{
    // Heavy User Interface updates that can cause the application to lock up.
}
</code></pre>
<p>This is a very common scenario which I myself have come across several times. The solution to this problem is to take a sample of the events being fired and only update the user interface every few seconds. This is possible without Reactive Extensions (Rx) but you have to write a fair amount of boilerplate code (I know, I&#39;ve done it myself).</p>
<p>Reactive Extensions (Rx) can do this with a few easy to understand (This is the real bonus) lines of code. The first step is to wrap the WPF <code>TextChanged</code> event (I&#39;ve shown how to do this in a previous post <a href="https://rehansaeed.com/reactive-extensions-part2-wrapping-events/">here</a>).</p>
<pre><code class="language-cs">public IObservable&lt;TextChangedEventArgs&gt; WhenTextChanged
{
    get
    {
        return Observable
            .FromEventPattern&lt;TextChangedEventHandler, TextChangedEventArgs&gt;(
                h =&gt; this.TextBox.TextChanged += h,
                h =&gt; this.TextBox.TextChanged -= h)
            .Select(x =&gt; x.EventArgs);
    }
}

this.WhenTextChanged
    .Sample(TimeSpan.FromSeconds(3))
    .Subscribe(x =&gt; Debug.WriteLine(DateTime.Now + &quot; Text Changed&quot;));
</code></pre>
<p>The final and most succinct step is to use the Sample method to only pick out the latest text changed event every three seconds and pass that on to the <code>Subscribe</code> delegate. It really is that easy and this blog post really is this short because of that!</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Securing the ASP.NET MVC Web.config]]></title>
        <id>https://rehansaeed.com/securing-the-aspnet-mvc-web-config/</id>
        <link href="https://rehansaeed.com/securing-the-aspnet-mvc-web-config/"/>
        <updated>2014-12-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The web.config file is insecure in the default ASP.NET MVC project template. This post talks you through securing the ASP.NET MVC Web.config file.]]></summary>
        <content type="html"><![CDATA[<ul>
<li><a href="https://rehansaeed.com/asp-net-mvc-boilerplate/">ASP.NET Core Boilerplate</a></li>
<li>Security<ul>
<li><a href="https://rehansaeed.com/securing-the-aspnet-mvc-web-config/">Securing the ASP.NET MVC Web.config (Updated)</a></li>
<li><a href="https://rehansaeed.com/nwebsec-asp-net-mvc-security-through-http-headers/">NWebSec ASP.NET MVC Security Through HTTP Headers</a></li>
<li><a href="https://rehansaeed.com/content-security-policy-for-asp-net-mvc/">Content Security Policy (CSP) for ASP.NET MVC</a></li>
</ul>
</li>
<li>Search Engine Optimization (SEO)<ul>
<li><a href="https://rehansaeed.com/canonical-urls-for-asp-net-mvc/">Canonical URL&#39;s for ASP.NET MVC</a></li>
<li><a href="https://rehansaeed.com/dynamically-generating-robots-txt-using-asp-net-mvc">Dynamically Generating Robots.txt Using ASP.NET MVC</a></li>
</ul>
</li>
<li><a href="https://rehansaeed.com/internet-favicon-madness/">Internet Favicon Madness (Updated)</a></li>
<li><a href="https://rehansaeed.com/building-rssatom-feeds-for-asp-net-mvc/">Building RSS/Atom Feeds for ASP.NET MVC</a></li>
</ul>
<p>Security is a big subject in the web world. Largely because it&#39;s super easy to leave your site insecure and open to attack. The default ASP.NET MVC project template is pretty weak when it comes to security. It trades security for simplicity. The <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> project template, shifts that balance more in favour of security while still trying to be as simple as possible. Several insecure settings in the Web.config file have been changed and made secure by default.</p>
<p>This series of blog posts goes through the additions made to the default ASP.NET MVC template to build the <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> project template. You can create a new project using this template by installing the <a href="https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d">Visual Studio template extension</a> or visit the <a href="https://github.com/Dotnet-Boxed/Templates">GitHub</a> site to view the source code.</p>
<h1 id="securing-webconfig">Securing Web.config</h1>
<h2 id="turn-on-custom-errors">Turn On Custom Errors</h2>
<p>In the early stages of development, you want to see the full stack trace of your exceptions when an error occurs on a page. When it comes to releasing your site, you need to hide this sensitive information. Unbelievably, the default ASP.NET MVC template leaves this sensitive information wide open. To hide this, you need to add the <a href="http://msdn.microsoft.com/en-us/library/vstudio/h0hfz6fc%28v=vs.100%29.aspx">customErrors</a> section to your <code>web.config</code> file and turn it on.</p>
<p>The problem is that we still want this setting to be turned off when debugging. This is where <a href="http://go.microsoft.com/fwlink/?LinkId=301874">configuration file transforms</a> come in. This setting is off when the solution configuration is <code>Debug</code> and on when it is <code>Release</code>. The debug attribute in the compilation section is set in the same way.</p>
<h2 id="securing-cookies">Securing Cookies</h2>
<p>By default JavaScript from external sites can access the cookies from the default ASP.NET MVC template. They can also be sent unencrypted over the wire, because they don&#39;t use SSL. The <a href="http://msdn.microsoft.com/en-us/library/vstudio/ms228262%28v=vs.100%29.aspx">httpCookies</a> section can be added to secure your cookies (This can also be done in code but the point is that we are making it secure by default. You could easily forget to turn this on in code).</p>
<pre><code class="language-xml">&lt;!-- httpOnlyCookies - Ensure that external script cannot access the cookie. --&gt;
&lt;!-- requireSSL - Ensure that the cookie can only be transported over SSL. --&gt;
&lt;httpCookies httpOnlyCookies=&quot;true&quot; requireSSL=&quot;false&quot; /&gt;
</code></pre>
<p>By default we set <code>requireSSL</code> to false because we don&#39;t know if you are going to use SSL in your site or not. If you are using SSL, you need to turn this on.</p>
<h2 id="shut-aspnets-mouth">Shut ASP.NET&#39;s Mouth</h2>
<p>By default ASP.NET shouts about itself a lot. It sends HTTP headers with each response telling the world and dog what version of ASP.NET your site is hosted on and even what version of MVC you are using. Below is an example of the extra headers needlessly being sent with every request:</p>
<p><img src="https://rehansaeed.com/securing-the-aspnet-mvc-web-config/images/ASPNET-Response-Headers.png" alt="ASP.NET Response Headers"></p>
<p>To fix this problem you need to do a few things. The first is to set the <code>enableVersionHeader</code> setting on the <code>httpRuntime</code> section to false.</p>
<pre><code class="language-xml">&lt;!-- enableVersionHeader - Remove the ASP.NET version number from the response headers. Added security through obscurity. --&gt;
&lt;httpRuntime targetFramework=&quot;4.5&quot; enableVersionHeader=&quot;false&quot; /&gt;
</code></pre>
<p>Second, you need to clear the custom headers as shown below.</p>
<pre><code class="language-xml">&lt;httpProtocol&gt;
  &lt;customHeaders&gt;
    &lt;!-- X-Powered-By - Remove the HTTP header for added security and a slight performance increase. --&gt;
    &lt;clear /&gt;
  &lt;/customHeaders&gt;
&lt;/httpProtocol&gt;
</code></pre>
<p><a href="http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html">Troy Hunt</a> is a great MVC security guru and definitely worth a read on this subject.</p>
<h2 id="aspnet-session-cookie">ASP.NET Session Cookie</h2>
<p>We rename the ASP.NET session cookie from its default name of <code>ASP.NET_SessionId</code> to <code>s</code>. Now, users of our site, no longer have any idea what web server we are using (There are still ways to find out but we are making it harder) and we save a few more bytes being sent over the wire because we have a shorter name.</p>
<pre><code class="language-xml">&lt;!-- cookieName - Sets the name of the ASP.NET session cookie (Defaults to &#39;ASP.NET_SessionId&#39;). --&gt;
&lt;sessionState cookieName=&quot;s&quot; /&gt;
</code></pre>
<h2 id="maximum-url-request-length">Maximum URL Request Length</h2>
<p>By default, ASP.NET MVC allows 4096 characters in the request URL. This is to reduce the effects of denial of service attacks. You can reduce this limit further by setting the <code>maxRequestLength</code> setting on the <code>httpRuntime</code> section. The template does not do this by default but does include a comment highlighting this.</p>
<pre><code class="language-xml">&lt;!-- maxRequestLength=&quot;4096&quot; - The maximum length of the url request in kilobytes. --&gt;
&lt;httpRuntime maxRequestLength=&quot;4096&quot;/&gt;
</code></pre>
<h2 id="machine-keys">Machine Keys</h2>
<p>Machine keys are used by MVC to generate anti-forgery tokens, which you should be using with any form on your site. If your site is deployed to a server cluster, you need to generate a machine key and add it to the system.web section of your <code>web.config</code> file. This is to ensure that both machines in your server cluster are using the same machine key to generate anti-forgery tokens. <a href="http://blogs.msdn.com/b/amb/archive/2012/07/31/easiest-way-to-generate-machinekey.aspx">This</a> link tells you more about how to do this.</p>
<pre><code class="language-xml">&lt;machineKey decryptionKey=&quot;[YOUR DECRYPTION KEY GOES HERE]&quot; validationKey=&quot;[YOUR VALIDATION KEY GOES HERE]&quot;/&gt;
</code></pre>
<h2 id="securing-third-party-plugins">Securing Third Party Plugins</h2>
<p>The popular <a href="https://code.google.com/p/elmah/">Elmah</a> NuGet package is included and configured for error logging out of the box. However, to properly secure it, you should change the URL pointing to it (An attacker can only probe your Elmah page for vulnerabilities if they can find it). You should also use some form of authentication to limit the Elmah page to certain roles or users. Both of these steps can only be taken by the person using the template. However, where we can&#39;t write the code for you, we add liberal comments and add an entry into the check-list so you don&#39;t forget to do this. By default we also allow remote access to the Elmah pages, consider turning this off if you have local access to machine the site is hosted on. Here are the relevant app settings:</p>
<pre><code class="language-xml">&lt;!-- In case of authentication is turned on, you can specify exact roles of user that have access (eg. &quot;Administrator&quot;). --&gt;
&lt;add key=&quot;elmah.mvc.allowedRoles&quot; value=&quot;*&quot; /&gt;
&lt;!-- In case of authentication is turned on, you can specify exact users that have access (eg. &quot;johndoe&quot;). --&gt;
&lt;add key=&quot;elmah.mvc.allowedUsers&quot; value=&quot;*&quot; /&gt;
&lt;!-- Configure ELMAH.MVC access route. Note that you should probably change this to something else. 
     This is to add a little security through obscurity. hackers can&#39;t hack your elmah page if they 
     don&#39;t know where it is. --&gt;
&lt;add key=&quot;elmah.mvc.route&quot; value=&quot;elmah&quot; /&gt;
</code></pre>
<p><a href="http://getglimpse.com/">Glimpse</a> is another great tool to help with debugging and diagnostics for your site. Like Elmah, Glimpse has it&#39;s own URL which you should rename. Glimpse is turned off in &#39;Release&#39; mode for security reasons but you could keep it turned on and use authentication to limit who can access it. The relevant section for Glimpse is shown below.</p>
<pre><code class="language-xml">&lt;!-- glimpse - Navigate to {your site}/glimpse and turn on Glimpse to see detailed information about your site.
               (See http://getglimpse.com/ for a video about how this helps with debugging).
               You can also install addons for Glimpse to see even more information. E.g. Install the Glimpse.EF6
               NuGet package to see your SQL being executed (See http://getglimpse.com/Extensions for all Glimpse extensions).
               For more information on how to configure Glimpse, please visit http://getglimpse.com/Help/Configuration
               or access {your site}/glimpse for even more details and a Configuration Tool to support you. 
               Note: To change the glimpse URL, change the value in endpointBaseUri and also the glimpse URL under 
               httpHandlers and handlers sections above. --&gt;
&lt;glimpse defaultRuntimePolicy=&quot;On&quot; endpointBaseUri=&quot;~/glimpse&quot;&gt;
&lt;/glimpse&gt;
</code></pre>
<h1 id="securing-anti-forgery-tokens">Securing Anti-Forgery Tokens</h1>
<p>I&#39;m not quite sure why but configuring the ASP.NET MVC anti-forgery tokens cannot be done in the <code>web.config</code> file. The following code can be found in the <code>Global.asax.cs</code> file.</p>
<pre><code class="language-cs">private static void ConfigureAntiForgeryTokens()
{
    // Rename the Anti-Forgery cookie from &quot;__RequestVerificationToken&quot; to &quot;f&quot;. 
    // This adds a little security through obscurity and also saves sending a 
    // few characters over the wire.
    AntiForgeryConfig.CookieName = &quot;f&quot;;

    // If you have enabled SSL. Uncomment this line to ensure that the Anti-Forgery 
    // cookie requires SSL to be sent accross the wire. 
    // AntiForgeryConfig.RequireSsl = true;
}
</code></pre>
<p>We are renaming the anti-forgery cookie from <code>__RequestVerificationToken</code> to <code>f</code>. This saves a few bytes and obscures the technology we are using a little. You can also require SSL for the anti-forgery cookie to be sent over the wire. This is commented out by default but if you are using SSL, set this to true for added security.</p>
<h1 id="update-removing-tracing">(UPDATE) Removing Tracing</h1>
<p>Enabling <a href="https://msdn.microsoft.com/en-us/library/ms972204.aspx">tracing</a> while debugging your site is a fairly common occurrence. It can be done with a single line of config:</p>
<pre><code class="language-xml">&lt;system.web&gt;
  &lt;trace enabled=&quot;true&quot;/&gt;
&lt;/system.web&gt;
</code></pre>
<p>Your tracing information can be easily views by navigating to <code>http://YourSite/trace.axd</code> as shown here:</p>
<p><img src="https://rehansaeed.com/securing-the-aspnet-mvc-web-config/images/Trace.axd_.png" alt="ASP.NET Tracing Trace.axd Page"></p>
<p>The security angle on tracing is two-fold. First is the most obvious, you could leave the trace.axd page open to anyone who knows to try that URL on your site. Thus, leaking valuable inside information about your site, as well as the version of ASP.NET and .NET you are using. The fix for this is simple, you just need to remember to remove the tracing node from your <code>web.config</code> file.</p>
<p>Once again, you can use <a href="http://go.microsoft.com/fwlink/?LinkId=301874">configuration file transforms</a> to fix this problem. In your <code>Web.Release.config</code> file, you can add the following code to remove tracing but only when the site is built in release mode:</p>
<pre><code class="language-xml">&lt;system.web&gt;
  &lt;!-- customErrors - Turn on custom error pages instead of ASP.NET errors containing stack traces which are a security risk. --&gt;
  &lt;customErrors xdt:Transform=&quot;SetAttributes(mode)&quot; mode=&quot;On&quot;/&gt;
  &lt;!-- compilation - Turn off debug compilation. --&gt;
  &lt;compilation xdt:Transform=&quot;RemoveAttributes(debug)&quot; /&gt;
  &lt;!-- trace - Turn off tracing, just in case it is turned on for debugging. --&gt;
  &lt;trace xdt:Transform=&quot;Remove&quot; /&gt;
&lt;/system.web&gt;
</code></pre>
<p>The second problem is that even if you do this, accessing <code>http://YourSite/trace.axd</code> causes a 500 Internal Server Error on your site! This gives an attacker a clue that you are using ASP.NET. The correct thing to do is for the site to respond with a 404 Not Found error page instead. It turns out that in release mode you have to remove the tracing <a href="https://msdn.microsoft.com/en-us/library/bb398986%28v=vs.140%29.aspx">HTTP handlers</a> altogether to stop your site responding to this URL. You can do that by adding the following snippet to the <code>Web.Release.config</code> file:</p>
<pre><code class="language-xml">&lt;system.webServer&gt;
  &lt;!-- remove TraceHandler-Integrated - Remove the tracing handlers so that navigating to /trace.axd gives us a 
       404 Not Found instead of 500 Internal Server Error. --&gt;
  &lt;handlers&gt;
    &lt;remove xdt:Transform=&quot;Insert&quot; name=&quot;TraceHandler-Integrated&quot; /&gt;
    &lt;remove xdt:Transform=&quot;Insert&quot; name=&quot;TraceHandler-Integrated-4.0&quot; /&gt;
  &lt;/handlers&gt;
&lt;/system.webServer&gt;
</code></pre>
<h1 id="update-40314-forbidden-responses-to-directories">(UPDATE) 403.14 Forbidden Responses to Directories</h1>
<p>Navigating to a directory using IIS and ASP.NET MVC can cause a 403 Forbidden response to be returned. Actually, its a 403.<strong>14</strong> Forbidden response to be exact. IIS is basically telling us that <a href="http://www.iis.net/configreference/system.webserver/directorybrowse">directory browsing</a> is disabled (As it should be, directory browsing is a severe security risk. It can allow attackers to see your Web.config file with all your connection strings in it!). You can see what happens when I navigate to the physical <code>/Content</code> folder below:</p>
<p><img src="https://rehansaeed.com/securing-the-aspnet-mvc-web-config/images/403.14-Forbidden-Response.png" alt="403.14 Forbidden Response"></p>
<p>So what is the problem? Well, a user would expect a 404 Not Found response if a resource is not found. A 403.14 Forbidden response tells a potential attacker that there is a folder there and that you are using IIS. Not the most useful information to an attacker but combine it with other information and it could be useful. The way to fix this is to handle 403.14 errors and replace the response with a standard 404 Not Found. We just need to add the code below:</p>
<pre><code class="language-xml">&lt;system.webServer&gt;
  &lt;!-- Custom error pages --&gt;
  &lt;httpErrors errorMode=&quot;Custom&quot; existingResponse=&quot;Replace&quot;&gt;
    &lt;!-- Redirect IIS 403.14 Forbidden responses to the error controllers not found action.
         A 403.14 happens when navigating to an empty folder like /Content and directory browsing is turned off
         See http://www.troyhunt.com/2014/09/solving-tyranny-of-http-403-responses.html --&gt;
    &lt;error statusCode=&quot;403&quot; subStatusCode=&quot;14&quot; responseMode=&quot;ExecuteURL&quot; path=&quot;/error/notfound&quot; /&gt;
    &lt;!-- ...Ommitted Code... --&gt;
  &lt;/httpErrors&gt;
&lt;/system.webServer&gt;
</code></pre>
<p>Just adding this is not enough however. If I fire up <a href="http://www.telerik.com/fiddler">Fiddler</a> Navigating to the <code>/Content</code> folder of the site now results in a 301 Document Moved response, followed by a 404 Not Found. We can do much better than that.</p>
<p><img src="https://rehansaeed.com/securing-the-aspnet-mvc-web-config/images/301-Courtesy-Redirect.png" alt="Fiddler 301 Courtesy Redirect"></p>
<p>To get around the above issue, you need to turn off <a href="http://www.iis.net/configreference/system.webserver/defaultdocument">default document handling</a> in IIS. Please do note, that this will stop IIS from returning the default document (Using whats called a courtesy redirect) when navigating to a folder e.g. navigating to <code>/Folder</code> which contains an <code>index.html</code> file will not return <code>/Folder/index.html</code>. This should not be a problem as we are using ASP.NET MVC controllers and actions and not physical files.</p>
<pre><code class="language-xml">&lt;system.webServer&gt;
  &lt;!-- Stop IIS from doing courtesy redirects used to redirect a link to a directory without
       to a slash to one with a slash e.g. /Content redirects to /Content/. This gives a clue
       to hackers as to the location of directories. --&gt;
  &lt;defaultDocument enabled=&quot;false&quot;/&gt;
&lt;/system.webServer&gt;
</code></pre>
<p>Now, navigating to <code>/Content</code> will return us a simple and correct 404 Not Found and we don&#39;t have the courtesy redirect any-more too. Take a look at the same request in Fiddler:</p>
<p><img src="https://rehansaeed.com/securing-the-aspnet-mvc-web-config/images/Fiddler-404-Not-Found.png" alt="Fiddler 404 Not Found"></p>
<h1 id="conclusions">Conclusions</h1>
<p>IIS seems to have a lot of strange behaviours that have a detrimental effect on security. If you use the above settings however, you can cut out IIS&#39;s extra features that you don&#39;t need or want. Look out for the next post when I&#39;ll be discussing the very cool <a href="https://github.com/NWebsec/NWebsec">NWebSec</a> NuGet package, which provides a whole host of comprehensive ASP.NET MVC security related filters which you can apply to your site.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Configuration File Transforms In Visual Studio Should Be Built In]]></title>
        <id>https://rehansaeed.com/configuration-file-transforms-in-visual-studio-should-be-built-in/</id>
        <link href="https://rehansaeed.com/configuration-file-transforms-in-visual-studio-should-be-built-in/"/>
        <updated>2014-12-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Configuration File Transforms can be done with the Slow Cheetah Visual Studio extension by Sayed Hashimi. This feature should be built into Visual Studio.]]></summary>
        <content type="html"><![CDATA[<p>::: tip Update 1
I should point out that configuration file transforms have been available for some time for web projects <strong>only</strong>. I believe the feature was developed by the web team within Microsoft. This fact just makes it more strange, that this feature was not rolled out to the masses.
:::</p>
<p>::: tip Update 2
Microsoft has just announced on their <a href="http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/2043217-support-web-config-style-transforms-on-any-file-in">UserVoice</a> site that SlowCheetah will be updated for Visual Studio 2015 and future versions will indeed have configuration file transforms built in! That&#39;s great news and shows another example of Microsoft listening to its developers.
:::</p>
<h1 id="introduction">Introduction</h1>
<p>I have used a number of IDE&#39;s in my time as a developer, from bare bones text editors like <a href="http://www.sublimetext.com/">Sublime</a> (Which you should seriously consider purchasing. It beats the pants off of notepad and most notepad competitors) to fully fledged development environments like <a href="https://netbeans.org/">Netbeans</a> and Visual Studio. It has to be said though that Microsoft does a much better job than most and packs a lot of power into their punch.</p>
<p>It is with puzzlement and confusion then that something as useful and common as transforms for configuration files (.config) are still not supported by Microsoft. You may be wondering what I&#39;m babbling about. Well, every developer at some point has had to release their application on more than one environment, even if it&#39;s just your own development machine and wherever your application is released. In the past I&#39;ve worked with as many as four distinct environments. Each with it&#39;s own application settings, database connection strings and other settings stored in .config files. In the past, this has been a nightmare.</p>
<h1 id="slow-cheetah">Slow Cheetah</h1>
<p>Happily though, someone named <a href="https://github.com/sayedihashimi">Sayed Hashimi</a> working for Microsoft has unofficially created a Visual Studio extension called <a href="https://visualstudiogallery.msdn.microsoft.com/69023d00-a4f9-4a34-a6cd-7e854ba318b5">Slow Cheetah</a>. Go ahead, read through, that page if you haven&#39;t already, I&#39;m not going to describe the genius that is Slow Cheetah here (I&#39;m not just talking about the ironic name, which I quite like. Sayed Hashimi seems to have a gift for odd names, as he is also a developer for the <a href="http://sidewaffle.com/">Side Waffle</a> project).</p>
<p>Unfortunately, according to <a href="https://github.com/sayedihashimi/slow-cheetah/issues/158">this</a> post, Slow Cheetah is no longer going to be supported in future versions of Visual Studio. His reasons for dropping support are interesting. In the first paragraph, he suggests that the existence of Slow Cheetah has stopped Microsoft from building configuration file transforms into Visual Studio in the first place.</p>
<h1 id="what-now">What Now</h1>
<p>It&#39;s been a few months since Sayed&#39;s post on GitHub. While I&#39;m sure the community will step in and keep the tool updated for future versions of Visual Studio, this is really something that should have been built in to Visual Studio years ago!</p>
<p>Don&#39;t despair, there is hope. On the <a href="http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/2043217-support-web-config-style-transforms-on-any-file-in?page=17&amp;per_page=20">Visual Studio User Voice</a> site, there is a suggestion to support configuration file transforms out of the box. What&#39;s more, is that the suggestion is currently number seven in the list of &#39;hot&#39; ideas and number three if you remove the ideas that Microsoft have already commented on. Please do go and vote for this suggestion, Microsoft does read and more importantly act on them.</p>
<p>I spent some time a year ago teaching a junior developer the new C# async and await feature, as well as the Task Parallel Library (TPL). Not only did it blow his mind but I realized that so much that I had learned had now become obsolete and that this new developer would never have to struggle with asynchronous code as I had. In my opinion, this feature is another one of those moments when we can consign another series of old method to the dustbin of history. We just need to help Microsoft know about it.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Custom Visual Studio Project Templates]]></title>
        <id>https://rehansaeed.com/custom-visual-studio-project-templates/</id>
        <link href="https://rehansaeed.com/custom-visual-studio-project-templates/"/>
        <updated>2014-12-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A guide to creating custom Visual Studio project templates in .zip and VSIX form and submitting them to the Visual Studio Gallery, so it can be downloaded.]]></summary>
        <content type="html"><![CDATA[<p>Creating a custom Visual Studio project template that you can use from the &#39;New Project&#39; dialogue is a great way to reduce the amount of repetitive code you have to write. It gets you running through the jungle with the leaves brushing against your face, instead of sitting at the starting block wondering where your shoes are.</p>
<p>The <a href="https://visualstudiogallery.msdn.microsoft.com">Visual Studio Gallery</a> is a great place to share your custom Visual Studio project template with the community. There are actually two ways to create a template. I recently had to create one for <a href="https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d">ASP.NET Core Boilerplate</a> and found it less than simple. This post talks you through creating one and submitting it to the Visual Studio Gallery, allowing anyone to use it from the &#39;New Project&#39; dialogue.</p>
<p><img src="https://rehansaeed.com/custom-visual-studio-project-templates/images/VisualStudioGallery2.png" alt="The project template shown in the &#39;Web&#39; section of Visual Studio&#39;s &#39;New Project&#39; dialogue."></p>
<p>The project template shown in the &#39;Web&#39; section of Visual Studio&#39;s &#39;New Project&#39; dialogue.</p>
<h1 id="export-template-as-zip">Export Template as .zip</h1>
<p>The first method of creating a custom project template is to use the &#39;Export Template&#39; wizard in Visual Studio, as shown in the steps below, you can create a <code>.zip</code> file which contains a template of your selected project.</p>
<p><img src="https://rehansaeed.com/custom-visual-studio-project-templates/images/ExportTemplate1.png" alt="Export .zip Project Template"></p>
<p>The Visual Studio Export Template menu item for exporting a <code>.zip</code> project template.</p>
<p>The wizard allows you to select the project from your solution you want to export as a template.</p>
<p><img src="https://rehansaeed.com/custom-visual-studio-project-templates/images/ExportTemplate2.png" alt="The export template &#39;Choose template type&#39; screen."></p>
<p>The export template &#39;Choose template type&#39; screen.</p>
<p>You can even specify an icon and preview image of the project template. This is perfect as this information also gets displayed in the Visual Studio &#39;New Project&#39; dialogue.</p>
<p><img src="https://rehansaeed.com/custom-visual-studio-project-templates/images/ExportTemplate3.png" alt="The export template &#39;Select template options&#39; screen, where you can describe your template."></p>
<p>The export template &#39;Select template options&#39; screen, where you can describe your template.</p>
<p>The <code>.zip</code> file that is output must be copied into the following folder, for Visual Studio to pick it up:</p>
<pre><code>C:/Users/[Your User Name]/Documents/Visual Studio [2010|2012|2013|2015]/Templates/ProjectTemplates
</code></pre>
<p><img src="https://rehansaeed.com/custom-visual-studio-project-templates/images/ExportTemplate4.png" alt="The .zip file output as part of the Visual Studio Export Template wizard."></p>
<p>The <code>.zip</code> file output as part of the Visual Studio Export Template wizard.</p>
<p>This is a super easy process and you should really consider creating your own templates if you find yourself making the same old changes to every project you are creating. The downside is that its not very customizable and these types of project templates cannot be submitted to the <a href="https://visualstudiogallery.msdn.microsoft.com">Visual Studio Gallery</a>.</p>
<p>The gallery website only supports project templates created using the VSIX package. Creating a VSIX package is a pretty involved process and will take a couple of hours.</p>
<h1 id="export-template-wizard-extension">Export Template Wizard Extension</h1>
<p><a href="https://visualstudiogallery.msdn.microsoft.com/57320b20-34a2-42e4-b97e-e615c71aca24">This</a> Visual Studio extension claims to support exporting your projects into VSIX packages using a simple wizard interface. Unfortunately, this tool is only available for Visual Studio 2010 and the Microsoft developers of the extension seem to have stopped further development.</p>
<p>This is a real shame. Here we have an excellent tool which the community really needs. A tool that makes creating a VSIX project template package, a matter of a few clicks. This should be built into Visual Studio out of the box!</p>
<h1 id="sidewaffle-project-templates">SideWaffle Project Templates</h1>
<p>There is even an alternative method of creating project templates and sharing them with the community that I should mention. It&#39;s called <a href="http://sidewaffle.com">SideWaffle</a> (I like the name for some reason). It makes it slightly easier to create a template but its still not as simple as a few clicks. It&#39;s certainly something worth taking a look at though.</p>
<h1 id="creating-a-vsix-package">Creating a VSIX Package</h1>
<p>The first step is to create a <code>.zip</code> project template package using the steps above. Once you&#39;ve done that, download and install the <a href="https://www.microsoft.com/en-us/download/details.aspx?id=40758">Microsoft Visual Studio 2013 SDK</a>. This will give you new project templates to create VSIX packages. The first thing to do is create a new C# Project Template (Or a Visual Basic one if you prefer).</p>
<p><img src="https://rehansaeed.com/custom-visual-studio-project-templates/images/ExportVSIX1.png" alt="The new project dialogue, showing how to create a new VSIX C# project."></p>
<p>The new project dialogue, showing how to create a new VSIX C# project.</p>
<p>The next step is to open the <code>.zip</code> version of your project template and copy the contents into your new project. Copy everything (Including the project file), except the &#39;Properties&#39; folder as this will conflict with the existing one in the project.</p>
<p><img src="https://rehansaeed.com/custom-visual-studio-project-templates/images/ExportVSIX2.png" alt="An example of a VSIX C# project from the ASP.NET Core Boilerplate project template."></p>
<p>An example of a VSIX C# project from the ASP.NET Core Boilerplate project template.</p>
<p>Select all the files in the project and in the properties window, ensure that their &#39;Build Action&#39; is set to &#39;Content&#39;.</p>
<p><img src="https://rehansaeed.com/custom-visual-studio-project-templates/images/ExportVSIX3.png" alt="The properties window for a file in a VSIX C# project. Note, that the file build action has been set to &#39;Content&#39;."></p>
<p>The properties window for a file in a VSIX C# project. Note, that the file build action has been set to &#39;Content&#39;.</p>
<p>The <code>.vstemplate</code> file in the project contains all the information about the contents of the project template. If you select it and go to the &#39;Properties&#39; window, you can set the &#39;Category&#39; property which determines where your project template will appear in the &#39;New Project&#39; dialogue.</p>
<p><img src="https://rehansaeed.com/custom-visual-studio-project-templates/images/ExportVSIX4.png" alt="The category a VSIX C# project is displayed under, in the Visual Studio New Project dialogue."></p>
<p>The category a VSIX C# project is displayed under, in the Visual Studio New Project dialogue.</p>
<p>An example of the <code>.vstemplate</code> file is shown below. Note, that I&#39;ve set the project template name, description and the default name of the project which is shown in the &#39;New Project&#39; dialogue and the user can rename. The XML then goes on to declare the name of the <code>.csproj</code> file in the <code>Project</code> node, followed by each and every file and folder to be included in the template.</p>
<p>Note, that the <code>AssemblyInfo.cs</code> file is a little special. There are two of them in the project. The one we are interested in was already located in the root of the project when we created it. We also need to add it to the XML below slightly differently than the other files (See below).</p>
<p>You can use the <code>OpenInWebBrowser</code> or <code>OpenInEditor</code> attributes on a <code>ProjectItem</code> to get the file to be opened in a web browser or text editor when the project is first created. I&#39;ve used <code>OpenInWebBrowser</code> to open the <code>ReadMe.html</code> file containing basic information about the project, when the project is first created.</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;VSTemplate Version=&quot;3.0.0&quot; Type=&quot;Project&quot; xmlns=&quot;http://schemas.microsoft.com/developer/vstemplate/2005&quot; xmlns:sdk=&quot;http://schemas.microsoft.com/developer/vstemplate-sdkextension/2010&quot;&gt;
  &lt;TemplateData&gt;
    &lt;Name&gt;ASP.NET Core Boilerplate&lt;/Name&gt;
    &lt;Description&gt;A professional ASP.NET MVC template for building secure, fast, robust and adaptable web applications or sites. It provides the minimum amount of code required on top of the default MVC template provided by Microsoft. Find out more at RehanSaeed.com&lt;/Description&gt;
    &lt;Icon&gt;MvcBoilerplateTemplate.ico&lt;/Icon&gt;
    &lt;ProjectType&gt;CSharp&lt;/ProjectType&gt;
    &lt;RequiredFrameworkVersion&gt;4.5&lt;/RequiredFrameworkVersion&gt;
    &lt;SortOrder&gt;1000&lt;/SortOrder&gt;
    &lt;TemplateID&gt;f2d50b53-cff3-41b4-8481-dac14c18ea48&lt;/TemplateID&gt;
    &lt;CreateNewFolder&gt;true&lt;/CreateNewFolder&gt;
    &lt;DefaultName&gt;WebProject&lt;/DefaultName&gt;
    &lt;ProvideDefaultName&gt;true&lt;/ProvideDefaultName&gt;
  &lt;/TemplateData&gt;
  &lt;TemplateContent&gt;
    &lt;Project File=&quot;MvcBoilerplate.csproj&quot; ReplaceParameters=&quot;true&quot;&gt;
      &lt;ProjectItem ReplaceParameters=&quot;true&quot; TargetFileName=&quot;Properties%5CAssemblyInfo.cs&quot;&gt;AssemblyInfo.cs&lt;/ProjectItem&gt;
      &lt;Folder Name=&quot;App_Start&quot;&gt;
        &lt;ProjectItem ReplaceParameters=&quot;true&quot; OpenInEditor=&quot;false&quot;&gt;BundleConfig.cs&lt;/ProjectItem&gt;
        &lt;ProjectItem ReplaceParameters=&quot;true&quot; OpenInEditor=&quot;false&quot;&gt;FilterConfig.cs&lt;/ProjectItem&gt;
        &lt;ProjectItem ReplaceParameters=&quot;true&quot; OpenInEditor=&quot;false&quot;&gt;RouteConfig.cs&lt;/ProjectItem&gt;
        &lt;ProjectItem ReplaceParameters=&quot;true&quot; OpenInEditor=&quot;false&quot;&gt;Startup.Container.cs&lt;/ProjectItem&gt;
      &lt;/Folder&gt;
      &lt;!-- Omitted lots of Folder and ProjectItem nodes... --&gt;
      &lt;ProjectItem ReplaceParameters=&quot;true&quot; OpenInWebBrowser=&quot;true&quot;&gt;ReadMe.html&lt;/ProjectItem&gt;
    &lt;/Project&gt;
  &lt;/TemplateContent&gt;
&lt;/VSTemplate&gt;
</code></pre>
<p>The next step is to add a VSIX Project to our solution. This is the project that will actually build a <code>.vsix</code> file.</p>
<p><img src="https://rehansaeed.com/custom-visual-studio-project-templates/images/ExportVSIX5.png" alt="The new project dialogue, showing how to create a new VSIX project."></p>
<p>The new project dialogue, showing how to create a new VSIX project.</p>
<p>If you open the <code>.vsixmanifest</code> file, you can fill in basic information about the template. This information will be displayed in the &#39;New Project&#39; dialogue. I have specified an Icon, Preview Image and Licence file. All three of these files are added to the project.</p>
<p><img src="https://rehansaeed.com/custom-visual-studio-project-templates/images/ExportVSIX6.png" alt="The metadata for the VSIX project, describing the .vsix installer file and also the project shown in the solution explorer, showing the files included."></p>
<p>The metadata for the VSIX project, describing the <code>.vsix</code> installer file and also the project shown in the solution explorer, showing the files included.</p>
<p>The &#39;Install Targets&#39; tab lets you target a specific version of Visual Studio. I changed this to support Visual Studio 2012 and above by specifying the version range to be <code>[11.0,]</code>. More information <a href="http://blogs.msdn.com/b/visualstudio/archive/2013/08/08/update-for-extension-authors-vsix-manifest-version-ranges.aspx">here</a>.</p>
<p>The &#39;Dependencies&#39; tab is very similar. Here you can specify which version of the .NET Framework your project depends on. I stuck with the defaults of .NET 4.5 only.</p>
<p><img src="https://rehansaeed.com/custom-visual-studio-project-templates/images/ExportVSIX7.png" alt="The installation targets or versions of Visual Studio your VSIX extension will install to."></p>
<p>The installation targets or versions of Visual Studio your VSIX extension will install to.</p>
<p>If you click on the &#39;Assets&#39; tab on the left, you can add a reference to your other &#39;C# Project Template&#39; project.</p>
<p><img src="https://rehansaeed.com/custom-visual-studio-project-templates/images/ExportVSIX8.png" alt="The VSIX C# projects you want to add to the VSIX extension as an asset to be installed."></p>
<p>The VSIX C# projects you want to add to the VSIX extension as an asset to be installed.</p>
<h1 id="submitting-your-vsix-project-template-to-the-visual-studio-gallery">Submitting your VSIX Project Template to the Visual Studio Gallery</h1>
<p>Submitting your new VSIX extension to the Visual Studio Gallery is a great way to share your new Project Template with the world. The <a href="https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d">ASP.NET Core Boilerplate</a> extension now has over a hundred downloads within two days of submitting it!</p>
<p>If you&#39;ve followed the steps above to create a VSIX package and tested that it works correctly then submitting one to the site is really easy. Follow <a href="https://visualstudiogallery.msdn.microsoft.com/site/upload/view">this</a> link to the submission page and fill in the form. An example of what it looks like can be seen below:</p>
<p><img src="https://rehansaeed.com/custom-visual-studio-project-templates/images/VisualStudioGallery1.png" alt="An example of the Visual Studio Gallery Submission Page."></p>
<p>An example of the Visual Studio Gallery Submission Page.</p>
<p>Once you have made your submission and you go to the &#39;New Project&#39; dialogue, you can go to the &#39;Online&#39; section and see your project template listed.</p>
<p><img src="https://rehansaeed.com/custom-visual-studio-project-templates/images/VisualStudioGallery2.png" alt="The project template shown in the &#39;Web&#39; section of Visual Studio&#39;s &#39;New Project&#39; dialogue."></p>
<p>The project template shown in the &#39;Web&#39; section of Visual Studio&#39;s &#39;New Project&#39; dialogue.</p>
<p>If you use the template above, explicitly install it from the Visual Studio Gallery or install it from &#39;Extensions and Updates&#39;, you will then see the project appear in the &#39;New Project&#39; dialogue under the category you specified in the settings above.</p>
<p><img src="https://rehansaeed.com/custom-visual-studio-project-templates/images/VisualStudioGallery3.png" alt="The project template shown in the &#39;Online&#39; section of Visual Studio&#39;s &#39;New Project&#39; dialogue."></p>
<p>The project template shown in the &#39;Online&#39; section of Visual Studio&#39;s &#39;New Project&#39; dialogue.</p>
<h1 id="conclusions">Conclusions</h1>
<p>Creating a simple <code>.zip</code> project template is super simple and something everyone should know and use for larger projects. Creating VSIX project templates is a lot more involved but to be honest, there is no reason why it should be. I hope Microsoft makes this process a lot easier.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Internet Favicon Madness (Updated)]]></title>
        <id>https://rehansaeed.com/internet-favicon-madness/</id>
        <link href="https://rehansaeed.com/internet-favicon-madness/"/>
        <updated>2014-11-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Add favicon's to your website to support iOS, Android, Windows 7, Windows 8, Windows Phone and more. Find out where icons are used on each platform and how.]]></summary>
        <content type="html"><![CDATA[<ul>
<li><a href="https://rehansaeed.com/asp-net-mvc-boilerplate/">ASP.NET Core Boilerplate</a></li>
<li>Security<ul>
<li><a href="https://rehansaeed.com/securing-the-aspnet-mvc-web-config/">Securing the ASP.NET MVC Web.config (Updated)</a></li>
<li><a href="https://rehansaeed.com/nwebsec-asp-net-mvc-security-through-http-headers/">NWebSec ASP.NET MVC Security Through HTTP Headers</a></li>
<li><a href="https://rehansaeed.com/content-security-policy-for-asp-net-mvc/">Content Security Policy (CSP) for ASP.NET MVC</a></li>
</ul>
</li>
<li>Search Engine Optimization (SEO)<ul>
<li><a href="https://rehansaeed.com/canonical-urls-for-asp-net-mvc/">Canonical URL&#39;s for ASP.NET MVC</a></li>
<li><a href="https://rehansaeed.com/dynamically-generating-robots-txt-using-asp-net-mvc">Dynamically Generating Robots.txt Using ASP.NET MVC</a></li>
</ul>
</li>
<li><a href="https://rehansaeed.com/internet-favicon-madness/">Internet Favicon Madness (Updated)</a></li>
<li><a href="https://rehansaeed.com/building-rssatom-feeds-for-asp-net-mvc/">Building RSS/Atom Feeds for ASP.NET MVC</a></li>
</ul>
<p>These days there is a ridiculous range of devices that can access your website from phone and desktop browsers to phone apps, operating systems and search engine bots. Most of them will require some kind of icon or image to display for your website. Some of them go even further and even allow you to specify splash screens for when your page is loading or an RSS feed URL for the latest updates from your site.</p>
<p>A brain dump of all my knowledge regarding favicon&#39;s and many other ASP.NET MVC features can be found in the <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> project on GitHub. Its a professional ASP.NET MVC template for building secure, fast, robust and adaptable web applications or sites. It provides the minimum amount of code required on top of the default MVC template provided by Microsoft.</p>
<p>This blog post tries to be as comprehensive as possible in explaining the absolute madness that is the internet favicon and its related &#39;bits&#39; for want of a better word. So without further ado, here is a list of files that you need to add to support all the different devices that can access your site:</p>
<p><img src="https://rehansaeed.com/internet-favicon-madness/images/Favicon-Files.png" alt="Favicon Files"></p>
<p>The list of all files required to support favicon&#39;s and splash screen images on all devices.</p>
<p>Now you can add all these files to the root directory of your site and have a really messy project or you can add the files to a <code>/content/icons</code> folder in your project and add the following link and meta tags to the head section of your HTML pages:</p>
<pre><code class="language-xml">&lt;!-- Icons &amp; Platform Specific Settings - Favicon generator used to generate the icons below http://realfavicongenerator.net --&gt;
&lt;!-- shortcut icon - This file contains the following sizes 16x16, 32x32 and 48x48. --&gt;
&lt;link rel=&quot;shortcut icon&quot; href=&quot;/content/icons/favicon.ico&quot;&gt;
&lt;!-- favicon-96x96.png - For Google TV https://developer.android.com/training/tv/index.html#favicons. --&gt;
&lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;/content/icons/favicon-96x96.png&quot; sizes=&quot;96x96&quot;&gt;
&lt;!-- favicon-32x32.png - For Safari on Mac OS. --&gt;
&lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;/content/icons/favicon-32x32.png&quot; sizes=&quot;32x32&quot;&gt;
&lt;!-- favicon-16x16.png - The classic favicon, displayed in the tabs. --&gt;
&lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;/content/icons/favicon-16x16.png&quot; sizes=&quot;16x16&quot;&gt;

&lt;!-- Android/Chrome --&gt;
&lt;!-- manifest-json - The location of the browser configuration file. It contains locations of icon files, name of the application and default device screen orientation. Note that the name field is mandatory.
    https://developer.chrome.com/multidevice/android/installtohomescreen. --&gt;
&lt;link rel=&quot;manifest&quot; href=&quot;/content/icons/manifest.json&quot;&gt;
&lt;!-- theme-color - The colour of the toolbar in Chrome M39+
    http://updates.html5rocks.com/2014/11/Support-for-theme-color-in-Chrome-39-for-Android --&gt;
&lt;meta name=&quot;theme-color&quot; content=&quot;#1E1E1E&quot;&gt;
&lt;!-- favicon-192x192.png - For Android Chrome M36 to M38 this HTML is used. M39+ uses the manifest.json file. --&gt;
&lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;/content/icons/favicon-192x192.png&quot; sizes=&quot;192x192&quot;&gt;
&lt;!-- mobile-web-app-capable - Run Android/Chrome version M31 to M38 in standalone mode, hiding the browser chrome. --&gt;
&lt;!-- &lt;meta name=&quot;mobile-web-app-capable&quot; content=&quot;yes&quot;&gt; --&gt;

&lt;!-- Apple Icons - You can move all these icons to the root of the site and remove these link elements, if you don&#39;t mind the clutter.
    https://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariHTMLRef/Introduction.html#//apple_ref/doc/uid/30001261-SW1 --&gt;
&lt;!-- apple-touch-icon-57x57.png - Android Stock Browser and non-Retina iPhone and iPod Touch --&gt;
&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;57x57&quot; href=&quot;/content/icons/apple-touch-icon-57x57.png&quot;&gt;
&lt;!-- apple-touch-icon-114x114.png - iPhone (with 2× display) iOS = 6 --&gt;
&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;114x114&quot; href=&quot;/content/icons/apple-touch-icon-114x114.png&quot;&gt;
&lt;!-- apple-touch-icon-72x72.png - iPad mini and the first- and second-generation iPad (1× display) on iOS = 6 --&gt;
&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;72x72&quot; href=&quot;/content/icons/apple-touch-icon-72x72.png&quot;&gt;
&lt;!-- apple-touch-icon-144x144.png - iPad (with 2× display) iOS = 6 --&gt;
&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;144x144&quot; href=&quot;/content/icons/apple-touch-icon-144x144.png&quot;&gt;
&lt;!-- apple-touch-icon-60x60.png - Same as apple-touch-icon-57x57.png, for non-retina iPhone with iOS7. --&gt;
&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;60x60&quot; href=&quot;/content/icons/apple-touch-icon-60x60.png&quot;&gt;
&lt;!-- apple-touch-icon-120x120.png - iPhone (with 2× and 3 display) iOS = 7 --&gt;
&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;120x120&quot; href=&quot;/content/icons/apple-touch-icon-120x120.png&quot;&gt;
&lt;!-- apple-touch-icon-76x76.png - iPad mini and the first- and second-generation iPad (1× display) on iOS = 7 --&gt;
&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;76x76&quot; href=&quot;/content/icons/apple-touch-icon-76x76.png&quot;&gt;
&lt;!-- apple-touch-icon-152x152.png - iPad 3+ (with 2× display) iOS = 7 --&gt;
&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;152x152&quot; href=&quot;/content/icons/apple-touch-icon-152x152.png&quot;&gt;
&lt;!-- apple-touch-icon-180x180.png - iPad and iPad mini (with 2× display) iOS = 8 --&gt;
&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;180x180&quot; href=&quot;/content/icons/apple-touch-icon-180x180.png&quot;&gt;

&lt;!-- apple-mobile-web-app-title - The name of the application if pinned to the IOS start screen. --&gt;
&lt;!-- &lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;&quot;&gt; --&gt;
&lt;!-- apple-mobile-web-app-capable - Hide the browsers user interface on IOS, when the app is run in &#39;standalone&#39; mode. Any links to other pages that are clicked whilst your app is in standalone mode will launch the full Safari browser. --&gt;
&lt;!-- &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt; --&gt;
&lt;!-- apple-mobile-web-app-status-bar-style - default/black/black-translucent Styles the IOS status bar. Using black-translucent makes it transparent and overlays it on top of your site, so make sure you have enough margin. --&gt;
&lt;!-- &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt; --&gt;

&lt;!-- Apple Startup Images - These splash screen images are only shown if apple-mobile-web-app-capable is set to true. https://gist.github.com/tfausak/2222823 --&gt;
&lt;!-- apple-touch-startup-image-1536x2008.png - iOS 6 &amp; 7 iPad (retina, portrait) --&gt;
&lt;!-- &lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/content/icons/apple-touch-startup-image-1536x2008.png&quot; media=&quot;(device-width: 768px) and (device-height: 1024px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 2)&quot;&gt; --&gt;
&lt;!-- apple-touch-startup-image-1496x2048.png - iOS 6 &amp; 7 iPad (retina, landscape) --&gt;
&lt;!-- &lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/content/icons/apple-touch-startup-image-1496x2048.png&quot; media=&quot;(device-width: 768px) and (device-height: 1024px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 2)&quot;&gt; --&gt;
&lt;!-- apple-touch-startup-image-768x1004.png - iOS 6 iPad (portrait) --&gt;
&lt;!-- &lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/content/icons/apple-touch-startup-image-768x1004.png&quot; media=&quot;(device-width: 768px) and (device-height: 1024px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 1)&quot;&gt; --&gt;
&lt;!-- apple-touch-startup-image-748x1024.png - iOS 6 iPad (landscape) --&gt;
&lt;!-- &lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/content/icons/apple-touch-startup-image-748x1024.png&quot; media=&quot;(device-width: 768px) and (device-height: 1024px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 1)&quot;&gt; --&gt;
&lt;!-- apple-touch-startup-image-640x1096.png - iOS 6 &amp; 7 iPhone 5 --&gt;
&lt;!-- &lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/content/icons/apple-touch-startup-image-640x1096.png&quot; media=&quot;(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)&quot;&gt; --&gt;
&lt;!-- apple-touch-startup-image-640x920.png - iOS 6 &amp; 7 iPhone (retina) --&gt;
&lt;!-- &lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/content/icons/apple-touch-startup-image-640x920.png&quot; media=&quot;(device-width: 320px) and (device-height: 480px) and (-webkit-device-pixel-ratio: 2)&quot;&gt; --&gt;
&lt;!-- apple-touch-startup-image-320x460.png - iOS 6 iPhone --&gt;
&lt;!-- &lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/content/icons/apple-touch-startup-image-320x460.png&quot; media=&quot;(device-width: 320px) and (device-height: 480px) and (-webkit-device-pixel-ratio: 1)&quot;&gt; --&gt;

&lt;!-- Windows 7 Taskbar - This depends on your site, so no code here. See http://www.buildmypinnedsite.com/windows7 --&gt;

&lt;!-- Windows 8 IE10 --&gt;
&lt;!-- application-name - The name of the application if pinned to the start screen. --&gt;
&lt;!-- &lt;meta name=&quot;application-name&quot; content=&quot;&quot;&gt; --&gt;
&lt;!-- msapplication-TileColor - The tile colour which shows around your tile image (msapplication-TileImage). --&gt;
&lt;!-- &lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#5cb95c&quot;&gt; --&gt;
&lt;!-- msapplication-TileImage - The tile image. --&gt;
&lt;!-- &lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;/content/icons/mstile-144x144.png&quot;&gt; --&gt;

&lt;!-- Windows 8.1 IE11 --&gt;
&lt;!-- msapplication-config - The location of the browser configuration file. If you have an RSS feed, go to
    http://www.buildmypinnedsite.com and regenerate the browserconfig.xml file. You will then have a cool live tile! --&gt;
&lt;meta name=&quot;msapplication-config&quot; content=&quot;/content/icons/browserconfig.xml&quot;&gt;
</code></pre>
<p>Now don&#39;t be too scared, there are only 24 lines that you need, the rest is all comments describing what each line is for, which I&#39;ll go through it in the rest of this post.</p>
<p>Now, go ahead take another look above. That is 30 files and almost as many lines of code if you decide to have your files in a nice separate folder. Take a moment to let the insanity of this situation settle in. All we are really trying to do is set an icon for our site!</p>
<h1 id="performance-and-size-trade-off">Performance and Size Trade-Off</h1>
<p>This approach does use more bandwidth. Those 24 lines take up around 2.8KB, if you decide to support everything or around 1.4KB if you skip support for Apple splash screens which takes about half the space due to its extremely verbose meta tags.</p>
<p>However, you should be using GZip compression for transferring your HTML pages over the internet (I&#39;ll be covering GZip compression in a subsequent post) so when compressed we are talking around 650 Bytes if you include everything or around 465 Bytes if you remove support for Apple splash screens.</p>
<p>At the end of the day it&#39;s a trade off and I&#39;ll leave making that decision up to you. You can support all of it, none of it or anything in between. 650 Bytes for <strong>every</strong> page can add up to a fair amount of bandwidth, especially if you have a large number of requests coming into your site. If you had say a million requests, which is not unheard of if you consider that this overhead is added to every page, then you are looking at around 0.6GB of bandwidth and that&#39;s <strong>before</strong> you add up extra bandwidth usage from the images and Android/Chrome/Windows XML/JSON configuration files.</p>
<p>The <code>manifest.json</code> and <code>browserconfig.xml</code> file are small files around 1KB but they can also be GZIP compressed and more importantly they can be cached by the browser. A bigger problem is the image files. These files are up to 37KB in size, they cannot be compressed as PNG&#39;s are already compressed but they can be downloaded once and then cached. It&#39;s difficult to calculate how often these files will be downloaded and how much bandwidth this will use.</p>
<p>Then again, how do we measure the value of users who feel more engaged with your site because they get a more customized and integrated experience when using your site. It&#39;s a difficult question and the answer will be different for every site.</p>
<h1 id="the-faviconico-file">The Favicon.ico File</h1>
<p><a href="http://en.wikipedia.org/wiki/Favicon">Favicon&#39;s</a> were introduced in 1995 by Microsoft with Internet Explorer 5.0. You could add a <code>favicon.ico</code> file to the root of your site and it would get displayed next to the address bar.</p>
<p>Favicons use the ancient <a href="http://en.wikipedia.org/wiki/ICO_%28file_format%29">.ico</a> image format which began life as a part of Windows 1.0! A lot of people don&#39;t realize that the <code>.ico</code> file can actually contain several images of varying sizes and colour depths. Typically the image sizes can include <code>16x16</code>, <code>32x32</code>, <code>48x48</code>, <code>64x64</code>, <code>128x128</code> and <code>256x256</code>. Windows or your web browser can then choose the appropriate size they need for display. Most favicon&#39;s are uncompressed images and although the images are small the file size is not as small as it could be.</p>
<h1 id="where-are-favicons-used">Where Are Favicon&#39;s Used</h1>
<h2 id="desktop-browsers">Desktop Browsers</h2>
<p>These days favicon&#39;s are no longer displayed in the address bar of your browser (IE being an exception). Miscreants were abusing this feature and using padlock favicon&#39;s to trick unsavvy users into thinking the page was secure and had SSL enabled. Most browsers now only show icons on tabs or when a site is favourited. You can see a table of how desktop browsers use Favicon&#39;s <a href="http://en.wikipedia.org/wiki/Favicon#Use_of_favicon">here</a>.</p>
<p><img src="https://rehansaeed.com/internet-favicon-madness/images/Desktop-Browser-Favicons.png" alt="Desktop Browser Favicon&#39;s"></p>
<h2 id="ios">iOS</h2>
<p>iOS devices can pin your site to the home screen and you can provide icons in a variety of sizes to support phone and tablets with differing screen resolutions. All the files shown above start with <code>apple-touch-icon</code>. Increasingly websites are being built to look and feel like everyday phone apps. Apple lets you specify three additional meta tags which allows you to customize what happens after your site is pinned to the home screen:</p>
<pre><code class="language-xml">&lt;!-- apple-mobile-web-app-title - The name of the application if pinned to the IOS start screen. --&gt;
&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;Your Site Title&quot;&gt;
&lt;!-- apple-mobile-web-app-capable - Hide the browsers user interface on IOS, when the app is run in &#39;standalone&#39; mode. 
     Any links to other pages that are clicked whilst your app is in standalone mode will launch the full Safari browser. --&gt;
&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;
&lt;!-- apple-mobile-web-app-status-bar-style - default/black/black-translucent Styles the IOS status bar. Using 
     black-translucent makes it transparent and overlays it on top of your site, so make sure you have enough margin. --&gt;
&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt;
</code></pre>
<p><img src="https://rehansaeed.com/internet-favicon-madness/images/iOS-Web-App-Capable.png" alt="iOS Web App Capable"></p>
<p>The left screen shows a normal web browsing experience on iOS and the right shows a web app capable experience.</p>
<p>If you decide to make your site web app capable by using the meta tag above, you can also set a splash screen which gets shown when your site is first launched. Once again, there are several sizes depending on the screen resolution and all the images start with <code>apple-touch-startup-image</code>. Find more information about iOS favicon&#39;s, startup images and meta tags <a href="http://blog.teamtreehouse.com/optimizing-mobile-web-apps-ios">here</a>.</p>
<h2 id="microsoft-windows-7-taskbar">Microsoft Windows 7 Taskbar</h2>
<p>If your site is pinned to the Windows 7 taskbar then you can customize the jump list items with additional links to pages on your site. There are lots of other additional features (See image below) but these require JavaScript and some additional work. Also, I&#39;m not really sure how often people pin websites to the taskbar (I personally have never done it), so I&#39;m not sure if its worth it. Check out the <a href="http://www.buildmypinnedsite.com/windows7">Windows 7 Build My Pinned Site</a> page for examples and more information.</p>
<p><img src="https://rehansaeed.com/internet-favicon-madness/images/Windows-7-Taskbar.png" alt="Windows 7 Taskbar Settings"></p>
<h2 id="microsoft-windows-phone-8-and-windows-8">Microsoft Windows Phone 8 and Windows 8</h2>
<p>Windows Phone 8 and Windows 8 takes a very interesting approach. Pinning a site to the start screen of one of these devices gives you a very large tile. You can specify an icon for your tile and also an RSS feed URL. The RSS feed is polled and new updates are shown on your tile regularly (I&#39;ve implemented this feature on this site, so pin this site to your Windows 8 home screen and give it a try). You can also specify a background colour which is used when showing the RSS feed items. Pretty cool eh!</p>
<p><img src="https://rehansaeed.com/internet-favicon-madness/images/Windows-8-Favicons.png" alt="Windows 8 Tiles"></p>
<p>Now if Microsoft had taken Apple&#39;s approach it would be cluttering up the head section of your site with a lot of meta data. Microsoft splits off its tile configuration into a separate <code>browserconfig.xml</code> file (See example below). This is a much cleaner approach and very much welcomed. You can add this file to the root of your site or if you want to move it elsewhere, add a meta tag pointing to it (Note that this file was introduced in Windows 8.1 and Windows 8 still uses meta tags in the head of the page. Windows 8 is on its way out, so I probably would not support it).</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;browserconfig&gt;
  &lt;msapplication&gt;
    &lt;tile&gt;
      &lt;square70x70logo src=&quot;tiny.png&quot;/&gt;
      &lt;square150x150logo src=&quot;square.png&quot;/&gt;
      &lt;wide310x150logo src=&quot;wide.png&quot;/&gt;
      &lt;square310x310logo src=&quot;large.png&quot;/&gt;
      &lt;TileColor&gt;#fff200&lt;/TileColor&gt;
    &lt;/tile&gt;
    &lt;notification&gt;
      &lt;polling-uri src=&quot;http://notifications.buildmypinnedsite.com/?feed=https://rehansaeed.com/feed/&amp;amp;id=1&quot;/&gt;
      &lt;polling-uri2 src=&quot;http://notifications.buildmypinnedsite.com/?feed=https://rehansaeed.com/feed/&amp;amp;id=2&quot;/&gt;
      &lt;polling-uri3 src=&quot;http://notifications.buildmypinnedsite.com/?feed=https://rehansaeed.com/feed/&amp;amp;id=3&quot;/&gt;
      &lt;polling-uri4 src=&quot;http://notifications.buildmypinnedsite.com/?feed=https://rehansaeed.com/feed/&amp;amp;id=4&quot;/&gt;
      &lt;polling-uri5 src=&quot;http://notifications.buildmypinnedsite.com/?feed=https://rehansaeed.com/feed/&amp;amp;id=5&quot;/&gt;
      &lt;frequency&gt;30&lt;/frequency&gt;
      &lt;cycle&gt;1&lt;/cycle&gt;
    &lt;/notification&gt;
  &lt;/msapplication&gt;
&lt;/browserconfig&gt;
</code></pre>
<h2 id="androidchrome">Android/Chrome</h2>
<p>Android/Chrome recently introduced new favicon&#39;s and browser settings. interestingly, their solution looks very similar to Microsoft&#39;s approach. Microsoft includes all their settings in a <code>browserconfig.xml</code> file which can be included in the root of your site or using a meta tag to refer to it. Android/Chrome has taken a very similar step and introduced a <code>manifest.json</code> file which you can also optionally point to in your HTML as shown below.</p>
<pre><code class="language-xml">&lt;!-- manifest-json - The location of the browser configuration file. It contains locations of icon files, name of the application and default device screen orientation. Note that the name field is mandatory.
    https://developer.chrome.com/multidevice/android/installtohomescreen. --&gt;
&lt;link rel=&quot;manifest&quot; href=&quot;/content/icons/manifest.json&quot;&gt;
</code></pre>
<p>The <code>manifest.json</code> file contains the name of the site, optional page orientation settings and the location of favicon images. Unfortunately, the name of the site is not an optional field but required according to the specification. The rest of the file is dedicated to specifying the location of the various favicon images of varying pixel densities. You can also optionally control the orientation of the site and how it appears on an Android device. One new feature is the ability to set the browser chrome theme colour. This can be done with the <code>theme-color</code> meta tag and examples of the results can be seen below:</p>
<pre><code class="language-xml">&lt;!-- theme-color - The colour of the toolbar in Chrome M39+
    http://updates.html5rocks.com/2014/11/Support-for-theme-color-in-Chrome-39-for-Android --&gt;
&lt;meta name=&quot;theme-color&quot; content=&quot;#1E1E1E&quot;&gt;
</code></pre>
<p><img src="https://rehansaeed.com/internet-favicon-madness/images/Android-Theme-Colour.png" alt="Android Theme Colour"></p>
<p>Older versions of Android (M31 to M38) don&#39;t use the <code>manifest.json</code> file but are very similar to iOS and even uses some of the iOS icons if they are provided, as iOS icons tend to be a little higher resolution and more widely supported. Android also has the ability to hide the browser chrome to make your site behave like an app. It&#39;s meta tag has a different name:</p>
<pre><code class="language-xml">&lt;!-- favicon-192x192.png - For Android Chrome M36 to M38 this HTML is used. M39+ uses the manifest.json file. --&gt;
&lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;/content/icons/favicon-192x192.png&quot; sizes=&quot;192x192&quot;&gt;
&lt;!-- mobile-web-app-capable - Run Android/Chrome version M31 to M38 in standalone mode, hiding the browser chrome. --&gt;
&lt;!-- &lt;meta name=&quot;mobile-web-app-capable&quot; content=&quot;yes&quot;&gt; --&gt;
</code></pre>
<h2 id="other">Other</h2>
<p>Favicons are used in a few other places, such as pinning your site to the taskbar in Windows for instance or even on your television.</p>
<h1 id="how-can-i-make-this-easier">How Can I Make This Easier</h1>
<p>Even if you decide not to make your site web app capable and support just the basic iOS, Android and Windows icons and settings, your still in for a fair amount of work to create all the right images and get all the meta tags just right.</p>
<p>The <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> project template can help you get started quickly as all of the above files and meta tags are built in from the start, all you need to do is delete the ones you don&#39;t want (A lot quicker than starting from scratch).</p>
<p>I also highly recommend using <a href="http://realfavicongenerator.net">Real Favicon Generator</a> in conjunction with Microsoft&#39;s <a href="http://www.buildmypinnedsite.com">Windows 8 Build My Pinned Site</a> and <a href="http://www.buildmypinnedsite.com/windows7">Windows 7 Build My Pinned Site</a> pages. These three sites combined can help you get most of the way there and fairly quickly.</p>
<p>The <a href="http://realfavicongenerator.net">Real Favicon Generator</a> site above will generate a <code>.ico</code> file for you but to get a real pixel perfect icon I personally use <a href="http://www.getpaint.net/">Paint.NET</a> in conjunction with the <a href="http://forums.getpaint.net/index.php?/topic/927-icon-cursor-and-animated-cursor-format-v37-may-2010/">Icon plugin</a> to edit <code>.ico</code> image files.</p>
<h1 id="what-a-mess">What a Mess</h1>
<p>So what is the future? Higher screen resolutions and a wider variety of devices of different sizes is now the norm and each one seems to need it&#39;s own images. Each manufacturer has added their own meta tags too.</p>
<p>One approach would be to standardize a set of three or four images sizes and then also provide a colour meta tag. The image can then be shown in the center and the colour shown around the image to fill in any gaps. This means that the image does not have to be resized and this approach would also support splash screens and non-rectangular or odd shaped icons. Indeed, this is the approach Microsoft has already taken with their <a href="http://msdn.microsoft.com/en-gb/library/windows/apps/hh465338.aspx">Windows 8.1 Store App splash screens</a> and it works well in my experience.</p>
<p>An even better and web standards based approach is to use <a href="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics">SVG</a> favicon&#39;s. These are vector images which do not lose image fidelity even when scaled. Unfortunately, this feature is only <a href="http://caniuse.com/#feat=link-icon-svg">currently supported by the Firefox desktop browser</a>. If all browsers implemented this feature we could go back to the days of Internet Explorer 5.0 when we only needed to create a single favicon.ico file. An SVG favicon can be set by adding the following tag:</p>
<pre><code class="language-xml">&lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;favicon.svg&quot;/&gt;
</code></pre>
<p>Lets all hope more browsers support this simple approach but don&#39;t hold your breath.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ASP.NET Core Boilerplate]]></title>
        <id>https://rehansaeed.com/asp-net-mvc-boilerplate/</id>
        <link href="https://rehansaeed.com/asp-net-mvc-boilerplate/"/>
        <updated>2014-11-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ASP.NET Core Boilerplate is a professional ASP.NET MVC template for building secure, fast, robust and adaptable web applications or sites.]]></summary>
        <content type="html"><![CDATA[<ul>
<li><a href="https://rehansaeed.com/asp-net-mvc-boilerplate/">ASP.NET Core Boilerplate</a></li>
<li>Security<ul>
<li><a href="https://rehansaeed.com/securing-the-aspnet-mvc-web-config/">Securing the ASP.NET MVC Web.config (Updated)</a></li>
<li><a href="https://rehansaeed.com/nwebsec-asp-net-mvc-security-through-http-headers/">NWebSec ASP.NET MVC Security Through HTTP Headers</a></li>
<li><a href="https://rehansaeed.com/content-security-policy-for-asp-net-mvc/">Content Security Policy (CSP) for ASP.NET MVC</a></li>
</ul>
</li>
<li>Search Engine Optimization (SEO)<ul>
<li><a href="https://rehansaeed.com/canonical-urls-for-asp-net-mvc/">Canonical URL&#39;s for ASP.NET MVC</a></li>
<li><a href="https://rehansaeed.com/dynamically-generating-robots-txt-using-asp-net-mvc">Dynamically Generating Robots.txt Using ASP.NET MVC</a></li>
</ul>
</li>
<li><a href="https://rehansaeed.com/internet-favicon-madness/">Internet Favicon Madness (Updated)</a></li>
<li><a href="https://rehansaeed.com/building-rssatom-feeds-for-asp-net-mvc/">Building RSS/Atom Feeds for ASP.NET MVC</a></li>
</ul>
<p><a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> is a professional ASP.NET MVC template for building secure, fast, robust and adaptable web applications or sites. It provides the minimum amount of code required on top of the default MVC template provided by Microsoft.</p>
<p><img src="https://rehansaeed.com/asp-net-mvc-boilerplate/images/New-Project.png" alt="New Project"></p>
<p>The main benefits of using this template are:</p>
<ul>
<li>Security</li>
<li>Performance</li>
<li>Search Engine Optimization (SEO)</li>
<li>Accessibility</li>
<li>Browser Compatibility</li>
<li>Resilience and Error Handling</li>
<li>Easier Debugging and Performance Testing Tools</li>
<li>Patterns and Practices</li>
<li>Atom Feed</li>
<li>Search</li>
<li>Social Media Support</li>
</ul>
<h1 id="aspnet-46-mvc-5-and-aspnet-core-support">ASP.NET 4.6 MVC 5 and ASP.NET Core Support</h1>
<p>Two templates are provided. One for ASP.NET 4.6 MVC 5 and another ASP.NET Core template which is currently under development and is missing some features due to ASP.NET Core still being in Beta. For more information about what&#39;s new in the ASP.NET Core template, see <a href="https://rehansaeed.com/whats-new-in-asp-net-5-mvc-6-boilerplate/">here</a>.</p>
<h3 id="mvc-5-technology-map">MVC 5 Technology Map</h3>
<p><img src="https://rehansaeed.com/asp-net-mvc-boilerplate/images/Technology-Map-1024x380.png" alt="ASP.NET Core Boilerplate Technology Map">]</p>
<h3 id="aspnet-core-technology-map">ASP.NET Core Technology Map</h3>
<p><img src="https://rehansaeed.com/asp-net-mvc-boilerplate/images/MVC-6-Technology-Map.png" alt="ASP.NET Core Technology Map"></p>
<h1 id="why-do-i-need-it">Why Do I Need It?</h1>
<p>The default MVC template that Visual Studio gives you does not make best use of the tools available. It&#39;s insecure, slow, and really has a very basic feature list (That&#39;s the point of it). <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> provides you with a few more pieces of the puzzle to get you started quicker. It makes liberal use of comments and even gives you a check-list of tasks which you need to perform to make it even better.</p>
<p>The rest of this article is going to briefly go through the improvements made over using the default MVC template. I&#39;ll then finish up with instructions on how you can use it. Also, look out for more posts in the future, where I will go through each feature in detail.</p>
<h2 id="secure-by-default">Secure By Default</h2>
<p>The default MVC template is not as secure as it could be. There are various settings (Mostly in the <code>web.config</code> file) which are insecure by default. For example, it leaks information about which version of IIS you are using and allows external scripts to access cookies by default!</p>
<p><a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> makes everything secure by default but goes further and uses various HTTP headers which are sent to the browser to restrict things further.</p>
<p>It also makes use of the new <a href="https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy%20">Content Security Policy (CSP)</a> HTTP Header using the <a href="https://nwebsec.codeplex.com/">NWebSec</a> NuGet packages. CSP revolutionizes web security and I highly recommend reading the above link.</p>
<p>Setting up <a href="http://en.wikipedia.org/wiki/SSL">SSL</a>/<a href="http://en.wikipedia.org/wiki/Transport_Layer_Security">TLS</a>, so that your site runs over HTTPS is made easy with easy step by step instructions and links.</p>
<h2 id="fast-by-default">Fast By Default</h2>
<p>The default MVC template does a pretty poor job in the performance department. Probably because they don&#39;t make any assumptions about which web server you are using. Most of the world and dog that are writing ASP.NET MVC sites use IIS and there are settings in the <code>web.config</code> file under the system.webServer section which can make a big difference when it comes to performance.</p>
<p><a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> makes no such assumptions. It turns on GZip compression for static and dynamic files being sent to the browsers making them smaller and quicker to download. It also uses Content Delivery Networks (CDN) by default to make common scripts like jQuery quicker to download (You can turn this off of course but the point is <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> is fast by default).</p>
<p>That&#39;s not all! There are a bunch of other tweaks and examples of practices which can help improve the performance of the site. <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> achieves a score of 96/100 on <a href="http://yslow.org/">YSlow</a> (Its not possible to get the full 100 as some of it&#39;s criteria contradict each other and site scripts need to be moved to a CDN).</p>
<h2 id="search-engine-optimization-seo">Search Engine Optimization (SEO)</h2>
<p>The default ASP.NET MVC template takes no consideration of Search Engine Optimization at all. ASP.NET Core Boilerplate adds a dynamically generated <code>robots.txt</code> file to tell search engines which pages they can index. It also adds a dynamically generated <code>sitemap.xml</code> file where you can help search engines even further by giving them links to all your pages.</p>
<p>ASP.NET MVC has some very useful settings for appending trailing slashes to URL&#39;s and making all URL&#39;s lower case. Unfortunately, both of these are turned off by default, which is terrible for SEO. This project turns them on by default.</p>
<p>It also includes an MVC filter which helps to redirect non-canonical URL&#39;s (URL&#39;s without a trailing slash or mixed case characters which are considered different URL&#39;s by search engines) to their canonical equivalent.</p>
<h2 id="accessibility">Accessibility</h2>
<p>4% of the world population is estimated to be visually impaired, while 0.55% are blind. Get more statistics <a href="http://www.sitepoint.com/how-many-users-need-accessible-websites">here</a>. ASP.NET Core Boilerplate ensures that your site is accessible by adding aria attributes to your HTML mark-up and special short-cuts for people using screen readers.</p>
<h2 id="browser-compatibility">Browser Compatibility</h2>
<p>Websites need to reach as many people as possible and look good on a range of different devices. <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> supports browsers as old as IE8 (IE8 still has around 4% market share and is mostly used by corporations too lazy to port their old websites to newer browsers).</p>
<p><a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> also supports devices other than desktop browsers as much as possible. It has default icons and splash screens for Windows 8, Android, Apple Devices and a few other device specific settings included by default.</p>
<h2 id="resilience-and-error-handling">Resilience and Error Handling</h2>
<p>At some point your site is probably going to throw an exception and you will need to handle and log that exception to be able to understand and fix it. <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> includes <a href="https://code.google.com/p/elmah/">Elmah</a>, the popular error logging addin. It&#39;s all preconfigured and ready to use.</p>
<p><a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> uses popular Content Delivery Networks (CDN) from Google and Microsoft but what happens in the unlikely event that these go down? Well, <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> provides backups for these.</p>
<p>Not only that but standard error pages such as 500 Internal Server Error, 404 Not Found and many others are built in to the template. ASP.NET Core Boilerplate even includes IIS configuration to protect you from <a href="http://en.wikipedia.org/wiki/Denial-of-service_attack">Denial-of-Service</a> (DoS) attacks.</p>
<h2 id="easier-debugging-and-performance-testing-tools">Easier Debugging and Performance Testing Tools</h2>
<p><a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> makes use of <a href="http://getglimpse.com/">Glimpse</a> (As <a href="http://www.hanselman.com/blog/IfYoureNotUsingGlimpseWithASPNETForDebuggingAndProfilingYoureMissingOut.aspx">advertised</a> by Scott Hanselman). It&#39;s a great tool to use as you are developing, to find performance problems and bugs. Of course, Glimpse is all preconfigured, so you don&#39;t need to lift a finger to install it.</p>
<h2 id="patterns-and-practices">Patterns and Practices</h2>
<p>Doing things right does sometimes take a little extra time. Using the <a href="http://martinfowler.com/articles/injection.html">Inversion of Control (IOC)</a> pattern for example should be a default. <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> uses the <a href="http://autofac.org/">Autofac</a> IOC container by default. Some people get a bit tribal when talking about IOC containers but to be honest, they all work great. I picked Autofac because it has lots of helpers for ASP.NET MVC and Microsoft even uses it for Azure Mobile Services.</p>
<p><a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> also makes use of the popular <a href="http://lesscss.org/">LESS</a> files for making life easier with CSS. For an example, it can make overriding colours and fonts in the default Bootstrap CSS a cinch.</p>
<p>ASP.NET MVC is a complicated beast. You can end up with lots of <a href="http://en.wikipedia.org/wiki/Magic_string%20">magic strings</a> which can be a nightmare when renaming something. There are many ways of eliminating these magic strings but most trade maintainability for slower performance. <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> makes extensive use of constants which are a trade-off between maintainability and performance, giving you the best of both worlds.</p>
<h2 id="atom-feed">Atom Feed</h2>
<p>An <a href="http://atomenabled.org/developers/syndication/">Atom 1.0</a> has been included by default. Atom was chosen over RSS because it is the <a href="http://www.intertwingly.net/wiki/pie/Rss20AndAtom10Compared">better and newer</a> specification. <a href="https://github.com/pubsubhubbub">PubSubHubbub</a> 0.4 support has also been built in, allowing you to push feed updates to subscribers.</p>
<h2 id="search">Search</h2>
<p>There is a lot more to implementing search in your application than it sounds. <a href="https://github.com/Dotnet-Boxed/Templates">ASP.NET Core Boilerplate</a> includes a search feature by default but leaves it open for you to choose how you want to implement it. It also implements <a href="http://www.opensearch.org">Open Search</a> XML right out of the box. Read Scott Hanselman talk about this feature <a href="http://www.hanselman.com/blog/CommentView.aspx?guid=50cc95b1-c043-451f-9bc2-696dc564766d#commentstart">here</a>.</p>
<h2 id="social-media-support">Social Media Support</h2>
<p><a href="http://ogp.me/">Open Graph</a> meta tags and <a href="https://dev.twitter.com/cards/overview">Twitter Card</a> meta tags are included by default. Not only that but ASP.NET Core Boilerplate includes fully documented HTML helpers that allow you to easily generate Open Graph object or Twitter Card meta tags easily and correctly.</p>
<h2 id="how-can-i-get-it">How can I get it?</h2>
<p>That&#39;s easy, just choose one of the following options:</p>
<ol>
<li>Get the Visual Studio 2013 extension <a href="https://visualstudiogallery.msdn.microsoft.com/6cf50a48-fc1e-4eaf-9e82-0b2a6705ca7d">here</a> and in Visual Studio go to <code>File -&gt; New Project -&gt; Web</code>.</li>
<li>Clone the git repository:<pre><code class="language-powershell">git clone https://github.com/Dotnet-Boxed/Templates
</code></pre>
</li>
</ol>
<h2 id="release-notes-and-to-do-list">Release Notes and To-Do List</h2>
<p>You can find release notes for each version <a href="https://github.com/Dotnet-Boxed/Templates/releases">here</a> and a To-Do list of new features and enhancements coming soon <a href="https://github.com/Dotnet-Boxed/Templates/projects">here</a>.</p>
<h2 id="bugs-and-issues">Bugs and Issues</h2>
<p>Please report any bugs or issues on the GitHub issues page <a href="https://github.com/Dotnet-Boxed/Templates/issues">here</a>.</p>
<h2 id="future-of-the-project">Future of the project</h2>
<p>At some point, I will try to create a <a href="https://msdn.microsoft.com/en-us/library/ff363239.aspx">Visual Studio Deployment package (VSIX)</a> and list this project template on the <a href="https://visualstudiogallery.msdn.microsoft.com/site/search?f%5B0%5D.Type=RootCategory&amp;f%5B0%5D.Value=templates&amp;f%5B0%5D.Text=Templates&amp;f%5B1%5D.Type=SubCategory&amp;f%5B1%5D.Value=aspnet&amp;f%5B1%5D.Text=ASP.NET">Visual Studio extensions</a> site. To use the template, it will be as easy as choosing ASP.NET Core Boilerplate from the online templates in the <code>File -&gt; New Project -&gt; Online Template</code> menu. Unbelievably, it&#39;s actually pretty complicated to create one of these. I found the <a href="https://visualstudiogallery.msdn.microsoft.com/57320b20-34a2-42e4-b97e-e615c71aca24">Export Template Wizard</a> Visual Studio extension which can do this easily but it&#39;s not been updated since Visual Studio 2010.</p>
<p>I am also taking a look at creating separate Visual Studio templates which include ASP.NET Web API and OAuth authentication. This is of course an open source project, I fully expect contributions and suggestions from the community.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Elysium Extra 1.1 Released]]></title>
        <id>https://rehansaeed.com/elysium-extra-1-1-released/</id>
        <link href="https://rehansaeed.com/elysium-extra-1-1-released/"/>
        <updated>2014-11-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Elysium Extra Version 1.1 is a Windows Presentation Foundation (WPF) SDK providing Metro styles for built in WPF controls and some custom controls.]]></summary>
        <content type="html"><![CDATA[<p><a href="https://www.youtube.com/watch?v=PGM_uBy99GA">https://www.youtube.com/watch?v=PGM_uBy99GA</a></p>
<p>Version 1.1.4 of Elysium Extra has just been released! If you&#39;ve never heard of it, Elysium Extra is a Windows Presentation Foundation (WPF) SDK which provides a wide variety of controls and styles. Here are the relevant links to get started with the project:</p>
<ul>
<li><a href="https://rehansaeed.com/wpf-metro-part4-elysium-extra/">Review</a> - A comprehensive review of the controls and styles available.</li>
<li><a href="https://github.com/RehanSaeed/Elysium-Extra">GitHub</a> - The home of the Elysium Extra project. Hosted on GitHub. Submit issues, ask questions and view source code.</li>
<li><a href="https://github.com/RehanSaeed/Elysium-Extra">Getting Started</a> - A quick start guide to using Elysium Extra in your WPF project.</li>
<li><a href="https://www.nuget.org/packages/Elysium.Extra">NuGet</a> - The Elysium Extra NuGet package link.</li>
</ul>
<p><img src="https://rehansaeed.com/elysium-extra-1-1-released/images/Elysium-Extra-NuGet.png" alt="Elysium Extra NuGet"></p>
<p>At the time of writing the NuGet package has been downloaded <strong>900</strong> times which is pretty exciting given that its been live for only a few months and the project had no theme support in its early life.</p>
<h1 id="the-future-of-wpf">The Future of WPF</h1>
<p>WPF has not been getting a lot of love recently. You only have to trek the internet to see all the old WPF projects which have died or gone into hibernation with little or no new updates. I&#39;ve also seen a lot of &#39;troll like&#39; comments in Microsoft comment boards asking why no more updates for WPF have been forthcoming.</p>
<p>My personal opinion is that WPF is a very mature product and does not need as many new &#39;features&#39;. Even still, there have been <a href="http://msdn.microsoft.com/en-us/library/bb613588%28v=vs.110%29.aspx">minor updates</a> by Microsoft fairly recently as part of .NET 4.5. Let us not forget that Visual Studio is written in WPF and the technology is being maintained. There is a lot of noise being made about upstart XAML technologies like Windows Phone and Windows Store apps (I&#39;ve written a few myself and they&#39;re great too) so sometimes it&#39;s easy to overlook WPF.</p>
<h1 id="whats-new">What&#39;s New</h1>
<h2 id="theming-support">Theming Support</h2>
<p>The latest version of Elysium Extra adds full theming support. There is now a Dark and Light theme (A bit like Windows Store Apps). You can even change the Accent and Contrast colours dynamically on the fly. I&#39;ve taken a screenshot of the sample application in the Dark them with a nice red accent colour:</p>
<p><img src="https://rehansaeed.com/elysium-extra-1-1-released/images/Elysium-Extra-Dark-Theme.png" alt="Elysium Extra Dark Theme"></p>
<p>So how do you change the theme? Well you can do it in XAML by changing your App.xaml file like so:</p>
<pre><code class="language-xml">&lt;extra:ElysiumApplication x:Class=&quot;[YOUR NAMESPACE GOES HERE].App&quot;
                          xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
                          xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
                          xmlns:extra=&quot;http://schemas.extra.com/ui&quot;
                          AccentColor=&quot;Red&quot;
                          ContrastColor=&quot;LightBlue&quot;
                          SemitransparentContrastColor=&quot;LightCoral&quot;
                          Theme=&quot;Dark&quot;
                          StartupUri=&quot;MainWindow.xaml&quot;/&gt;
</code></pre>
<p>In the above sample code, I&#39;m setting the theme to dark and changing the three theme related colours. This is all totally optional of course. You can even change the theme in code behind instead like so:</p>
<pre><code class="language-cs">public partial class App
{
    public App()
    {
        this.Theme = Theme.Dark;
        this.AccentColor = Colors.Red;
        this.ContrastColor = Colors.LightBlue;
        this.SemitransparentContrastColor = Colors.LightCoral;
    }
}
</code></pre>
<p>One final feature that I think is very cool is that individual controls can now have a different theme from the rest of the application. You can take a look at the example below where there are two text boxes but one of them has the theme explicitly set to Dark.</p>
<p><img src="https://rehansaeed.com/elysium-extra-1-1-released/images/Dark-Theme-For-Individual-Controls.png" alt="Dark Theme For Individual Controls"></p>
<pre><code class="language-xml">&lt;extra:Window x:Class=&quot;WpfApplication1.MainWindow&quot;
              xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
              xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
              xmlns:extra=&quot;http://schemas.extra.com/ui&quot;
              Height=&quot;100&quot; 
              Title=&quot;Main Window&quot; 
              Width=&quot;200&quot;&gt;
    &lt;StackPanel&gt;
        &lt;TextBox Margin=&quot;5&quot;
                 Text=&quot;Hello World&quot;/&gt;
        &lt;TextBox extra:ThemeManager.Theme=&quot;Dark&quot;
                 Margin=&quot;5&quot;
                 Text=&quot;Hello World&quot;/&gt;
    &lt;/StackPanel&gt;
&lt;/extra:Window&gt;
</code></pre>
<h1 id="performance">Performance</h1>
<p>In the previous version of Elysium Extra, we were making judicious use of <code>ResourceDictionary</code> merging to allow us to split up our XAML files, so that each control has it&#39;s own separate XAML file. This led to a large amount of duplication of objects in memory because the contents of various <code>ResourceDictionary</code>&#39;s were being instantiated multiple times.</p>
<p>There are a few different approaches to this WPF problem. One that most library writers take (including Microsoft) is to only have a single massive XAML file containing all styles and templates. I hope you like scrolling and never being able to find anything because this is very difficult to maintain. Another approach that the original Elysium project took was to split your xaml  files but then use <code>.tt</code> template files to generate a single <code>ResourceDictionary</code> which I thought was an elegant approach.</p>
<p>Elysium Extra has taken a different route. There is a new <code>SharedResourceDictionary</code> type which only instantiates its contents once. You can use this type yourself too in the same way you use <code>ResourceDictionary</code>. It&#39;s very useful if you are merging a dictionaries from more than one location. Here is an example take from Elysium Extra itself where we are merging two resource dictionaries:</p>
<pre><code class="language-xml">&lt;ResourceDictionary xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
                    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&gt;
    &lt;ResourceDictionary.MergedDictionaries&gt;
        &lt;controls:SharedResourceDictionary Source=&quot;/Framework.UI;component/Themes/WPF/Base/Converter.xaml&quot;/&gt;
        &lt;controls:SharedResourceDictionary Source=&quot;/Framework.UI;component/Themes/WPF/Base/Brush.xaml&quot;/&gt;
    &lt;/ResourceDictionary.MergedDictionaries&gt;
    
    &lt;!-- Your Code Here --&gt;
    
&lt;/ResourceDictionary&gt;
</code></pre>
<h1 id="whats-next">Whats Next</h1>
<p><img src="https://rehansaeed.com/elysium-extra-1-1-released/images/We-Need-You.jpg" alt="We Need You"></p>
<p>So far, there are two contributing developers working on Elysium Extra (Myself and zsKengren who has contributed new controls which are still to be added to the library) and 22 people following the project <a href="https://github.com/RehanSaeed/Elysium-Extra">according to GitHub</a>. That is not nearly enough and I would like to see more community activity.</p>
<p>Elysium Extra is a totally open source project. You can <a href="https://github.com/RehanSaeed/Elysium-Extra">look at the source code</a> and even use bits of it in your own projects freely. I occasionally get people contacting me telling me that they want to use the project or even how it has really helped them. That&#39;s great feedback and long may it continue!</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Model-View-ViewModel (MVVM) - Part 4 - INotifyDataErrorInfo]]></title>
        <id>https://rehansaeed.com/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/</id>
        <link href="https://rehansaeed.com/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/"/>
        <updated>2014-09-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An base class implementation for the INotifyDataErrorInfo interface. Used in the Model-View-ViewModel (MVVM) pattern. Targeted for best performance.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/model-view-viewmodel-mvvm-part1-overview/">Model-View-ViewModel (MVVM) - Overview</a></li>
<li><a href="https://rehansaeed.com/model-view-viewmodel-mvvm-part2-idisposable/">Model-View-ViewModel (MVVM) - IDisposable</a></li>
<li><a href="https://rehansaeed.com/model-view-viewmodel-mvvm-part3-inotifypropertychanged/">Model-View-ViewModel (MVVM) - INotifyPropertyChanged</a></li>
<li><a href="https://rehansaeed.com/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/">Model-View-ViewModel (MVVM) - INotifyDataErrorInfo</a></li>
</ol>
<p>In this next part, I&#39;m going to discuss validation of your view models using the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifydataerrorinfo%28v=vs.110%29.aspx">INotifyDataErrorInfo</a> interface. Validation is an often ignored part of the Model-View-ViewModel (MVVM) story. If you need to create a form for your users to fill in (which is probably most applications, I would have thought), then you probably need to validate user input in some way and the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifydataerrorinfo%28v=vs.110%29.aspx">INotifyDataErrorInfo</a> interface can get you there.</p>
<p><img src="https://rehansaeed.com/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/images/Valid.png" alt="INotifyDataErrorInfo Valid TextBox"></p>
<p>That was a <strong>valid</strong> <code>TextBox</code> using <code>INotifyDataErrorInfo</code>.</p>
<p><img src="https://rehansaeed.com/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/images/Invalid.png" alt="INotifyDataErrorInfo Invalid TextBox"></p>
<p>That was an <strong>invalid</strong> <code>TextBox</code> using <code>INotifyDataErrorInfo</code>.</p>
<p>In the example above you can see a name text box which requires text, to be in a valid state. In the valid state there is a big green tick next to the text box and conversely in an invalid state, there is a big yellow warning sign, the text box background becomes pink and you get a nice tool-tip telling you what the error is. By the way, this example is taken from my <a href="https://github.com/RehanSaeed/Elysium-Extra">Elysium Extra</a> WPF project which is freely available on GitHub.</p>
<h1 id="how-does-it-work">How Does It Work?</h1>
<p>You can see the interface and its corresponding event arguments below. If the name property in our view model changes and is empty then the state of our view model is invalid, we can raise the <code>ErrorsChanged</code> event, set the <code>HasErrors</code> property to return true and make any calls to <code>GetErrors</code> return a list of the errors (In our case we only have one but there could be multiple errors).</p>
<pre><code class="language-cs">namespace System.ComponentModel
{
    public interface INotifyDataErrorInfo
    {
        bool HasErrors { get; }

        event EventHandler&lt;DataErrorsChangedEventArgs&gt; ErrorsChanged;

        IEnumerable GetErrors(string propertyName);
    }
    
    public class DataErrorsChangedEventArgs : EventArgs
    {
        public DataErrorsChangedEventArgs(string propertyName);

        public virtual string PropertyName { get; }
    }
}
</code></pre>
<p>That&#39;s a fair amount of work and a base class to do all that makes life much easier. So what are the main aims of a base class implementing <code>INotifyDataErrorInfo</code>?</p>
<ul>
<li>Integration - I usually want to raise an error in response to a property changing. So, we probably want to also implement <code>INotifyPropertyChanged</code>. Handily, I showed how best to create a base class for that in my last article in this series. So our new base class can inherit from the <code>NotifyPropertyChanges</code> base class.</li>
<li>Performance - Performance is king. It needs to be fast and I mean really fast. You can&#39;t afford for your UI to freeze up while your view model works out if it has an error to raise or not. Some validation frameworks use an attribute based approach but this requires reflection so we will not be using that here.</li>
<li>Reactive Extensions (Rx) - Events are old school, I want an observable error changed event notification system instead of the <code>ErrorsChanged</code> C# event.</li>
<li>Human Error - I don&#39;t want to raise error change events for properties that don&#39;t exist by accident.</li>
<li>Has it Really Error&#39;ed - I don&#39;t want to raise a error changed event twice by accident or if it has not really error&#39;ed.</li>
</ul>
<p>So, without further ado, here is my implementation. Note that there are three classes:</p>
<pre><code class="language-cs">namespace Framework.ComponentModel
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using System.Reactive.Linq;
    using System.Reflection;
    using System.Runtime.CompilerServices;
    using Framework.ComponentModel.Rules;

    /// &lt;summary&gt;
    /// Provides functionality to provide errors for the object if it is in an invalid state.
    /// &lt;/summary&gt;
    /// &lt;typeparam name=&quot;T&quot;&gt;The type of this instance.&lt;/typeparam&gt;
    public abstract class NotifyDataErrorInfo&lt;T&gt; : NotifyPropertyChanges, INotifyDataErrorInfo
        where T : NotifyDataErrorInfo&lt;T&gt;
    {
        private const string HasErrorsPropertyName = &quot;HasErrors&quot;;

        private static RuleCollection&lt;T&gt; rules = new RuleCollection&lt;T&gt;();

        private Dictionary&lt;string, List&lt;object&gt;&gt; errors;

        /// &lt;summary&gt;
        /// Occurs when the validation errors have changed for a property or for the entire object. 
        /// &lt;/summary&gt;
        event EventHandler&lt;DataErrorsChangedEventArgs&gt; INotifyDataErrorInfo.ErrorsChanged
        {
            add { this.errorsChanged += value; }
            remove { this.errorsChanged -= value; }
        }

        /// &lt;summary&gt;
        /// Occurs when the validation errors have changed for a property or for the entire object. 
        /// &lt;/summary&gt;
        private event EventHandler&lt;DataErrorsChangedEventArgs&gt; errorsChanged;

        /// &lt;summary&gt;
        /// Gets the when errors changed observable event. Occurs when the validation errors have changed for a property or for the entire object. 
        /// &lt;/summary&gt;
        /// &lt;value&gt;
        /// The when errors changed observable event.
        /// &lt;/value&gt;
        public IObservable&lt;string&gt; WhenErrorsChanged
        {
            get
            {
                return Observable
                    .FromEventPattern&lt;DataErrorsChangedEventArgs&gt;(
                        h =&gt; this.errorsChanged += h,
                        h =&gt; this.errorsChanged -= h)
                    .Select(x =&gt; x.EventArgs.PropertyName);
            }
        }

        /// &lt;summary&gt;
        /// Gets a value indicating whether the object has validation errors. 
        /// &lt;/summary&gt;
        /// &lt;value&gt;&lt;c&gt;true&lt;/c&gt; if this instance has errors, otherwise &lt;c&gt;false&lt;/c&gt;.&lt;/value&gt;
        public virtual bool HasErrors
        {
            get
            {
                this.InitializeErrors();
                return this.errors.Count &gt; 0;
            }
        }

        /// &lt;summary&gt;
        /// Gets the rules which provide the errors.
        /// &lt;/summary&gt;
        /// &lt;value&gt;The rules this instance must satisfy.&lt;/value&gt;
        protected static RuleCollection&lt;T&gt; Rules =&gt; rules;

        /// &lt;summary&gt;
        /// Gets the validation errors for the entire object.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;A collection of errors.&lt;/returns&gt;
        public IEnumerable GetErrors() =&gt; this.GetErrors(null);

        /// &lt;summary&gt;
        /// Gets the validation errors for a specified property or for the entire object.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;propertyName&quot;&gt;Name of the property to retrieve errors for. &lt;c&gt;null&lt;/c&gt; to 
        /// retrieve all errors for this instance.&lt;/param&gt;
        /// &lt;returns&gt;A collection of errors.&lt;/returns&gt;
        public IEnumerable GetErrors(string propertyName)
        {
            Debug.Assert(
                string.IsNullOrEmpty(propertyName) ||
                (this.GetType().GetRuntimeProperty(propertyName) != null),
                &quot;Check that the property name exists for this instance.&quot;);

            this.InitializeErrors();

            IEnumerable result;
            if (string.IsNullOrEmpty(propertyName))
            {
                List&lt;object&gt; allErrors = new List&lt;object&gt;();

                foreach (KeyValuePair&lt;string, List&lt;object&gt;&gt; keyValuePair in this.errors)
                {
                    allErrors.AddRange(keyValuePair.Value);
                }

                result = allErrors;
            }
            else
            {
                if (this.errors.ContainsKey(propertyName))
                {
                    result = this.errors[propertyName];
                }
                else
                {
                    result = new List&lt;object&gt;();
                }
            }

            return result;
        }

        /// &lt;summary&gt;
        /// Raises the PropertyChanged event.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;propertyName&quot;&gt;Name of the property.&lt;/param&gt;
        protected override void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            base.OnPropertyChanged(propertyName);

            if (string.IsNullOrEmpty(propertyName))
            {
                this.ApplyRules();
            }
            else
            {
                this.ApplyRules(propertyName);
            }

            base.OnPropertyChanged(HasErrorsPropertyName);
        }

        /// &lt;summary&gt;
        /// Called when the errors have changed.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;propertyName&quot;&gt;Name of the property.&lt;/param&gt;
        protected virtual void OnErrorsChanged([CallerMemberName] string propertyName = null)
        {
            Debug.Assert(
                string.IsNullOrEmpty(propertyName) ||
                (this.GetType().GetRuntimeProperty(propertyName) != null),
                &quot;Check that the property name exists for this instance.&quot;);

            EventHandler&lt;DataErrorsChangedEventArgs&gt; eventHandler = this.errorsChanged;

            if (eventHandler != null)
            {
                eventHandler(this, new DataErrorsChangedEventArgs(propertyName));
            }
        }

        /// &lt;summary&gt;
        /// Applies all rules to this instance.
        /// &lt;/summary&gt;
        private void ApplyRules()
        {
            this.InitializeErrors();

            foreach (string propertyName in rules.Select(x =&gt; x.PropertyName))
            {
                this.ApplyRules(propertyName);
            }
        }

        /// &lt;summary&gt;
        /// Applies the rules to this instance for the specified property.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;propertyName&quot;&gt;Name of the property.&lt;/param&gt;
        private void ApplyRules(string propertyName)
        {
            this.InitializeErrors();

            List&lt;object&gt; propertyErrors = rules.Apply((T)this, propertyName).ToList();

            if (propertyErrors.Count &gt; 0)
            {
                if (this.errors.ContainsKey(propertyName))
                {
                    this.errors[propertyName].Clear();
                }
                else
                {
                    this.errors[propertyName] = new List&lt;object&gt;();
                }

                this.errors[propertyName].AddRange(propertyErrors);
                this.OnErrorsChanged(propertyName);
            }
            else if (this.errors.ContainsKey(propertyName))
            {
                this.errors.Remove(propertyName);
                this.OnErrorsChanged(propertyName);
            }
        }

        /// &lt;summary&gt;
        /// Initializes the errors and applies the rules if not initialized.
        /// &lt;/summary&gt;
        private void InitializeErrors()
        {
            if (this.errors == null)
            {
                this.errors = new Dictionary&lt;string, List&lt;object&gt;&gt;();

                this.ApplyRules();
            }
        }
    }
}

namespace Framework.ComponentModel.Rules
{
    using System;

    /// &lt;summary&gt;
    /// A named rule containing an error to be used if the rule fails.
    /// &lt;/summary&gt;
    /// &lt;typeparam name=&quot;T&quot;&gt;The type of the object the rule applies to.&lt;/typeparam&gt;
    public abstract class Rule&lt;T&gt;
    {
        private string propertyName;
        private object error;

        /// &lt;summary&gt;
        /// Initializes a new instance of the &lt;see cref=&quot;Rule&lt;T&gt;&quot;/&gt; class.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;propertyName&quot;&gt;The name of the property this instance applies to.&lt;/param&gt;
        /// &lt;param name=&quot;error&quot;&gt;The error message if the rules fails.&lt;/param&gt;
        protected Rule(string propertyName, object error)
        {
            if (propertyName == null)
            {
                throw new ArgumentNullException(nameof(propertyName));
            }

            if (error == null)
            {
                throw new ArgumentNullException(nameof(error));
            }

            this.propertyName = propertyName;
            this.error = error;
        }

        /// &lt;summary&gt;
        /// Gets the name of the property this instance applies to.
        /// &lt;/summary&gt;
        /// &lt;value&gt;The name of the property this instance applies to.&lt;/value&gt;
        public string PropertyName =&gt; this.propertyName;

        /// &lt;summary&gt;
        /// Gets the error message if the rules fails.
        /// &lt;/summary&gt;
        /// &lt;value&gt;The error message if the rules fails.&lt;/value&gt;
        public object Error =&gt; this.error;

        /// &lt;summary&gt;
        /// Applies the rule to the specified object.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;obj&quot;&gt;The object to apply the rule to.&lt;/param&gt;
        /// &lt;returns&gt;
        /// &lt;c&gt;true&lt;/c&gt; if the object satisfies the rule, otherwise &lt;c&gt;false&lt;/c&gt;.
        /// &lt;/returns&gt;
        public abstract bool Apply(T obj);
    }
}

namespace Framework.ComponentModel.Rules
{
    using System;

    /// &lt;summary&gt;
    /// Determines whether or not an object of type &lt;typeparamref name=&quot;T&quot;/&gt; satisfies a rule and
    /// provides an error if it does not.
    /// &lt;/summary&gt;
    /// &lt;typeparam name=&quot;T&quot;&gt;The type of the object the rule can be applied to.&lt;/typeparam&gt;
    public sealed class DelegateRule&lt;T&gt; : Rule&lt;T&gt;
    {
        private Func&lt;T, bool&gt; rule;

        /// &lt;summary&gt;
        /// Initializes a new instance of the &lt;see cref=&quot;DelegateRule&lt;T&gt;&quot;/&gt; class.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;propertyName&quot;&gt;&gt;The name of the property the rules applies to.&lt;/param&gt;
        /// &lt;param name=&quot;error&quot;&gt;The error if the rules fails.&lt;/param&gt;
        /// &lt;param name=&quot;rule&quot;&gt;The rule to execute.&lt;/param&gt;
        public DelegateRule(string propertyName, object error, Func&lt;T, bool&gt; rule)
            : base(propertyName, error)
        {
            if (rule == null)
            {
                throw new ArgumentNullException(nameof(rule));
            }

            this.rule = rule;
        }

        /// &lt;summary&gt;
        /// Applies the rule to the specified object.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;obj&quot;&gt;The object to apply the rule to.&lt;/param&gt;
        /// &lt;returns&gt;
        /// &lt;c&gt;true&lt;/c&gt; if the object satisfies the rule, otherwise &lt;c&gt;false&lt;/c&gt;.
        /// &lt;/returns&gt;
        public override bool Apply(T obj) =&gt; this.rule(obj);
    }
}

namespace Framework.ComponentModel.Rules
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;

    /// &lt;summary&gt;
    /// A collection of rules.
    /// &lt;/summary&gt;
    /// &lt;typeparam name=&quot;T&quot;&gt;The type of the object the rules can be applied to.&lt;/typeparam&gt;
    public sealed class RuleCollection&lt;T&gt; : Collection&lt;Rule&lt;T&gt;&gt;
    {
        /// &lt;summary&gt;
        /// Adds a new &lt;see cref=&quot;Rule{T}&quot;/&gt; to this instance.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;propertyName&quot;&gt;The name of the property the rules applies to.&lt;/param&gt;
        /// &lt;param name=&quot;error&quot;&gt;The error if the object does not satisfy the rule.&lt;/param&gt;
        /// &lt;param name=&quot;rule&quot;&gt;The rule to execute.&lt;/param&gt;
        public void Add(string propertyName, object error, Func&lt;T, bool&gt; rule) =&gt;
            this.Add(new DelegateRule&lt;T&gt;(propertyName, error, rule));

        /// &lt;summary&gt;
        /// Applies the &lt;see cref=&quot;Rule{T}&quot;/&gt;&#39;s contained in this instance to &lt;paramref name=&quot;obj&quot;/&gt;.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;obj&quot;&gt;The object to apply the rules to.&lt;/param&gt;
        /// &lt;param name=&quot;propertyName&quot;&gt;Name of the property we want to apply rules for. &lt;c&gt;null&lt;/c&gt;
        /// to apply all rules.&lt;/param&gt;
        /// &lt;returns&gt;A collection of errors.&lt;/returns&gt;
        public IEnumerable&lt;object&gt; Apply(T obj, string propertyName)
        {
            List&lt;object&gt; errors = new List&lt;object&gt;();

            foreach (Rule&lt;T&gt; rule in this)
            {
                if (string.IsNullOrEmpty(propertyName) || rule.PropertyName.Equals(propertyName))
                {
                    if (!rule.Apply(obj))
                    {
                        errors.Add(rule.Error);
                    }
                }
            }

            return errors;
        }
    }
}
</code></pre>
<h1 id="simple-example">Simple Example</h1>
<p>An example of how you can use this base class is as follows.</p>
<pre><code class="language-cs">public class ZombieViewModel : NotifyDataErrorInfo&lt;ZombieViewModel&gt;
{
    private string name;
    private int limbsRemaining;

    static ZombieViewModel()
    {
        Rules.Add(new DelegateRule&lt;ZombieViewModel&gt;(
            &quot;Name&quot;,
            &quot;Name cannot be empty.&quot;,
            x =&gt; !string.IsNullOrEmpty(x.Name)));
        Rules.Add(new DelegateRule&lt;ZombieViewModel&gt;(
            &quot;LimbsRemaining&quot;,
            &quot;A zombie can&#39;t have less than zero limbs.&quot;,
            x =&gt; x.LimbsRemaining &gt;= 0));
        Rules.Add(new DelegateRule&lt;ZombieViewModel&gt;(
            &quot;LimbsRemaining&quot;,
            &quot;A zombie can only have up to four limbs.&quot;,
            x =&gt; x.LimbsRemaining &lt;= 4));
    }

    public string Name
    {
        get =&gt; this.name;
        set =&gt; this.SetProperty(ref this.name, value);
    }

    public int LimbsRemaining
    {
        get =&gt; this.limbsRemaining;
        set =&gt; this.SetProperty(ref this.limbsRemaining, value);
    }
}
</code></pre>
<p>As you can see, our view model has two properties and as shown in the last post in the series we are using the <code>SetProperty</code> method to raise <code>PropertyChanged</code> events. The only bit I&#39;ve added for validation is in the static constructor containing the three validation rules.</p>
<p>The <code>Name</code> property has a single rule applied to it. When the name is empty a validation error is raised. The <code>LimbsRemaining</code> property has two rules and when it is less than zero or more than four, validation errors are raised auto-magically.</p>
<p>Under the covers, each time the <code>PropertyChanged</code> event is raised, we apply the corresponding rule relating to the property and if the rule fails, we raise the <code>ErrorsChanged</code> event, raise a <code>PropertyChanged</code> event for the <code>HasErrors</code> property (Which is now true) and finally ensure that any calls to <code>GetErrors</code> now returns the error shown in the rule.</p>
<h1 id="extensibility">Extensibility</h1>
<p>The <code>DelegateRule&lt;T&gt;</code> class shown above is a really easy way to provide nice, simple rules. If you need something more complex you can create your own rule by inheriting from the <code>Rule&lt;T&gt;</code> base class. An example of this could be a custom rule to validate an email address or telephone number.</p>
<h1 id="using-reactive-extensions-rx-to-replace-the-errorschanged-event">Using Reactive Extensions (Rx) to Replace the ErrorsChanged Event</h1>
<p>C# events are old school. Reactive Extensions (Rx) provides a cleaner and far more powerful drop-in replacement for C# events. I&#39;m not going to go over the advantages of Reactive Extensions here but you can take a look at a series of blog posts I&#39;ve done in the <a href="https://rehansaeed.com/reactive-extensions-part1-replacing-events/">past</a>.</p>
<p>We can hide the <code>ErrorsChanged</code> C# event by explicitly implementing the interface (Click <a href="http://stackoverflow.com/questions/143405/c-sharp-interfaces-implicit-implementation-versus-explicit-implementation">here</a> for details on implicit versus explicit implementations of interfaces).</p>
<p>The <code>ErrorsChanged</code> C# event can still be accessed by first casting the object to <code>INotifyDataErrorInfo</code>. Validation in XAML languages, which uses this interface continues to work. Our new Reactive Extensions (Rx) observable event called <code>WhenErrorsChanged</code> of type? <code>IObservable&lt;string&gt;</code> (The string is the property name) is now the default method of subscribing for error changed events and we&#39;ve hidden away the old C# event.</p>
<h1 id="inotifydataerrorinfo-support">INotifyDataErrorInfo Support</h1>
<p>The <code>INotifyDataErrorInfo</code> interface is supported by most XAML frameworks including WPF, Silverlight and Windows Phone. Currently WinRT does not support the interface at the time of writing but you can bet that they will in future and in the mean time you can use the <a href="https://winrtxamlvalidation.codeplex.com/">WinRT XAML Validation library</a> in conjunction with the code below to plug this gap.</p>
<h1 id="quick-nod-to-idataerrorinfo">Quick nod to IDataErrorInfo</h1>
<p>This interface used to be used for validation but was replaced by <code>INotifyDataErrorInfo</code>. The new interface provides a much nicer API which is easier to code against and better performance. If you are still using the old interface, its time to make the change.</p>
<h1 id="conclusions">Conclusions</h1>
<p>I have been tweaking this base class for the last few years and feel I&#39;ve got a fairly good balance. I&#39;ve not seen too many implementations of this interface, most blogs seem to cover <code>INotifyPropertyChanged</code> pretty well though. I&#39;d be very interested if anyone has any comments or thoughts on improvements. Feel free to sound-off in the comments.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Naming Conventions]]></title>
        <id>https://rehansaeed.com/naming-conventions/</id>
        <link href="https://rehansaeed.com/naming-conventions/"/>
        <updated>2014-09-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Code is written to be read by humans, not machines. Naming conventions and standard code styling can boost productivity, particularly if working in teams.]]></summary>
        <content type="html"><![CDATA[<p>Code is written to be read by humans, not for machines so it makes sense that following some basic ground rules for the look and feel of your code could make your code easier to read and boost your productivity. This is particularly important if you work in teams where each developer can go off and write their code in entirely different ways. Reading these different styles hinders your productivity. In my opinion if you add up all the few extra seconds here and there, it all adds up to extra hours or even days wasted over the course of a year per developer.</p>
<p>::: warning Disclaimer
At the end of the day, there are no rules for coding style. This is all a matter of personal preference.
:::</p>
<p>I have recently been doing a fair amount of T-SQL and C++ and thought I&#39;d look into some form of naming conventions for the two languages. If you&#39;ve read my previous blog post &#39;<a href="https://rehansaeed.com/stop-brace-wars-use-stylecop/">Stop the Brace Wars, Use StyleCop</a>&#39;, then you&#39;ll know how I feel about coding style in the C# language.</p>
<h1 id="sql-coding-style">SQL Coding Style</h1>
<p>The SQL language is an interesting case, its a really old language from 1974 and in those days they didn&#39;t even have keyboards that could deal with upper and lower case letters!</p>
<p>A lot of examples you&#39;ll see in books have used all-caps for the SQL keywords like <code>SELECT</code> and <code>WHERE</code>. As is <a href="http://en.wikipedia.org/wiki/All_caps#cite_note-autogenerated62-4">widely researched</a>, all-caps is <strong>really</strong> bad for readability. However, as <a href="http://stackoverflow.com/questions/608196/why-should-i-capitalize-my-sql-keywords">this</a> Stack Overflow article shows, all-caps is still a really popular style of writing SQL.</p>
<pre><code class="language-sql">SELECT s.Name, s.Size
FROM Spaceship s
WHERE s.Name = &#39;Death Star&#39;
</code></pre>
<pre><code class="language-sql">select s.Name, s.Size
from Spaceship s
where s.Name = &#39;Death Star&#39;
</code></pre>
<p>In the above example, the all capitals doesn&#39;t look too bad. It&#39;s a very short SQL statement and helps break up the three parts of the query. You could argue, that the SQL keywords are coloured blue, so we don&#39;t need the capitalization and that&#39;s a pretty good argument. As an aside please remember that colour blindness affects approximately 1 in 12 men and 1 in 200 women in the world (<a href="http://en.wikipedia.org/wiki/Color_blindness">source</a>).</p>
<p>But this is a really simple SQL statement, if you start writing a stored procedure of any complexity, things get ugly pretty fast (Imagine writing C# with upper case keywords, yuck!). Happily though, SQL developers seemed to have cottoned onto this. A lot more real world SQL examples on blogs and forums seem to be all lower-case. Even to me though, all lower case SQL does not look entirely correct, perhaps I&#39;ve just been conditioned into all-caps, it is however easier to read for more complex T-SQL.</p>
<h1 id="c-coding-style">C++ Coding Style</h1>
<p>C++ is fairly similar to C#, so for me as a mainly C# developer it&#39;s easier to write in a similar style. However, I was not happy with this approach and wanted to see what was being done elsewhere and what was the more &#39;correct&#39; approach, if there was one.</p>
<p>I found the <a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml">Google C++ Style Guide</a> which is a really detailed, yet simple set of guidelines for how to write your C++. Definitely worth a quick read.</p>
<h1 id="conclusions">Conclusions</h1>
<p>Coding style is a deeply personal subject and a pretty important one too that is often overlooked. In my opinion, it&#39;s always worth spending a little time looking up the preferred methods (There will usually be more than one) of writing in any particular language and picking one of the most popular approaches.</p>
<p>If you&#39;re working in a team, you&#39;ll reap the benefits pretty quickly. Code written by others will look just like yours, saving you precious seconds. Even if your a solo developer, you&#39;ll benefit. Developers are inherently plagiarists, copying snippets of code found on-line written by others. Using a common coding style will mean that your style is more likely to be the same as the next snippet of code you or I shamelessly copy from the internet.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Model-View-ViewModel (MVVM) - Part 3 - INotifyPropertyChanged]]></title>
        <id>https://rehansaeed.com/model-view-viewmodel-mvvm-part3-inotifypropertychanged/</id>
        <link href="https://rehansaeed.com/model-view-viewmodel-mvvm-part3-inotifypropertychanged/"/>
        <updated>2014-06-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An base class implementation for the INotifyPropertyChanged interface. Used in the Model-View-ViewModel (MVVM) pattern. Targeted for best performance.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/model-view-viewmodel-mvvm-part1-overview/">Model-View-ViewModel (MVVM) - Overview</a></li>
<li><a href="https://rehansaeed.com/model-view-viewmodel-mvvm-part2-idisposable/">Model-View-ViewModel (MVVM) - IDisposable</a></li>
<li><a href="https://rehansaeed.com/model-view-viewmodel-mvvm-part3-inotifypropertychanged/">Model-View-ViewModel (MVVM) - INotifyPropertyChanged</a></li>
<li><a href="https://rehansaeed.com/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/">Model-View-ViewModel (MVVM) - INotifyDataErrorInfo</a></li>
</ol>
<p>I know there have been lots of Model-View-ViewModel (MVVM) articles talking about <a href="http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx">INotifyPropertyChanged</a>. I&#39;ve read <strong>lots</strong> of them and this is the aggregation of all the knowledge I&#39;ve learned plus some cool new stuff (I&#39;ve not seen it done anywhere else but I could be wrong) which I&#39;ve also covered in my <a href="https://rehansaeed.com/reactive-extensions-part1-replacing-events/">Reactive Extensions (Rx) posts</a>.</p>
<p>So what are the main aims of a base class implementing <a href="http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx">INotifyPropertyChanged</a>? Well, I think there are a few:</p>
<ul>
<li>Performance - Performance is king. It needs to be fast and I mean <strong>really</strong> fast. You can&#39;t afford for your UI to freeze up while your view works out all its bindings to the properties in your view model.</li>
<li>Simplicity - I want to raise property changed events with one line of code and I don&#39;t want to mess around with strings if I can help it.</li>
<li>Reactive Extensions (Rx) - Events are old school, I want an observable property changed event notification system instead of the <code>PropertyChanged</code> C# event.</li>
<li>Human Error - I don&#39;t want to raise property change events for properties that don&#39;t exist by accident.</li>
<li>Dependent Properties - Often, the value of one property depends on the value of another. I need to handle this somehow.</li>
<li>Re-factoring - I don&#39;t want my code to break when I rename a property and forget to rename a string too.</li>
<li>Has it Really Changed - I don&#39;t want to raise a property changed event if the value of a property has not really changed.</li>
</ul>
<p>So, without further ado, here is my implementation.</p>
<pre><code class="language-cs">namespace Framework.ComponentModel
{
    using System;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Reactive.Linq;
    using System.Reflection;
    using System.Runtime.CompilerServices;

    /// &lt;summary&gt;
    /// Notifies subscribers that a property in this instance is changing or has changed.
    /// &lt;/summary&gt;
    public abstract class NotifyPropertyChanges : Disposable, INotifyPropertyChanged //, INotifyPropertyChanging
    {
        /// &lt;summary&gt;
        /// Occurs when a property value changes.
        /// &lt;/summary&gt;
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
        {
            add { this.propertyChanged += value; }
            remove { this.propertyChanged -= value; }
        }

        /// &lt;summary&gt;
        /// Occurs when a property value is changing.
        /// &lt;/summary&gt;
        // event PropertyChangingEventHandler INotifyPropertyChanging.PropertyChanging
        // {
        //     add { this.PropertyChanging += value; }
        //     remove { this.PropertyChanging -= value; }
        // }

        /// &lt;summary&gt;
        /// Occurs when a property value changes.
        /// &lt;/summary&gt;
        private event PropertyChangedEventHandler propertyChanged;

        /// &lt;summary&gt;
        /// Occurs when a property value is changing.
        /// &lt;/summary&gt;
        // private event PropertyChangingEventHandler PropertyChanging;

        /// &lt;summary&gt;
        /// Gets the when property changed observable event. Occurs when a property value changes.
        /// &lt;/summary&gt;
        /// &lt;value&gt;
        /// The when property changed observable event.
        /// &lt;/value&gt;
        public IObservable&lt;string&gt; WhenPropertyChanged
        {
            get
            {
                this.ThrowIfDisposed();

                return Observable
                    .FromEventPattern&lt;PropertyChangedEventHandler, PropertyChangedEventArgs&gt;(
                        h =&gt; this.propertyChanged += h,
                        h =&gt; this.propertyChanged -= h)
                    .Select(x =&gt; x.EventArgs.PropertyName);
            }
        }

        /// &lt;summary&gt;
        /// Gets the when property changing observable event. Occurs when a property value is changing.
        /// &lt;/summary&gt;
        /// &lt;value&gt;
        /// The when property changing observable event.
        /// &lt;/value&gt;
        // public IObservable&lt;EventPattern&lt;PropertyChangingEventArgs&gt;&gt; WhenPropertyChanging
        // {
        //     get
        //     {
        //         return Observable
        //             .FromEventPattern&lt;PropertyChangingEventHandler, PropertyChangingEventArgs&gt;(
        //                 h =&gt; this.PropertyChanging += h,
        //                 h =&gt; this.PropertyChanging -= h)
        //             .AsObservable();
        //     }
        // }

        /// &lt;summary&gt;
        /// Raises the PropertyChanged event.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;propertyName&quot;&gt;Name of the property.&lt;/param&gt;
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            Debug.Assert(
                string.IsNullOrEmpty(propertyName) ||
                (this.GetType().GetRuntimeProperty(propertyName) != null),
                &quot;Check that the property name exists for this instance.&quot;);

            PropertyChangedEventHandler eventHandler = this.propertyChanged;

            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// &lt;summary&gt;
        /// Raises the PropertyChanged event.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;propertyNames&quot;&gt;The property names.&lt;/param&gt;
        protected void OnPropertyChanged(params string[] propertyNames)
        {
            if (propertyNames == null)
            {
                throw new ArgumentNullException(nameof(propertyNames));
            }

            foreach (string propertyName in propertyNames)
            {
                this.OnPropertyChanged(propertyName);
            }
        }

        /// &lt;summary&gt;
        /// Raises the PropertyChanging event.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;propertyName&quot;&gt;Name of the property.&lt;/param&gt;
        protected virtual void OnPropertyChanging([CallerMemberName] string propertyName = null)
        {
            Debug.Assert(
                string.IsNullOrEmpty(propertyName) ||
                (this.GetType().GetRuntimeProperty(propertyName) != null),
                &quot;Check that the property name exists for this instance.&quot;);

            // PropertyChangingEventHandler eventHandler = this.PropertyChanging;

            // if (eventHandler != null)
            // {
            //     eventHandler(this, new PropertyChangingEventArgs(propertyName));
            // }
        }

        /// &lt;summary&gt;
        /// Raises the PropertyChanging event.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;propertyNames&quot;&gt;The property names.&lt;/param&gt;
        protected void OnPropertyChanging(params string[] propertyNames)
        {
            if (propertyNames == null)
            {
                throw new ArgumentNullException(nameof(propertyNames));
            }

            foreach (string propertyName in propertyNames)
            {
                this.OnPropertyChanging(propertyName);
            }
        }

        /// &lt;summary&gt;
        /// Sets the value of the property to the specified value if it has changed.
        /// &lt;/summary&gt;
        /// &lt;typeparam name=&quot;TProp&quot;&gt;The type of the property.&lt;/typeparam&gt;
        /// &lt;param name=&quot;currentValue&quot;&gt;The current value of the property.&lt;/param&gt;
        /// &lt;param name=&quot;newValue&quot;&gt;The new value of the property.&lt;/param&gt;
        /// &lt;param name=&quot;propertyName&quot;&gt;Name of the property.&lt;/param&gt;
        /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the property was changed, otherwise &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt;
        protected bool SetProperty&lt;TProp&gt;(
            ref TProp currentValue,
            TProp newValue,
            [CallerMemberName] string propertyName = null)
        {
            this.ThrowIfDisposed();

            if (!object.Equals(currentValue, newValue))
            {
                this.OnPropertyChanging(propertyName);
                currentValue = newValue;
                this.OnPropertyChanged(propertyName);

                return true;
            }

            return false;
        }

        /// &lt;summary&gt;
        /// Sets the value of the property to the specified value if it has changed.
        /// &lt;/summary&gt;
        /// &lt;typeparam name=&quot;TProp&quot;&gt;The type of the property.&lt;/typeparam&gt;
        /// &lt;param name=&quot;currentValue&quot;&gt;The current value of the property.&lt;/param&gt;
        /// &lt;param name=&quot;newValue&quot;&gt;The new value of the property.&lt;/param&gt;
        /// &lt;param name=&quot;propertyNames&quot;&gt;The names of all properties changed.&lt;/param&gt;
        /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the property was changed, otherwise &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt;
        protected bool SetProperty&lt;TProp&gt;(
            ref TProp currentValue,
            TProp newValue,
            params string[] propertyNames)
        {
            this.ThrowIfDisposed();

            if (!object.Equals(currentValue, newValue))
            {
                this.OnPropertyChanging(propertyNames);
                currentValue = newValue;
                this.OnPropertyChanged(propertyNames);

                return true;
            }

            return false;
        }

        /// &lt;summary&gt;
        /// Sets the value of the property to the specified value if it has changed.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;equal&quot;&gt;A function which returns &lt;c&gt;true&lt;/c&gt; if the property value has changed, otherwise &lt;c&gt;false&lt;/c&gt;.&lt;/param&gt;
        /// &lt;param name=&quot;action&quot;&gt;The action where the property is set.&lt;/param&gt;
        /// &lt;param name=&quot;propertyName&quot;&gt;Name of the property.&lt;/param&gt;
        /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the property was changed, otherwise &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt;
        protected bool SetProperty(
            Func&lt;bool&gt; equal, 
            Action action,
            [CallerMemberName] string propertyName = null)
        {
            this.ThrowIfDisposed();

            if (equal())
            {
                return false;
            }

            this.OnPropertyChanging(propertyName);
            action();
            this.OnPropertyChanged(propertyName);

            return true;
        }

        /// &lt;summary&gt;
        /// Sets the value of the property to the specified value if it has changed.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;equal&quot;&gt;A function which returns &lt;c&gt;true&lt;/c&gt; if the property value has changed, otherwise &lt;c&gt;false&lt;/c&gt;.&lt;/param&gt;
        /// &lt;param name=&quot;action&quot;&gt;The action where the property is set.&lt;/param&gt;
        /// &lt;param name=&quot;propertyNames&quot;&gt;The property names.&lt;/param&gt;
        /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the property was changed, otherwise &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt;
        protected bool SetProperty(
            Func&lt;bool&gt; equal, 
            Action action,
            params string[] propertyNames)
        {
            this.ThrowIfDisposed();

            if (equal())
            {
                return false;
            }

            this.OnPropertyChanging(propertyNames);
            action();
            this.OnPropertyChanged(propertyNames);

            return true;
        }
    }
}
</code></pre>
<h1 id="simple-example">Simple Example</h1>
<p>An example of how you can use this base class is as follows.</p>
<pre><code class="language-cs">public class CatCountViewModel : NotifyPropertyChanges
{
    private int numberOfCats;

    public int NumberOfCats
    {
        get =&gt; this.numberOfCats;
        set =&gt; this.SetProperty(ref this.numberOfCats, value);
    }
}
</code></pre>
<h1 id="performance">Performance</h1>
<p>As I said before, performance is king. A slow application is a frustrating application. However, there has always been a problem. When you want to raise a property changed event, you have to pass in a string. We can&#39;t check the validity of the string at compile time, only at runtime. So we can get errors due to typos etc. which can get overlooked.</p>
<p>There are a lot of implementations of <a href="http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx">INotifyPropertyChanged</a> that use reflection or expression trees and as <a href="http://blog.quantumbitdesigns.com/2010/01/26/mvvm-lambda-vs-inotifypropertychanged-vs-dependencyobject">this</a> and <a href="http://blog.amusedia.com/2013/06/inotifypropertychanged-implementation.html">this</a> blog show, using reflection is a terribly slow method of raising an event and to be avoided.</p>
<p>Luckily, Microsoft introduced the <a href="http://msdn.microsoft.com/en-gb/library/system.runtime.compilerservices.callermembernameattribute.aspx">CallerMemberNameAttribute</a> attribute, which means that as in the above example, we don&#39;t need to add a string for the property name, it gets added for us to the last optional parameter in the <code>SetProperty</code> method.</p>
<p>The <code>SetProperty</code> method uses the <a href="http://msdn.microsoft.com/en-us/library/14akc2c7.aspx">ref keyword</a> to pass the parameter by reference (Passing parameters by reference is faster). It then checks to see if the <code>numberOfCats</code> parameter is different from the <code>value</code> parameter (There is no point raising a property changed event if they are the same). Only then, do we raise a property changed event.</p>
<h1 id="handling-dependent-properties">Handling Dependent Properties</h1>
<p>But what about dependent properties. Where one property affects the value of another. Well, lets take a look at another example.</p>
<pre><code class="language-cs">public class CatCounter : NotifyPropertyChanges
{
    private int numberOfCats;

    public int NumberOfCats
    {
        get =&gt; this.numberOfCats;
        set =&gt; this.SetProperty(ref this.numberOfCats, value, &quot;NumberOfCats&quot;, &quot;NumberOfCatsDescription&quot;);
    }

    public string NumberOfCatsDescription =&gt; $&quot;{this.NumberOfCats} Cats Counted&quot;;
}
</code></pre>
<p>You can see, that I&#39;ve not done anything spectacular and just passed in the strings. As I&#39;m using the <a href="http://msdn.microsoft.com/en-us/library/w5zay9db.aspx">params</a> keyword, you can pass in as many strings as you want and the <code>SetProperty</code> method will raise a property changed event for each one.</p>
<p>If you give me a moment, I will explain why I think this is the right compromise to make. Lets make no mistake, you do need to compromise between performance and simplicity/maintainability. There are approaches which make this eventuality simpler and easier to understand but they can and will degrade performance.</p>
<p>So does using strings cause problems? First of all, if you use a Visual Studio Add-in like Resharper, this problem is <a href="http://blog.jetbrains.com/dotnet/2012/07/24/inotifypropertychanged-support-in-resharper-7">solved</a> as it checks that the strings match the property name for you. Secondly, as a backup the <code>OnPropertyChanged</code> method in the implementation above contains some <code>Debug.Assert</code> statements (These are removed in Release mode and have no effect on performance) to check that the property names exist and are correct, if they are not you get a error message. Thirdly, this is fairly rare in my experience and I can deal with the overhead of having a couple of extra strings.</p>
<p>Again, this is a choice I&#39;ve made to go with performance over maintainability.</p>
<h1 id="dealing-with-wrapped-objects">Dealing with Wrapped Objects</h1>
<p>What if you want to wrap an object that looks like the one below with a class that supports <a href="http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx">INotifyPropertyChanged</a>? This is a scenario I have not seen many people cover but occurs fairly often in my experience.</p>
<pre><code class="language-cs">public class CatCount
{
    public int Count { get; set; }
}
</code></pre>
<p>An example view model for the CatCount class can be found below.</p>
<pre><code class="language-cs">public class CatCountModel : NotifyPropertyChanges
{
    private CatCount catCount;

    public int NumberOfCats
    {
        get { return this.catCount.Count; }
        set { this.SetProperty(() =&gt; this.catCount.Count == value, () =&gt; this.catCount.Count = value); }
    }
}
</code></pre>
<p>So here we are providing the <code>SetProperty</code> method with two delegates. We can&#39;t use the ref keyword we used earlier because this gives us the compiler error &quot;A property, indexer or dynamic member access may not be passed as an out or ref parameter&quot;. So we use delegates as an alternative which is not as fast as the ref keyword but almost as fast.</p>
<p>The first delegate determines if the cat count has actually changed. Only if it has (Remember, executing a delegate is far cheaper than updating the UI), do we call the next delegate which actually sets the value. Finally the <code>SetProperty</code> method raises a property changed event.</p>
<h1 id="using-reactive-extensions-rx-to-replace-the-propertychanged-event">Using Reactive Extensions (Rx) to Replace the PropertyChanged Event</h1>
<p>C# events are old school. Reactive Extensions (Rx) provides a cleaner and far more powerful drop-in replacement for C# events. I&#39;m not going to go over the advantages of Reactive Extensions here but you can take a look at a series of blog posts I&#39;ve done in the <a href="https://rehansaeed.com/reactive-extensions-part1-replacing-events/">past</a>.</p>
<p>We can hide the <code>PropertyChanged</code> C# event by explicitly implementing the interface (Click <a href="http://stackoverflow.com/questions/143405/c-sharp-interfaces-implicit-implementation-versus-explicit-implementation">here</a> for details on implicit versus explicit implementations of interfaces).</p>
<p>The <code>PropertyChanged</code> C# event can still be accessed by first casting the object to <a href="http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx">INotifyPropertyChanged</a>. Binding in XAML languages, which uses this interface continues to work. Our new Reactive Extensions (Rx) observable event called <code>WhenPropertyChanged</code> of type <code>IObservable&lt;string&gt;</code> (The string is the property name) is now the default method of subscribing for property changed events and we&#39;ve hidden away the old C# event.</p>
<h1 id="implementing-inotifypropertychanging">Implementing INotifyPropertyChanging</h1>
<p>Take another look at the title of this paragraph, it says <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanging%28v=vs.110%29.aspx">INotifyPropertyChang<strong>ing</strong></a> and not <a href="http://msdn.microsoft.com/en-GB/library/system.componentmodel.inotifypropertychanged.aspx">INotifyPropertyChang<strong>ed</strong></a>.</p>
<p>This interface has a single event called <code>PropertyChang**ing**</code> and is raised <strong>before</strong> a property is about to be changed. This interface is not actually used by any XAML framework but does complement the <code>INotifyPropertyChanged</code> interface and can be useful in your view models when you want to know that a property is about to change and do something about it.</p>
<p>Given that we&#39;ve written a base class, it is super easy to include it too. You should note that this interface only exists in the full .NET Framework and Silverlight. It does not exist on Windows Store or Windows Phone platforms.</p>
<p>As we are writing a base class for a Portable Class Library (PCL), I&#39;ve commented it out. However, if I were to create a full .NET or Silverlight class library, I would definitely put that code back in.</p>
<p>If you find the interface useful and you too are using a Portable Class Library (PCL), you could take a copy of the <code>INotifyPropertyChanging</code> interface and include it with your base class. If Microsoft ever decide to include it into the PCL, you simply need to remove your class and use the one in the framework.</p>
<h1 id="conclusions">Conclusions</h1>
<p>I have gone through many iterations to get to this base class. As I&#39;ve shown, I&#39;ve had very particular goals in mind. Your mileage may vary but I believe with the tools Microsoft have given us, this is a good compromise and covers all the scenarios I can think of. I&#39;d be very interested if anyone has any comments or thoughts on improvements. Feel free to sound-off in the comments.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Model-View-ViewModel (MVVM) - Part 2 - IDisposable]]></title>
        <id>https://rehansaeed.com/model-view-viewmodel-mvvm-part2-idisposable/</id>
        <link href="https://rehansaeed.com/model-view-viewmodel-mvvm-part2-idisposable/"/>
        <updated>2014-06-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Implementing IDisposable correctly is ridiculously hard. A Disposable base class can make it easier. Using IDisposable in Model-View-ViewModel (MVVM) really helps.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/model-view-viewmodel-mvvm-part1-overview/">Model-View-ViewModel (MVVM) - Overview</a></li>
<li><a href="https://rehansaeed.com/model-view-viewmodel-mvvm-part2-idisposable/">Model-View-ViewModel (MVVM) - IDisposable</a></li>
<li><a href="https://rehansaeed.com/model-view-viewmodel-mvvm-part3-inotifypropertychanged/">Model-View-ViewModel (MVVM) - INotifyPropertyChanged</a></li>
<li><a href="https://rehansaeed.com/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/">Model-View-ViewModel (MVVM) - INotifyDataErrorInfo</a></li>
</ol>
<p>View models these days interact with all kinds of precious resources like Compasses and the GPS. Implementing <code>IDisposable</code> is an important pattern you can follow to dispose of these resources cleanly. Freeing them up to be used elsewhere and saving the users battery (Particularly important on mobile devices). Using the <code>IDisposable</code> interface in the Model-View-ViewModel (MVVM) pattern is a wise decision.</p>
<p>Implementing <code>IDisposable</code> <strong>correctly</strong> is ridiculously hard. If you don&#39;t know how hard it really is, I recommend reading the top comment on <a href="http://stackoverflow.com/questions/538060/proper-use-of-the-idisposable-interface">this</a> Stack Overflow article.</p>
<p>Implementing <a href="http://msdn.microsoft.com/en-GB/library/system.idisposable.aspx">IDisposable</a> is one of the rare times in C# where a developer has to use <a href="http://msdn.microsoft.com/en-us/library/66x5fx1b.aspx">C# Destructors</a> and also one of the few times when we have to tickle the garbage collector to stop it from trying to release the unmanaged resources twice by calling <a href="http://msdn.microsoft.com/en-us/library/system.gc.suppressfinalize%28v=vs.110%29.aspx">SuppressFinalize</a> on <a href="http://msdn.microsoft.com/en-us/library/system.gc%28v=vs.110%29.aspx">GC</a>.</p>
<p>Having to write this code repeatedly is difficult and error prone, so how about a base class?</p>
<pre><code class="language-cs">namespace Framework.ComponentModel
{
    using System;
    using System.Reactive;
    using System.Reactive.Linq;
    using System.Reactive.Subjects;

    /// &lt;summary&gt;
    /// Base class for members implementing &lt;see cref=&quot;IDisposable&quot;/&gt;.
    /// &lt;/summary&gt;
    public abstract class Disposable : IDisposable
    {
        private bool isDisposed;
        private Subject&lt;Unit&gt; whenDisposedSubject;

        /// &lt;summary&gt;
        /// Finalizes an instance of the &lt;see cref=&quot;Disposable&quot;/&gt; class. Releases unmanaged
        /// resources and performs other cleanup operations before the &lt;see cref=&quot;Disposable&quot;/&gt;
        /// is reclaimed by garbage collection. Will run only if the
        /// Dispose method does not get called.
        /// &lt;/summary&gt;
        ~Disposable() =&gt; this.Dispose(false);

        /// &lt;summary&gt;
        /// Gets the when errors changed observable event. Occurs when the validation errors have changed for a property or for the entire object.
        /// &lt;/summary&gt;
        /// &lt;value&gt;
        /// The when errors changed observable event.
        /// &lt;/value&gt;
        public IObservable&lt;Unit&gt; WhenDisposed
        {
            get
            {
                if (this.IsDisposed)
                {
                    return Observable.Return(Unit.Default);
                }
                else
                {
                    if (this.whenDisposedSubject == null)
                    {
                        this.whenDisposedSubject = new Subject&lt;Unit&gt;();
                    }

                    return this.whenDisposedSubject.AsObservable();
                }
            }
        }

        /// &lt;summary&gt;
        /// Gets a value indicating whether this &lt;see cref=&quot;Disposable&quot;/&gt; is disposed.
        /// &lt;/summary&gt;
        /// &lt;value&gt;&lt;c&gt;true&lt;/c&gt; if disposed; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/value&gt;
        public bool IsDisposed =&gt; this.isDisposed;

        /// &lt;summary&gt;
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// &lt;/summary&gt;
        public void Dispose()
        {
            // Dispose all managed and unmanaged resources.
            this.Dispose(true);

            // Take this object off the finalization queue and prevent finalization code for this
            // object from executing a second time.
            GC.SuppressFinalize(this);
        }

        /// &lt;summary&gt;
        /// Disposes the managed resources implementing &lt;see cref=&quot;IDisposable&quot;/&gt;.
        /// &lt;/summary&gt;
        protected virtual void DisposeManaged()
        {
        }

        /// &lt;summary&gt;
        /// Disposes the unmanaged resources implementing &lt;see cref=&quot;IDisposable&quot;/&gt;.
        /// &lt;/summary&gt;
        protected virtual void DisposeUnmanaged()
        {
        }

        /// &lt;summary&gt;
        /// Throws a &lt;see cref=&quot;ObjectDisposedException&quot;/&gt; if this instance is disposed.
        /// &lt;/summary&gt;
        protected void ThrowIfDisposed()
        {
            if (this.isDisposed)
            {
                throw new ObjectDisposedException(this.GetType().Name);
            }
        }

        /// &lt;summary&gt;
        /// Releases unmanaged and - optionally - managed resources.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;disposing&quot;&gt;&lt;c&gt;true&lt;/c&gt; to release both managed and unmanaged resources;
        /// &lt;c&gt;false&lt;/c&gt; to release only unmanaged resources, called from the finalizer only.&lt;/param&gt;
        private void Dispose(bool disposing)
        {
            // Check to see if Dispose has already been called.
            if (!this.isDisposed)
            {
                // If disposing managed and unmanaged resources.
                if (disposing)
                {
                    this.DisposeManaged();
                }

                this.DisposeUnmanaged();

                this.isDisposed = true;

                if (this.whenDisposedSubject != null)
                {
                    // Raise the WhenDisposed event.
                    this.whenDisposedSubject.OnNext(Unit.Default);
                    this.whenDisposedSubject.OnCompleted();
                    this.whenDisposedSubject.Dispose();
                }
            }
        }
    }
}
</code></pre>
<p>There are several interesting facets to this implementation.</p>
<ol>
<li>There is a difference between disposing of managed and unmanaged resources in the disposable pattern. To facilitate this, there are two separate protected methods which can be overridden in a derived class to dispose of each of them.</li>
<li>The disposable pattern requires you to throw an <code>ObjectDisposedException</code> when you try to access a property or method after the object has been disposed. To achieve this, there is a <code>ThrowIfDisposed</code> helper method which can be added to the top of each property or method.</li>
<li>There is an <code>IsDisposed</code> property which can be useful if we don&#39;t know if the object is disposed or not.</li>
<li>Finally, there is a Reactive Extensions (Rx) observable <code>WhenDisposed</code> property. This allows us to register for the dispose event.</li>
</ol>
<p>Here is an example of how the base class is used to dispose of both a managed and unmanaged (COM object) resources.</p>
<pre><code class="language-cs">public class DisposableExample : Disposable
{
    private ManagedResource managedResource;
    private UnmanagedResource unmanagedResource;

    public void Foo()
    {
        this.ThrowIfDisposed();

        // Do Stuff
    }

    protected override void DisposeManaged() =&gt;
        this.managedResource.Dispose();

    protected override void DisposeUnmanaged()
    {
        Marshal.ReleaseComObject(this.unmanagedResource);
        this.unmanagedResource = null;
    }
}
</code></pre>
<p>An example of how to dispose of an instance of the above object.</p>
<pre><code class="language-cs">DisposableExample disposable = new DisposableExample();
disposable.WhenDisposed.Subscribe(x =&gt; Console.WriteLine(&quot;Disposed Event Fired&quot;));
disposable.Dispose();
Console.WriteLine(disposable.IsDisposed);
</code></pre>
<p>As you can see, it looks a whole lot simpler and has some pretty cool helper functions and features. No more need to remember how to implement this complicated pattern.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Model-View-ViewModel (MVVM) - Part 1 - Overview]]></title>
        <id>https://rehansaeed.com/model-view-viewmodel-mvvm-part1-overview/</id>
        <link href="https://rehansaeed.com/model-view-viewmodel-mvvm-part1-overview/"/>
        <updated>2014-05-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[What really goes into using Model-View-ViewModel (MVVM) in .NET. Base classes for INotifyPropertyChanged, INotifyDataErrorInfo, IDisposable and a lot more.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/model-view-viewmodel-mvvm-part1-overview/">Model-View-ViewModel (MVVM) - Overview</a></li>
<li><a href="https://rehansaeed.com/model-view-viewmodel-mvvm-part2-idisposable/">Model-View-ViewModel (MVVM) - IDisposable</a></li>
<li><a href="https://rehansaeed.com/model-view-viewmodel-mvvm-part3-inotifypropertychanged/">Model-View-ViewModel (MVVM) - INotifyPropertyChanged</a></li>
<li><a href="https://rehansaeed.com/model-view-viewmodel-mvvm-part4-inotifydataerrorinfo/">Model-View-ViewModel (MVVM) - INotifyDataErrorInfo</a></li>
</ol>
<p>I have been meaning for some time to do a series of posts about Model-View-ViewModel (MVVM) and its potential base classes. Then I read <a href="http://mtaulty.com/CommunityServer/blogs/mike_taultys_blog/archive/2014/05/09/windows-phone-8-1-and-xaml-apps-making-it-easier-for-mvvm-developers.aspx">Mike Taulty&#39;s post</a> about why MVVM &#39;bits&#39; not built in to .NET.</p>
<p>My aim in these posts will be to either, pick off the shelf components which are best of breed where there is no point reinventing the wheel or build my own components where necessary.</p>
<p>Assuming you already know about the basic Model-View-ViewModel (MVVM) pattern described in the title image of this post, when we talk about MVVM, what do we really mean?</p>
<h1 id="platforms">Platforms</h1>
<p>Well there are several .NET platforms that all provide some basic low level support for Model-View-ViewModel (MVVM), Windows Store, Windows Phone, Silverlight and Windows Presentation Foundation (WPF). It is all of these platforms that I&#39;ll be discussing and targeting my code towards.</p>
<h1 id="mvvm-bits">MVVM &#39;Bits&#39;</h1>
<p>In Mike Taulty&#39;s post, he goes through a list of &#39;bits&#39; which all come together to help with building an application that fits into the MVVM design pattern. I&#39;ve added to that list below:</p>
<ol>
<li><code>IDisposable</code> - When you have a scarce resource like a GPS, gyroscope or compass, you inevitably need to dispose of it somewhere. Implementing <code>IDisposable</code> <strong>properly</strong> is <a href="http://msdn.microsoft.com/en-us/library/system.idisposable%28v=vs.110%29.aspx">hard work</a>. A base class would be handy.</li>
<li><code>INotifyPropertyChanged</code> - This is the building block of all .NET based MVVM. There needs to be a base class for this that is high performance and yet simple and easy to use.</li>
<li><code>INotifyDataErrorInfo</code> - Validation is an often overlooked part of an application. This handy interface makes doing validation of your view models a cinch.</li>
<li><code>IEditableObject</code> (WPF only) - This interface helps with implementing undo and redo but is used specifically in the WPF data grid.</li>
<li><code>ObservableCollection&lt;T&gt;</code> - This collection is a good start out of the box but why does it still not have an AddRange method? Why do we not have an <code>ObservableDictionary&lt;TKey, TValue&gt;</code> or a <code>KeyedObservableCollection&lt;TKey, TValue&gt;</code>? What if you have a collection of items implementing <code>INotifyPropertyChanged</code> and you want to know if one of those items changes, why can&#39;t the collection type help you there also?</li>
<li><code>ICommand</code> - Most implementations out there provide a base class for <code>ICommand</code> and usually call it <code>RelayCommand</code> or <code>DelegateCommand</code>. They usually have another implementation with a generic argument <code>RelayCommand&lt;T&gt;</code> or <code>DelegateCommand&lt;T&gt;</code>. These are a quick way to add a command to your view model, where the implementation of the command is usually a method in your view model passed in as a delegate. Sometimes though, this is not enough. What if you have a largish command and want to split it off into a separate class, a base class for <code>ICommand</code> would be useful. What if you have a command that does <code>async</code> and <code>await</code>? <code>ICommand</code> doesn&#39;t support that but can we provide some help here?</li>
<li>Inversion of control (IoC) - There are a lot of IoC frameworks out there already, why reinvent the wheel. Just pick one but which one?</li>
</ol>
<p>I&#39;ll pause just here as I think the above listed items are all base classes that could be used across the board on all the major platforms. They are at the very heart of MVVM in .NET. The rest of the list below are more dependant on the type of application you are building.</p>
<ol>
<li>Navigation - This has always been a stone in my shoe. Navigation is inherently something that happens in the view but it is something that view models often need to understand. The problem is, that the view model is not supposed to know about the view at all. This problem occurs again and again in different forms on each platform.<ul>
<li>Navigating pages in Windows Store, Windows Phone, Silverlight.</li>
<li>Navigating Windows in Windows Presentation Foundation (WPF) and Windows Store.</li>
</ul>
</li>
<li>User Interaction - I&#39;m talking about <code>MessageBox</code>&#39;s, <code>MessageDialog</code>&#39;s, Toast&#39;s etc. Giving the user information or asking them questions happens on all platforms. This problem is very similar to the Navigation problem.</li>
<li>Connecting your Views to ViewModels - This is usually some by-product of which IoC container you choose to use, whether it&#39;s MEF, Unity, Autofac or some other. There is no recommended way of doing this and I don&#39;t think I&#39;ve ever found a &#39;correct&#39; way of doing this.</li>
<li>Saving View Model state - This usually needs to be done when the application closes or suspends due to some user interaction. A lot of frameworks simply serialize the whole View Model and save it away but is that the best way and what about doing that in a WPF application?</li>
<li>Events - Passing events between view models is a fairly useful ability, allowing communication and passing of state.</li>
<li>Composing Views - Some MVVM frameworks like PRISM provide support for composing different views together. Alternatively, this process usually has a connection with the type of IoC container you are using.</li>
<li>Firing Commands - A lot of controls can&#39;t fire off <code>ICommand</code>&#39;s in XAML because they don&#39;t provide a Command property or sometimes you want to fire a command based on some event or even a key press.</li>
<li>Other Stuff - Reactive Extensions can help in some pretty interesting ways with MVVM. What about Portable Class Library&#39;s? Why does the MVVM on one platform need to be different from another?</li>
</ol>
<p>The last two things in the list are more abstract requirements for any MVVM framework.</p>
<ol>
<li>Testability - Writing a view model which is easy to test is hard work. Especially if you want to use <code>MessageBox</code>&#39;s, GPS API&#39;s or other API&#39;s which make testing difficult. You don&#39;t want a <code>MessageBox</code> popping up in the middle of your test do you?</li>
<li>Performance - Your application needs to run fast, especially if it&#39;s running on a phone. For example, a lot of MVVM frameworks use expression trees and reflection to raise property changed notifications . What impact does this have in the performance versus maintainability trade off?</li>
</ol>
<h1 id="existing-frameworks">Existing Frameworks</h1>
<p>Wow, that&#39;s a lot of stuff! All of this &#39;stuff&#39; is related but covers a huge range of subjects. A lot of existing MVVM frameworks try to do all of this at once!</p>
<p>In my humble opinion, because they do so much, they usually only cover some, say 70-80% of the full functionality. What business does an MVVM framework have including an IoC framework? There are lots of IoC frameworks out there that are far more powerful than anything we could write but a lot of MVVM frameworks include one too.</p>
<h1 id="conclusions">Conclusions</h1>
<p>So ideally what we need is something modular, that you can plug bits into but also something that covers all the bases.</p>
<p>Whats your opinion? I&#39;ve looked at a lot of frameworks MVVM Light, PRISM, etc. In my opinion, the seven top items are the most important but also the most neglected bits of MVVM. Is there some framework out there that does all this and more?</p>
<p>I&#39;ll discuss this and a lot more in the coming posts.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Portable Class Library (PCL) version of NotificationsExtensions NuGet package]]></title>
        <id>https://rehansaeed.com/portable-class-library-version-of-notificationsextensions-nuget-package/</id>
        <link href="https://rehansaeed.com/portable-class-library-version-of-notificationsextensions-nuget-package/"/>
        <updated>2014-05-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[NotificationsExtensions.Portable is a Portable Class Library (PCL) used to Create Windows 8.1 or Windows Phone 8.1 Tile, Toast and Badge Notification XML.]]></summary>
        <content type="html"><![CDATA[<p>I have recently got into creating NuGet packages, when I had to create one for <a href="https://rehansaeed.com/wpf-metro-part4-elysium-extra">Elysium Extra</a>. I discovered it was <a href="http://docs.nuget.org/docs/creating-packages/using-a-gui-to-build-packages">really easy</a> to do too. I&#39;ve just finished creating another one called, you guessed it <code>NotificationsExtensions.Portable</code> and I did in in 5 minutes!</p>
<h1 id="about">About</h1>
<p><code>NotificationsExtensions.Portable</code> is a <a href="http://msdn.microsoft.com/en-us/library/gg597391%28v=vs.110%29.aspx">Portable Class Library (PCL)</a> version of other <code>NotificationsExtensions</code> NuGet Packages. It&#39;s used to Create Windows 8.1 or Windows Phone 8.1 Tile, Toast and Badge Notification XML. This package is intended for use, instead of or as well as the following NuGet packages:</p>
<ul>
<li><a href="https://www.nuget.org/packages/NotificationsExtensions.WinRT">NotificationsExtensions.WinRT</a></li>
<li><a href="https://www.nuget.org/packages/NotificationsExtensions.UniversalApps">NotificationsExtensions.UniversalApps</a></li>
</ul>
<h1 id="tile-toast-and-badge-templates">Tile, Toast and Badge Templates</h1>
<p>This project helps to create XML representing Tile, Toast and Badge notifications on the Windows 8.1 and Windows Phone 8.1 platforms. You can take a look at the <a href="http://msdn.microsoft.com/en-us/library/windows/apps/Hh761491.aspx">template catalogue</a> to see the types of templates available on these platforms.</p>
<p><img src="https://rehansaeed.com/portable-class-library-version-of-notificationsextensions-nuget-package/images/Tiles.png" alt="Wide Tile Template"></p>
<h1 id="why-is-this-useful">Why is this Useful?</h1>
<p>It&#39;s useful when trying to send notifications from the server side using Azure Mobile Services .NET Backend or some other .NET based push notification. When you want to create notification XML in a standard .NET project and not a WinRT project. I personally use it for my <a href="http://apps.microsoft.com/windows/en-gb/app/london-travel-live/2916d32f-2ca3-4325-adc0-c62b44306fae">London Travel Live</a> and <a href="http://apps.microsoft.com/windows/en-gb/app/currency-converter-pro/32863ebf-c907-4806-a2dd-864fb4b573da">Currency Converter Pro</a> apps.</p>
<h1 id="nuget">NuGet</h1>
<p><code>NotificationsExtensions.Portable</code> is available on NuGet. Simply follow the instructions below:</p>
<ol>
<li>Click Tools Menu Item in Visual Studio</li>
<li>Click NuGet Package Manager</li>
<li>Click Package Manager Console</li>
<li>Select Your Project in the Package Manager Console</li>
<li>Execute the following command to install <code>NotificationsExtensions.Portable</code>:<pre><code class="language-powershell">Install-Package NotificationsExtensions.Portable -Version 1.0.0
</code></pre>
</li>
</ol>
<h1 id="attribution-and-changes-made">Attribution and Changes Made</h1>
<p>All praise goes to the above two projects and the Microsoft developers who built them. The only changes I made to the code was to switch from <code>XmlDocument</code> to <code>XDocument</code>, remove a few WinRT specific references and stick it into a Portable Class Library (PCL).</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactive Extensions (Rx) - Part 6 - Task ToObservable]]></title>
        <id>https://rehansaeed.com/reactive-extensions-part6-task-toobservable/</id>
        <link href="https://rehansaeed.com/reactive-extensions-part6-task-toobservable/"/>
        <updated>2014-04-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How and where to use the Reactive Extensions (Rx) ToObservable Extension method to turn a Task Parallel Library (TPL) Task into an IObservable.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/reactive-extensions-part1-replacing-events/">Reactive Extensions (Rx) - Replacing C# Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part2-wrapping-events/">Reactive Extensions (Rx) - Wrapping C# Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part3-naming-conventions/">Reactive Extensions (Rx) - Naming Conventions</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part4-replacing-timers/">Reactive Extensions (Rx) - Replacing Timers</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part5-awaiting-observables/">Reactive Extensions (Rx) - Awaiting Observables</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part6-task-toobservable/">Reactive Extensions (Rx) - Task ToObservable</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part7-sample-events/">Reactive Extensions (Rx) - Sample Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-rx-part-8-timeouts/">Reactive Extensions (Rx) - Timeouts</a></li>
</ol>
<h1 id="a-quick-recap">A Quick Recap</h1>
<p>In my previous posts on Reactive Extensions (Rx) I&#39;ve outlined a few clear areas where Reactive Extensions can be used in the real world. I&#39;ve uncovered areas where it provides a cleaner and improved API surface as compared to older .NET code. Namely, replacing C# events, wrapping existing C# events and replacing <code>System.Threading.Timers</code> (Or other <code>Timer</code> classes, of which there are a few in .NET).</p>
<p>Once you have your observables, you need to do something with them. In my last post on the subject I showed how and when you can await an observable.</p>
<p>In this post I&#39;m going to show how you can also go the other way around. You can turn tasks into an observable. I&#39;ll also show one clear reason to use this facility.</p>
<h1 id="converting-tasks-to-observables">Converting Tasks to Observables</h1>
<p>The <code>ToObservable</code> extension method allows you to convert a Task or <code>Task&lt;T&gt;</code> into an <code>IObservable&lt;T&gt;</code>. Calling <code>ToObservable</code> on a <code>Task</code> returns an <code>IObservable&lt;Unit&gt;</code>. A <code>Unit</code> is a kind of empty object that does nothing, the only reason it is there is because there is no <code>IObservable</code> (Without the <code>T</code>) interface.</p>
<pre><code class="language-cs">IObservable&lt;Unit&gt; observable = Task.Run(() =&gt; Console.WriteLine(&quot;Working&quot;)).ToObservable();

IObservable&lt;string&gt; observableT = Task&lt;string&gt;.Run(() =&gt; &quot;Working&quot;).ToObservable();
</code></pre>
<p>If you subscribe to the above observables, they will only ever return one value and then complete. You might be thinking, hang on just a second Rehan, whats the point of doing this?</p>
<h1 id="putting-it-all-together">Putting It All Together</h1>
<p>So when should we use this feature? Well, lets walk through some examples and see what happens. Lets assume we have the following contrived code:</p>
<pre><code class="language-cs">public Task&lt;string&gt; GetHelloString()
{
    return Task.Run(
        async () =&gt;
        {
            await Task.Delay(500);
            return &quot;Hello&quot;;
        });
}

public Task&lt;string&gt; GetWorldString()
{
    return Task.Run(
        async () =&gt;
        {
            await Task.Delay(1000);
            return &quot;World&quot;;
        });
}
</code></pre>
<p>What happens in the case where we call both of these methods and want to get the first result back. How does this code look using the Task Parallel Library (TPL) as compared to Reactive Extensions (Rx).</p>
<pre><code class="language-cs">public async Task&lt;string&gt; WaitForFirstResultAndReturn()
{
    Task&lt;string&gt; task1 = this.GetHelloString();
    Task&lt;string&gt; task2 = this.GetWorldString();

    return await Task.WhenAny(task1, task2);
}

public async Task&lt;string&gt; WaitForFirstResultAndReturn()
{
    IObservable&lt;string&gt; observable1 = this.GetHelloString().ToObservable();
    IObservable&lt;string&gt; observable2 = this.GetWorldString().ToObservable();

    return await observable1.Merge(observable2).FirstAsync();
}
</code></pre>
<p>In the Task Parallel Library (TPL) example, I simply use the <code>WhenAny</code> method to await the first task that completes and then return the result.</p>
<p>In the Reactive Extensions example above, I&#39;m converting my tasks to observables, using the Merge method to convert them to a single observable and then using the <code>FirstAsync</code> method to await the first result (We covered <code>await</code>&#39;ing observables in the last post).</p>
<p>Overall the two techniques look pretty similar, with the TPL having a slight edge in terms of simplicity.</p>
<p>How about another example. Here we will try to await both of the results and put them together to get some meaningful result.</p>
<pre><code class="language-cs">public async Task&lt;string&gt; WaitForAllResultsAndReturnCombinedResult()
{
    Task&lt;string&gt; task1 = this.GetHelloString();
    Task&lt;string&gt; task2 = this.GetWorldString();

    return string.Join(&quot; &quot;, await Task.WhenAll(task1, task2));
}

public async Task&lt;string&gt; WaitForAllResultsAndReturnCombinedResult()
{
    IObservable&lt;string&gt; observable1 = this.GetHelloString().ToObservable();
    IObservable&lt;string&gt; observable2 = this.GetWorldString().ToObservable();

    return await observable1.Zip(observable2, (x1, x2) =&gt; string.Join(&quot; &quot;, x1, x2));
}
</code></pre>
<p>In the Task Parallel Library (TPL) example, I&#39;m using the <code>WhenAll</code> method to await the results of both tasks which are returned as an array of strings. I then join these strings and return the results.</p>
<p>In the Reactive Extensions example above, I&#39;m converting my tasks to observables, then using the <code>Zip</code> method to combine the results returned from both observables by providing it with a delegate which joins the two strings.</p>
<p>Again, both look pretty similar but with the pure TPL example being slightly simpler to understand.</p>
<p>One more example, this time we&#39;ll return the first result but add a timeout to the equation.</p>
<pre><code class="language-cs">public async Task&lt;string&gt; WaitForFirstResultAndReturnResultWithTimeOut()
{
    Task&lt;string&gt; task1 = this.GetHelloString();
    Task&lt;string&gt; task2 = this.GetWorldString();
    Task timeoutTask = Task.Delay(100);

    Task completedTask = await Task.WhenAny(task1, task2, timeoutTask);
    if (completedTask == timeoutTask)
    {
        throw new TimeoutException(&quot;The operation has timed out&quot;);
    }

    return ((Task&lt;string&gt;)completedTask).Result;
}

public async Task&lt;string&gt; WaitForFirstResultAndReturnResultWithTimeOut()
{
    IObservable&lt;string&gt; observable1 = this.GetHelloString().ToObservable();
    IObservable&lt;string&gt; observable2 = this.GetWorldString().ToObservable();

    return await observable1.Merge(observable2).Timeout(TimeSpan.FromMilliseconds(100)).FirstAsync();
}
</code></pre>
<p>In the Task Parallel Library (TPL) example, I&#39;m awaiting a third task which represents the timeout. If the timeout task finishes first, I raise a <code>TimeoutException</code>.</p>
<p>In the Reactive Extensions example, we merge the two observables again but this time use the <code>Timeout</code> method to achieve the same results.</p>
<p>Here we have a clear winner, the Reactive Extensions code is more concise and easier to follow.</p>
<p>What happens when we combine the two approaches.</p>
<pre><code class="language-cs">public async Task&lt;string&gt; WaitForFirstResultAndReturnResultWithTimeOut2()
{
    Task&lt;string&gt; task1 = this.GetHelloString();
    Task&lt;string&gt; task2 = this.GetWorldString();

    return await Task
        .WhenAny(task1, task2)
        .ToObservable()
        .Timeout(TimeSpan.FromMilliseconds(1000))
        .FirstAsync();
}
</code></pre>
<p>Here we use the <code>ToObservable</code> and <code>Timeout</code> methods right at the end. As you can see this combined approach gives us the best of both worlds and makes the code much easier to read.</p>
<h1 id="conclusions">Conclusions</h1>
<p>One definite reason to convert <code>Task</code>&#39;s to Observables is to use the <code>Timeout</code> method. There may be other reasons but I&#39;m having a hard time thinking of any right now. In fact, I&#39;m having a hard time thinking of any other posts to make about Reactive Extensions (Rx). It&#39;s an interesting chunk of code and I&#39;ve learned a lot writing this series of posts as I hope you have too.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GetHashCode Made Easy]]></title>
        <id>https://rehansaeed.com/gethashcode-made-easy/</id>
        <link href="https://rehansaeed.com/gethashcode-made-easy/"/>
        <updated>2014-04-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Implementing GetHashCode is hard work and little understood. Learn how to implement GetHashCode as quickly and as simply as possible.]]></summary>
        <content type="html"><![CDATA[<p>::: tip Update (2021-10-22)
Updated after I discovered that there is a new Nuget package called <code>Microsoft.Bcl.HashCode</code> which allows you to use <code>System.HashCode</code> in frameworks older than <code>netstandard2.1</code>.
:::</p>
<p>::: tip Update (2019-06-12)
I updated my HashCode implementation to cover a few more scenarios which I discuss below.
:::</p>
<p>::: tip Update (2018-08-14)
I updated this article to talk about a new <code>HashCode</code> class included in .NET Core 2.1 and licensing information for my code since I&#39;ve been asked repeatedly.
:::</p>
<p>Implementing <code>GetHashCode</code> is hard work and little understood. If you take a look on MSDN or Stack Overflow for a few pointers, you&#39;ll see a plethora of examples with all kinds of little used C# operators and magic numbers with little explanation for developers (Especially the newbies) what they are for and why we need them. This, for a method which exists on the <code>Object</code> class and is the root of all that is good and wholesome in C# is surprising.</p>
<p>Before I continue, I recommend reading <a href="http://blogs.msdn.com/b/ericlippert/archive/2011/02/28/guidelines-and-rules-for-gethashcode.aspx">Eric Lippert&#39;s blog post</a> about the subject. He does not show any code, just goes into when and where we need to implement the <code>GetHashCode</code> method. Eric does a much better job than I could do but in short, <code>GetHashCode</code> is implemented wherever you implement the <code>Equals</code> method and ideally your class should be immutable.</p>
<p>Now down to the nitty gritty. How do we make implementing <code>GetHashCode</code> easy. Well, suppose we have the following class:</p>
<pre><code class="language-cs">public sealed class SuperHero
{
    private readonly string name;
    private readonly int age;
    private readonly ReadOnlyCollection&lt;string&gt; powers;

    public SuperHero(string name, int age, IEnumerable&lt;string&gt; powers)
    {
        this.name = name;
        this.age = age;
        this.powers = new ReadOnlyCollection&lt;string&gt;(powers.ToList());
    }

    public int Age =&gt; this.age;

    public string Name =&gt; this.name;

    public ReadOnlyCollection&lt;string&gt; Powers =&gt; this.powers;

    public override bool Equals(object obj)
    {
        // ...
    }

    public override int GetHashCode()
    {
        // TODO
    }
}
</code></pre>
<p>In our example we have an immutable object with a variety of fields of different types, including a collection. One possible implementation of <code>GetHashCode</code> according to the highest rated <a href="http://stackoverflow.com/questions/263400/what-is-the-best-algorithm-for-an-overridden-system-object-gethashcode/263416#263416">Stack Overflow post</a> (If modified to fit our example and deal with <code>null</code>&#39;s) may be:</p>
<pre><code class="language-cs">public override int GetHashCode()
{
    unchecked
    {
        int hashCode = 17;

        hashCode = (hashCode * 23) + (name == null ? 0 : this.name.GetHashCode());

        hashCode = (hashCode * 23) + this.age;

        foreach (string power in this.powers)
        {
            hashCode = (hashCode * 23) + (power == null ? 0 : power.GetHashCode());
        }

        return hashCode;
    }
}
</code></pre>
<p>I don&#39;t know about you but that code looks awfully unwieldy to me. For a start we&#39;ve got two different magic numbers 17 and 23. Why? As it happens these are prime numbers and reduces the chance of getting collisions between hashes (Two un-equal objects are supposed to have different hash codes but sometimes this is not the case due to hash collisions that can occur).</p>
<p>We&#39;ve also got the <code>unchecked</code> C# keyword which stops overflow checking to improve performance (That&#39;s not something you see every day). Bear in mind that the whole point of the <code>GetHashCode</code> method is to allow things like the <code>Dictionary</code> type to <strong>quickly</strong> retrieve objects.</p>
<p>I personally would not be able to remember how to do this each time I need to implement <code>GetHashCode</code> and it seems like you could very easily introduce bugs by making a typo. How about a helper class (Well actually a <code>struct</code> for better performance)?</p>
<pre><code class="language-cs">/// &lt;summary&gt;
/// A hash code used to help with implementing &lt;see cref=&quot;object.GetHashCode()&quot;/&gt;.
/// &lt;/summary&gt;
public struct HashCode : IEquatable&lt;HashCode&gt;
{
    private const int EmptyCollectionPrimeNumber = 19;
    private readonly int value;

    /// &lt;summary&gt;
    /// Initializes a new instance of the &lt;see cref=&quot;HashCode&quot;/&gt; struct.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;value&quot;&gt;The value.&lt;/param&gt;
    private HashCode(int value) =&gt; this.value = value;

    /// &lt;summary&gt;
    /// Performs an implicit conversion from &lt;see cref=&quot;HashCode&quot;/&gt; to &lt;see cref=&quot;int&quot;/&gt;.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;hashCode&quot;&gt;The hash code.&lt;/param&gt;
    /// &lt;returns&gt;The result of the conversion.&lt;/returns&gt;
    public static implicit operator int(HashCode hashCode) =&gt; hashCode.value;

    /// &lt;summary&gt;
    /// Implements the operator ==.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;left&quot;&gt;The left.&lt;/param&gt;
    /// &lt;param name=&quot;right&quot;&gt;The right.&lt;/param&gt;
    /// &lt;returns&gt;The result of the operator.&lt;/returns&gt;
    public static bool operator ==(HashCode left, HashCode right) =&gt; left.Equals(right);

    /// &lt;summary&gt;
    /// Implements the operator !=.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;left&quot;&gt;The left.&lt;/param&gt;
    /// &lt;param name=&quot;right&quot;&gt;The right.&lt;/param&gt;
    /// &lt;returns&gt;The result of the operator.&lt;/returns&gt;
    public static bool operator !=(HashCode left, HashCode right) =&gt; !(left == right);

    /// &lt;summary&gt;
    /// Takes the hash code of the specified item.
    /// &lt;/summary&gt;
    /// &lt;typeparam name=&quot;T&quot;&gt;The type of the item.&lt;/typeparam&gt;
    /// &lt;param name=&quot;item&quot;&gt;The item.&lt;/param&gt;
    /// &lt;returns&gt;The new hash code.&lt;/returns&gt;
    public static HashCode Of&lt;T&gt;(T item) =&gt; new HashCode(GetHashCode(item));

    /// &lt;summary&gt;
    /// Takes the hash code of the specified items.
    /// &lt;/summary&gt;
    /// &lt;typeparam name=&quot;T&quot;&gt;The type of the items.&lt;/typeparam&gt;
    /// &lt;param name=&quot;items&quot;&gt;The collection.&lt;/param&gt;
    /// &lt;returns&gt;The new hash code.&lt;/returns&gt;
    public static HashCode OfEach&lt;T&gt;(IEnumerable&lt;T&gt; items) =&gt;
        items == null ? new HashCode(0) : new HashCode(GetHashCode(items, 0));

    /// &lt;summary&gt;
    /// Adds the hash code of the specified item.
    /// &lt;/summary&gt;
    /// &lt;typeparam name=&quot;T&quot;&gt;The type of the item.&lt;/typeparam&gt;
    /// &lt;param name=&quot;item&quot;&gt;The item.&lt;/param&gt;
    /// &lt;returns&gt;The new hash code.&lt;/returns&gt;
    public HashCode And&lt;T&gt;(T item) =&gt;
        new HashCode(CombineHashCodes(this.value, GetHashCode(item)));

    /// &lt;summary&gt;
    /// Adds the hash code of the specified items in the collection.
    /// &lt;/summary&gt;
    /// &lt;typeparam name=&quot;T&quot;&gt;The type of the items.&lt;/typeparam&gt;
    /// &lt;param name=&quot;items&quot;&gt;The collection.&lt;/param&gt;
    /// &lt;returns&gt;The new hash code.&lt;/returns&gt;
    public HashCode AndEach&lt;T&gt;(IEnumerable&lt;T&gt; items)
    {
        if (items == null)
        {
            return new HashCode(this.value);
        }

        return new HashCode(GetHashCode(items, this.value));
    }

    /// &lt;inheritdoc /&gt;
    public bool Equals(HashCode other) =&gt; this.value.Equals(other.value);

    /// &lt;inheritdoc /&gt;
    public override bool Equals(object obj)
    {
        if (obj is HashCode)
        {
            return this.Equals((HashCode)obj);
        }

        return false;
    }

    /// &lt;summary&gt;
    /// Throws &lt;see cref=&quot;NotSupportedException&quot; /&gt;.
    /// &lt;/summary&gt;
    /// &lt;returns&gt;Does not return.&lt;/returns&gt;
    /// &lt;exception cref=&quot;NotSupportedException&quot;&gt;Implicitly convert this struct to an &lt;see cref=&quot;int&quot; /&gt; to get the hash code.&lt;/exception&gt;
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override int GetHashCode() =&gt;
        throw new NotSupportedException(
            &quot;Implicitly convert this struct to an int to get the hash code.&quot;);

    private static int CombineHashCodes(int h1, int h2)
    {
        unchecked
        {
            // Code copied from System.Tuple so it must be the best way to combine hash codes or at least a good one.
            return ((h1 &lt;&lt; 5) + h1) ^ h2;
        }
    }

    private static int GetHashCode&lt;T&gt;(T item) =&gt; item?.GetHashCode() ?? 0;

    private static int GetHashCode&lt;T&gt;(IEnumerable&lt;T&gt; items, int startHashCode)
    {
        var temp = startHashCode;

        var enumerator = items.GetEnumerator();
        if (enumerator.MoveNext())
        {
            temp = CombineHashCodes(temp, GetHashCode(enumerator.Current));

            while (enumerator.MoveNext())
            {
                temp = CombineHashCodes(temp, GetHashCode(enumerator.Current));
            }
        }
        else
        {
            temp = CombineHashCodes(temp, EmptyCollectionPrimeNumber);
        }

        return temp;
    }
}
</code></pre>
<p>The helper <code>struct</code> can be used in our <code>SuperHero</code> class like so:</p>
<pre><code class="language-cs">public override int GetHashCode()
{
    return HashCode
        .Of(this.name)
        .And(this.age)
        .AndEach(this.powers);
}
</code></pre>
<p>Now isn&#39;t that pretty? All the nasty magic numbers and <code>unchecked</code> code has been hidden away. It is a very lightweight and simple <code>struct</code>, so although we create new instances of it, it&#39;s stored in the stack rather than the memory heap. What&#39;s more, is that is code is just as fast (I&#39;ve timed it)! We&#39;re using generics so there is no boxing or unboxing going on. We&#39;re still using the <code>unchecked</code> keyword, so overflow checking is still disabled.</p>
<p>One interesting edge case is what to do when hashing a collection and you get either a <code>null</code> or empty collection. Should you use a zero to represent both scenarios (zero is usually used to represent a <code>null</code> value) or differentiate them somehow. I managed to get a response from <a href="">Jon Skeet</a> himself on Stack Overflow:</p>
<blockquote>
<p>if both states are valid, it seems perfectly reasonable to differentiate between them. (Someone carrying an empty box isn&#39;t the same as someone not carrying a box at all...)</p>
<footer><cite><a href="https://stackoverflow.com/questions/8094867/good-gethashcode-override-for-list-of-foo-objects-respecting-the-order/8094931?noredirect=1#comment99700237_8094931">Jon Skeet</a></cite></footer>
</blockquote>
<p>This is why we use the prime number 19 (it could have been any prime number) to represent an empty collection. Whether this matters or not depends on your use case. If an empty collection means something different in your scenario, then we&#39;ve got you covered. Generally speaking though, if you are exposing a collection property in your class you should consider making it a getter only and initializing it in the constructor, so that it is never <code>null</code> in the first place but here we&#39;re trying to cover all scenarios.</p>
<h1 id="net-core-hashcode">.NET Core HashCode</h1>
<p>If you are using .NET Core 2.1, consider using the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.hashcode?view=netcore-2.1">System.HashCode</a> <code>struct</code> instead of my code. If your using an older framework you can also try the <code>Microsoft.Bcl.HashCode</code> NuGet package. There are two ways to use it:</p>
<h2 id="hashcodecombine">HashCode.Combine</h2>
<p>The <code>Combine</code> method can be used to create a hash code, given up to eight objects.</p>
<pre><code class="language-cs">public override int GetHashCode() =&gt;
    HashCode.Combine(object1, object2);
</code></pre>
<h2 id="hashcodeadd">HashCode.Add</h2>
<p>The Add method is similar to my code but it does not handle collections and is not fluent:</p>
<pre><code class="language-cs">public override int GetHashCode()
{
    var hash = new HashCode();
    hash.Add(this.object1);
    hash.Add(this.object2);
    return hash.ToHashCode();
}
</code></pre>
<h2 id="advantages-and-disadvantages">Advantages and Disadvantages</h2>
<p>There are several advantages to using the .NET Core <code>HashCode</code>:</p>
<ul>
<li>It&#39;s part of the .NET Core base class library (BCL), so it&#39;s maintained and officially supported.</li>
<li>It has good performance. I haven&#39;t written a benchmark against comparing my code to the .NET Core code. If you do, I&#39;d be interested to hear the results.</li>
<li>Like my code, it handles <code>null</code>&#39;s automatically.</li>
</ul>
<p>The disadvantages are:</p>
<ul>
<li>You have to be using .NET Core 2.1 or above.</li>
<li>It does not handle collections, you have to write a for loop to handle that yourself. You could be clever and write a quick extension method to handle this scenario.</li>
<li>It&#39;s not fluent, so you end up with slightly uglier code in my opinion. If you are a fan of C# 7 expression bodied members, then my fluent code lets you use them, while the .NET Core <code>HashCode.Add</code> method does not.</li>
</ul>
<h1 id="license">License</h1>
<p>I have been asked repeatedly for licensing of my code above. Developers have been asking permission to use it in a Kerbal Space program plugin and even in the excellent <a href="https://chocolatey.org">Chocolatey</a> project which has been totally unexpected for me because this is code I wrote years ago. It just goes to show how fundamental <code>GetHashCode</code> is. Please consider the code as MIT licensed, do good with it and be excellent to each other!</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactive Extensions (Rx) - Part 5 - Awaiting Observables]]></title>
        <id>https://rehansaeed.com/reactive-extensions-part5-awaiting-observables/</id>
        <link href="https://rehansaeed.com/reactive-extensions-part5-awaiting-observables/"/>
        <updated>2014-03-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How and where to use Task Parallel Library (TPL) async and await with Reactive Extensions (Rx). Also, how to use TPL for awaiting observables.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/reactive-extensions-part1-replacing-events/">Reactive Extensions (Rx) - Replacing C# Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part2-wrapping-events/">Reactive Extensions (Rx) - Wrapping C# Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part3-naming-conventions/">Reactive Extensions (Rx) - Naming Conventions</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part4-replacing-timers/">Reactive Extensions (Rx) - Replacing Timers</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part5-awaiting-observables/">Reactive Extensions (Rx) - Awaiting Observables</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part6-task-toobservable/">Reactive Extensions (Rx) - Task ToObservable</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part7-sample-events/">Reactive Extensions (Rx) - Sample Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-rx-part-8-timeouts/">Reactive Extensions (Rx) - Timeouts</a></li>
</ol>
<p>So I&#39;ve just finished extolling the wonderful virtues of <code>TaskCompletionSource</code> with a colleague and thought I&#39;d share the joy more widely. Eventually this will turn into a post about how great Reactive Extensions (Rx) is, I promise.</p>
<h1 id="taskcompletionsource">TaskCompletionSource</h1>
<p><a href="http://msdn.microsoft.com/en-us/library/dd449174%28v=vs.110%29.aspx">TaskCompletionSource</a> is a great tool to turn any asynchronous operation which does not follow the Task Parallel Library (TPL) pattern into a Task. The example below is something I&#39;ve started to do in a few places.</p>
<pre><code class="language-cs">public Task&lt;bool?&gt; ShowDialog()
{
    TaskCompletionSource&lt;bool?&gt; taskCompletionSource = new TaskCompletionSource&lt;bool?&gt;();

    Window window = new MyDialogWindow();
    EventHandler eventHandler = null;
    eventHandler = 
        (sender, e) =&gt;
        {
            window.Closed -= eventHandler;
            taskCompletionSource.SetResult(window.DialogResult);
        };
    window.Closed += eventHandler;
    window.Show();

    return taskCompletionSource.Task;
}
</code></pre>
<p>In the example above we are creating a new window, registering for its <code>Closed</code> event and then showing the window. When the window is closed, we de-register from the closed event handler (To avoid a remaining reference to the window, causing a memory leak) and the <code>DialogResult</code> of the window is passed to the <code>TaskCompletionSource</code> using the <code>SetResult</code> method.</p>
<p>The <code>TaskCompletionSource</code> gives us a nice <code>Task</code> object which we can return at the end of the method. When we return the task its status is <code>WaitingForActivation</code>. Only when the <code>SetResult</code> method is called when the window closes, does the tasks status change to <code>RanToCompletion</code>.</p>
<p>This whole operation has been wrapped up and packaged nicely in a <code>Task&lt;bool?&gt;</code> with a nice bow on top with the help of <code>TaskCompletionSource</code>. Now we can call the method and await the results from the method call, thus allowing us to savour the power and simplicity the TPL affords us.</p>
<pre><code class="language-cs">bool? result = await ShowDialog();
</code></pre>
<p>There are other great ways to use <code>TaskCompletionSource</code> of course. Generally speaking though I have found myself using it to turn an operation where I am waiting for an event into a task. For <a href="http://blogs.msdn.com/b/pfxteam/archive/2009/06/02/9685804.aspx">more information</a> on <code>TaskCompletionSource</code> or the TPL in general I highly recommend reading <a href="http://blogs.msdn.com/b/pfxteam/">Stephen Toub&#39;s blog</a>.</p>
<h1 id="awaiting-observables">Awaiting Observables</h1>
<p>Having showed my colleague the above example and feeling very content, I suddenly realised that Reactive Extensions (Rx) can make the code even simpler. With the advent of the latest version of Reactive Extensions (Rx) you can now await observables and we can turn the method above into this:</p>
<pre><code class="language-cs">public async Task&lt;bool?&gt; ShowDialog()
{
    var window = new MyDialogWindow();
    var closed = Observable
        .FromEventPattern&lt;EventHandler, EventArgs&gt;(
            h =&gt; window.Closed += h,
            h =&gt; window.Closed -= h);

    window.Show();
    await closed.FirstAsync()

    return window.DialogResult;
}
</code></pre>
<p>The <code>await</code> keyword is just some syntactic sugar in the C# language that makes writing thorny asynchronous code effortless. The real meat of what drives it is the <code>GetAwaiter</code> method. The Reactive Extensions (Rx) team seeing the genius that is the Task Parallel Library (TPL) took advantage. They added this method (actually an extension method) to <code>IObservable&lt;T&gt;</code>, allowing us to await an observable as seen in the example above.</p>
<p>However, there is a caveat which I shall explain. In the example above the Closed event could conceivably be fired any number of times (If the window was opened and closed a few times) and the observable wrapper around the Closed event never completes. So our observable returns multiple results but a task can only return a single result.</p>
<p>The secret in our example is the <code>FirstAsync</code> method. We are actually awaiting the first result returned by our observable and don&#39;t care about any further results. By default awaiting an observable without the <code>FirstAsync</code> method above will actually await the last result <strong>before completion</strong>. If your observable does not complete, then you will be waiting <strong>forever</strong>!</p>
<p>Handily the Reactive Extensions (Rx) team has added several methods which you can use before you use <code>await</code> to modify the result of what you are awaiting. All of these methods end with the word <code>Async</code>. I&#39;ve added a short list of these methods below (There are lots of overloads so I&#39;ve just highlighted the main ones):</p>
<pre><code class="language-cs">// Returns the first element of an observable sequence.
string result = await observable.FirstAsync();

// Returns the first element of an observable sequence, or a default value if no such element exists.
string result = await observable.FirstOrDefaultAsync();

// Returns the last element of an observable sequence. 
// This is the default action of awaiting an observable.
string result = await observable.LastAsync();

// Returns the last element of an observable sequence, 
// or a default value if no such element exists.
string result = await observable.LastOrDefaultAsync();

// Returns the only element of an observable sequence, and throws an exception if there is not exactly 
// one element in the observable sequence.
string result = await observable.SingleAsync();

// Returns the only element of an observable sequence, or a default value if the observable sequence 
// is empty; this method reports an exception if there is more than one element in the observable sequence.
string result = await observable.SingleOrDefaultAsync();

// Invokes an action for each element in the observable sequence and returns a Task that will get 
// signalled when the sequence terminates.
await observable.ForEachAsync(x =&gt; Console.WriteLine(x));
</code></pre>
<p>All of the above methods allow you to pick a single result from your observable. <code>ForEachAsync</code> is different though as it performs an action on each item and when your observable completes (If it does) then the task completes.</p>
<h1 id="conclusions">Conclusions</h1>
<p>So we&#39;ve learned how to await observables in different ways and how it can be another way of doing the same thing that <code>TaskCompletionSource</code> does but in a cleaner more elegant way.</p>
<p>We&#39;ve also learned that there are some caveats that you need to be aware of when awaiting an observable i.e. that observables return multiple results and you have to pick one to return in your task.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WPF Metro Part 4 - Elysium Extra]]></title>
        <id>https://rehansaeed.com/wpf-metro-part4-elysium-extra/</id>
        <link href="https://rehansaeed.com/wpf-metro-part4-elysium-extra/"/>
        <updated>2014-03-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Elysium Extra is an excellent Windows Presentation Foundation (WPF) SDK providing Metro styles for built in WPF controls and some custom controls.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/wpf-metro-part1-modern-ui-for-wpf/">WPF Metro - Modern UI for WPF</a></li>
<li><a href="https://rehansaeed.com/wpf-metro-part2-mahapps-metro/">WPF Metro - MahApps Metro</a></li>
<li><a href="https://rehansaeed.com/wpf-metro-part3-elysium/">WPF Metro - Elysium</a></li>
<li><a href="https://rehansaeed.com/wpf-metro-part4-elysium-extra/">WPF Metro - Elysium Extra</a></li>
</ol>
<p><a href="https://www.youtube.com/watch?v=PGM_uBy99GA">https://www.youtube.com/watch?v=PGM_uBy99GA</a></p>
<p>In these series of posts I&#39;m going to do a quick review of a few different open source WPF Metro (Or Modern if you prefer) style SDK&#39;s. Each of them provides styles and new controls to build your WPF application from scratch. Here are the home pages for the open source projects in question where you can download the source code and the binaries to play with them yourself:</p>
<ul>
<li><a href="https://mui.codeplex.com/">Modern UI for WPF</a></li>
<li><a href="https://github.com/MahApps">MahApps Metro</a></li>
<li><a href="https://elysium.codeplex.com/">Elysium</a></li>
<li><a href="https://elysiumextra.codeplex.com/">Elysium Extra</a></li>
</ul>
<h1 id="elysium-extra">Elysium Extra</h1>
<p>::: warning
I am the developer of Elysium Extra. It was developed at the company where I work, where I had an excellent manager who saw the advantage of open sourcing the code and making it widely available to the .NET community.</p>
<p>My intention was to submit this code to the Elysium project, however, the developer had been away for a couple of months, so I released Elysium Extra as a separate project. Happily though, the developer of Elysium has returned and resumed development of the SDK. I&#39;ve yet to discuss how we can move forward with the two code bases.</p>
<p>This post will be a bit longer as I need to outline the contents of Elysium Extra as it&#39;s a new SDK and needs a little explaining (It contains a lot of cool stuff!).
:::</p>
<p>Elysium Extra is an add-on project to Elysium. It fills in some gaps which existed in the Elysium SDK, improves some styles and adds lots of new styles, new controls and style guidelines.</p>
<p>As the code has been used in a real life, large scale application (Albeit heavily modified and cleaned up to make it ready for open sourcing), it should in <strong>theory</strong> (Fingers crossed) be production quality. It also seems to contain a lot of attached properties and other small bits of code which were found to be required when building a WPF application, that other SDK&#39;s do not contain. All of these have demo&#39;s in the sample application.</p>
<h1 id="look-and-feel">Look and Feel</h1>
<p>The look and feel picks up from where Elysium leaves off. Some control styles have been modified and improved, others have been modified for consistency.</p>
<p>The window has be heavily modified to allow full customization. Pretty much every feature you can think of has been added. Changes include Window border glow effects, saving window placement, full screen mode...the list goes on.</p>
<p>Other major differences between this SDK over Elysium are that the TextBox and ComboBox controls have been brought more into line with each other, so if you add them in a form they don&#39;t look out of place.</p>
<p>The ability to change theme&#39;s is unfortunately currently broken as a side effect of Elysium Extra having to wrap the Elysium XAML styles. This is pretty high up the list of things planned to be fixed though.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Colour.png" alt="Elysium Extra - Sample application screenshot of the Colours"></p>
<p>Custom colours over and above what Elysium provides and guidelines on how to use them.</p>
<p>As this SDK has been open sourced from a live application. There are lots of styles for icons, menu items and app-bar buttons. These are things you&#39;d use in every application. Things like cut, copy and paste buttons etc.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/App-Bar.png" alt="Elysium Extra - Sample application screenshot of the App Bar"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/MenuItem.png" alt="Elysium Extra - Sample application screenshot of the built in MenuItem&#39;s"></p>
<h1 id="custom-controls">Custom Controls</h1>
<h2 id="elasticpicker">ElasticPicker</h2>
<p>The ElasticPicker is a very unique control that I&#39;m most proud of. It can be used to filter a collection of things with a few clicks, all while looking fantastic and doing lots of flashy animations that will make your eyes light up. The screen-shots do not do it justice, so do watch the video for a better understanding.</p>
<p>In the example below the ElasticPicker is bound to a collection of people and we have given the user the ability to filter based on four attributes of the people. Each attribute shows the number of people in that category, when the use selects a category all the numbers, sizes and colours of all of the other boxes change. It is a sight to behold.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/ElasticPicker-1.png" alt="Elysium Extra - Sample application screenshot of the ElasticPicker 1"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/ElasticPicker-2.png" alt="Elysium Extra - Sample application screenshot of the ElasticPicker 2"></p>
<h2 id="icon">Icon</h2>
<p>Icons are ridiculously underestimated in their ability to improve the look and feel of an application and also in the difficulty of getting them right. I&#39;ve had to use PNG icons in the past and I can tell you finding an off the shelf icon that matches the look and feel of your application and indeed your other icons is hard work. Creating your own icons from scratch is even harder.</p>
<p>With XAML combined with the Metro look and feel though, all this becomes easy. <strong>Nearly 3000 icons have been provided out of the box</strong>. Icons are a single colour, making them all look consistent and in keeping with each other. Its simple to create your own with the options of Geometry, Text or icons using PNG images using opacity masks.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Icon1.png" alt="Elysium Extra - Sample application screenshot of the Geometry Icons"></p>
<h2 id="wizard">Wizard</h2>
<p>The wizard control is the basis of all my screens. It can be used like the Frame and Page controls in Silverlight or Windows Phone, where you navigate between pages. The difference being that you can optionally structure your pages or WizardItem&#39;s into a linear or tree hierarchy and use the breadcrumb navigation bar to navigate between pages.</p>
<p>It gets even better. Each WizardItem supports entrance and exit animations. So when you are moving pages, some really nice transition animations can be applied to any of your controls on the page. If you set backgrounds to your pages, they even fade into each other.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Wizard-1.png" alt="Elysium Extra - Sample application screenshot of the Wizard 1"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Wizard-2.png" alt="Elysium Extra - Sample application screenshot of the Wizard 2"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Wizard-3.png" alt="Elysium Extra - Sample application screenshot of the Wizard 3"></p>
<h2 id="datagrid">DataGrid</h2>
<p>Although not an entirely new control, the DataGrid has been augmented with quite a bit of extra functionality. There are a few new column types like the DataTime and ProgressBar columns. Attached properties have been used to add the ability to add column specific group summaries, save column settings, add single click editing and single click row/cell de-selection among other things.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/DataGrid.png" alt="Elysium Extra - Sample application screenshot of the DataGrid"></p>
<h2 id="expandermenu">ExpanderMenu</h2>
<p>The ExpanderMenu is a great control that a colleague came up with. We&#39;ve generally used it in the DataGrid. When a user clicks on a row, the ExpanderMenu appears in a nice sliding animation and can be used instead of or in conjunction with a ContextMenu.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/ExpanderMenu.png" alt="Elysium Extra - Sample application screenshot of the ExpanderMenu"></p>
<h2 id="drag--drop">Drag &amp; Drop</h2>
<p>The ability to drag and drop in a completely MVVM friendly method has been added. It is super simple to use and you can get it working with just four lines of XAML! The DragManager is used to make something draggable and the DragCommand is used to fire a standard ICommand. It&#39;s super customizable and very easy to use.</p>
<p>Furthermore, styles have been created for the ListBoxItem and DataGridRow which allow re-ordering using drag and drop.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Drag-Drop-1.png" alt="Elysium Extra - Sample application screenshot of Drag &amp; Drop 1"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Drag-Drop-2.png" alt="Elysium Extra - Sample application screenshot of Drag &amp; Drop 2"></p>
<h2 id="fisheyelistbox-and-noteslistbox">FishEyeListBox and NotesListBox</h2>
<p>The Fish Eye list box is just a standard list box, except mousing over or selected in item makes it grow and it gives you a nice top level menu bar. The NotesListBox can be used to display several rich text notes, which expand gradually when you mouse over them.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/ListBox-1.png" alt="Elysium Extra - Sample application screenshot of the ListBox&#39;s 1"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/ListBox-2.png" alt="Elysium Extra - Sample application screenshot of the ListBox&#39;s 2"></p>
<h2 id="accordian">Accordian</h2>
<p>The Accordian is a bit like the Expander control, except that you have more than one and can control how may can open at any one time.</p>
<p>The Accordian control has been taken from the left overs of the WPF Toolkit (Buggy controls which did not make it into the proper .NET framework). It has been fixed and totally restyled to resemble the Expander style.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Expander.png" alt="Elysium Extra - Sample application screenshot of the Expander and Accordion"></p>
<h2 id="flyout">Flyout</h2>
<p>For those that have used the Flyout control in Windows 8, this is very much the same. In the SDK, it&#39;s just an Expander control with a custom style (I like to re-use existing controls as much as possible where it makes sense).</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Flyout1.png" alt="Elysium Extra - Sample application screenshot of the "></p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Flyout2.png" alt="Elysium Extra - Sample application screenshot of the Flyout"></p>
<h2 id="various-input-controls">Various Input Controls</h2>
<p>Various input controls have been added or improved. Notable additions include the NumericUpDown controls which allow you to select a number and the ButtonTextBox, which can be used to add a button action to a text box.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Input-TextBox.png" alt="Elysium Extra - Sample application screenshot of the TextBox"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Input-RichTextBox.png" alt="Elysium Extra - Sample application screenshot of of the RichTextBox"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Input-ButtonTextBox.png" alt="Elysium Extra - Sample application screenshot of the ButtonTextBox"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Input-Numeric.png" alt="Elysium Extra - Sample application screenshot of the numeric input"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Input-DatePicker.png" alt="Elysium Extra - Sample application screenshot of the DatePicker"></p>
<h2 id="validation">Validation</h2>
<p>Validation is something that&#39;s built into WPF but is so often neglected by people styling controls. So far, this SDK supports validation on the TextBox, ComboBox, DatePicker and numeric up down controls such as IntegerUpDown. I recomend using the INotifyDataErrorInfo interface on your view models or the NotifyDataErrorInfo base class provided in conjunction with these controls.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Validation.png" alt="Elysium Extra - Sample application screenshot of the validation of built in controls"></p>
<h2 id="hyperlinkbutton">HyperlinkButton</h2>
<p>The HyperlinkButton is just a button with a custom style which underlines the text in the button on mouse over and changes the mouse cursor to a hand.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Button.png" alt="Elysium Extra - Sample application screenshot of the Buttons"></p>
<h2 id="window">Window</h2>
<p>Several new abilities have been added to the window. These include better customization of look and feel, full screen mode, saving window placement, setting the task-bar overlay icon using XAML and/or binding and a custom window drop shadow.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Window-1.png" alt="Elysium Extra - Sample application screenshot of the Window styles 1"></p>
<h2 id="overlaywindow">OverlayWindow</h2>
<p>This is a special Window which allows you to overlay another window with some content. Crucially this window is not modal but allows modal style interaction with the underlying window.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/OverlayWindow.png" alt="Elysium Extra - Sample application screenshot of the OverlayWindow"></p>
<h2 id="messagedialog">MessageDialog</h2>
<p>The standard WPF MessageBox is ugly and uses a really bad design where you can only ask Yes or No style questions. The MessageDialog comes to the rescue with a Windows 8 style dialogue. You can ask any questions and even customize the allowed response buttons.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/MessageDialog.png" alt="Elysium Extra - Sample application screenshot of the MessageDialog"></p>
<h2 id="notifybox">NotifyBox</h2>
<p>The NotifyBox is like the Microsoft Outlook style email notifications. A small window fades in on the bottom right and slowly disappears, unless you mouse over it.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/NotifyBox.png" alt="Elysium Extra - Sample application screenshot of the NotifyBox"></p>
<h2 id="loadingcontent">LoadingContent</h2>
<p>The loading content control can be used to cover any content with a loading animation and loading message. You can toggle it on or off using a simple boolean value.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Progress.png" alt="Elysium Extra - Sample application screenshot of the Progress showing controls"></p>
<h2 id="paging">Paging</h2>
<p>You can add any fixed size content to the Paging control and it will separate it into pages which the user can switch between with a nice transition animation.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Paging-1.png" alt="Elysium Extra - Sample application screenshot of the Paging control"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Paging-2.png" alt="Elysium Extra - Sample application screenshot of the Paging control"></p>
<h2 id="graphtreeview">GraphTreeView</h2>
<p>The GraphTreeView is just a style for a TreeView, which shows the TreeViewItem&#39;s horizontally instead of vertically. In the past I&#39;ve allowed users to switch between horizontal and vertical views on my TreeView&#39;s and users have been pretty appreciative.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/TreeView.png" alt="Elysium Extra - Sample application screenshot of the TreeView"></p>
<h2 id="animation-made-easy">Animation Made Easy</h2>
<p>Animating controls has been made simple. All you need to do is add a couple of lines of XAML and your ItemsControl&#39;s will fade and slide in sequentially or randomly.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Animation.png" alt="Elysium Extra - Sample application screenshot of the Animations"></p>
<h2 id="flipcontrol">FlipControl</h2>
<p>The flip control is basically an ItemsControl which only shows the selected item. When the selected item changes, it flips between the items until it gets to the new selected item.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/FlipControl.png" alt="Elysium Extra - Sample application screenshot of the FlipControl"></p>
<h2 id="various-border-controls">Various Border Controls</h2>
<p>There are several custom border controls available, although usage is discouraged because they are not very metro!</p>
<p><img src="https://rehansaeed.com/wpf-metro-part4-elysium-extra/images/Border.png" alt="Elysium Extra - Sample application screenshot of the Borders"></p>
<h1 id="source-code">Source Code</h1>
<p>The code is available on GitHub and I&#39;ve tried to keep it up to date with new additions and fixes being made over the weekends.</p>
<p>I have tried to keep the code in keeping with the existing Elysium project, so when controls are moved to the parent Elysium project (I don&#39;t know how or when this will happen) this should be a fairly simple process.</p>
<p>The code is fully StyleCop compliant. If you don&#39;t use StyleCop or even don&#39;t know what it is, I suggest you read <a href="https://rehansaeed.com/stop-brace-wars-use-stylecop/">this</a>.</p>
<p>If nothing happens in the next couple of months I will start to consider creating a NuGet package, along with all the niceties that make a developers life a little easier.</p>
<h1 id="conclusions">Conclusions</h1>
<p>This is a very young project with currently only one developer but I do intend to keep it working. Your mileage with this SDK may vary but any contributions or bug fixes are welcome.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WPF Metro Part 3 - Elysium]]></title>
        <id>https://rehansaeed.com/wpf-metro-part3-elysium/</id>
        <link href="https://rehansaeed.com/wpf-metro-part3-elysium/"/>
        <updated>2014-03-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Elysium is an excellent Windows Presentation Foundation (WPF) SDK (On CodePlex) providing Metro styles for built in WPF controls and some custom controls.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/wpf-metro-part1-modern-ui-for-wpf/">WPF Metro - Modern UI for WPF</a></li>
<li><a href="https://rehansaeed.com/wpf-metro-part2-mahapps-metro/">WPF Metro - MahApps Metro</a></li>
<li><a href="https://rehansaeed.com/wpf-metro-part3-elysium/">WPF Metro - Elysium</a></li>
<li><a href="https://rehansaeed.com/wpf-metro-part4-elysium-extra/">WPF Metro - Elysium Extra</a></li>
</ol>
<p><a href="https://www.youtube.com/watch?v=YChJguA6ai8">https://www.youtube.com/watch?v=YChJguA6ai8</a></p>
<p>In these series of posts I&#39;m going to do a quick review of a few different open source WPF Metro (Or Modern if you prefer) style SDK&#39;s. Each of them provides styles and new controls to build your WPF application from scratch. Here are the home pages for the open source projects in question where you can download the source code and the binaries to play with them yourself:</p>
<ul>
<li><a href="https://mui.codeplex.com/">Modern UI for WPF</a></li>
<li><a href="https://github.com/MahApps">MahApps Metro</a></li>
<li><a href="https://elysium.codeplex.com/">Elysium</a></li>
<li><a href="https://github.com/RehanSaeed/Elysium-Extra">Elysium Extra</a></li>
</ul>
<h1 id="elysium">Elysium</h1>
<p>This is the third post in the series. I&#39;ve been using Elysium at work for the last year and have been pretty impressed with it. There are a few gaps in terms of the styles it provides but that&#39;s where Elysium Extra comes in.</p>
<h1 id="look-and-feel">Look and Feel</h1>
<p>This SDK takes its own view of what Metro ought to look like. It makes much more use of the accent colour in its controls which have a bold and striking look to them. Where colour is used, it is used in abundance, on the otherwise plain white canvas.</p>
<p>Once again, this SDK supports themes out of the box. It gives you the option of a dark or light background, an accent colour and contrast colour.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part3-elysium/images/Elysium_Screenshot_Light_Buttons.png" alt="Elysium Screenshot Light Buttons Showcase"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part3-elysium/images/Elysium_Screenshot_Dark_Buttons.png" alt="Elysium Screenshot Dark Buttons Showcase"></p>
<h1 id="custom-controls">Custom Controls</h1>
<h2 id="appbar-commandbutton-dropdowncommandbutton-and-togglecommandbutton">AppBar, CommandButton, DropDownCommandButton and ToggleCommandButton</h2>
<p>The standard Windows 8 buttons are all here but composed of three variants. The SDK also provides a Windows 8 style application bar which pops up from the bottom of the screen on right click. Buttons placed in the application but have separate styles and look pretty pleasing. The developer has done a pretty good job of recreating the Windows 8 application bar experience.</p>
<h2 id="toggleswitch">ToggleSwitch</h2>
<p>The standard alternative to the CheckBox control is here too.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part3-elysium/images/Elysium_Screenshot_Light_SelectorsAndRanges.png" alt="Elysium Screenshot Light Selectors And Ranges Showcase"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part3-elysium/images/Elysium_Screenshot_Dark_SelectorsAndRanges.png" alt="Elysium Screenshot Dark Selectors And Ranges Showcase"></p>
<h2 id="progressbar-and-progressring">ProgressBar and ProgressRing</h2>
<p>These are the alternatives to the standard WPF ProgressBar control and are quite pleasing to the eye.</p>
<h1 id="source-code">Source Code</h1>
<p>The code is available on GitHub and you could download the latest change set but it seems to be broken at the time of writing because the developer is doing some pretty major re-factoring (Use Team Foundation Server shelve-sets to avoid checking in broken code). That&#39;s a bit of a shame as the basics of this SDK are pretty solid.</p>
<p>Looking at the discussion boards, there seems to be a fair amount of activity but the developer seems to have gone on holiday as I&#39;ve been unable to contact him to talk about Elysium Extra which I&#39;ll be discussing in my next post (<strong>Update:</strong> The developer is back and says he is continuing development after a brief pause).</p>
<h1 id="conclusions">Conclusions</h1>
<p>This is a solid SDK but it does lack basic styles for some WPF controls such as the DatePicker and DataGrid, for some this is a deal breaker but Elysium Extra covers these bases and more. Elysium does provide a NuGet package which is great and even an MSI which has full integration with Visual Studio!</p>
<p><img src="https://rehansaeed.com/wpf-metro-part3-elysium/images/Elysium_Screenshot_Light_TextAndMenus.png" alt="Elysium Screenshot Light Text And Menus Showcase"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part3-elysium/images/Elysium_Screenshot_Dark_TextAndMenus.png" alt="Elysium Screenshot Dark Text And Menus Schowcase"></p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactive Extensions (Rx) - Part 4 - Replacing Timers]]></title>
        <id>https://rehansaeed.com/reactive-extensions-part4-replacing-timers/</id>
        <link href="https://rehansaeed.com/reactive-extensions-part4-replacing-timers/"/>
        <updated>2014-03-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[You should definitely consider using Reactive Extensions (Rx) is as a direct replacement for .NET Timers. This post will explain how.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/reactive-extensions-part1-replacing-events/">Reactive Extensions (Rx) - Replacing C# Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part2-wrapping-events/">Reactive Extensions (Rx) - Wrapping C# Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part3-naming-conventions/">Reactive Extensions (Rx) - Naming Conventions</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part4-replacing-timers/">Reactive Extensions (Rx) - Replacing Timers</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part5-awaiting-observables/">Reactive Extensions (Rx) - Awaiting Observables</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part6-task-toobservable/">Reactive Extensions (Rx) - Task ToObservable</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part7-sample-events/">Reactive Extensions (Rx) - Sample Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-rx-part-8-timeouts/">Reactive Extensions (Rx) - Timeouts</a></li>
</ol>
<p>Reactive Extensions (Rx) is a huge library. In this series of blog posts I&#39;ve tried to illustrate real world applications where using Rx can significantly improve and/or simplify your code. So far I&#39;ve talked about using Rx to replace standard C# events and also wrapping C# events with observables.</p>
<p>In this post I&#39;m going to talk about another area where Rx provides a nicer API surface, as compared to an existing .NET API. In particular, I&#39;m talking about the .NET Timers. There are a few different timers available in the .NET framework. The main ones being <a href="http://msdn.microsoft.com/en-us/library/system.threading.timer%28v=vs.110%29.aspx">System.Threading.Timer</a> and <a href="http://msdn.microsoft.com/en-us/library/system.timers.timer%28v=vs.110%29.aspx">System.Timers.Timer</a>. Each one has their pros and cons but I&#39;m not going to go into which ones are better as that&#39;s a whole <a href="http://stackoverflow.com/questions/1416803/system-timers-timer-vs-system-threading-timer">other conversation</a>.</p>
<h1 id="existing-net-timers">Existing .NET Timers</h1>
<p>Below is a very simple example of how to use the <code>System.Timers.Timer</code> (<code>System.Threading.Timer</code> is very similar). We new-up a <code>Timer</code> with the number of milliseconds we want to timer to raise it&#39;s <code>Elapsed</code> event, register for the <code>Elasped</code> event and finally start the timer.</p>
<pre><code class="language-cs">public void StartTimer()
{
    Timer timer = new Timer(5000);
    timer.Elapsed += this.OnTimerElapsed;
    timer.Start();
}

private void OnTimerElapsed(object sender, ElapsedEventArgs e)
{
    // Do Stuff Here
    Console.WriteLine(e.SignalTime);
    // Console WriteLine Prints
    // 11/03/2014 10:58:35
    // 11/03/2014 10:58:40
    // 11/03/2014 10:58:45
    // ...
}
</code></pre>
<h1 id="reactive-extensions-rx-timers">Reactive Extensions (Rx) Timers</h1>
<p>Now here is how to do almost the exact same thing with Reactive Extensions. In this scenario we use the <code>Interval</code> method to specify the timer interval and simply subscribe to the observable. The only difference is that we don&#39;t get a <code>DateTime</code> with the time of the timer elapsed event but an integer representing the number of times the timer elapsed delegate has been fired (Much more useful in my opinion, as you can always derive the time from this number).</p>
<pre><code class="language-cs">public void StartTimer()
{
    Observable
        .Interval(TimeSpan.FromSeconds(5))
        .Subscribe(
            x =&gt;
            {
                // Do Stuff Here
                Console.WriteLine(x);
                    // Console WriteLine Prints
                    // 0
                    // 1
                    // 2
                    // ...
            });
}
</code></pre>
<p>But that&#39;s not all, Reactive Extensions provides another method which can be quite useful. In the example below which looks almost exactly the same, we use the <code>Timer</code> method instead of <code>Interval</code>. This method only calls the timer elapsed delegate once.</p>
<pre><code class="language-cs">public void StartTimerAndFireOnce()
{
    Observable
        .Timer(TimeSpan.FromSeconds(5))
        .Subscribe(
            x =&gt;
            {
                // Do Stuff Here
                Console.WriteLine(x);
                // Console WriteLine Prints
                // 0
            });
}
</code></pre>
<p>The <code>Timer</code> method has lots of overloads which you can take a look at. The example below calls the timer elapsed delegate every five seconds but only starts to do so, after a minute has passed.</p>
<pre><code class="language-cs">public void StartTimerInOneMinute()
{
    Observable
        .Timer(TimeSpan.FromMinutes(1), TimeSpan.FromSeconds(5))
        .Subscribe(
            x =&gt;
            {
                // Do Stuff Here
                Console.WriteLine(x);
                // Console WriteLine Prints
                // 0
                // 1
                // 2
                // ...
            });
}
</code></pre>
<p>The final thing you need to know about the <code>Interval</code> and <code>Timer</code> methods is that they can optionally take an <code>IScheduler</code> as a final parameter. This allows the timer elapsed delegate to be run on any thread of your choosing. In the example below we are subscribing the event on the WPF UI thread. There are several other <code>Scheduler</code>&#39;s you can use, so just take a look.</p>
<pre><code class="language-cs">public void StartTimerOnUIThread()
{
    Observable
        .Interval(TimeSpan.FromSeconds(5), DispatcherScheduler.Current)
        .Subscribe(
            x =&gt;
            {
                // Do UI Stuff Here
            });
}
</code></pre>
<h1 id="conclusions">Conclusions</h1>
<p>If you haven&#39;t started using Reactive Extensions yet, then here is yet another reason to get going. What I have not shown in this post is the shear superhuman power you get when you use the Linq methods to modify your observable just before you make the call to <code>Subscribe</code>.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows 8.1 TouchScreen Gaming Laptops]]></title>
        <id>https://rehansaeed.com/windows-8-touchscreen-gaming-laptops/</id>
        <link href="https://rehansaeed.com/windows-8-touchscreen-gaming-laptops/"/>
        <updated>2014-03-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Would you buy a sandwich without the filling? No? Then why are most Windows 8.1 laptops sold without touchscreens? We need a touchscreen gaming laptop.]]></summary>
        <content type="html"><![CDATA[<p>Would you buy a sandwich without the filling? Would you buy a car without the radio? No? Then why are most Windows 8.1 laptops sold without touch screens?</p>
<p>I do a bit of Windows 8 and Windows Phone development on the side, so a touch screen is handy for testing but you&#39;re probably asking, whats so good about a touch screen? Well this is a little difficult to quantify. Having tried a laptop with one, there are some operations which are just more natural with your fingers. Resizing an image with a two finger gesture sticks out as one good example. You find yourself using it every now and then wherever appropriate.</p>
<p>Windows 8 seems to have gotten a bad rap in recent times, mostly due to the full screen start screen. I personally can&#39;t see the problem, it just downright statistically <a href="http://blogs.msdn.com/b/b8/archive/2011/10/11/reflecting-on-your-comments-on-the-start-screen.aspx">more efficient and quicker</a> to open an application than the old cramped Windows7/Vista start menu and has lots of cool features like pausing file transfers and mounting ISO files which I use all the time.</p>
<p><img src="https://rehansaeed.com/windows-8-touchscreen-gaming-laptops/images/Windows-7-Start-Menu.png" alt="Windows 7 Start Menu"></p>
<p>Heat map of time to reach items in the Start menu from the Start button<br>(green items are the fastest to get to, red items are the slowest)</p>
<p><img src="https://rehansaeed.com/windows-8-touchscreen-gaming-laptops/images/Windows-8-Start-Menu.png" alt="Windows 8 Start Menu"></p>
<p>Heat map of time to reach tiles in the Start screen from the Start button<br>(green tiles are the fastest to get to, red tiles are the slowest)</p>
<p>That&#39;s not to say it doesn&#39;t have its problems, I like to use the Windows 8.1 mail application. I like it because I can pin it to my start screen and get notifications on the tile for any new emails. As a heavy desktop user though, I want to open the application on the desktop in a window and not in the full screen touch friendly window. Happily though :), this is going to be fixed in the next update where <a href="http://www.wpcentral.com/more-windows-81-update-leaks-appear-apps-desktop">WinRT apps can now be run on the good old desktop</a>.</p>
<p><img src="https://rehansaeed.com/windows-8-touchscreen-gaming-laptops/images/Windows-8-app-on-Desktop.jpg" alt="Windows 8 app running on Desktop"></p>
<p>Windows 8 Bing Finance app running on Desktop</p>
<p>Ihave been looking to replace my trusty old non-touch screen Samsung laptop running Windows 8.1 with a new touch screen model. However, I like to shoot a few HE shells at some tanks while playing <a href="http://worldoftanks.com/">World of Tanks</a> on the weekend in my down time. Its not the most demanding of games but I&#39;d like to look forward to future updates and other games like Battlefield 4.</p>
<p>So I&#39;ve been doing my research on what my options are for a touch screen gaming laptop and was very surprised to discover that they are pretty non-existent. The closest thing you&#39;ll find is the <a href="http://www.notebookcheck.net/Review-Asus-N550JV-CN201H-Notebook.98311.0.html">Asus N550JV-CN201H</a>, which is not really a gaming laptop with an <a href="http://www.notebookcheck.net/NVIDIA-GeForce-GT-750M.90245.0.html">nVidia GT750M</a> low to mid-range graphics card. It&#39;ll play today&#39;s games at mid-range settings and will probably choke on tomorrows games altogether.</p>
<p>Why is this? Well after some reading I get the impression that laptop manufacturers believe that enthusiasts don&#39;t like glossy screens and adding a touch screen means adding a glossy layer on top of the screen. This I think is personal preference, I have seen one matt screened touch screen laptop in the wild but I can&#39;t remember where, so it is at least possible to have a matt screen. So why the delay?</p>
<p>What I really want is the <a href="http://www.notebookcheck.net/Review-MSI-GS70-65M21621-Notebook.102287.0.html">MSI GS70 Stealth</a> but with a touch screen. This is the worlds thinnest 17&quot; laptop with an Intel i7 CPU, a GT765M mid to high end graphics card and even a SSD RAID 0 array. Overall its a very impressive beast packed into a small a space as possible.</p>
<p><img src="https://rehansaeed.com/windows-8-touchscreen-gaming-laptops/images/MSI-GS70-Stealth-Laptop.png" alt="MSI GS70 Stealth Laptop"></p>
<p>So if MSI is listening, the demand is here for touchscreen gaming laptops, surprise us.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WPF Metro Part 2 - MahApps Metro]]></title>
        <id>https://rehansaeed.com/wpf-metro-part2-mahapps-metro/</id>
        <link href="https://rehansaeed.com/wpf-metro-part2-mahapps-metro/"/>
        <updated>2014-03-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[MahApps Metro is an excellent Windows Presentation Foundation (WPF) SDK providing Metro styles for built in WPF controls and several custom controls.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/wpf-metro-part1-modern-ui-for-wpf/">WPF Metro - Modern UI for WPF</a></li>
<li><a href="https://rehansaeed.com/wpf-metro-part2-mahapps-metro/">WPF Metro - MahApps Metro</a></li>
<li><a href="https://rehansaeed.com/wpf-metro-part3-elysium/">WPF Metro - Elysium</a></li>
<li><a href="https://rehansaeed.com/wpf-metro-part4-elysium-extra/">WPF Metro - Elysium Extra</a></li>
</ol>
<p><a href="https://www.youtube.com/watch?v=FLmCkKfIp84">https://www.youtube.com/watch?v=FLmCkKfIp84</a></p>
<p>In these series of posts I&#39;m going to do a quick review of a few different open source WPF Metro (Or Modern if you prefer) style SDK&#39;s. Each of them provides styles and new controls to build your WPF application from scratch. Here are the home pages for the open source projects in question where you can download the source code and the binaries to play with them yourself:</p>
<ul>
<li><a href="https://mui.codeplex.com/">Modern UI for WPF</a></li>
<li><a href="https://github.com/MahApps">MahApps Metro</a></li>
<li><a href="https://elysium.codeplex.com/">Elysium</a></li>
<li><a href="https://elysiumextra.codeplex.com/">Elysium Extra</a></li>
</ul>
<h1 id="mahapps-metro">MahApps Metro</h1>
<p>This is the second post in the series, I take a look at MahApps Metro. Again, this SDK provides a complete set of WPF styles and several custom controls, mostly inspired by the new Windows 8 WinRT applications.</p>
<h1 id="look-and-feel">Look and Feel</h1>
<p>This SDK borrows heavily from the Windows 8 Metro design language. It provides fairly large controls (For desktop applications, Windows 8 seems to have larger buttons to be touch friendly) with fairly thick borders, which gives each control a more imposing look. There are lots of brushes used by this SDK and the developer has provided a nice colour swatch.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part2-mahapps-metro/images/MahApps-Metro-8.png" alt="MahApps Metro screenshot of the available brushes"></p>
<p>The Window itself positively glows as the developer has spent a <strong>lot</strong> of time customizing the window drop shadow. The title bar of the window also stands out as it is highlighted in the applications accent colour. Theme support is built in, with light or dark combined with an accent colour as shown below.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part2-mahapps-metro/images/MahApps-Metro-1.png" alt="MahApps Metro screenshot of the button controls"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part2-mahapps-metro/images/MahApps-Metro-13.png" alt="MahApps Metro screenshot of the changed theme"></p>
<h1 id="custom-controls">Custom Controls</h1>
<h2 id="toggleswitch">ToggleSwitch</h2>
<p>(See Above) Similar to the ToggleSwitch in Windows 8, this control provides an optional replacement for the standard CheckBox control. Every metro SDK seems to include this control.</p>
<h2 id="circlebutton">CircleButton</h2>
<p>(See Above) Again this control borrows from the Windows 8 application bar buttons. A staple of all metro SDK&#39;s it seems.</p>
<h2 id="numericupdown">NumericUpDown</h2>
<p>This is a great control that is sorely needed in most WPF applications. Internally it handles numbers of type Double but I suppose you could use a converter to work with Integer and other numeric types.</p>
<h2 id="various-textbox-controls">Various TextBox Controls</h2>
<p>There is a great selection of text box controls. They all seem to have the watermark capability (Again, a simple addition sorely missed in WPF). There is also the option of text boxes with buttons.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part2-mahapps-metro/images/MahApps-Metro-2.png" alt="MahApps Metro screenshot of the input controls"></p>
<h2 id="progressring">ProgressRing</h2>
<p>A simple circular progress indicator control. I can stare at these things for hours. Very mesmerizing.</p>
<h2 id="range-slider">Range Slider</h2>
<p>The range slider is another great addition. It looks very much like the Slider control with an additional thumb button.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part2-mahapps-metro/images/MahApps-Metro-5.png" alt="MahApps Metro screenshot of the progress and slider controls"></p>
<h2 id="various-messagedialogs-and-messageboxs">Various MessageDialog&#39;s and MessageBox&#39;s</h2>
<p>This is a truly great message box. Instead of copying and restyling the standard Windows MessageBox, it has been totally reshaped and re-imagined ala Windows 8 to cover the entire parent Window. Not only that but you can place your own custom content in there. There are a few different options to choose from, the version below shows a text box.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part2-mahapps-metro/images/MahApps-Metro-12.png" alt="MahApps Metro screenshot of the message box"></p>
<h2 id="flyout">Flyout</h2>
<p>This Windows 8 style fly-out control does what it says on the tin, it flies in and out of the side of the Window. A nice feature is that it covers the title bar of the window but the caption buttons are still overlayed above the fly-out control.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part2-mahapps-metro/images/MahApps-Metro-10.png" alt="MahApps Metro screenshot of the fly-out control"></p>
<h2 id="flipview">FlipView</h2>
<p>This control also exists in Windows 8, although it works slightly differently. It allows you to view several items one at a time and provides next and previous buttons to cycle between them.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part2-mahapps-metro/images/MahApps-Metro-9.png" alt="MahApps Metro screenshot of the custom controls"></p>
<h1 id="source-code">Source Code</h1>
<p>I downloaded the source code hosted on GitHub and took it for a whirl. All the XAML is pretty well layed out and there is a fair amount of code in the project but that&#39;s expected as there are lots of custom controls to play with. There is only a single dependency on System.Windows.Interactivity, so you only need to add references to two DLL&#39;s to your projects.</p>
<p>Looking at the discussion boards, there seems to be a fair amount of activity with the developers answering questions and even responding to feedback which is great to see. The last check-in was just four days ago at the time of writing so this project is still very much active. I can see this project getting better and better in the future.</p>
<h1 id="conclusions">Conclusions</h1>
<p>Once again I&#39;m very impressed with this SDK, it provides styles for all the standard WPF controls and takes a pretty good stab at bringing a lot of Windows 8 Metro controls to the desktop. It does all this while looking and feeling great. They even provide a NuGet package which is great.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part2-mahapps-metro/images/MahApps-Metro-3.png" alt="MahApps Metro screenshot of the calendar controls"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part2-mahapps-metro/images/MahApps-Metro-7.png" alt="MahApps Metro screenshot of the DataGrid control"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part2-mahapps-metro/images/MahApps-Metro-6.png" alt="MahApps Metro screenshot of the DataGrid control"></p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WPF Metro Part 1 - Modern UI for WPF]]></title>
        <id>https://rehansaeed.com/wpf-metro-part1-modern-ui-for-wpf/</id>
        <link href="https://rehansaeed.com/wpf-metro-part1-modern-ui-for-wpf/"/>
        <updated>2014-02-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Modern UI for WPF is an excellent Windows Presentation Foundation (WPF) SDK providing Metro styles for built in WPF controls and several custom controls.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/wpf-metro-part1-modern-ui-for-wpf/">WPF Metro - Modern UI for WPF</a></li>
<li><a href="https://rehansaeed.com/wpf-metro-part2-mahapps-metro/">WPF Metro - MahApps Metro</a></li>
<li><a href="https://rehansaeed.com/wpf-metro-part3-elysium/">WPF Metro - Elysium</a></li>
<li><a href="https://rehansaeed.com/wpf-metro-part4-elysium-extra/">WPF Metro - Elysium Extra</a></li>
</ol>
<p><a href="https://www.youtube.com/watch?v=Bk7mlEQI2rk">https://www.youtube.com/watch?v=Bk7mlEQI2rk</a></p>
<p>In these series of posts I&#39;m going to do a quick review of a few different open source WPF Metro (Or Modern if you prefer) style SDK&#39;s. Each of them provides styles and new controls to build your WPF application from scratch. Here are the home pages for the open source projects in question where you can download the source code and the binaries to play with them yourself:</p>
<ul>
<li><a href="https://mui.codeplex.com/">Modern UI for WPF</a></li>
<li><a href="https://github.com/MahApps">MahApps Metro</a></li>
<li><a href="https://elysium.codeplex.com/">Elysium</a></li>
<li><a href="https://elysiumextra.codeplex.com/">Elysium Extra</a></li>
</ul>
<h1 id="modern-ui-for-wpf">Modern UI for WPF</h1>
<p>In this first post I will be discussing <a href="https://mui.codeplex.com/">Modern UI for WPF</a>. This is a very lightweight framework which has a complete set of styles for the built in WPF controls.</p>
<h1 id="look-and-feel">Look and Feel</h1>
<p>The look of the application seems to borrow quite heavily from Microsoft&#39;s Zune application, which is Microsoft&#39;s equivalent of Apple&#39;s iTunes. Zune was used by Microsoft as an early test bed for their Metro style. Microsoft then went on from there to build Windows 8. This is Zune below:</p>
<p><img src="https://rehansaeed.com/wpf-metro-part1-modern-ui-for-wpf/images/Zune.png" alt="Microsoft Zune Software"></p>
<p>The Window style is quite stunning, mostly achieved by providing some very nice soft backgrounds to go with the option of white or black themes. The theme is fairly flexible, allowing a selection of &#39;Accent&#39; colours and even selection of small and large font sizes. One cool feature I discovered is that changing the them does not simple change the colours but the Developer has used a colour animation to transition from one colour to another.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part1-modern-ui-for-wpf/images/Modern-UI-for-WPF-2.png" alt="Modern UI for WPF Heart Background"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part1-modern-ui-for-wpf/images/Modern-UI-for-WPF-1.png" alt="Modern UI for WPF Themes"></p>
<p>The controls themselves are more toned down. Employing simple grey lines and a very minimalist design. Most of the controls are slightly on the small side compared to Windows 8 but having played with Zune I can tell you that the developer has recreated everything pretty accurately.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part1-modern-ui-for-wpf/images/Modern-UI-for-WPF-4.png" alt="Modern UI for WPF Input Controls"></p>
<p>All the built in WPF controls seem to have been styled and a type ramp is even included, giving a simple way to show text in different guises. Validation of input is supported via the TextBox control. It would have been nice for other controls to have been supported too but it is very nicely done.</p>
<h1 id="custom-controls">Custom Controls</h1>
<h2 id="modernmenu">ModernMenu</h2>
<p>The main control of interest is the tab control called ModernMenu, this provides a very interesting multi-level tabbed experience. It allows you to split the tab contents into seperate user controls using the URI to the XAML page a bit like the Silverlight experience. Navigation is always a problem that needs to be solved in a WPF application and this is one very clean method of doing it.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part1-modern-ui-for-wpf/images/Modern-UI-for-WPF-3.png" alt="Modern UI for WPF ModernMenu"></p>
<h2 id="modernbutton">ModernButton</h2>
<p>A Windows 8 style circular app-bar button. Comes in two sizes.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part1-modern-ui-for-wpf/images/Modern-UI-for-WPF-5.png" alt="Modern UI for WPF ModernButton"></p>
<h2 id="modernwindow-moderndialog-and-messagebox">ModernWindow, ModernDialog and MessageBox</h2>
<p>The developer has inherited from the Window class to create three very useful window types.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part1-modern-ui-for-wpf/images/Modern-UI-for-WPF-6.png" alt="Modern UI for WPF ModernDialog"></p>
<p><img src="https://rehansaeed.com/wpf-metro-part1-modern-ui-for-wpf/images/Modern-UI-for-WPF-7.png" alt="Modern UI for WPF MessageBox"></p>
<h2 id="modernprogressring">ModernProgressRing</h2>
<p>This is very easily the best progress indicator I have seen. It has several modes, allowing you to select the method of showing progress. Simply mesmerizing.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part1-modern-ui-for-wpf/images/Modern-UI-for-WPF-8.png" alt="Modern UI for WPF ModernProgressRing"></p>
<h2 id="bbcodeblock">BBCodeBlock</h2>
<p>This is a nice little control allowing you to use <a href="http://en.wikipedia.org/wiki/BB_code">BB code</a> to write some text.</p>
<p><img src="https://rehansaeed.com/wpf-metro-part1-modern-ui-for-wpf/images/Modern-UI-for-WPF-9.png" alt="Modern UI for WPF BBCodeBlock"></p>
<h1 id="source-code">Source Code</h1>
<p>The source code seems pretty lightweight and nicely structured, with each controls style having it&#39;s own XAML file. There are only two DLL&#39;s which need to be deployed, they even provide a NuGet package which is great. Looking at the checking history, the single developer (The creator of XAML Spy no less) seems fairly active with the last check-in performed on 21st January 2014, so the project is still very much active. Looking at the discussion forums he seems to also be very helpful.</p>
<h1 id="conclusions">Conclusions</h1>
<p>Overall I&#39;m very impressed with this SDK, it&#39;s a labour of love from a single developer. It has a very high attention to detail and covers most bases for most developers, providing a full set of WPF styles.</p>
<p>If the developer is reading, I would suggest adding a tab in his sample showing the colours and brushes available to the developers and expanding his validation to other input controls.</p>
<p>This is a great project and it would be a pleasure to use any application developed using this SDK.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactive Extensions (Rx) - Part 3 - Naming Conventions]]></title>
        <id>https://rehansaeed.com/reactive-extensions-part3-naming-conventions/</id>
        <link href="https://rehansaeed.com/reactive-extensions-part3-naming-conventions/"/>
        <updated>2014-02-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Reactive Extensions (Rx) Advantages of using IObservable property naming conventions and comparison between C# events.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/reactive-extensions-part1-replacing-events/">Reactive Extensions (Rx) - Replacing C# Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part2-wrapping-events/">Reactive Extensions (Rx) - Wrapping C# Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part3-naming-conventions/">Reactive Extensions (Rx) - Naming Conventions</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part4-replacing-timers/">Reactive Extensions (Rx) - Replacing Timers</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part5-awaiting-observables/">Reactive Extensions (Rx) - Awaiting Observables</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part6-task-toobservable/">Reactive Extensions (Rx) - Task ToObservable</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part7-sample-events/">Reactive Extensions (Rx) - Sample Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-rx-part-8-timeouts/">Reactive Extensions (Rx) - Timeouts</a></li>
</ol>
<p>Standard C# events do not have any real naming convention, except using the English language to suggest that something has happened e.g. <code>PropertyChanged</code>. Should a property returning an <code>IObservable&lt;T&gt;</code> have a naming convention? I&#39;m not entirely certain but I&#39;ll explain why I have used one and why.</p>
<p>C# events are easily differentiated in a class from properties and methods because they have a different icon in the Visual Studio Intelli-Sense. Visual Studio does not provide <code>IObservable&lt;T&gt;</code> properties any differentiation. This may change in the future if Microsoft decides to integrate Reactive Extensions (Rx) more deeply into Visual Studio.</p>
<p>The second reason for using a naming convention is that I often wrap existing C# events with a Reactive Extensions event. It&#39;s not possible to have the same name for a C# event and an <code>IObservable&lt;T&gt;</code> property.</p>
<p>You will have noticed already if you&#39;ve looked at my previous posts that I use the word &#39;When&#39; prefixed before the name of the property. I believe, this nicely indicates that an event has occurred and also groups all our Reactive Extension event properties together under Intelli-Sense.</p>
<pre><code class="language-cs">public IObservable&lt;string&gt; WhenPropertyChanged
{
    get { ... };
}
</code></pre>
<p>I have read in a few places people suggesting that so called &#39;Hot&#39; and &#39;Cold&#39; (See <a href="http://stackoverflow.com/questions/2521277/what-are-the-hot-and-cold-observables">here</a> for an explanation) observables should have different naming conventions. I personally feel that this is an implementation detail and I can&#39;t see why the subscriber to an event would need to know that an event was &#39;Hot&#39; or &#39;Cold&#39; (Prove me wrong). Also, trying to teach this concept to other developers and get them to implement it would mean constantly looking up the meanings (I keep forgetting myself), whereas using &#39;When&#39; is a nice simple concept which anyone can understand.</p>
<p>This is a pretty open question at the moment. What are your thoughts on the subject?</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactive Extensions (Rx) - Part 2 - Wrapping C# Events]]></title>
        <id>https://rehansaeed.com/reactive-extensions-part2-wrapping-events/</id>
        <link href="https://rehansaeed.com/reactive-extensions-part2-wrapping-events/"/>
        <updated>2014-02-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Reactive Extensions IObservable wrappers for C# events and hiding the C# events entirely from subscribers using explicit interface implementations.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/reactive-extensions-part1-replacing-events/">Reactive Extensions (Rx) - Replacing C# Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part2-wrapping-events/">Reactive Extensions (Rx) - Wrapping C# Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part3-naming-conventions/">Reactive Extensions (Rx) - Naming Conventions</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part4-replacing-timers/">Reactive Extensions (Rx) - Replacing Timers</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part5-awaiting-observables/">Reactive Extensions (Rx) - Awaiting Observables</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part6-task-toobservable/">Reactive Extensions (Rx) - Task ToObservable</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part7-sample-events/">Reactive Extensions (Rx) - Sample Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-rx-part-8-timeouts/">Reactive Extensions (Rx) - Timeouts</a></li>
</ol>
<p>Sometimes it is not possible to replace a C# event with a Reactive Extensions (Rx) event entirely. This is usually because we are implementing an interface which has a C# event and we don&#39;t own the interface.</p>
<p>However, as I&#39;ll show in this post, its possible to create <code>IObservable&lt;T&gt;</code> wrappers for C# events and even to hide the C# events entirely from consumers of the class.</p>
<p>The method of wrapping C# events depends on the type of event handler used. Below are the three type of event handler and the method of wrapping them with an observable event.</p>
<h1 id="wrapping-an-eventhandler-c-event">Wrapping an EventHandler C# Event</h1>
<p>The <code>FromEventPattern</code> method is used to wrap the event. Notice we have to specify delegates for subscribing (<code>+=</code>) and unsubscribing (<code>-=</code>) to the event.</p>
<pre><code class="language-cs">public event EventHandler BunnyRabbitsAttack;

public IObservable&lt;object&gt; WhenBunnyRabbitsAttack
{
    get
    {
        return Observable
            .FromEventPattern(
                h =&gt; this.BunnyRabbitsAttack += h,
                h =&gt; this.BunnyRabbitsAttack -= h);
    }
}
</code></pre>
<h1 id="wrapping-an-eventhandler-c-event-1">Wrapping an EventHandler<T> C# Event</h1>
<p>This example is much the same as the last, except we have to deal with the event arguments. The <code>FromEventPattern</code> method returns an <code>EventPattern&lt;T&gt;</code> object, which contains the sender and the event arguments. We&#39;re only interested in the contents of the event arguments, so we use a Select to return just the <code>BunnyRabbits</code> property.</p>
<pre><code class="language-cs">public event EventHandler&lt;BunnyRabbitsEventArgs&gt; BunnyRabbitsAttack;

public IObservable&lt;BunnyRabbits&gt; WhenBunnyRabbitsAttack
{
    get
    {
        return Observable
            .FromEventPattern&lt;BunnyRabbitsEventArgs&gt;(
                h =&gt; this.BunnyRabbitsAttack += h,
                h =&gt; this.BunnyRabbitsAttack -= h)
            .Select(x =&gt; x.EventArgs.BunnyRabbits);
    }
}
</code></pre>
<h1 id="wrapping-a-custom-event-handler-c-event">Wrapping a Custom Event Handler C# Event</h1>
<p>Some C# events use a custom event handler. In this case we have to specify the type of the event handler as a generic argument in the <code>FromEventPattern</code> method.</p>
<pre><code class="language-cs">public event BunnyRabbitsEventHandler BunnyRabbitsAttack;

public IObservable&lt;BunnyRabbits&gt; WhenBunnyRabbitsAttack
{
    get
    {
        return Observable
            .FromEventPattern&lt;BunnyRabbitsEventHandler, BunnyRabbitsEventArgs&gt;(
                h =&gt; this.BunnyRabbitsAttack += h,
                h =&gt; this.BunnyRabbitsAttack -= h)
            .Select(x =&gt; x.EventArgs.BunnyRabbits);
    }
}
</code></pre>
<h1 id="hiding-existing-events-using-explicit-interface-implementation">Hiding Existing Events Using Explicit Interface Implementation</h1>
<p>The disadvantage of the above approach is that we now have two ways to access our event. One with the old style C# event and the other with our new Reactive Extensions event. With a bit of trickery we can hide the C# event in some cases.</p>
<p>The <code>INotifyPropertyChanged</code> interface is very commonly used by XAML developers. It has a single event called <code>PropertyChanged</code>. To hide the <code>PropertyChanged</code> C# event we can explicitly implement the interface (Click <a href="http://stackoverflow.com/questions/143405/c-sharp-interfaces-implicit-implementation-versus-explicit-implementation">here</a> for details on implicit versus explicit implementations of interfaces). Secondly, we wrap the event as we did before.</p>
<p>Now the <code>PropertyChanged</code> C# event can only be accessed by first casting the object to <code>INotifyPropertyChanged</code> (Binding in XAML languages, which uses this interface continues to work). Our new Reactive Extensions observable event is now the default method of subscribing for property changed events.</p>
<pre><code class="language-cs">public abstract class NotifyPropertyChanges : INotifyPropertyChanged
{
    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
    {
        add { this.propertyChanged += value; }
        remove { this.propertyChanged -= value; }
    }

    private event PropertyChangedEventHandler propertyChanged;

    public IObservable&lt;string&gt; WhenPropertyChanged
    {
        get
        {
            return Observable
                .FromEventPattern&lt;PropertyChangedEventHandler, PropertyChangedEventArgs&gt;(
                    h =&gt; this.propertyChanged += h,
                    h =&gt; this.propertyChanged -= h)
                .Select(x =&gt; x.EventArgs.PropertyName);
        }
    }

    protected void OnPropertyChanged(string propertyName) =&gt;
        this.propertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
}
</code></pre>
<h1 id="summing-up">Summing Up</h1>
<p>So it may not always be possible to get rid of, dare I say it legacy C# events but we can certainly wrap them with Reactive Extension observables and even hide them altogether.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactive Extensions (Rx) - Part 1 - Replacing C# Events]]></title>
        <id>https://rehansaeed.com/reactive-extensions-part1-replacing-events/</id>
        <link href="https://rehansaeed.com/reactive-extensions-part1-replacing-events/"/>
        <updated>2014-02-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[You should definitely consider using Reactive Extensions (Rx) is as a direct replacement for C# events. This post will explain how.]]></summary>
        <content type="html"><![CDATA[<ol>
<li><a href="https://rehansaeed.com/reactive-extensions-part1-replacing-events/">Reactive Extensions (Rx) - Replacing C# Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part2-wrapping-events/">Reactive Extensions (Rx) - Wrapping C# Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part3-naming-conventions/">Reactive Extensions (Rx) - Naming Conventions</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part4-replacing-timers/">Reactive Extensions (Rx) - Replacing Timers</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part5-awaiting-observables/">Reactive Extensions (Rx) - Awaiting Observables</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part6-task-toobservable/">Reactive Extensions (Rx) - Task ToObservable</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-part7-sample-events/">Reactive Extensions (Rx) - Sample Events</a></li>
<li><a href="https://rehansaeed.com/reactive-extensions-rx-part-8-timeouts/">Reactive Extensions (Rx) - Timeouts</a></li>
</ol>
<p>For those who have not tried Reactive Extensions (Rx) yet, I highly recommend it. If I had to describe it in a few words it would be &#39;Linq to events&#39;. If you have not already learned about it, <a href="http://www.introtorx.com/uat/content/v1.0.10621.0/00_Foreword.html">this</a> is by far the best resource on learning its intricacies.</p>
<p>I have spent a lot of time reading about Reactive Extensions but what I have not found in my research is examples or pointers on how or even where it should be used in preference to other code. One area where you should definitely consider using Reactive Extensions is as a direct replacement for bog standard C# events, which have been around since C# 1.0. This post will explain how.</p>
<h1 id="exposing-an-event">Exposing an Event</h1>
<p>Here is an example of a standard C# event using the standard recommended pattern:</p>
<pre><code class="language-cs">public class JetFighter
{
    public event EventHandler&lt;JetFighterEventArgs&gt; PlaneSpotted;

    public void SpotPlane(JetFighter jetFighter)
    {
        EventHandler&lt;JetFighterEventArgs&gt; eventHandler = this.PlaneSpotted;
        if (eventHandler != null)
        {
            eventHandler(this, new JetFighterEventArgs(jetfighter));
        }
    }
}
</code></pre>
<p>Now this is how you replace it using Reactive Extensions:</p>
<pre><code class="language-cs">public class JetFighter
{
    private Subject&lt;JetFighter&gt; planeSpotted = new Subject&lt;JetFighter&gt;();

    public IObservable&lt;JetFighter&gt; PlaneSpotted =&gt; this.planeSpotted.AsObservable();

    public void SpotPlane(JetFighter jetFighter) =&gt; this.planeSpotted.OnNext(jetFighter);
}
</code></pre>
<p>So far it&#39;s all pretty straightforward, we have replaced the event with a property returning <code>IObservable&lt;T&gt;</code>. Raising the event is a simple matter of calling the <code>OnNext</code> method on the Subject class. Finally, we do not return our <code>Subject&lt;T&gt;</code> directly in our <code>PlaneSpotted</code> property, as someone could cast it back to <code>Subject&lt;T&gt;</code> and raise their own events! Instead we use the <code>AsObservable</code> method which returns a middle man. So far so good.</p>
<p>Reactive Extensions also has the added concept of errors and completion, which C# events do not have. These are optional added concepts and not required for replacing C# events directly but worth knowing about, as they add an extra dimension to events which may be useful to you.</p>
<p>The first concept is dealing with errors. What happens if there is an exception while you are spotting the plane and you want to notify your subscribers that there is a problem? Well you can do that, like this:</p>
<pre><code class="language-cs">public void SpotPlane(JetFighter jetFighter)
{
    try
    {
        if (string.Equals(jetFighter.Name, &quot;UFO&quot;))
        {
            throw new Exception(&quot;UFO Found&quot;)
        }

        this.planeSpotted.OnNext(jetFighter);
    }
    catch (Exception exception)
    {
        this.planeSpotted.OnError(exception);
    }
}
</code></pre>
<p>Here we are using the <code>OnError</code> method to notify all the events subscribers that there has been an exception.</p>
<p>So what about the concept of completion? Well, that&#39;s just as simple. Suppose that you have spotted all the planes and you want to notify all your subscribers that there will be no more spotted planes. You can do that like this:</p>
<pre><code class="language-cs">public void AllPlanesSpotted() =&gt; this.planeSpotted.OnCompleted();
</code></pre>
<p>So now all the code put together looks like this:</p>
<pre><code class="language-cs">public class JetFighter
{
    private Subject&lt;JetFighter&gt; planeSpotted = new Subject&lt;JetFighter&gt;();

    public IObservable&lt;JetFighter&gt; PlaneSpotted =&gt; this.planeSpotted;

    public void AllPlanesSpotted() =&gt; this.planeSpotted.OnCompleted();

    public void SpotPlane(JetFighter jetFighter)
    {
        try
        {
            if (string.Equals(jetFighter.Name, &quot;UFO&quot;))
            {
                throw new Exception(&quot;UFO Found&quot;)
            }

            this.planeSpotted.OnNext(jetFighter);
        }
        catch (Exception exception)
        {
            this.planeSpotted.OnError(exception);
        }
    }
}
</code></pre>
<h1 id="consuming-an-event">Consuming an Event</h1>
<p>Consuming the Reactive Extensions events is just as easy and this is where you start to see the real benefits of Reactive Extensions. This is how you subscribe and unsubscribe (often forgotten, which can lead to memory leaks) to a standard C# event:</p>
<pre><code class="language-cs">public class BomberControl : IDisposable
{
    private JetFighter jetfighter;

    public BomberControl(JetFighter jetFighter) =&gt;
        jetfighter.PlaneSpotted += this.OnPlaneSpotted;

    public void Dispose() =&gt;
        jetfighter.PlaneSpotted -= this.OnPlaneSpotted;

    private void OnPlaneSpotted(object sender, JetFighterEventArgs e) =&gt;
        JetFighter spottedPlane = e.SpottedPlane;
}
</code></pre>
<p>I&#39;m not going to go into it in too much detail, you subscribe using <code>+=</code> and unsubscribe using <code>-=</code> operators.</p>
<p>This is how the same thing can be accomplished using Reactive Extensions:</p>
<pre><code class="language-cs">public class BomberControl : IDisposable
{
    private IDisposable planeSpottedSubscription;

    public BomberControl(JetFighter jetFighter) =&gt;
        this. planeSpottedSubscription = jetfighter.PlaneSpotted.Subscribe(this.OnPlaneSpotted);

    public void Dispose() =&gt;
        this.planeSpottedSubscription.Dispose();

    private void OnPlaneSpotted(JetFighter jetFighter) =&gt;
        JetFighter spottedPlane = jetfighter;
}
</code></pre>
<p>The key things to note here are first, the use of the <code>Subscribe</code> method to register for plane spotted events. Second, the subscription to the event is stored in an <code>IDisposable</code> which can later be disposed of, to un-register from the event. This is where things get interesting, since we now have an <code>IObservable&lt;T&gt;</code> we can now use all kinds of Linq queries on it like this:</p>
<pre><code class="language-cs">jetfighter.PlaneSpotted.Where(x =&gt; string.Equals(x.Name, “Eurofighter”)).Subscribe(this.OnPlaneSpotted);
</code></pre>
<p>So in the above line of code, I&#39;m using a Linq query to only register to events where the name of the spotted plane is <code>Eurofighter</code>. There are a lot more Linq methods you can use but that&#39;s beyond the scope of this post and also where you should take a look at <a href="http://www.introtorx.com/uat/content/v1.0.10621.0/00_Foreword.html">this website</a>.</p>
<h1 id="conclusions">Conclusions</h1>
<p>Reactive Extensions (Rx) is a pretty large library which does a lot of stuff which overlaps with other libraries like the Task Parallel Library (TPL). It brings no new capabilities but does bring new ways to do things (much like Linq), while writing less code and with more elegance. It can be confusing coming to it as a newcomer, as to where exactly it can be used effectively. Replacing basic events with <code>IObservable&lt;T&gt;</code> is definitely one area where we can leverage its power.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Stop The Brace Wars, Use StyleCop]]></title>
        <id>https://rehansaeed.com/stop-brace-wars-use-stylecop/</id>
        <link href="https://rehansaeed.com/stop-brace-wars-use-stylecop/"/>
        <updated>2014-02-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[StyleCop analyzes C# source code to enforce a set of style and consistency rules. Rehan advocates its use in this thought provoking article.]]></summary>
        <content type="html"><![CDATA[<p>There is an on-going war among developers. This silent war has claimed countless hours of developer time through hours wasted in pointless meetings and millions of small skirmishes over the style of each developers written code. This post outlines a peace treaty, a way forward if you will but first I will outline the problem.</p>
<h1 id="unverscores-versus-the-this-keyword">Unverscores Versus the &#39;this&#39; Keyword</h1>
<p>This is the main battlefront where most time is wasted and where developers are most entrenched in their forward positions. To use underscores for your field names or the <code>this</code> keyword. I myself am in this <code>this</code> camp but neither has a clear advantage in the battlefield. The underscores make it marginally quicker to access your fields using intelli-sense, while the <code>this</code> keyword makes it quicker to differentiate class members from static members.</p>
<pre><code class="language-cs">private int _property;

public int Property
{
    get { return _property; }
}
</code></pre>
<pre><code class="language-cs">private int property;

public int Property
{
    get { return this.property; }
}
</code></pre>
<h1 id="the-brace-war">The Brace War</h1>
<p>This lesser known conflict is where JavaScript styling has leaked into C#. The default formatting rules in visual studio usually quashes this conflict but there are still those who see white space as wasted space and will go the extra mile by changing the Visual Studio settings to &#39;fix&#39; this problem. I personally stick to the defaults and find the other method hard to read, a small sacrifice of a few extra lines is worth the gain in readability.</p>
<pre><code class="language-cs">public int Property
{
    get { return this.property; }
}
</code></pre>
<pre><code class="language-cs">public int Property {
    get { return this.property; }
}
</code></pre>
<h1 id="field-property-constructor-and-method-ordering">Field, Property, Constructor and Method Ordering</h1>
<p>Some (like me), like to have all fields, properties, constructors and methods separated into their own groups. Others prefer fields grouped with properties, and members from implemented interfaces kept together. Again, there is no real right way, the former allows quick navigation to find what you need, while the latter allows quick navigation of members which relate to each other.</p>
<h1 id="using-statements-inside-or-outside-the-namespace">Using Statements Inside or Outside the Namespace</h1>
<p>Here is one area where there is a clear advantage in one camp. As outlined in this <a href="http://stackoverflow.com/questions/125319/should-usings-be-inside-or-outside-the-namespace">Stack Overflow post</a>, adding using statements inside the namespace can sometimes save a few seconds of troubleshooting. Yet even here, Visual Studio lets us down by having using statements outside the namespace as the default.</p>
<h1 id="stepping-on-peoples-feet">Stepping on Peoples Feet</h1>
<p>Looking at another developers code can be an interesting experience. The style, look and feel of any code can vary wildly, even if they are written in the same language. Many times, I have found it difficult to find what I&#39;m looking for and it takes time to adjust to each unique style.</p>
<p>Many a time, these large differences can occur even in the same teams, reducing productivity. This leads to the inevitable &#39;standards&#39; meetings, where a teams of developers sit in a room and discuss underscores versus <code>this</code> and other differences at length. My own experience is that each side is entrenched and hunkering down into their positions, not wanting to have to change their writing style. In the end, the majority wins out or people continue working in their own way and people get used to it.</p>
<h1 id="the-solution-for-peace">The Solution For Peace</h1>
<p>I would argue that as there is no clear superior coding style, it is a pointless waste of time arguing over it. However, there is something to be said for a commons coding style. This is where <a href="http://stylecop.codeplex.com/">StyleCop</a> comes in. It is a set of style rules which can be applied to your C# code.</p>
<p>There need be no lengthy discussion or arguing over it. Keep the default rules (turn off the comment rules if you choose) and you quickly have a set of standards that can be universally applied and tested not just in your team but universally by all C# developers around the world.</p>
<p>Download some sample code from <a href="https://github.com">GitHub</a> and be at ease at the familiar look to the hopefully well designed code. I paint a rosy picture but I see more and more developers using StyleCop. It takes a week to get used to the change in your writing style, I myself switched from underscores to <code>this</code> and have never looked back. You can too.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ConfigureAwait in Task Parallel Library (TPL)]]></title>
        <id>https://rehansaeed.com/configureawait-task-parallel-library/</id>
        <link href="https://rehansaeed.com/configureawait-task-parallel-library/"/>
        <updated>2014-02-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The importance of using ConfigureAwait when using the Task Parallel Library (TPL) to improve performance and reduce context switching.]]></summary>
        <content type="html"><![CDATA[<p>The Task Parallel Library in conjunction with the <code>async</code> and <code>await</code> keywords are great but there are some subtleties which you should consider. One of these is the use of the ConfigureAwait method.</p>
<p>If I wanted to get a list of the titles of the new posts from my RSS feed I could write the following code:</p>
<pre><code class="language-cs">private async Task&lt;IEnumerable&lt;string&gt;&gt; GetBlogTitles()
{
    // Current Thread = UI Thread
    HttpClient httpClient = new HttpClient();

    // GetStringAsync = ThreadPool Thread
    string rss = await httpClient.GetStringAsync(&quot;https://rehansaeed.com/feed/&quot;);

    // Current Thread = UI Thread
    List&lt;string&gt; blogTitles = XDocument.Parse(rss)
        .Descendants(&quot;item&quot;)
        .Elements(&quot;title&quot;)
        .Select(x =&gt; x.Value)
        .ToList();

    // Current Thread = UI Thread
    return blogTitles;
}

public async Task UpdateUserInterface()
{
    // Current Thread = UI Thread
    IEnumerable&lt;string&gt; blogTitles = await this.GetBlogTitles();

    // Current Thread = UI Thread
    this.ListBox.ItemsSource = blogTitles;
}
</code></pre>
<p>If I was to call this method, then the entire method would execute on the calling thread except the bit where we call <code>GetStringAsync</code> which would go off and do its work on the ThreadPool thread and then we come back onto the original thread and do all our XML manipulation.</p>
<p>Now if this was a client WPF or WinRT application which has a UI thread, all of the XML manipulation we are doing would be done on the UI thread. This is placing extra burden on the UI thread which could mean application freeze ups if the UI thread is being heavily taxed. The solution is simple, we add <code>ConfigureAwait(false)</code> to the end of the call we are making to get the RSS XML. So now our new code looks like this:</p>
<pre><code class="language-cs">private async Task&lt;IEnumerable&lt;string&gt;&gt; GetBlogTitles()
{
    // Current Thread = UI Thread
    HttpClient httpClient = new HttpClient();

    // GetStringAsync = ThreadPool Thread
    string rss = await httpClient.GetStringAsync(&quot;https://rehansaeed.com/feed/&quot;).ConfigureAwait(false);

    // Current Thread = ThreadPool Thread
    List&lt;string&gt; blogTitles = XDocument.Parse(rss)
        .Descendants(&quot;item&quot;)
        .Elements(&quot;title&quot;)
        .Select(x =&gt; x.Value)
        .ToList();

    // Current Thread = ThreadPool Thread
    return blogTitles;
}

public async Task UpdateUserInterface()
{
    // Current Thread = UI Thread
    IEnumerable&lt;string&gt; blogTitles = await this.GetBlogTitles();

    // Current Thread = UI Thread
    this.ListBox.ItemsSource = blogTitles;
}
</code></pre>
<p>So now all our XML manipulation is done on the <code>ThreadPool</code> thread along with the HTTP GET we are doing using the <code>HttpClient</code>. Notice however, that when we return the blog titles to the calling method we are back on the UI thread. Each time you do an <code>await</code>, the default behaviour is to continue on the thread we started with. By adding <code>ConfigureAwait(false)</code>, we are overriding this behaviour to continue on whatever thread the Task was running on.</p>
<p>For more on the Task Parallel Library (TPL) I highly recommend reading <a href="http://blogs.msdn.com/b/toub/" title="Stephen Toub&#39;s">Stephen Toub&#39;s</a> blog.</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Just Start - The First Blog Post]]></title>
        <id>https://rehansaeed.com/just-start-the-first-blog-post/</id>
        <link href="https://rehansaeed.com/just-start-the-first-blog-post/"/>
        <updated>2014-02-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I thought I should begin this first blog post with a few words on what I hope to achieve.]]></summary>
        <content type="html"><![CDATA[<p>I thought I should begin this first blog post with a few words on what I hope to achieve. I started creating this website because I wanted to create a space where I could post interesting things I found or learned whilst working as a software developer or just generally in life. I hope to not just blog about software development, best practices or cool code snippets, but also look into some of the other “soft skills” a developer might need, such as software design and aesthetics which I have a particular interest in.</p>
<p>I have reached a point where I&#39;ve helped build some pretty cool stuff in my career so far. I now want to share some of these things with the wider community. Hopefully, I&#39;ll have written some code which is of use to someone. Feel free to drop a comment now and again…</p>
]]></content>
        <author>
            <name/>
            <uri>https://rehansaeed.com</uri>
        </author>
    </entry>
</feed>